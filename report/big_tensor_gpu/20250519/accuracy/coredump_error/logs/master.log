2025-05-20 11:10:42.281883 Launching 4 workers...
2025-05-20 11:11:17.983467 Task 0 SUCCESS: paddle.all(Tensor([228170138, 10],"bool"), axis=0, )
2025-05-20 11:11:18.630695 Task 1 SUCCESS: paddle.all(Tensor([228170138, 10],"bool"), axis=-1, )
2025-05-20 11:12:16.062941 Task 2 SUCCESS: paddle.amax(Tensor([10, 10, 22817014],"float32"), axis=list[0,1,], keepdim=False, )
2025-05-20 11:12:19.889979 Task 3 SUCCESS: paddle.amax(Tensor([10, 22817014, 10],"float32"), axis=list[0,1,], keepdim=False, )
2025-05-20 11:12:47.482556 Task 4 SUCCESS: paddle.amax(Tensor([22817014, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
2025-05-20 11:12:47.511089 Task 5 SUCCESS: paddle.amax(Tensor([22817014, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
2025-05-20 11:13:42.622710 Task 6 SUCCESS: paddle.amax(Tensor([3, 2, 4, 95070891],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:14:06.052260 Task 7 SUCCESS: paddle.amax(Tensor([3, 2, 76056713, 5],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:14:15.927142 Task 9 SUCCESS: paddle.amax(Tensor([3, 2, 95070891, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-20 11:14:17.062792 Task 8 SUCCESS: paddle.amax(Tensor([3, 2, 95070891, 4],"float32"), axis=2, keepdim=True, )
2025-05-20 11:15:24.515679 Task 10 SUCCESS: paddle.amax(Tensor([3, 38028357, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:15:44.889966 Task 12 SUCCESS: paddle.amax(Tensor([3, 38028357, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-20 11:15:52.046236 Task 11 SUCCESS: paddle.amax(Tensor([3, 38028357, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-20 11:16:07.915406 Task 13 SUCCESS: paddle.amax(Tensor([57042535, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:17:09.425859 Task 14 SUCCESS: paddle.amax(Tensor([57042535, 2, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-20 11:17:19.985124 Task 16 SUCCESS: paddle.amin(Tensor([10, 10, 22817014],"float32"), axis=list[0,1,], keepdim=False, )
2025-05-20 11:17:21.996342 Task 15 SUCCESS: paddle.amax(Tensor([57042535, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-20 11:17:36.476624 Task 17 SUCCESS: paddle.amin(Tensor([10, 22817014, 10],"float32"), axis=list[0,1,], keepdim=False, )
2025-05-20 11:18:35.202850 Task 18 SUCCESS: paddle.amin(Tensor([22817014, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
2025-05-20 11:18:47.484062 Task 19 SUCCESS: paddle.amin(Tensor([22817014, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
2025-05-20 11:18:50.375855 Task 20 SUCCESS: paddle.amin(Tensor([3, 2, 4, 95070891],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:19:27.567049 Task 21 SUCCESS: paddle.amin(Tensor([3, 2, 76056713, 5],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:20:02.248887 Task 22 SUCCESS: paddle.amin(Tensor([3, 2, 95070891, 4],"float32"), axis=2, keepdim=True, )
2025-05-20 11:20:13.093432 Task 23 SUCCESS: paddle.amin(Tensor([3, 2, 95070891, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-20 11:20:36.398032 Task 24 SUCCESS: paddle.amin(Tensor([3, 38028357, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:21:14.776736 Task 25 SUCCESS: paddle.amin(Tensor([3, 38028357, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-20 11:21:30.918219 Task 26 SUCCESS: paddle.amin(Tensor([3, 38028357, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-20 11:21:57.767834 Task 27 SUCCESS: paddle.amin(Tensor([57042535, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-20 11:22:10.707796 Task 30 SUCCESS: paddle.any(Tensor([2, 1140850690],"bool"), list[0,], )
2025-05-20 11:22:22.024653 Task 28 SUCCESS: paddle.amin(Tensor([57042535, 2, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-20 11:22:28.697744 Task 31 SUCCESS: paddle.argmax(Tensor([1, 2281701379],"float32"), axis=1, )
2025-05-20 11:22:40.524099 Task 32 SUCCESS: paddle.argmax(Tensor([1, 2281701379],"float32"), axis=-1, )
2025-05-20 11:22:52.489751 Task 29 SUCCESS: paddle.amin(Tensor([57042535, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-20 11:22:59.194014 Task 34 SUCCESS: paddle.argmax(Tensor([10, 228170138],"float32"), )
2025-05-20 11:23:27.543100 Task 33 SUCCESS: paddle.argmax(Tensor([1, 4294967297],"float16"), axis=-1, )
2025-05-20 11:23:32.549143 Task 36 ERROR (Worker died): paddle.argmax(Tensor([13, 2, 2742430, 16, 2],"float32"), axis=-1, )
2025-05-20 11:23:32.550104 Task 35 ERROR (Worker died): paddle.argmax(Tensor([13, 1371215, 4, 16, 2],"float32"), axis=-1, )
2025-05-20 11:23:37.557353 Task 37 ERROR (Worker died): paddle.argmax(Tensor([13, 2, 4, 10969719, 2],"float32"), axis=-1, )
2025-05-20 11:24:09.729585 Task 39 SUCCESS: paddle.argmax(Tensor([2281701379],"float32"), 0, )
2025-05-20 11:24:11.698712 Task 40 SUCCESS: paddle.argmax(Tensor([228170138, 10],"float32"), )
2025-05-20 11:24:46.734193 Task 38 ERROR (Worker died): paddle.argmax(Tensor([2, 536870913, 4],"float16"), axis=-1, keepdim=True, )
2025-05-20 11:25:06.756209 Task 41 ERROR (Worker died): paddle.argmax(Tensor([3, 17674763, 3, 3, 3, 3],"float16"), axis=0, )
2025-05-20 11:25:26.778163 Task 43 ERROR (Worker died): paddle.argmax(Tensor([3, 3, 3, 17674763, 3, 3],"float16"), axis=0, )
2025-05-20 11:25:36.790312 Task 42 ERROR (Worker died): paddle.argmax(Tensor([3, 3, 17674763, 3, 3, 3],"float16"), axis=0, )
2025-05-20 11:26:03.991509 Task 46 SUCCESS: paddle.argmax(Tensor([3, 760567127],"float32"), )
2025-05-20 11:26:14.147213 Task 47 SUCCESS: paddle.argmax(Tensor([3, 760567127],"float32"), keepdim=True, )
2025-05-20 11:26:19.152194 Task 44 ERROR (Worker died): paddle.argmax(Tensor([3, 3, 3, 3, 17674763, 3],"float16"), axis=0, )
2025-05-20 11:26:44.179216 Task 45 ERROR (Worker died): paddle.argmax(Tensor([3, 3, 3, 3, 3, 17674763],"float16"), axis=0, )
2025-05-20 11:27:29.226135 Task 49 ERROR (Worker died): paddle.argmax(Tensor([4, 16777217, 4, 4, 4],"float16"), axis=0, )
2025-05-20 11:27:29.227078 Task 48 ERROR (Worker died): paddle.argmax(Tensor([357913942, 3, 4],"float16"), axis=-1, keepdim=True, )
2025-05-20 11:27:59.260211 Task 50 ERROR (Worker died): paddle.argmax(Tensor([4, 4, 16777217, 4, 4],"float16"), axis=0, )
2025-05-20 11:28:12.566687 Task 53 SUCCESS: paddle.argmax(Tensor([456340276, 5],"float32"), )
2025-05-20 11:28:22.577206 Task 51 ERROR (Worker died): paddle.argmax(Tensor([4, 4, 4, 16777217, 4],"float16"), axis=0, )
2025-05-20 11:28:39.233032 Task 54 SUCCESS: paddle.argmax(Tensor([456340276, 5],"float32"), keepdim=True, )
2025-05-20 11:28:54.248144 Task 55 ERROR (Worker died): paddle.argmax(Tensor([8912897, 2, 4, 16, 2],"float32"), axis=-1, )
2025-05-20 11:28:59.256257 Task 52 ERROR (Worker died): paddle.argmax(Tensor([4, 4, 4, 4, 16777217],"float16"), axis=0, )
2025-05-20 11:28:59.371280 Task 56 SUCCESS: paddle.argmax(x=Tensor([2281701379],"int64"), axis=-1, keepdim=True, )
2025-05-20 11:29:47.499241 Task 57 SUCCESS: paddle.argmax(x=Tensor([3, 3, 477218589],"float16"), )
2025-05-20 11:30:13.076961 Task 59 SUCCESS: paddle.argmax(x=Tensor([3, 477218589, 3],"float16"), )
2025-05-20 11:30:18.082156 Task 58 ERROR (Worker died): paddle.argmax(x=Tensor([3, 3, 477218589],"float16"), axis=1, keepdim=False, )
2025-05-20 11:30:23.090392 Task 60 ERROR (Worker died): paddle.argmax(x=Tensor([357913942, 3, 4],"float16"), axis=1, keepdim=False, )
2025-05-20 11:30:44.250658 Task 62 SUCCESS: paddle.argmin(Tensor([10, 228170138],"float32"), )
2025-05-20 11:30:55.575382 Task 61 SUCCESS: paddle.argmax(x=Tensor([477218589, 3, 3],"float16"), )
2025-05-20 11:30:56.465697 Task 63 SUCCESS: paddle.argmin(Tensor([2281701379],"float32"), 0, )
2025-05-20 11:31:03.279251 Task 64 SUCCESS: paddle.argmin(Tensor([228170138, 10],"float32"), )
2025-05-20 11:32:08.345215 Task 65 ERROR (Worker died): paddle.argmin(Tensor([3, 17674763, 3, 3, 3, 3],"float16"), axis=0, )
2025-05-20 11:32:08.346087 Task 66 ERROR (Worker died): paddle.argmin(Tensor([3, 3, 17674763, 3, 3, 3],"float16"), axis=0, )
2025-05-20 11:32:18.358149 Task 67 ERROR (Worker died): paddle.argmin(Tensor([3, 3, 3, 17674763, 3, 3],"float16"), axis=0, )
2025-05-20 11:32:33.375199 Task 68 ERROR (Worker died): paddle.argmin(Tensor([3, 3, 3, 3, 17674763, 3],"float16"), axis=0, )
2025-05-20 11:32:52.042448 Task 70 SUCCESS: paddle.argmin(Tensor([3, 760567127],"float32"), )
2025-05-20 11:32:58.062284 Task 71 SUCCESS: paddle.argmin(Tensor([3, 760567127],"float32"), keepdim=True, )
2025-05-20 11:33:38.102226 Task 69 ERROR (Worker died): paddle.argmin(Tensor([3, 3, 3, 3, 3, 17674763],"float16"), axis=0, )
2025-05-20 11:34:08.134208 Task 72 ERROR (Worker died): paddle.argmin(Tensor([4, 16777217, 4, 4, 4],"float16"), axis=0, )
2025-05-20 11:34:13.141324 Task 73 ERROR (Worker died): paddle.argmin(Tensor([4, 4, 16777217, 4, 4],"float16"), axis=0, )
2025-05-20 11:34:13.142167 Task 74 ERROR (Worker died): paddle.argmin(Tensor([4, 4, 4, 16777217, 4],"float16"), axis=0, )
2025-05-20 11:34:45.207705 Task 76 SUCCESS: paddle.argmin(Tensor([456340276, 5],"float32"), )
2025-05-20 11:34:48.420273 Task 78 SUCCESS: paddle.argmin(x=Tensor([2281701379],"int64"), axis=-1, keepdim=True, )
2025-05-20 11:34:52.561170 Task 77 SUCCESS: paddle.argmin(Tensor([456340276, 5],"float32"), keepdim=True, )
2025-05-20 11:35:12.581189 Task 75 ERROR (Worker died): paddle.argmin(Tensor([4, 4, 4, 4, 16777217],"float16"), axis=0, )
2025-05-20 11:35:48.876245 Task 79 SUCCESS: paddle.argmin(x=Tensor([3, 3, 477218589],"float16"), )
2025-05-20 11:35:59.149361 Task 81 SUCCESS: paddle.argmin(x=Tensor([3, 477218589, 3],"float16"), )
2025-05-20 11:36:14.165208 Task 80 ERROR (Worker died): paddle.argmin(x=Tensor([3, 3, 477218589],"float16"), axis=1, keepdim=False, )
2025-05-20 11:36:44.197203 Task 82 ERROR (Worker died): paddle.argmin(x=Tensor([357913942, 3, 4],"float16"), axis=1, keepdim=False, )
2025-05-20 11:36:45.856659 Task 85 SUCCESS: paddle.broadcast_to(Tensor([10140896, 1, 15, 15],"bool"), list[10,8,15,15,], )
2025-05-20 11:36:53.348321 Task 83 SUCCESS: paddle.argmin(x=Tensor([477218589, 3, 3],"float16"), )
2025-05-20 11:37:16.647213 Task 86 SUCCESS: paddle.broadcast_to(Tensor([8, 1, 219, 1302341],"bool"), list[8,8,219,113,], )
2025-05-20 11:38:16.242860 Task 87 SUCCESS: paddle.cdist(Tensor([300, 7605672],"float32"), Tensor([1, 7605672],"float32"), p=1, )
2025-05-20 11:38:45.827464 Task 88 SUCCESS: paddle.cdist(Tensor([570425345, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
2025-05-20 11:40:30.933201 Task 89 ERROR (Worker died): paddle.copysign(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
2025-05-20 11:43:06.090223 Task 84 ERROR (Worker died): paddle.bmm(x=Tensor([2, 715827883, 3],"float16"), y=Tensor([2, 3, 2],"float16"), )
2025-05-20 11:43:46.132222 Task 92 ERROR (Worker died): paddle.copysign(Tensor([114085069, 20],"float32"), Tensor([114085069, 20],"float32"), )
2025-05-20 11:49:16.464220 Task 90 ERROR (Worker died): paddle.copysign(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), )
2025-05-20 11:49:46.497221 Task 91 ERROR (Worker died): paddle.copysign(Tensor([107374183, 20, 2],"float16"), Tensor([107374183, 20, 2],"float16"), )
2025-05-20 11:52:56.689218 Task 95 ERROR (Worker died): paddle.copysign(Tensor([12, 20, 9507090],"float32"), Tensor([12, 20, 9507090],"float32"), )
2025-05-20 11:53:31.726217 Task 96 ERROR (Worker died): paddle.copysign(Tensor([12, 95070891, 2],"float32"), Tensor([12, 95070891, 2],"float32"), )
2025-05-20 11:54:16.773221 Task 93 ERROR (Worker died): paddle.copysign(Tensor([12, 178956971, 2],"float16"), Tensor([12, 178956971, 2],"float16"), )
2025-05-20 11:55:21.840221 Task 94 ERROR (Worker died): paddle.copysign(Tensor([12, 20, 17895698],"float16"), Tensor([12, 20, 17895698],"float16"), )
2025-05-20 12:04:07.367214 Task 97 ERROR (Worker died): paddle.copysign(Tensor([1203073, 17, 5, 6, 7],"float16"), Tensor([1203073, 17, 5, 6, 7],"float16"), )
2025-05-20 12:04:47.409167 Task 99 ERROR (Worker died): paddle.copysign(Tensor([2, 3, 143165577, 5],"float16"), Tensor([2, 3, 143165577, 5],"float16"), )
2025-05-20 12:04:52.416375 Task 98 ERROR (Worker died): paddle.copysign(Tensor([2, 107374183, 4, 5],"float16"), Tensor([2, 107374183, 4, 5],"float16"), )
2025-05-20 12:06:37.523217 Task 100 ERROR (Worker died): paddle.copysign(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), )
2025-05-20 12:09:57.725205 Task 104 ERROR (Worker died): paddle.copysign(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
2025-05-20 12:14:22.992148 Task 103 ERROR (Worker died): paddle.copysign(Tensor([214748365, 4, 5],"float16"), Tensor([5],"float16"), )
2025-05-20 12:14:48.019149 Task 101 ERROR (Worker died): paddle.copysign(Tensor([214748365, 20],"float16"), Tensor([214748365, 20],"float16"), )
2025-05-20 12:14:53.026343 Task 102 ERROR (Worker died): paddle.copysign(Tensor([214748365, 4, 5],"float16"), Tensor([4, 5],"float16"), )
2025-05-20 12:18:03.219209 Task 107 ERROR (Worker died): paddle.copysign(Tensor([57042535, 20, 2],"float32"), Tensor([57042535, 20, 2],"float32"), )
2025-05-20 12:19:53.332223 Task 105 ERROR (Worker died): paddle.copysign(Tensor([3, 286331154, 5],"float16"), Tensor([5],"float16"), )
2025-05-20 12:24:43.624215 Task 106 ERROR (Worker died): paddle.copysign(Tensor([4, 5],"float16"), Tensor([214748365, 4, 5],"float16"), )
2025-05-20 12:26:08.711217 Task 108 ERROR (Worker died): paddle.copysign(Tensor([71582789, 3, 4, 5],"float16"), Tensor([71582789, 3, 4, 5],"float16"), )
2025-05-20 12:29:13.898322 Task 109 ERROR (Worker died): paddle.copysign(Tensor([8, 17, 5, 6, 1052689],"float16"), Tensor([8, 17, 5, 6, 1052689],"float16"), )
2025-05-20 12:29:52.943643 Task 113 SUCCESS: paddle.count_nonzero(Tensor([2281701379],"float32"), axis=0, )
2025-05-20 12:31:23.034214 Task 110 ERROR (Worker died): paddle.copysign(Tensor([8, 17, 5, 902305, 7],"float16"), Tensor([8, 17, 5, 902305, 7],"float16"), )
2025-05-20 12:34:50.621107 Task 114 SUCCESS: paddle.cross(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), axis=1, )
2025-05-20 12:36:20.712202 Task 111 ERROR (Worker died): paddle.copysign(Tensor([8, 17, 751921, 6, 7],"float16"), Tensor([8, 17, 751921, 6, 7],"float16"), )
2025-05-20 12:37:35.789220 Task 112 ERROR (Worker died): paddle.copysign(Tensor([8, 2556529, 5, 6, 7],"float16"), Tensor([8, 2556529, 5, 6, 7],"float16"), )
2025-05-20 12:58:00.564271 Task 115 SUCCESS: paddle.cross(x=Tensor([1431655766, 3],"float16"), y=Tensor([1431655766, 3],"float16"), )
2025-05-20 13:00:56.347697 Task 116 SUCCESS: paddle.cross(x=Tensor([1431655766, 3],"float16"), y=Tensor([1431655766, 3],"float16"), axis=1, )
2025-05-20 13:02:23.944240 Task 117 SUCCESS: paddle.cross(x=Tensor([1431655766, 3],"float16"), y=Tensor([1431655766, 3],"float16"), axis=-1, )
2025-05-20 13:03:41.503272 Task 118 SUCCESS: paddle.cross(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 1431655766],"float16"), )
2025-05-20 13:24:13.476581 Task 119 SUCCESS: paddle.cross(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 1431655766],"float16"), axis=0, )
2025-05-20 13:27:07.092641 Task 120 SUCCESS: paddle.cross(x=Tensor([3, 3, 477218589],"float16"), y=Tensor([3, 3, 477218589],"float16"), axis=0, )
2025-05-20 13:28:29.006556 Task 121 SUCCESS: paddle.cross(x=Tensor([3, 3, 477218589],"float16"), y=Tensor([3, 3, 477218589],"float16"), axis=1, )
2025-05-20 13:29:52.836312 Task 122 SUCCESS: paddle.cross(x=Tensor([3, 477218589, 3],"float16"), y=Tensor([3, 477218589, 3],"float16"), axis=0, )
2025-05-20 13:31:01.174614 Task 125 SUCCESS: paddle.cross(x=Tensor([3, 760567127],"int32"), y=Tensor([3, 760567127],"int32"), )
2025-05-20 13:31:41.724112 Task 124 SUCCESS: paddle.cross(x=Tensor([3, 760567127],"float32"), y=Tensor([3, 760567127],"float32"), )
2025-05-20 13:36:16.163589 Task 128 SUCCESS: paddle.cross(x=Tensor([760567127, 3],"float32"), y=Tensor([760567127, 3],"float32"), )
2025-05-20 13:38:46.149088 Task 129 SUCCESS: paddle.cross(x=Tensor([760567127, 3],"int32"), y=Tensor([760567127, 3],"int32"), )
2025-05-20 13:39:14.406250 Task 130 ERROR: paddle.cumsum(Tensor([1, 2281701379],"float32"), axis=0, ), CUDA error: invalid configuration argument
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 13:40:41.204440 Task 131 SUCCESS: paddle.cumsum(Tensor([114085069, 20],"int64"), axis=1, )
2025-05-20 13:41:55.728734 Task 132 SUCCESS: paddle.cumsum(Tensor([114085069, 20],"int64"), axis=-1, )
2025-05-20 13:43:21.643431 Task 133 SUCCESS: paddle.cumsum(Tensor([1140850690, 2],"int64"), axis=-1, )
2025-05-20 13:45:43.906449 Task 134 SUCCESS: paddle.cumsum(Tensor([120, 19014179],"int32"), axis=0, )
2025-05-20 13:48:08.274637 Task 135 SUCCESS: paddle.cumsum(Tensor([16, 142606337],"int32"), axis=0, )
2025-05-20 13:49:26.376107 Task 136 SUCCESS: paddle.cumsum(Tensor([207427399, 11],"int64"), axis=-1, )
2025-05-20 13:50:30.559009 Task 123 SUCCESS: paddle.cross(x=Tensor([3, 477218589, 3],"float16"), y=Tensor([3, 477218589, 3],"float16"), axis=2, )
2025-05-20 13:50:40.980208 Task 137 SUCCESS: paddle.cumsum(Tensor([21939437, 104],"int64"), 1, )
2025-05-20 13:51:49.374163 Task 138 SUCCESS: paddle.cumsum(Tensor([22152441, 103],"int64"), 1, )
2025-05-20 13:51:54.842137 Task 139 SUCCESS: paddle.cumsum(Tensor([22369622, 102],"int64"), 1, )
2025-05-20 13:53:03.510331 Task 140 SUCCESS: paddle.cumsum(Tensor([22591103, 101],"int64"), 1, )
2025-05-20 13:53:08.534244 Task 141 SUCCESS: paddle.cumsum(Tensor([22817014, 100],"int64"), 1, )
2025-05-20 13:55:31.664492 Task 142 SUCCESS: paddle.cumsum(Tensor([24, 95070891],"int32"), axis=0, )
2025-05-20 13:56:05.576166 Task 126 SUCCESS: paddle.cross(x=Tensor([477218589, 3, 3],"float16"), y=Tensor([477218589, 3, 3],"float16"), axis=1, )
2025-05-20 13:56:21.242643 Task 143 SUCCESS: paddle.cumsum(Tensor([285212673, 2, 4],"float32"), axis=1, )
2025-05-20 13:57:10.008506 Task 127 SUCCESS: paddle.cross(x=Tensor([477218589, 3, 3],"float16"), y=Tensor([477218589, 3, 3],"float16"), axis=2, )
2025-05-20 13:57:38.995195 Task 146 SUCCESS: paddle.cumsum(Tensor([3, 760567127],"int64"), axis=0, )
2025-05-20 13:58:30.012119 Task 147 SUCCESS: paddle.cumsum(Tensor([3, 760567127],"int64"), axis=-2, )
2025-05-20 13:59:01.623151 Task 144 SUCCESS: paddle.cumsum(Tensor([3, 190141782, 4],"float32"), axis=1, )
2025-05-20 13:59:27.853293 Task 145 SUCCESS: paddle.cumsum(Tensor([3, 2, 380283564],"float32"), axis=1, )
2025-05-20 14:00:12.557962 Task 148 SUCCESS: paddle.cumsum(Tensor([325957340, 7],"int32"), axis=1, )
2025-05-20 14:00:17.699226 Task 150 SUCCESS: paddle.cumsum(Tensor([49602204, 46],"int64"), axis=1, )
2025-05-20 14:00:44.549190 Task 151 SUCCESS: paddle.cumsum(Tensor([50704476, 45],"int64"), axis=1, )
2025-05-20 14:01:04.526388 Task 149 SUCCESS: paddle.cumsum(Tensor([38028357, 60],"int32"), axis=0, )
2025-05-20 14:01:30.142176 Task 152 SUCCESS: paddle.cumsum(Tensor([51856850, 44],"int64"), axis=1, )
2025-05-20 14:04:14.567973 Task 153 SUCCESS: paddle.cumsum(Tensor([570425345, 4],"int64"), axis=0, )
2025-05-20 14:04:21.329709 Task 156 SUCCESS: paddle.cumsum(Tensor([76057, 30000],"float32"), axis=-1, )
2025-05-20 14:04:42.315372 Task 154 SUCCESS: paddle.cumsum(Tensor([570425345, 4],"int64"), axis=-2, )
2025-05-20 14:06:42.113344 Task 155 SUCCESS: paddle.cumsum(Tensor([760567127, 3],"float32"), axis=0, )
2025-05-20 14:17:44.898162 Task 159 SUCCESS: paddle.cumsum(x=Tensor([1, 16, 8388609, 32],"float16"), axis=2, )
2025-05-20 14:17:53.480093 Task 157 SUCCESS: paddle.cumsum(x=Tensor([1, 1398102, 96, 32],"float16"), axis=2, )
2025-05-20 14:20:19.924928 Task 160 SUCCESS: paddle.cumsum(x=Tensor([1, 16, 96, 2796203],"float16"), axis=2, )
2025-05-20 14:21:14.757840 Task 158 SUCCESS: paddle.cumsum(x=Tensor([1, 1431655766, 1, 3],"float16"), axis=3, )
2025-05-20 14:34:46.354384 Task 161 SUCCESS: paddle.cumsum(x=Tensor([1, 2, 715827883, 3],"float16"), axis=3, )
2025-05-20 14:34:52.530087 Task 164 SUCCESS: paddle.cumsum(x=Tensor([87382, 16, 96, 32],"float16"), axis=2, )
2025-05-20 14:34:57.648300 Task 162 SUCCESS: paddle.cumsum(x=Tensor([715827883, 2, 1, 3],"float16"), axis=3, )
2025-05-20 14:36:44.819018 Task 163 SUCCESS: paddle.cumsum(x=Tensor([715827883, 2, 1, 3],"float16"), axis=-4, )
2025-05-20 14:43:02.665228 Task 166 SUCCESS: paddle.diag(x=Tensor([2, 2147483649],"float16"), offset=0, )
2025-05-20 14:43:06.922154 Task 167 SUCCESS: paddle.diag(x=Tensor([2, 2147483649],"float16"), offset=-1, )
2025-05-20 14:44:42.018226 Task 165 ERROR (Worker died): paddle.cumulative_trapezoid(y=Tensor([1073741825, 4],"float16"), x=Tensor([1073741825, 4],"float16"), )
2025-05-20 14:45:00.900266 Task 168 SUCCESS: paddle.diag(x=Tensor([2, 2147483649],"float16"), offset=2, )
2025-05-20 14:51:13.510869 Task 170 SUCCESS: paddle.diff(Tensor([2, 2147483649],"float16"), axis=1, )
2025-05-20 14:52:50.007790 Task 171 SUCCESS: paddle.diff(Tensor([4, 1073741825],"float16"), axis=1, )
2025-05-20 14:53:07.603209 Task 172 SUCCESS: paddle.diff(x=Tensor([4, 1073741825],"float16"), )
2025-05-20 14:55:54.927370 Task 169 SUCCESS: paddle.diagonal(x=Tensor([29826162, 6, 6, 2, 2],"float16"), axis1=3, axis2=4, )
2025-05-20 14:59:08.834661 Task 174 SUCCESS: paddle.diff(x=Tensor([67108865, 4, 4, 4],"float16"), )
2025-05-20 14:59:16.721439 Task 173 SUCCESS: paddle.diff(x=Tensor([4, 4, 268435457],"float16"), )
2025-05-20 14:59:25.757672 Task 175 SUCCESS: paddle.diff(x=Tensor([67108865, 4, 4, 4],"float16"), axis=2, )
2025-05-20 15:00:08.997338 Task 177 ERROR: paddle.dist(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), 0, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:00:17.316150 Task 178 ERROR: paddle.dist(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), 0, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:02:12.862996 Task 176 SUCCESS: paddle.diff(x=Tensor([67108865, 4, 4, 4],"float16"), axis=-2, )
2025-05-20 15:02:22.873229 Task 179 ERROR (Worker died): paddle.dist(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 4],"float16"), )
2025-05-20 15:02:37.746979 Task 181 ERROR: paddle.dist(x=Tensor([2, 2147483649],"float16"), y=Tensor([2, 2147483649],"float16"), p=0, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:03:27.799295 Task 180 ERROR (Worker died): paddle.dist(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 4],"float16"), p=1, )
2025-05-20 15:04:24.305152 Task 182 ERROR: paddle.dist(x=Tensor([2147483649, 2],"float16"), y=Tensor([2147483649, 2],"float16"), p=0, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:05:04.347177 Task 183 ERROR (Worker died): paddle.dist(x=Tensor([4, 1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), )
2025-05-20 15:05:14.360139 Task 184 ERROR (Worker died): paddle.dist(x=Tensor([4, 1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), p=1, )
2025-05-20 15:05:24.372209 Task 185 ERROR (Worker died): paddle.dist(x=Tensor([4, 570425345],"float32"), y=Tensor([4, 570425345],"float32"), )
2025-05-20 15:06:34.444141 Task 188 ERROR (Worker died): paddle.frac(Tensor([10, 20, 11408507],"float32"), )
2025-05-20 15:06:44.457165 Task 189 ERROR (Worker died): paddle.frac(Tensor([10, 228170138, 1],"float32"), )
2025-05-20 15:06:59.475223 Task 187 ERROR (Worker died): paddle.dist(x=Tensor([570425345, 4],"float32"), y=Tensor([570425345, 4],"float32"), )
2025-05-20 15:07:39.517231 Task 186 ERROR (Worker died): paddle.dist(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), )
2025-05-20 15:08:04.544160 Task 191 ERROR (Worker died): paddle.frac(Tensor([2, 1140850690],"float32"), )
2025-05-20 15:08:19.561164 Task 192 ERROR (Worker died): paddle.frac(Tensor([760567127, 3],"float32"), )
2025-05-20 15:08:24.568366 Task 190 ERROR (Worker died): paddle.frac(Tensor([114085069, 20, 1],"float32"), )
2025-05-20 15:08:59.658396 Task 194 SUCCESS: paddle.isfinite(Tensor([11, 17, 12201612],"int32"), )
2025-05-20 15:09:12.827756 Task 193 SUCCESS: paddle.isclose(x=Tensor([2281701379],"float32"), y=Tensor([2281701379],"float32"), )
2025-05-20 15:09:23.422890 Task 196 SUCCESS: paddle.isfinite(Tensor([11, 20742740, 10],"int32"), )
2025-05-20 15:09:23.478318 Task 195 SUCCESS: paddle.isfinite(Tensor([11, 207427399],"float32"), )
2025-05-20 15:09:55.655786 Task 197 SUCCESS: paddle.isfinite(Tensor([134217729, 17],"float32"), )
2025-05-20 15:09:58.619919 Task 198 SUCCESS: paddle.isfinite(Tensor([13421773, 17, 10],"int32"), )
2025-05-20 15:10:56.265529 Task 201 SUCCESS: paddle.isfinite(Tensor([2, 3, 4, 89478486],"float64"), )
2025-05-20 15:10:57.572259 Task 202 SUCCESS: paddle.isfinite(Tensor([2, 3, 71582789, 5],"float64"), )
2025-05-20 15:11:06.981600 Task 200 SUCCESS: paddle.isfinite(Tensor([2, 2147483648],"float32"), )
2025-05-20 15:11:17.534356 Task 199 SUCCESS: paddle.isfinite(Tensor([1431655765, 3],"float32"), )
2025-05-20 15:11:48.082468 Task 204 SUCCESS: paddle.isfinite(Tensor([2147483649],"int64"), )
2025-05-20 15:11:54.500003 Task 203 SUCCESS: paddle.isfinite(Tensor([2, 53687092, 4, 5],"float64"), )
2025-05-20 15:12:01.074857 Task 205 SUCCESS: paddle.isfinite(Tensor([2281701379],"int64"), )
2025-05-20 15:12:42.938287 Task 207 SUCCESS: paddle.isfinite(Tensor([289, 280, 376, 25, 3],"float32"), )
2025-05-20 15:12:53.161074 Task 208 SUCCESS: paddle.isfinite(Tensor([35791395, 3, 4, 5],"float64"), )
2025-05-20 15:12:56.537719 Task 209 SUCCESS: paddle.isfinite(Tensor([4, 1834166, 311],"float32"), )
2025-05-20 15:13:02.132281 Task 206 SUCCESS: paddle.isfinite(Tensor([252645135, 17],"float32"), )
2025-05-20 15:13:37.836046 Task 210 SUCCESS: paddle.isfinite(Tensor([4, 20228, 376, 25, 3],"float32"), )
2025-05-20 15:13:47.993158 Task 211 SUCCESS: paddle.isfinite(Tensor([4, 280, 27164, 25, 3],"float32"), )
2025-05-20 15:13:52.153928 Task 212 SUCCESS: paddle.isfinite(Tensor([4, 280, 376, 1807, 3],"float32"), )
2025-05-20 15:13:57.059744 Task 213 SUCCESS: paddle.isfinite(Tensor([4, 280, 376, 25, 217],"float32"), )
2025-05-20 15:14:32.657291 Task 214 SUCCESS: paddle.isfinite(Tensor([4, 94, 6068355],"float32"), )
2025-05-20 15:14:42.827265 Task 215 SUCCESS: paddle.isfinite(Tensor([78050, 94, 311],"float32"), )
2025-05-20 15:14:48.051188 Task 216 SUCCESS: paddle.isin(Tensor([285212673, 8],"float32"), Tensor([2, 3],"float32"), False, False, )
2025-05-20 15:14:52.479662 Task 217 SUCCESS: paddle.isin(Tensor([285212673, 8],"float32"), Tensor([2, 3],"float32"), False, True, )
2025-05-20 15:15:19.764665 Task 218 SUCCESS: paddle.isin(Tensor([285212673, 8],"int32"), Tensor([2, 3],"int32"), False, False, )
2025-05-20 15:15:30.219763 Task 219 SUCCESS: paddle.isin(Tensor([285212673, 8],"int32"), Tensor([2, 3],"int32"), False, True, )
2025-05-20 15:15:43.656307 Task 220 SUCCESS: paddle.isin(Tensor([285212673, 8],"int64"), Tensor([2, 3],"int64"), False, False, )
2025-05-20 15:15:46.660196 Task 221 SUCCESS: paddle.isin(Tensor([285212673, 8],"int64"), Tensor([2, 3],"int64"), False, True, )
2025-05-20 15:16:13.940189 Task 222 SUCCESS: paddle.isin(Tensor([4, 570425345],"int64"), Tensor([2, 3],"int64"), False, False, )
2025-05-20 15:16:24.610741 Task 223 SUCCESS: paddle.isin(Tensor([4, 570425345],"int64"), Tensor([2, 3],"int64"), False, True, )
2025-05-20 15:16:41.714438 Task 225 SUCCESS: paddle.isinf(Tensor([10, 228170138],"float32"), )
2025-05-20 15:16:43.420252 Task 224 SUCCESS: paddle.isinf(Tensor([10, 214748365],"float64"), )
2025-05-20 15:17:08.682110 Task 226 SUCCESS: paddle.isinf(Tensor([10186167, 7, 32],"float32"), )
2025-05-20 15:17:23.998907 Task 227 SUCCESS: paddle.isinf(Tensor([1073741825, 2],"float64"), )
2025-05-20 15:17:28.450835 Task 228 SUCCESS: paddle.isinf(Tensor([11, 17, 12201612],"int32"), )
2025-05-20 15:17:40.504393 Task 229 SUCCESS: paddle.isinf(Tensor([11, 207427399],"float32"), )
2025-05-20 15:17:54.528661 Task 230 SUCCESS: paddle.isinf(Tensor([11, 20742740, 10],"int32"), )
2025-05-20 15:18:18.464442 Task 231 SUCCESS: paddle.isinf(Tensor([1140850690, 2],"float32"), )
2025-05-20 15:18:23.531266 Task 232 SUCCESS: paddle.isinf(Tensor([134217729, 17],"float32"), )
2025-05-20 15:18:27.699784 Task 233 SUCCESS: paddle.isinf(Tensor([13421773, 17, 10],"int32"), )
2025-05-20 15:18:48.838328 Task 234 SUCCESS: paddle.isinf(Tensor([14, 10186167, 16],"float32"), )
2025-05-20 15:19:13.037473 Task 235 SUCCESS: paddle.isinf(Tensor([14, 40744668, 4],"float32"), )
2025-05-20 15:19:18.578903 Task 236 SUCCESS: paddle.isinf(Tensor([14, 5093084, 32],"float32"), )
2025-05-20 15:19:22.973960 Task 237 SUCCESS: paddle.isinf(Tensor([14, 64, 2546542],"float32"), )
2025-05-20 15:19:43.070616 Task 238 SUCCESS: paddle.isinf(Tensor([14, 7, 23282668],"float32"), )
2025-05-20 15:20:12.325518 Task 239 SUCCESS: paddle.isinf(Tensor([178956971, 12],"float64"), )
2025-05-20 15:20:13.761459 Task 240 SUCCESS: paddle.isinf(Tensor([190141782, 12],"float32"), )
2025-05-20 15:20:22.458902 Task 241 SUCCESS: paddle.isinf(Tensor([2, 1073741825],"float64"), )
2025-05-20 15:20:37.781662 Task 242 SUCCESS: paddle.isinf(Tensor([2, 1140850690],"float32"), )
2025-05-20 15:21:11.134574 Task 243 SUCCESS: paddle.isinf(Tensor([2, 3, 4, 89478486],"float64"), )
2025-05-20 15:21:13.054202 Task 244 SUCCESS: paddle.isinf(Tensor([2, 3, 71582789, 5],"float64"), )
2025-05-20 15:21:22.352442 Task 245 SUCCESS: paddle.isinf(Tensor([2, 53687092, 4, 5],"float64"), )
2025-05-20 15:21:36.878001 Task 246 SUCCESS: paddle.isinf(Tensor([2147483649],"float64"), )
2025-05-20 15:22:01.793720 Task 247 SUCCESS: paddle.isinf(Tensor([2147483649],"int64"), )
2025-05-20 15:22:13.845667 Task 248 SUCCESS: paddle.isinf(Tensor([214748365, 5, 2],"float64"), )
2025-05-20 15:22:17.439443 Task 249 SUCCESS: paddle.isinf(Tensor([2228225, 64, 16],"float32"), )
2025-05-20 15:22:31.817201 Task 250 SUCCESS: paddle.isinf(Tensor([2281701379],"float32"), )
2025-05-20 15:22:56.353654 Task 251 SUCCESS: paddle.isinf(Tensor([2281701379],"int64"), )
2025-05-20 15:23:16.325410 Task 253 SUCCESS: paddle.isinf(Tensor([35791395, 3, 4, 5],"float64"), )
2025-05-20 15:23:30.512107 Task 254 SUCCESS: paddle.isinf(Tensor([4, 268435457, 2],"float64"), )
2025-05-20 15:23:56.281055 Task 255 SUCCESS: paddle.isinf(Tensor([4, 5, 107374183],"float64"), )
2025-05-20 15:23:57.297440 Task 252 SUCCESS: paddle.isinf(Tensor([252645135, 17],"float32"), )
2025-05-20 15:24:52.029693 Task 259 SUCCESS: paddle.isinf(Tensor([8912897, 64, 4],"float32"), )
2025-05-20 15:25:01.006724 Task 256 SUCCESS: paddle.isinf(Tensor([4, 536870912, 2],"float32"), )
2025-05-20 15:25:12.752230 Task 257 SUCCESS: paddle.isinf(Tensor([4294967295],"float32"), )
2025-05-20 15:25:16.277167 Task 258 SUCCESS: paddle.isinf(Tensor([4294967295],"uint8"), )
2025-05-20 15:25:46.346383 Task 260 SUCCESS: paddle.isnan(Tensor([10186167, 7, 32],"float32"), )
2025-05-20 15:26:01.838267 Task 263 SUCCESS: paddle.isnan(Tensor([11, 17, 12201612],"int32"), )
2025-05-20 15:26:41.198376 Task 264 SUCCESS: paddle.isnan(Tensor([11, 207427399],"float32"), )
2025-05-20 15:26:48.589978 Task 265 SUCCESS: paddle.isnan(Tensor([11, 20742740, 10],"int32"), )
2025-05-20 15:26:52.407796 Task 261 SUCCESS: paddle.isnan(Tensor([1073741824, 4],"float16"), )
2025-05-20 15:26:55.091322 Task 262 SUCCESS: paddle.isnan(Tensor([1073741824, 4],"float32"), )
2025-05-20 15:27:39.423720 Task 268 SUCCESS: paddle.isnan(Tensor([13421773, 17, 10],"int32"), )
2025-05-20 15:27:40.449183 Task 266 SUCCESS: paddle.isnan(Tensor([114, 18837576],"float64"), )
2025-05-20 15:27:44.045176 Task 267 SUCCESS: paddle.isnan(Tensor([134217729, 17],"float32"), )
2025-05-20 15:27:49.855556 Task 269 SUCCESS: paddle.isnan(Tensor([1393, 64, 160, 160],"float32"), )
2025-05-20 15:28:34.647806 Task 270 SUCCESS: paddle.isnan(Tensor([14, 10186167, 16],"float32"), )
2025-05-20 15:28:36.563998 Task 271 SUCCESS: paddle.isnan(Tensor([14, 1646250, 99],"float32"), )
2025-05-20 15:28:39.200781 Task 272 SUCCESS: paddle.isnan(Tensor([14, 40744668, 4],"float32"), )
2025-05-20 15:28:44.430691 Task 273 SUCCESS: paddle.isnan(Tensor([14, 5093084, 32],"float32"), )
2025-05-20 15:29:29.443118 Task 274 SUCCESS: paddle.isnan(Tensor([14, 64, 2546542],"float32"), )
2025-05-20 15:29:31.210482 Task 275 SUCCESS: paddle.isnan(Tensor([14, 7, 23282668],"float32"), )
2025-05-20 15:29:42.663488 Task 277 SUCCESS: paddle.isnan(Tensor([16, 134217729],"float64"), )
2025-05-20 15:30:21.235994 Task 276 SUCCESS: paddle.isnan(Tensor([1431655765, 3],"float32"), )
2025-05-20 15:30:25.114828 Task 278 SUCCESS: paddle.isnan(Tensor([16, 142606337],"float32"), )
2025-05-20 15:30:36.847405 Task 280 SUCCESS: paddle.isnan(Tensor([1633, 3, 375, 1242],"float32"), )
2025-05-20 15:31:13.367514 Task 279 SUCCESS: paddle.isnan(Tensor([16, 268435456],"float32"), )
2025-05-20 15:31:35.351895 Task 283 SUCCESS: paddle.isnan(Tensor([2, 3, 4, 89478486],"float64"), )
2025-05-20 15:32:03.877798 Task 281 SUCCESS: paddle.isnan(Tensor([2, 1073741824, 2],"float32"), )
2025-05-20 15:32:08.366529 Task 282 SUCCESS: paddle.isnan(Tensor([2, 2147483648],"float32"), )
2025-05-20 15:32:08.374803 Task 284 SUCCESS: paddle.isnan(Tensor([2, 3, 4, 95070891],"float32"), )
2025-05-20 15:32:33.449341 Task 285 SUCCESS: paddle.isnan(Tensor([2, 3, 71582789, 5],"float64"), )
2025-05-20 15:32:58.477070 Task 286 SUCCESS: paddle.isnan(Tensor([2, 3, 76056713, 5],"float32"), )
2025-05-20 15:33:06.685004 Task 287 SUCCESS: paddle.isnan(Tensor([2, 4, 268435457],"float64"), )
2025-05-20 15:33:32.577103 Task 289 SUCCESS: paddle.isnan(Tensor([2, 536870913, 2],"float64"), )
2025-05-20 15:33:51.096115 Task 288 SUCCESS: paddle.isnan(Tensor([2, 4, 536870912],"float32"), )
2025-05-20 15:33:57.194491 Task 290 SUCCESS: paddle.isnan(Tensor([2, 53687092, 4, 5],"float64"), )
2025-05-20 15:34:02.547547 Task 291 SUCCESS: paddle.isnan(Tensor([2, 57042535, 4, 5],"float32"), )
2025-05-20 15:34:49.418275 Task 293 SUCCESS: paddle.isnan(Tensor([2147483649, 1],"float64"), )
2025-05-20 15:34:53.470512 Task 295 SUCCESS: paddle.isnan(Tensor([2147483649],"int64"), )
2025-05-20 15:34:56.897957 Task 294 SUCCESS: paddle.isnan(Tensor([2147483649],"float64"), )
2025-05-20 15:35:27.270504 Task 292 SUCCESS: paddle.isnan(Tensor([2147483648, 2],"float32"), )
2025-05-20 15:35:45.562621 Task 296 SUCCESS: paddle.isnan(Tensor([2228225, 64, 16],"float32"), )
2025-05-20 15:35:48.811579 Task 297 SUCCESS: paddle.isnan(Tensor([2281701379],"float32"), )
2025-05-20 15:35:50.954227 Task 298 SUCCESS: paddle.isnan(Tensor([2281701379],"int64"), )
2025-05-20 15:36:38.824658 Task 301 SUCCESS: paddle.isnan(Tensor([268435457, 4, 2],"int64"), )
2025-05-20 15:36:45.048698 Task 300 SUCCESS: paddle.isnan(Tensor([268435457, 4, 2],"float64"), )
2025-05-20 15:37:12.475055 Task 299 SUCCESS: paddle.isnan(Tensor([252645135, 17],"float32"), )
2025-05-20 15:37:32.440961 Task 302 SUCCESS: paddle.isnan(Tensor([286331153, 5, 3],"float32"), )
2025-05-20 15:38:11.351437 Task 305 SUCCESS: paddle.isnan(Tensor([3, 357913942, 2],"float64"), )
2025-05-20 15:38:27.181899 Task 304 SUCCESS: paddle.isnan(Tensor([3, 1431655765],"float32"), )
2025-05-20 15:38:27.230874 Task 303 SUCCESS: paddle.isnan(Tensor([3, 1431655765],"float16"), )
2025-05-20 15:38:27.358770 Task 306 SUCCESS: paddle.isnan(Tensor([3, 357913942, 2],"int64"), )
2025-05-20 15:39:10.295821 Task 307 SUCCESS: paddle.isnan(Tensor([3, 4, 178956971],"float64"), )
2025-05-20 15:39:17.780855 Task 308 SUCCESS: paddle.isnan(Tensor([3, 4, 178956971],"int64"), )
2025-05-20 15:39:23.012026 Task 310 SUCCESS: paddle.isnan(Tensor([3292499, 7, 99],"float32"), )
2025-05-20 15:39:26.143498 Task 309 SUCCESS: paddle.isnan(Tensor([3, 715827883],"float64"), )
2025-05-20 15:40:09.435609 Task 311 SUCCESS: paddle.isnan(Tensor([33554433, 64],"float64"), )
2025-05-20 15:40:13.368723 Task 312 SUCCESS: paddle.isnan(Tensor([35651585, 64],"float32"), )
2025-05-20 15:40:22.160577 Task 313 SUCCESS: paddle.isnan(Tensor([35791395, 3, 4, 5],"float64"), )
2025-05-20 15:40:25.213211 Task 314 SUCCESS: paddle.isnan(Tensor([38028357, 3, 4, 5],"float32"), )
2025-05-20 15:41:04.542540 Task 315 SUCCESS: paddle.isnan(Tensor([4, 1225, 375, 1242],"float32"), )
2025-05-20 15:41:07.949734 Task 316 SUCCESS: paddle.isnan(Tensor([4, 22283, 160, 160],"float32"), )
2025-05-20 15:41:17.204112 Task 317 SUCCESS: paddle.isnan(Tensor([4, 3, 153094, 1242],"float32"), )
2025-05-20 15:41:20.145643 Task 318 SUCCESS: paddle.isnan(Tensor([4, 3, 375, 507045],"float32"), )
2025-05-20 15:41:59.484758 Task 319 SUCCESS: paddle.isnan(Tensor([4, 64, 160, 55706],"float32"), )
2025-05-20 15:42:07.150234 Task 320 SUCCESS: paddle.isnan(Tensor([4, 64, 55706, 160],"float32"), )
2025-05-20 15:42:15.342748 Task 321 SUCCESS: paddle.isnan(Tensor([400, 5368710],"float64"), )
2025-05-20 15:43:10.113451 Task 322 SUCCESS: paddle.isnan(Tensor([4294967295],"float16"), )
2025-05-20 15:43:13.569486 Task 325 SUCCESS: paddle.isnan(Tensor([5, 429496730],"float64"), )
2025-05-20 15:43:35.091084 Task 324 SUCCESS: paddle.isnan(Tensor([4294967295],"int32"), )
2025-05-20 15:43:41.323550 Task 323 SUCCESS: paddle.isnan(Tensor([4294967295],"float32"), )
2025-05-20 15:44:39.928700 Task 329 SUCCESS: paddle.isnan(Tensor([536870913, 4],"float64"), )
2025-05-20 15:44:52.568863 Task 326 SUCCESS: paddle.isnan(Tensor([5, 858993459],"float32"), )
2025-05-20 15:44:56.311042 Task 327 SUCCESS: paddle.isnan(Tensor([536870912, 4, 2],"float32"), )
2025-05-20 15:45:02.308492 Task 328 SUCCESS: paddle.isnan(Tensor([536870912, 4, 2],"int32"), )
2025-05-20 15:45:52.109465 Task 332 SUCCESS: paddle.isnan(Tensor([8912897, 64, 4],"float32"), )
2025-05-20 15:46:23.205000 Task 330 SUCCESS: paddle.isnan(Tensor([67108864, 64],"float32"), )
2025-05-20 15:46:34.743712 Task 331 SUCCESS: paddle.isnan(Tensor([858993459, 5],"float32"), )
2025-05-20 15:47:13.099021 Task 333 SUCCESS: paddle.isneginf(Tensor([11, 17, 12201612],"int32"), )
2025-05-20 15:48:10.183736 Task 334 SUCCESS: paddle.isneginf(Tensor([11, 207427399],"float32"), )
2025-05-20 15:48:42.959367 Task 335 SUCCESS: paddle.isneginf(Tensor([11, 20742740, 10],"int32"), )
2025-05-20 15:48:58.225803 Task 336 SUCCESS: paddle.isneginf(Tensor([134217729, 17],"float32"), )
2025-05-20 15:49:20.984057 Task 337 SUCCESS: paddle.isneginf(Tensor([13421773, 17, 10],"int32"), )
2025-05-20 15:50:56.498777 Task 339 SUCCESS: paddle.isposinf(Tensor([11, 17, 12201612],"int32"), )
2025-05-20 15:51:19.935722 Task 340 SUCCESS: paddle.isposinf(Tensor([11, 207427399],"float32"), )
2025-05-20 15:51:30.534124 Task 341 SUCCESS: paddle.isposinf(Tensor([11, 20742740, 10],"int32"), )
2025-05-20 15:52:19.474112 Task 338 SUCCESS: paddle.isneginf(Tensor([4294967295],"uint8"), )
2025-05-20 15:53:18.957120 Task 342 SUCCESS: paddle.isposinf(Tensor([134217729, 17],"float32"), )
2025-05-20 15:53:34.026978 Task 343 SUCCESS: paddle.isposinf(Tensor([13421773, 17, 10],"int32"), )
2025-05-20 15:54:12.061035 Task 345 ERROR: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), 2, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:55:10.941301 Task 346 ERROR: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), None, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:55:26.134743 Task 347 ERROR: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), "nuc", ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:55:40.875231 Task 344 SUCCESS: paddle.isposinf(Tensor([4294967295],"uint8"), )
2025-05-20 15:56:08.603312 Task 351 ERROR: paddle.linalg.lstsq(Tensor([10, 228170138],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:56:19.921828 Task 348 ERROR: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), 2, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:57:02.275779 Task 353 ERROR: paddle.linalg.lstsq(Tensor([9, 253522376],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:57:03.673391 Task 352 ERROR: paddle.linalg.lstsq(Tensor([253522376, 9],"float32"), Tensor([253522376, 5],"float32"), rcond=1e-15, driver="gels", ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:57:18.193729 Task 349 ERROR: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -2, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:57:31.093366 Task 350 ERROR: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), None, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:57:42.252698 Task 354 ERROR: paddle.linalg.matrix_rank(Tensor([114085069, 4, 5],"float32"), ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:57:47.699023 Task 355 ERROR: paddle.linalg.matrix_rank(Tensor([114085069, 4, 5],"float32"), tol=0.1, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:58:01.723163 Task 356 ERROR: paddle.linalg.matrix_rank(Tensor([19014179, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:58:21.415706 Task 357 ERROR: paddle.linalg.matrix_rank(Tensor([3, 25352238, 5, 6],"float32"), Tensor([3, 4],"float32"), False, ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-20 15:59:31.307107 Task 358 SUCCESS: paddle.linalg.norm(Tensor([5, 5, 91268056],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
2025-05-20 15:59:32.402531 Task 359 SUCCESS: paddle.linalg.norm(Tensor([5, 91268056, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
2025-05-20 15:59:46.786496 Task 360 SUCCESS: paddle.linalg.norm(Tensor([91268056, 5, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
2025-05-20 15:59:48.537574 Task 361 SUCCESS: paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=1, axis=list[0,1,], keepdim=False, )
2025-05-20 16:00:40.352399 Task 363 ERROR: paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 228170138],"float32"), ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/phi/backends/gpu/cuda/cuda_info.cc:283)

2025-05-20 16:00:41.238455 Task 362 SUCCESS: paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=1, axis=list[0,1,], keepdim=True, )
2025-05-20 16:07:46.863332 Task 364 SUCCESS: paddle.mean(Tensor([1, 1, 134217728, 32],"float16"), )
2025-05-20 16:07:59.236851 Task 365 SUCCESS: paddle.mean(Tensor([1, 1, 17, 50529027, 5],"float16"), )
2025-05-20 16:08:41.702444 Task 366 SUCCESS: paddle.mean(Tensor([1, 1, 2, 4, 536870912],"float16"), )
2025-05-20 16:09:11.088903 Task 367 SUCCESS: paddle.mean(Tensor([1, 1, 64, 67108864],"float16"), )
2025-05-20 16:16:00.226346 Task 368 SUCCESS: paddle.mean(Tensor([1, 1, 8, 536870912],"float16"), )
2025-05-20 16:16:11.210066 Task 369 SUCCESS: paddle.mean(Tensor([1, 1431655765, 3],"float16"), )
2025-05-20 16:16:47.870270 Task 370 SUCCESS: paddle.mean(Tensor([1, 16777216, 8, 32],"float16"), )
2025-05-20 16:17:20.336314 Task 371 SUCCESS: paddle.mean(Tensor([1, 2, 2, 2, 2, 268435456],"float16"), )
2025-05-20 16:24:16.860369 Task 372 SUCCESS: paddle.mean(Tensor([1, 2097152, 64, 32],"float16"), )
2025-05-20 16:24:25.873565 Task 373 SUCCESS: paddle.mean(Tensor([1, 268435456, 2, 2, 2, 2],"float16"), )
2025-05-20 16:24:55.480404 Task 374 SUCCESS: paddle.mean(Tensor([1, 3, 1, 1, 1431655765],"float16"), )
2025-05-20 16:25:29.310528 Task 375 SUCCESS: paddle.mean(Tensor([1, 3, 1, 1431655765, 1],"float16"), )
2025-05-20 16:32:29.611455 Task 376 SUCCESS: paddle.mean(Tensor([1, 3, 1431655765, 1, 1],"float16"), )
2025-05-20 16:32:37.390085 Task 377 SUCCESS: paddle.mean(Tensor([1, 3, 1431655765],"float16"), )
2025-05-20 16:33:04.790151 Task 378 SUCCESS: paddle.mean(Tensor([1, 4, 32, 33554432],"float16"), )
2025-05-20 16:33:37.173514 Task 379 SUCCESS: paddle.mean(Tensor([1, 4, 33554432, 32],"float16"), )
2025-05-20 16:40:42.889903 Task 380 SUCCESS: paddle.mean(Tensor([1, 4, 4, 268435456],"float16"), )
2025-05-20 16:40:48.801407 Task 381 SUCCESS: paddle.mean(Tensor([1, 4194304, 32, 32],"float16"), )
2025-05-20 16:41:11.506027 Task 382 SUCCESS: paddle.mean(Tensor([1, 4294967295, 1, 1, 1],"float16"), )
2025-05-20 16:41:46.345235 Task 383 SUCCESS: paddle.mean(Tensor([1, 4294967295],"float16"), )
2025-05-20 16:48:57.712868 Task 384 SUCCESS: paddle.mean(Tensor([1048576, 4, 32, 32],"float16"), )
2025-05-20 16:49:01.334643 Task 385 SUCCESS: paddle.mean(Tensor([1048576, 64, 64],"float16"), )
2025-05-20 16:49:17.391791 Task 386 SUCCESS: paddle.mean(Tensor([1073741824, 1, 2, 2],"float16"), )
2025-05-20 16:49:55.614137 Task 387 SUCCESS: paddle.mean(Tensor([1073741824, 4],"float16"), )
2025-05-20 16:57:11.841898 Task 389 SUCCESS: paddle.mean(Tensor([128, 64, 524288],"float16"), )
2025-05-20 16:57:12.854864 Task 388 SUCCESS: paddle.mean(Tensor([128, 524288, 64],"float16"), )
2025-05-20 16:57:25.062207 Task 390 SUCCESS: paddle.mean(Tensor([1431655765, 1, 1, 3],"float16"), )
2025-05-20 16:58:04.094707 Task 391 SUCCESS: paddle.mean(Tensor([1431655765, 3, 1, 1, 1],"float16"), )
2025-05-20 17:05:23.095670 Task 392 SUCCESS: paddle.mean(Tensor([1431655765, 3, 1, 1],"float16"), )
2025-05-20 17:05:26.930566 Task 393 SUCCESS: paddle.mean(Tensor([1431655765, 3, 1],"float16"), )
2025-05-20 17:05:31.004530 Task 394 SUCCESS: paddle.mean(Tensor([1431655765, 3],"float16"), )
2025-05-20 17:06:15.297697 Task 395 SUCCESS: paddle.mean(Tensor([16777216, 1, 8, 32],"float16"), )
2025-05-20 17:13:34.560507 Task 396 SUCCESS: paddle.mean(Tensor([2, 1, 1, 1, 2147483648],"float16"), )
2025-05-20 17:13:39.146615 Task 398 SUCCESS: paddle.mean(Tensor([2, 1, 1, 2147483648],"float16"), )
2025-05-20 17:13:42.038000 Task 397 SUCCESS: paddle.mean(Tensor([2, 1, 1, 2147483648, 1],"float16"), )
2025-05-20 17:14:25.228299 Task 399 SUCCESS: paddle.mean(Tensor([2, 1, 1073741824, 2],"float16"), )
2025-05-20 17:21:43.738000 Task 400 SUCCESS: paddle.mean(Tensor([2, 1, 2, 1073741824],"float16"), )
2025-05-20 17:21:45.428025 Task 401 SUCCESS: paddle.mean(Tensor([2, 1, 2147483648, 1, 1],"float16"), )
2025-05-20 17:21:54.821713 Task 402 SUCCESS: paddle.mean(Tensor([2, 1, 536870912, 4],"float16"), )
2025-05-20 17:22:35.032881 Task 403 SUCCESS: paddle.mean(Tensor([2, 1073741824, 1, 2],"float16"), )
2025-05-20 17:29:55.202357 Task 404 SUCCESS: paddle.mean(Tensor([2, 134217728, 4, 4],"float16"), )
2025-05-20 17:29:55.524940 Task 405 SUCCESS: paddle.mean(Tensor([2, 2147483648, 1, 1, 1],"float16"), )
2025-05-20 17:30:00.878910 Task 406 SUCCESS: paddle.mean(Tensor([2, 2147483648, 1, 1],"float16"), )
2025-05-20 17:30:46.287388 Task 407 SUCCESS: paddle.mean(Tensor([2, 2147483648],"float16"), )
2025-05-20 17:38:02.176032 Task 409 SUCCESS: paddle.mean(Tensor([2, 4, 536870912],"float16"), )
2025-05-20 17:38:06.335601 Task 408 SUCCESS: paddle.mean(Tensor([2, 268435456, 2, 4],"float16"), )
2025-05-20 17:38:09.851911 Task 410 SUCCESS: paddle.mean(Tensor([2, 536870912, 4],"float16"), )
2025-05-20 17:38:58.795932 Task 411 SUCCESS: paddle.mean(Tensor([2097152, 1, 64, 32],"float16"), )
2025-05-20 17:40:51.468090 Task 413 SUCCESS: paddle.mean(Tensor([2147483648, 2],"bfloat16"), )
2025-05-20 17:46:11.238120 Task 412 SUCCESS: paddle.mean(Tensor([2147483648, 1, 1, 2],"float16"), )
2025-05-20 17:46:11.336775 Task 414 SUCCESS: paddle.mean(Tensor([2147483648, 2],"float16"), )
2025-05-20 17:47:11.458064 Task 415 SUCCESS: paddle.mean(Tensor([268435456, 4, 2, 2],"float16"), )
2025-05-20 17:48:49.940627 Task 416 SUCCESS: paddle.mean(Tensor([268435456, 4, 4],"float16"), )
2025-05-20 17:54:19.069364 Task 417 SUCCESS: paddle.mean(Tensor([286331153, 15],"float16"), )
2025-05-20 17:54:23.007122 Task 418 SUCCESS: paddle.mean(Tensor([3, 1, 1431655765],"float16"), )
2025-05-20 17:55:24.088297 Task 419 SUCCESS: paddle.mean(Tensor([3, 1431655765, 1],"float16"), )
2025-05-20 17:57:03.001456 Task 420 SUCCESS: paddle.mean(Tensor([3, 1431655765],"float16"), )
2025-05-20 18:02:29.620137 Task 421 SUCCESS: paddle.mean(Tensor([4, 1, 1, 1, 1073741824],"float16"), )
2025-05-20 18:02:33.160153 Task 422 SUCCESS: paddle.mean(Tensor([4, 1, 1, 1073741824, 1],"float16"), )
2025-05-20 18:03:35.489100 Task 423 SUCCESS: paddle.mean(Tensor([4, 1, 1, 1073741824],"float16"), )
2025-05-20 18:05:14.429400 Task 424 SUCCESS: paddle.mean(Tensor([4, 1, 1073741824, 1, 1],"float16"), )
2025-05-20 18:10:38.779950 Task 425 SUCCESS: paddle.mean(Tensor([4, 1, 1073741824, 1],"float16"), )
2025-05-20 18:10:42.601471 Task 426 SUCCESS: paddle.mean(Tensor([4, 1, 1073741824],"float16"), )
2025-05-20 18:11:43.938789 Task 427 SUCCESS: paddle.mean(Tensor([4, 1, 2, 2, 268435456],"float16"), )
2025-05-20 18:13:26.865269 Task 428 SUCCESS: paddle.mean(Tensor([4, 1, 2, 268435456, 2],"float16"), )
2025-05-20 18:18:45.784028 Task 429 SUCCESS: paddle.mean(Tensor([4, 1, 2, 536870912],"float16"), )
2025-05-20 18:18:51.084887 Task 430 SUCCESS: paddle.mean(Tensor([4, 1, 268435456, 2, 2],"float16"), )
2025-05-20 18:19:53.435043 Task 431 SUCCESS: paddle.mean(Tensor([4, 1, 536870912, 2],"float16"), )
2025-05-20 18:21:37.996907 Task 432 SUCCESS: paddle.mean(Tensor([4, 1073741824, 1, 1, 1],"float16"), )
2025-05-20 18:26:52.424863 Task 433 SUCCESS: paddle.mean(Tensor([4, 1073741824, 1, 1],"float16"), )
2025-05-20 18:27:00.094545 Task 434 SUCCESS: paddle.mean(Tensor([4, 1073741824, 1],"float16"), )
2025-05-20 18:28:02.472827 Task 435 SUCCESS: paddle.mean(Tensor([4, 134217728, 2, 2, 2],"float16"), )
2025-05-20 18:29:47.781802 Task 436 SUCCESS: paddle.mean(Tensor([4, 2, 536870912],"float16"), )
2025-05-20 18:34:58.283801 Task 437 SUCCESS: paddle.mean(Tensor([4, 268435456, 2, 2],"float16"), )
2025-05-20 18:35:10.157044 Task 438 SUCCESS: paddle.mean(Tensor([4, 4, 134217728, 2],"float16"), )
2025-05-20 18:36:11.458691 Task 439 SUCCESS: paddle.mean(Tensor([4, 4, 2, 134217728],"float16"), )
2025-05-20 18:37:57.507045 Task 440 SUCCESS: paddle.mean(Tensor([4, 536870912, 2],"float16"), )
2025-05-20 18:43:14.198619 Task 441 SUCCESS: paddle.mean(Tensor([4, 67108864, 4, 4],"float16"), )
2025-05-20 18:43:15.970745 Task 442 SUCCESS: paddle.mean(Tensor([4294967295, 1, 1, 1, 1],"float16"), )
2025-05-20 18:44:22.270358 Task 443 SUCCESS: paddle.mean(Tensor([4294967295, 1, 1, 1],"float16"), )
2025-05-20 18:46:09.476181 Task 444 SUCCESS: paddle.mean(Tensor([4294967295, 1],"float16"), )
2025-05-20 18:51:21.284284 Task 445 SUCCESS: paddle.mean(Tensor([4294967295],"float16"), )
2025-05-20 18:51:26.474937 Task 446 SUCCESS: paddle.mean(Tensor([5, 858993459, 1],"float16"), )
2025-05-20 18:52:33.838452 Task 447 SUCCESS: paddle.mean(Tensor([5, 858993459],"float16"), )
2025-05-20 18:54:21.274443 Task 448 SUCCESS: paddle.mean(Tensor([524288, 2, 32, 16, 8],"float16"), )
2025-05-20 18:59:27.951600 Task 449 SUCCESS: paddle.mean(Tensor([524288, 64, 128],"float16"), )
2025-05-20 18:59:35.828009 Task 450 SUCCESS: paddle.mean(Tensor([536870912, 1, 2, 2, 2],"float16"), )
2025-05-20 19:00:45.777553 Task 451 SUCCESS: paddle.mean(Tensor([536870912, 1, 2, 4],"float16"), )
2025-05-20 19:02:30.823018 Task 452 SUCCESS: paddle.mean(Tensor([64, 524288, 128],"float16"), )
2025-05-20 19:07:35.601519 Task 453 SUCCESS: paddle.mean(Tensor([64, 64, 1048576],"float16"), )
2025-05-20 19:07:45.533172 Task 454 SUCCESS: paddle.mean(Tensor([64, 67108864],"float16"), )
2025-05-20 19:08:56.357484 Task 455 SUCCESS: paddle.mean(Tensor([67108864, 4, 4, 4],"float16"), )
2025-05-20 19:10:40.481982 Task 456 SUCCESS: paddle.mean(Tensor([67108864, 64],"float16"), )
2025-05-20 19:15:43.684524 Task 457 SUCCESS: paddle.mean(Tensor([858993459, 5, 1],"float16"), )
2025-05-20 19:15:54.547874 Task 458 SUCCESS: paddle.mean(Tensor([858993459, 5],"float16"), )
2025-05-20 19:17:06.854179 Task 459 SUCCESS: paddle.mean(x=Tensor([2, 2147483648],"float16"), )
2025-05-20 19:18:48.183287 Task 460 SUCCESS: paddle.mean(x=Tensor([4294967295, 1],"float16"), )
2025-05-20 19:23:51.496035 Task 461 SUCCESS: paddle.mean(x=Tensor([8, 536870912],"float16"), )
2025-05-20 19:46:02.825927 Task 462 TIMEOUT: paddle.nansum(Tensor([1073741824, 4],"float32"), )
2025-05-20 19:47:13.899962 Task 463 TIMEOUT: paddle.nansum(Tensor([1431655765, 3],"float32"), axis=list[0,], keepdim=True, name=None, )
2025-05-20 19:48:55.002904 Task 464 TIMEOUT: paddle.nansum(Tensor([1431655765, 3],"float32"), axis=None, keepdim=False, name=None, )
2025-05-20 19:54:01.310903 Task 465 TIMEOUT: paddle.nansum(Tensor([1431655765, 3],"float32"), axis=None, keepdim=True, name=None, )
2025-05-20 20:16:13.645907 Task 466 TIMEOUT: paddle.nansum(Tensor([3, 1431655765],"float32"), axis=None, )
2025-05-20 20:17:24.721917 Task 467 TIMEOUT: paddle.nansum(Tensor([3, 1431655765],"float32"), axis=None, keepdim=False, name=None, )
2025-05-20 20:19:05.824911 Task 468 TIMEOUT: paddle.nansum(Tensor([3, 1431655765],"float32"), axis=None, keepdim=True, name=None, )
2025-05-20 20:24:12.132907 Task 469 TIMEOUT: paddle.nansum(Tensor([3, 1431655765],"float32"), keepdim=True, )
2025-05-20 20:46:24.465908 Task 470 TIMEOUT: paddle.nansum(Tensor([858993459, 5],"float32"), axis=None, )
2025-05-20 20:47:35.538940 Task 471 TIMEOUT: paddle.nansum(Tensor([858993459, 5],"float32"), axis=None, keepdim=False, name=None, )
2025-05-20 20:47:58.274796 Task 474 ERROR: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108864, 32],"float32"), 16, False, None, ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:49:07.489318 Task 475 ERROR: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108864, 32],"float32"), output_size=16, ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:49:12.493931 Task 472 TIMEOUT: paddle.nansum(Tensor([858993459, 5],"float32"), axis=None, keepdim=True, name=None, )
2025-05-20 20:49:17.744022 Task 476 ERROR: paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:50:24.895240 Task 477 ERROR: paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:50:34.774488 Task 479 ERROR: paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:50:44.211216 Task 478 ERROR: paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:51:49.279212 Task 482 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([56, 3, 6790778, 2],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 20:51:53.426769 Task 481 ERROR: paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:51:57.577201 Task 480 ERROR: paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], ), (External) CUDA error(700), an illegal memory access was encountered. 
  [Hint: 'cudaErrorIllegalAddress'. The device encountered a load or store instruction on an invalid memory address. This leaves the process in an inconsistentstate and any further CUDA work will return the same error. To continue using CUDA, the process must be terminated and relaunched. ] (at /paddle/paddle/fluid/pybind/eager_functions.cc:1385)

2025-05-20 20:52:52.636220 Task 484 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([56, 3, 848848, 16],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 20:54:22.727916 Task 473 TIMEOUT: paddle.nansum(Tensor([858993459, 5],"float32"), keepdim=True, )
2025-05-20 20:55:03.771232 Task 483 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([56, 3, 6790778, 2],"float32"), Tensor([56, 2, 6790778, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 20:55:03.772420 Task 485 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([56, 3, 848848, 16],"float32"), Tensor([56, 16, 848848, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 20:55:13.785165 Task 486 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([56, 39790, 32, 32],"float32"), Tensor([56, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 20:57:23.917237 Task 487 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([56, 9948, 64, 64],"float32"), Tensor([56, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 20:57:48.945180 Task 489 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([5821, 4, 280, 350],"float32"), Tensor([5821, 298, 364, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
2025-05-20 20:58:08.967218 Task 488 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([5821, 4, 280, 350],"float32"), Tensor([5821, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
2025-05-20 20:59:34.054215 Task 490 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([5821, 4, 280, 350],"float32"), Tensor([5821, 368, 416, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
2025-05-20 21:00:14.096155 Task 493 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([73661, 1, 176, 176],"float32"), Tensor([73661, 1, 12544, 2],"float32"), align_corners=False, )
2025-05-20 21:00:34.118223 Task 491 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([727584, 4, 28, 28],"float32"), Tensor([727584, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
2025-05-20 21:01:49.195171 Task 495 ERROR (Worker died): paddle.nn.functional.grid_sample(x=Tensor([16, 64, 80, 94, 311],"float32"), grid=Tensor([16, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
2025-05-20 21:02:14.222272 Task 492 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([727584, 4, 28, 28],"float32"), Tensor([727584, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
2025-05-20 21:02:44.254168 Task 496 ERROR (Worker died): paddle.nn.functional.layer_norm(Tensor([69633, 128, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
2025-05-20 21:03:09.281241 Task 494 ERROR (Worker died): paddle.nn.functional.grid_sample(Tensor([742742, 3, 32, 32],"float32"), Tensor([742742, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
2025-05-20 21:04:34.368222 Task 497 ERROR (Worker died): paddle.nn.functional.layer_norm(Tensor([8, 1114113, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
2025-05-20 21:05:04.400257 Task 498 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 128, 32, 557057],"float32"), axis=1, )
2025-05-20 21:05:44.442226 Task 499 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 128, 557057, 32],"float32"), axis=1, )
2025-05-20 21:05:44.443165 Task 500 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 2228225, 32, 32],"float32"), axis=1, )
2025-05-20 21:07:14.536246 Task 501 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 256, 16, 557057],"float32"), axis=1, )
2025-05-20 21:07:54.578167 Task 503 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 557057, 64, 64],"float32"), axis=1, )
2025-05-20 21:07:59.586317 Task 504 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 64, 557057, 64],"float32"), axis=1, )
2025-05-20 21:08:09.598225 Task 502 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 256, 557057, 16],"float32"), axis=1, )
2025-05-20 21:09:59.711235 Task 505 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 64, 64, 557057],"float32"), axis=1, )
2025-05-20 21:10:24.738244 Task 508 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([10, 228170138],"float32"), axis=0, )
2025-05-20 21:10:44.761224 Task 506 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1, 8912897, 16, 16],"float32"), axis=1, )
2025-05-20 21:12:54.894246 Task 507 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([10, 228170138],"float32"), )
2025-05-20 21:13:24.926199 Task 511 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([11883862, 192],"float32"), axis=1, )
2025-05-20 21:13:24.927177 Task 510 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([1006, 2268093],"float32"), )
2025-05-20 21:14:50.014216 Task 509 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([10, 228170138],"float32"), p=1.5, )
2025-05-20 21:16:10.096247 Task 513 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([17409, 128, 32, 32],"float32"), axis=1, )
2025-05-20 21:16:45.133226 Task 514 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([2, 16297867, 7, 10],"float32"), axis=1, )
2025-05-20 21:17:05.156180 Task 515 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([2, 8, 14260634, 10],"float32"), axis=1, )
2025-05-20 21:17:20.174243 Task 512 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([12, 190141782],"float32"), axis=-1, )
2025-05-20 21:19:00.277238 Task 516 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([2, 8, 7, 20372334],"float32"), axis=1, )
2025-05-20 21:19:40.319238 Task 517 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([207427399, 11],"float32"), axis=1, )
2025-05-20 21:20:15.356230 Task 518 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([228170138, 10],"float32"), )
2025-05-20 21:21:40.444235 Task 520 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([228170138, 10],"float32"), p=1.5, )
2025-05-20 21:22:15.481209 Task 519 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([228170138, 10],"float32"), axis=0, )
2025-05-20 21:22:30.498235 Task 521 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([253522376, 9],"float32"), axis=1, )
2025-05-20 21:23:20.550294 Task 522 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([2970966, 768],"float32"), axis=-1, )
2025-05-20 21:24:45.637170 Task 525 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([34817, 256, 16, 16],"float32"), axis=1, )
2025-05-20 21:25:00.654263 Task 524 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([325957340, 7],"float32"), axis=1, )
2025-05-20 21:26:05.721270 Task 526 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([35651585, 64],"float32"), axis=1, )
2025-05-20 21:27:00.779189 Task 527 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([35651585, 64],"float32"), axis=-1, )
2025-05-20 21:27:20.802240 Task 523 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([325957340, 7],"float32"), axis=0, )
2025-05-20 21:27:50.834252 Task 528 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([4, 570425345],"float32"), axis=0, )
2025-05-20 21:28:55.901236 Task 529 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([4074467, 8, 7, 10],"float32"), axis=1, )
2025-05-20 21:30:00.968256 Task 531 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([4456449, 512],"float32"), )
2025-05-20 21:30:46.015230 Task 532 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([45, 50704476],"float32"), axis=0, )
2025-05-20 21:33:26.177219 Task 535 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([60, 38028357],"float32"), axis=0, )
2025-05-20 21:35:16.289206 Task 533 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([456340276, 5],"float32"), axis=0, )
2025-05-20 21:37:06.401269 Task 534 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([570425345, 4],"float32"), axis=0, )
2025-05-20 21:37:46.443178 Task 530 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([4194305, 1024],"float16"), p=2, axis=-1, )
2025-05-20 21:38:06.465236 Task 537 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([80, 28521268],"float32"), axis=-1, )
2025-05-20 21:40:26.607252 Task 539 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([8705, 64, 64, 64],"float32"), axis=1, )
2025-05-20 21:41:31.674236 Task 536 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([760567127, 3],"float32"), axis=0, )
2025-05-20 21:47:27.032245 Task 538 ERROR (Worker died): paddle.nn.functional.normalize(Tensor([8388609, 512],"float16"), )
2025-05-20 21:48:12.079229 Task 540 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([1073741825, 4],"float16"), )
2025-05-20 21:50:12.201240 Task 541 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([143165577, 5, 6],"float16"), )
2025-05-20 21:51:32.284375 Task 542 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([2, 1140850690],"float32"), )
2025-05-20 21:54:17.452264 Task 546 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([2970966, 768],"float32"), axis=-1, )
2025-05-20 21:57:32.649170 Task 544 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=1, )
2025-05-20 21:57:42.662257 Task 543 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), )
2025-05-20 21:59:57.800233 Task 545 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=4, axis=3, )
2025-05-20 22:07:33.258260 Task 549 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 5, 214748365],"float16"), )
2025-05-20 22:08:08.296238 Task 548 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 25565282, 6, 7],"float16"), p=1, )
2025-05-20 22:10:03.413264 Task 550 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), )
2025-05-20 22:11:28.501249 Task 547 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 1073741825],"float16"), p=1.2, )
2025-05-20 22:17:38.874263 Task 551 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=1, )
2025-05-20 22:18:18.916237 Task 552 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=4, axis=3, )
2025-05-20 22:20:04.023188 Task 553 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), )
2025-05-20 22:20:14.035164 Task 555 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([570425345, 4],"float32"), )
2025-05-20 22:20:24.047218 Task 556 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -1, 1e-06, False, None, )
2025-05-20 22:21:39.124172 Task 557 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -1, 1e-06, True, None, )
2025-05-20 22:21:45.186315 Task 558 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 2, 1e-06, False, None, )
2025-05-20 22:21:55.697991 Task 559 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 2, 1e-06, True, None, )
2025-05-20 22:22:05.708236 Task 554 ERROR (Worker died): paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), p=1, )
2025-05-20 22:23:09.029283 Task 560 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 2.0, 1e-06, False, None, )
2025-05-20 22:23:14.035204 Task 562 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -math.inf, 1e-06, False, None, )
2025-05-20 22:23:29.053245 Task 561 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), math.inf, 1e-06, False, None, )
2025-05-20 22:23:59.085258 Task 563 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), math.inf, 1e-06, True, None, )
2025-05-20 22:24:59.147230 Task 564 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -math.inf, 1e-06, True, None, )
2025-05-20 22:26:39.250181 Task 566 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -1, 1e-06, True, None, )
2025-05-20 22:26:53.870830 Task 567 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 2, 1e-06, False, None, )
2025-05-20 22:26:58.876234 Task 565 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -1, 1e-06, False, None, )
2025-05-20 22:27:50.132177 Task 568 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 2, 1e-06, True, None, )
2025-05-20 22:29:35.237140 Task 571 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), math.inf, 1e-06, True, None, )
2025-05-20 22:29:35.238124 Task 569 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), math.inf, 1e-06, False, None, )
2025-05-20 22:29:55.260230 Task 570 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -math.inf, 1e-06, False, None, )
2025-05-20 22:30:45.313224 Task 572 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -math.inf, 1e-06, True, None, )
2025-05-20 22:32:45.435208 Task 575 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), math.inf, 1e-06, False, None, )
2025-05-20 22:33:40.493268 Task 576 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), -math.inf, 1e-06, False, None, )
2025-05-20 22:34:22.617633 Task 577 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([100],"float32"), 2.0, 1e-06, False, None, )
2025-05-20 22:34:42.638184 Task 574 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), 2, 1e-06, False, None, )
2025-05-20 22:35:07.665224 Task 573 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), 1, 1e-06, False, None, )
2025-05-20 22:35:22.040953 Task 578 SUCCESS: paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 1],"float32"), 2.0, 1e-06, False, None, )
2025-05-20 22:36:07.086243 Task 579 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 1, 1e-06, False, None, )
2025-05-20 22:36:37.118148 Task 581 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 1, 1e-06, True, None, )
2025-05-20 22:36:37.119102 Task 582 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -1, 1e-06, True, None, )
2025-05-20 22:36:57.141257 Task 580 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -1, 1e-06, False, None, )
2025-05-20 22:37:57.204239 Task 583 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 2, 1e-06, False, None, )
2025-05-20 22:38:07.216177 Task 585 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), math.inf, 1e-06, False, None, )
2025-05-20 22:38:17.230189 Task 586 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -math.inf, 1e-06, False, None, )
2025-05-20 22:38:27.243234 Task 584 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 2, 1e-06, True, None, )
2025-05-20 22:39:32.310154 Task 588 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -math.inf, 1e-06, True, None, )
2025-05-20 22:39:47.328360 Task 587 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), math.inf, 1e-06, True, None, )
2025-05-20 22:41:02.406162 Task 590 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -1, 1e-06, False, None, )
2025-05-20 22:41:17.423262 Task 589 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 1, 1e-06, False, None, )
2025-05-20 22:42:27.496194 Task 592 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -1, 1e-06, True, None, )
2025-05-20 22:42:32.504441 Task 591 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 1, 1e-06, True, None, )
2025-05-20 22:43:52.587135 Task 593 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 2, 1e-06, False, None, )
2025-05-20 22:44:22.620238 Task 594 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 2, 1e-06, True, None, )
2025-05-20 22:45:22.682226 Task 595 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), math.inf, 1e-06, False, None, )
2025-05-20 22:45:37.700384 Task 596 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -math.inf, 1e-06, False, None, )
2025-05-20 22:46:57.783221 Task 597 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), math.inf, 1e-06, True, None, )
2025-05-20 22:47:12.800167 Task 599 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), 1, 1e-06, False, None, )
2025-05-20 22:47:32.822177 Task 600 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), 2, 1e-06, False, None, )
2025-05-20 22:47:37.830449 Task 598 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -math.inf, 1e-06, True, None, )
2025-05-20 22:48:50.658944 Task 602 SUCCESS: paddle.nn.functional.pairwise_distance(x=Tensor([100, 22817014],"float32"), y=Tensor([100, 22817014],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
2025-05-20 22:49:10.751245 Task 603 SUCCESS: paddle.nn.functional.pairwise_distance(x=Tensor([22817014, 100],"float32"), y=Tensor([100],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
2025-05-20 22:49:20.776090 Task 604 SUCCESS: paddle.nn.functional.pairwise_distance(x=Tensor([22817014, 100],"float32"), y=Tensor([22817014, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
2025-05-20 22:50:51.084827 Task 605 SUCCESS: paddle.nn.functional.rrelu(Tensor([2, 3, 4, 95070891],"float32"), 0.1, 0.3, training=False, )
2025-05-20 22:51:13.239239 Task 606 SUCCESS: paddle.nn.functional.rrelu(Tensor([2, 3, 76056713, 5],"float32"), 0.1, 0.3, training=False, )
2025-05-20 22:51:22.365502 Task 607 SUCCESS: paddle.nn.functional.rrelu(Tensor([2, 57042535, 4, 5],"float32"), 0.1, 0.3, training=False, )
2025-05-20 22:51:32.376219 Task 601 ERROR (Worker died): paddle.nn.functional.pairwise_distance(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), 2, 1e-06, False, None, )
2025-05-20 22:52:51.709632 Task 608 SUCCESS: paddle.nn.functional.rrelu(Tensor([38028357, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
2025-05-20 22:59:32.287533 Task 609 SUCCESS: paddle.std(Tensor([1, 107374183, 4, 10],"float16"), list[1,2,], True, False, )
2025-05-20 22:59:34.704109 Task 610 SUCCESS: paddle.std(Tensor([1, 3, 143165577, 10],"float16"), 2, True, False, )
2025-05-20 22:59:51.953391 Task 611 SUCCESS: paddle.std(Tensor([1, 3, 143165577, 10],"float16"), list[1,2,], True, False, )
2025-05-20 23:08:37.301231 Task 612 SUCCESS: paddle.std(Tensor([1, 3, 4, 357913942],"float16"), 2, True, False, )
2025-05-20 23:10:37.322791 Task 613 SUCCESS: paddle.std(Tensor([1, 3, 4, 357913942],"float16"), list[1,2,], True, False, )
2025-05-20 23:10:44.412031 Task 615 SUCCESS: paddle.std(Tensor([35791395, 3, 4, 10],"float16"), list[1,2,], True, False, )
2025-05-20 23:15:30.739100 Task 614 SUCCESS: paddle.std(Tensor([35791395, 3, 4, 10],"float16"), 2, True, False, )
2025-05-20 23:19:47.485929 Task 619 SUCCESS: paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=0, )
2025-05-20 23:20:32.552709 Task 616 SUCCESS: paddle.std(Tensor([35791395, 3, 4, 10],"float16"), list[1,3,], False, False, )
2025-05-20 23:22:39.786247 Task 618 SUCCESS: paddle.std(Tensor([35791395, 3, 4, 10],"float16"), tuple(1,3,), True, False, )
2025-05-20 23:22:46.488601 Task 617 SUCCESS: paddle.std(Tensor([35791395, 3, 4, 10],"float16"), list[1,3,], True, False, )
2025-05-20 23:24:05.359812 Task 620 SUCCESS: paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=0, unbiased=False, )
2025-05-20 23:28:18.855762 Task 624 SUCCESS: paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=0, )
2025-05-20 23:31:17.566377 Task 621 SUCCESS: paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=list[0,1,], )
2025-05-20 23:32:35.513896 Task 625 SUCCESS: paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=0, unbiased=False, )
2025-05-20 23:33:24.714227 Task 622 SUCCESS: paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=tuple(0,1,), )
2025-05-20 23:33:40.410692 Task 623 SUCCESS: paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=tuple(0,1,), keepdim=True, )
2025-05-20 23:39:23.431973 Task 626 SUCCESS: paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=list[0,1,], )
2025-05-20 23:40:44.516852 Task 627 SUCCESS: paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=tuple(0,1,), )
2025-05-20 23:41:35.220221 Task 628 SUCCESS: paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=tuple(0,1,), keepdim=True, )
2025-05-20 23:41:57.191733 Task 629 SUCCESS: paddle.std(x=Tensor([477218589, 3, 3],"float16"), axis=0, )
2025-05-20 23:47:28.114245 Task 630 SUCCESS: paddle.std(x=Tensor([477218589, 3, 3],"float16"), axis=0, unbiased=False, )
2025-05-20 23:48:52.394062 Task 631 SUCCESS: paddle.std(x=Tensor([477218589, 3, 3],"float16"), axis=list[0,1,], )
2025-05-20 23:48:54.341642 Task 634 SUCCESS: paddle.sum(Tensor([1, 2281701379, 1],"float32"), 1, )
2025-05-20 23:49:21.563948 Task 635 SUCCESS: paddle.sum(Tensor([1, 2281701379],"int64"), )
2025-05-20 23:49:22.817925 Task 636 SUCCESS: paddle.sum(Tensor([1, 2281701379],"int64"), axis=1, )
2025-05-20 23:49:42.663033 Task 632 SUCCESS: paddle.std(x=Tensor([477218589, 3, 3],"float16"), axis=tuple(0,1,), )
2025-05-20 23:50:12.363167 Task 633 SUCCESS: paddle.std(x=Tensor([477218589, 3, 3],"float16"), axis=tuple(0,1,), keepdim=True, )
2025-05-20 23:57:12.464153 Task 638 SUCCESS: paddle.sum(Tensor([2, 2147483649],"float16"), -1, keepdim=True, dtype=None, )
2025-05-20 23:57:17.891555 Task 637 SUCCESS: paddle.sum(Tensor([2, 2147483649],"float16"), 1, keepdim=False, dtype=None, )
2025-05-20 23:57:40.188991 Task 639 SUCCESS: paddle.sum(Tensor([2, 2147483649],"float16"), None, keepdim=False, name=None, )
2025-05-20 23:58:19.684938 Task 640 SUCCESS: paddle.sum(Tensor([2, 2147483649],"float16"), None, keepdim=True, dtype=None, )
2025-05-21 00:01:32.931333 Task 641 SUCCESS: paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 6268411],"int64"), )
2025-05-21 00:01:58.719705 Task 642 SUCCESS: paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 1485483, 768],"int64"), )
2025-05-21 00:01:58.843760 Task 643 SUCCESS: paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 1567103],"int64"), )
2025-05-21 00:02:20.487419 Task 644 SUCCESS: paddle.take_along_axis(Tensor([8, 63, 768],"float32"), axis=1, indices=Tensor([8, 371371, 768],"int64"), )
2025-05-21 00:02:59.858800 Task 645 SUCCESS: paddle.Tensor.amax(Tensor([3, 2, 4, 95070891],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:03:31.071574 Task 647 SUCCESS: paddle.Tensor.amax(Tensor([3, 2, 95070891, 4],"float32"), axis=2, keepdim=True, )
2025-05-21 00:03:48.075436 Task 646 SUCCESS: paddle.Tensor.amax(Tensor([3, 2, 76056713, 5],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:03:55.540630 Task 648 SUCCESS: paddle.Tensor.amax(Tensor([3, 2, 95070891, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-21 00:04:43.199339 Task 649 SUCCESS: paddle.Tensor.amax(Tensor([3, 38028357, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:05:16.254375 Task 651 SUCCESS: paddle.Tensor.amax(Tensor([3, 38028357, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-21 00:05:17.526932 Task 650 SUCCESS: paddle.Tensor.amax(Tensor([3, 38028357, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-21 00:05:43.209964 Task 652 SUCCESS: paddle.Tensor.amax(Tensor([57042535, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:06:28.101618 Task 653 SUCCESS: paddle.Tensor.amax(Tensor([57042535, 2, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-21 00:06:44.274634 Task 655 SUCCESS: paddle.Tensor.amin(Tensor([3, 2, 4, 95070891],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:06:55.780471 Task 654 SUCCESS: paddle.Tensor.amax(Tensor([57042535, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-21 00:07:31.956322 Task 656 SUCCESS: paddle.Tensor.amin(Tensor([3, 2, 76056713, 5],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:07:55.730456 Task 657 SUCCESS: paddle.Tensor.amin(Tensor([3, 2, 95070891, 4],"float32"), axis=2, keepdim=True, )
2025-05-21 00:08:11.323221 Task 658 SUCCESS: paddle.Tensor.amin(Tensor([3, 2, 95070891, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-21 00:08:43.170365 Task 659 SUCCESS: paddle.Tensor.amin(Tensor([3, 38028357, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:09:23.830085 Task 661 SUCCESS: paddle.Tensor.amin(Tensor([3, 38028357, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-21 00:09:25.265640 Task 660 SUCCESS: paddle.Tensor.amin(Tensor([3, 38028357, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-21 00:10:03.310141 Task 662 SUCCESS: paddle.Tensor.amin(Tensor([57042535, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
2025-05-21 00:10:23.331264 Task 665 ERROR (Worker died): paddle.Tensor.argmax(Tensor([1, 1, 2281701379],"float32"), axis=-2, )
2025-05-21 00:10:31.560958 Task 663 SUCCESS: paddle.Tensor.amin(Tensor([57042535, 2, 5, 4],"float32"), axis=2, keepdim=True, )
2025-05-21 00:10:33.608532 Task 666 SUCCESS: paddle.Tensor.argmax(Tensor([1, 2281701379],"int64"), axis=-1, )
2025-05-21 00:10:59.561119 Task 664 SUCCESS: paddle.Tensor.amin(Tensor([57042535, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
2025-05-21 00:11:14.576174 Task 667 ERROR (Worker died): paddle.Tensor.argmax(Tensor([221848, 1, 10285],"float32"), axis=-2, )
2025-05-21 00:11:19.584402 Task 669 ERROR (Worker died): paddle.Tensor.argmax(Tensor([67908, 1, 33600],"float32"), axis=-2, )
2025-05-21 00:11:24.592386 Task 668 ERROR (Worker died): paddle.Tensor.argmax(Tensor([4, 285212673, 2],"float32"), axis=-1, )
2025-05-21 00:11:49.619218 Task 670 ERROR (Worker died): paddle.Tensor.argmax(Tensor([7225, 157920, 2],"float32"), axis=-1, )
2025-05-21 00:12:14.646212 Task 671 ERROR (Worker died): paddle.Tensor.argmax(Tensor([75245, 1, 30324],"float32"), axis=-2, )
2025-05-21 00:12:19.653351 Task 672 ERROR (Worker died): paddle.Tensor.argmax(Tensor([83837, 1, 27216],"float32"), axis=-2, )
2025-05-21 00:12:19.654265 Task 673 ERROR (Worker died): paddle.Tensor.argmax(Tensor([93991, 1, 24276],"float32"), axis=-2, )
2025-05-21 00:14:51.252096 Task 674 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 10, 228170138],"float32"), 1, )
2025-05-21 00:14:58.343791 Task 675 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 11408507, 200],"float32"), 1, )
2025-05-21 00:15:21.011762 Task 677 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 12, 190141782],"float32"), 1, )
2025-05-21 00:15:31.379955 Task 676 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 11408507, 200],"float32"), 2, )
2025-05-21 00:17:27.236995 Task 679 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 144, 15845149],"float32"), 2, )
2025-05-21 00:17:44.824465 Task 678 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 144, 15845149],"float32"), 1, )
2025-05-21 00:18:07.843726 Task 680 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 15845149, 144],"float32"), 1, )
2025-05-21 00:18:36.301057 Task 681 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 15845149, 144],"float32"), 2, )
2025-05-21 00:20:10.834561 Task 683 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 18, 126761188],"float32"), 2, )
2025-05-21 00:20:51.038224 Task 682 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 18, 126761188],"float32"), 1, )
2025-05-21 00:21:06.633850 Task 685 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 192, 11883862],"float32"), 2, )
2025-05-21 00:21:08.858576 Task 684 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 192, 11883862],"float32"), 1, )
2025-05-21 00:24:00.430451 Task 687 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 253522376, 9],"float32"), 2, )
2025-05-21 00:24:17.629841 Task 689 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 285212673, 8],"float32"), 2, )
2025-05-21 00:25:08.779646 Task 686 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 253522376, 9],"float32"), 1, )
2025-05-21 00:26:13.793402 Task 688 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 285212673, 8],"float32"), 1, )
2025-05-21 00:27:25.594239 Task 691 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 91268056, 25],"float32"), 2, )
2025-05-21 00:27:46.081462 Task 690 SUCCESS: paddle.Tensor.cumsum(Tensor([1, 91268056, 25],"float32"), 1, )
2025-05-21 00:28:10.440563 Task 692 SUCCESS: paddle.Tensor.cumsum(Tensor([114085069, 20],"float32"), axis=-1, )
2025-05-21 00:29:56.471426 Task 693 SUCCESS: paddle.Tensor.cumsum(Tensor([1140850690, 2],"float32"), axis=-1, )
2025-05-21 00:30:00.807231 Task 694 SUCCESS: paddle.Tensor.cumsum(Tensor([162978670, 14],"int32"), -1, )
2025-05-21 00:30:51.991227 Task 695 SUCCESS: paddle.Tensor.cumsum(Tensor([21126865, 12, 9],"float32"), 1, )
2025-05-21 00:31:20.710691 Task 696 SUCCESS: paddle.Tensor.cumsum(Tensor([21126865, 12, 9],"float32"), 2, )
2025-05-21 00:32:09.022668 Task 699 SUCCESS: paddle.Tensor.cumsum(Tensor([285212673, 4, 2],"int64"), axis=1, )
2025-05-21 00:32:18.605178 Task 697 SUCCESS: paddle.Tensor.cumsum(Tensor([2228225, 1024],"int32"), axis=-1, )
2025-05-21 00:32:51.283106 Task 700 SUCCESS: paddle.Tensor.cumsum(Tensor([285212673, 4, 2],"int64"), axis=2, )
2025-05-21 00:33:21.925637 Task 698 SUCCESS: paddle.Tensor.cumsum(Tensor([285212673, 4, 2],"int64"), axis=0, )
2025-05-21 00:34:04.763816 Task 703 SUCCESS: paddle.Tensor.cumsum(Tensor([3, 380283564, 2],"int64"), axis=0, )
2025-05-21 00:35:10.092437 Task 701 SUCCESS: paddle.Tensor.cumsum(Tensor([28521268, 10, 8],"float32"), 1, )
2025-05-21 00:35:29.775156 Task 702 SUCCESS: paddle.Tensor.cumsum(Tensor([28521268, 10, 8],"float32"), 2, )
2025-05-21 00:35:33.421229 Task 705 SUCCESS: paddle.Tensor.cumsum(Tensor([3, 380283564, 2],"int64"), axis=2, )
2025-05-21 00:35:41.912671 Task 704 SUCCESS: paddle.Tensor.cumsum(Tensor([3, 380283564, 2],"int64"), axis=1, )
2025-05-21 00:36:31.141662 Task 706 SUCCESS: paddle.Tensor.cumsum(Tensor([3, 4, 190141782],"int64"), axis=0, )
2025-05-21 00:36:46.006333 Task 707 SUCCESS: paddle.Tensor.cumsum(Tensor([3, 4, 190141782],"int64"), axis=1, )
2025-05-21 00:36:47.003288 Task 708 SUCCESS: paddle.Tensor.cumsum(Tensor([3, 760567127],"int64"), axis=0, )
2025-05-21 00:36:59.426216 Task 709 SUCCESS: paddle.Tensor.cumsum(Tensor([5, 456340276],"int64"), axis=0, )
2025-05-21 00:38:22.507609 Task 713 SUCCESS: paddle.Tensor.cumsum(Tensor([570425345, 4],"int64"), axis=1, )
2025-05-21 00:39:25.856521 Task 710 SUCCESS: paddle.Tensor.cumsum(Tensor([5070448, 18, 25],"float32"), 1, )
2025-05-21 00:39:45.840018 Task 711 SUCCESS: paddle.Tensor.cumsum(Tensor([5070448, 18, 25],"float32"), 2, )
2025-05-21 00:40:46.272636 Task 712 SUCCESS: paddle.Tensor.cumsum(Tensor([570425345, 4],"int64"), axis=0, )
2025-05-21 00:41:46.709434 Task 714 SUCCESS: paddle.Tensor.cumsum(Tensor([760567127, 3],"float32"), axis=-1, )
2025-05-21 00:42:24.009926 Task 715 SUCCESS: paddle.Tensor.cumsum(Tensor([79226, 144, 200],"float32"), 1, )
2025-05-21 00:42:46.245135 Task 716 SUCCESS: paddle.Tensor.cumsum(Tensor([79226, 144, 200],"float32"), 2, )
2025-05-21 00:43:40.782192 Task 717 SUCCESS: paddle.Tensor.cumsum(Tensor([82527, 192, 144],"float32"), 1, )
2025-05-21 00:44:45.132143 Task 718 SUCCESS: paddle.Tensor.cumsum(Tensor([82527, 192, 144],"float32"), 2, )
2025-05-21 00:49:50.175985 Task 721 SUCCESS: paddle.Tensor.diff(x=Tensor([67108865, 4, 4, 4],"float16"), )
2025-05-21 00:50:25.970134 Task 719 SUCCESS: paddle.Tensor.diff(x=Tensor([4, 1073741825],"float16"), )
2025-05-21 00:50:49.106460 Task 720 SUCCESS: paddle.Tensor.diff(x=Tensor([4, 4, 268435457],"float16"), )
2025-05-21 00:51:09.899630 Task 722 SUCCESS: paddle.Tensor.diff(x=Tensor([67108865, 4, 4, 4],"float16"), axis=2, )
2025-05-21 00:52:04.955268 Task 726 ERROR (Worker died): paddle.trapezoid(Tensor([2281701379],"float32"), dx=2.0, )
2025-05-21 00:52:15.448297 Task 725 SUCCESS: paddle.Tensor.repeat_interleave(Tensor([2281701379, 1],"int64"), 1, axis=0, )
2025-05-21 00:55:00.614250 Task 728 ERROR (Worker died): paddle.trunc(input=Tensor([119304648, 6, 6],"float16"), )
2025-05-21 00:56:05.161250 Task 723 SUCCESS: paddle.Tensor.diff(x=Tensor([67108865, 4, 4, 4],"float16"), axis=-2, )
2025-05-21 00:57:00.216270 Task 727 ERROR (Worker died): paddle.trapezoid(y=Tensor([1073741825, 4],"float16"), x=Tensor([1073741825, 4],"float16"), )
2025-05-21 00:57:50.269232 Task 729 ERROR (Worker died): paddle.trunc(input=Tensor([19884108, 6, 6, 6],"float16"), )
2025-05-21 00:58:55.336254 Task 730 ERROR (Worker died): paddle.trunc(input=Tensor([3, 6, 6, 6, 6628036],"float16"), )
2025-05-21 01:00:00.403250 Task 731 ERROR (Worker died): paddle.trunc(input=Tensor([3, 6, 6, 6628036, 6],"float16"), )
2025-05-21 01:00:40.445220 Task 732 ERROR (Worker died): paddle.trunc(input=Tensor([3, 6, 6628036, 6, 6],"float16"), )
2025-05-21 01:01:30.153229 Task 735 ERROR: paddle.trunc(input=Tensor([380283564, 6],"int32"), ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-21 01:01:55.180232 Task 733 ERROR (Worker died): paddle.trunc(input=Tensor([3, 6628036, 6, 6, 6],"float16"), )
2025-05-21 01:02:55.245247 Task 734 ERROR (Worker died): paddle.trunc(input=Tensor([3314018, 6, 6, 6, 6],"float16"), )
2025-05-21 01:03:45.938903 Task 738 ERROR: paddle.trunc(input=Tensor([6, 380283564],"int32"), ), CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-05-21 01:04:25.981189 Task 737 ERROR (Worker died): paddle.trunc(input=Tensor([6, 19884108, 6, 6],"float16"), )
2025-05-21 01:04:30.989330 Task 736 ERROR (Worker died): paddle.trunc(input=Tensor([6, 119304648, 6],"float16"), )
2025-05-21 01:06:41.122219 Task 739 ERROR (Worker died): paddle.trunc(input=Tensor([6, 6, 119304648],"float16"), )
2025-05-21 01:07:06.149188 Task 740 ERROR (Worker died): paddle.trunc(input=Tensor([6, 6, 19884108, 6],"float16"), )
2025-05-21 01:07:26.172238 Task 741 ERROR (Worker died): paddle.trunc(input=Tensor([6, 6, 6, 19884108],"float16"), )
2025-05-21 01:08:21.230187 Task 743 ERROR (Worker died): paddle.trunc(Tensor([10, 228170138, 1],"float32"), )
2025-05-21 01:08:31.242275 Task 742 ERROR (Worker died): paddle.trunc(Tensor([10, 20, 11408507],"float32"), )
2025-05-21 01:09:16.290274 Task 744 ERROR (Worker died): paddle.trunc(Tensor([114085069, 20, 1],"float32"), )
2025-05-21 01:09:46.322180 Task 746 ERROR (Worker died): paddle.trunc(Tensor([20, 114085069],"float32"), )
2025-05-21 01:10:06.345251 Task 745 ERROR (Worker died): paddle.trunc(Tensor([114085069, 20],"float32"), )
2025-05-21 01:10:46.388223 Task 747 ERROR (Worker died): paddle.unique_consecutive(x=Tensor([570425345, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
2025-05-21 01:18:23.633223 Task 749 SUCCESS: paddle.var(Tensor([1, 107374183, 4, 10],"float16"), list[1,2,], True, False, )
2025-05-21 01:18:45.359207 Task 750 SUCCESS: paddle.var(Tensor([1, 3, 143165577, 10],"float16"), 2, True, False, )
2025-05-21 01:20:35.469908 Task 724 TIMEOUT: paddle.Tensor.nansum(Tensor([477218589, 3, 3],"float16"), axis=-1, )
2025-05-21 01:21:32.970360 Task 748 SUCCESS: paddle.var(Tensor([1, 107374183, 4, 10],"float16"), 2, True, False, )
2025-05-21 01:23:06.139880 Task 754 SUCCESS: paddle.var(Tensor([16, 142606337, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:26:29.760989 Task 751 SUCCESS: paddle.var(Tensor([1, 3, 143165577, 10],"float16"), list[1,2,], True, False, )
2025-05-21 01:27:56.447983 Task 756 SUCCESS: paddle.var(Tensor([16, 32, 4456449, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:29:19.082677 Task 757 SUCCESS: paddle.var(Tensor([16, 8, 17825793, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:30:24.204792 Task 752 SUCCESS: paddle.var(Tensor([1, 3, 4, 357913942],"float16"), 2, True, False, )
2025-05-21 01:31:11.596176 Task 755 SUCCESS: paddle.var(Tensor([16, 268435457],"float16"), axis=-1, keepdim=True, )
2025-05-21 01:31:56.592399 Task 759 SUCCESS: paddle.var(Tensor([19014179, 3, 4, 10],"float32"), list[1,3,], True, False, )
2025-05-21 01:32:20.081625 Task 753 SUCCESS: paddle.var(Tensor([1, 3, 4, 357913942],"float16"), list[1,2,], True, False, )
2025-05-21 01:32:43.428272 Task 760 SUCCESS: paddle.var(Tensor([192, 11883862, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:33:26.025965 Task 761 SUCCESS: paddle.var(Tensor([192, 48, 1, 247581],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:33:51.272586 Task 762 SUCCESS: paddle.var(Tensor([192, 48, 247581, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:34:13.228895 Task 763 SUCCESS: paddle.var(Tensor([192, 96, 1, 123791],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:34:52.866340 Task 764 SUCCESS: paddle.var(Tensor([192, 96, 123791, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
2025-05-21 01:43:31.341499 Task 758 SUCCESS: paddle.var(Tensor([16777217, 256],"float16"), axis=-1, keepdim=True, )
2025-05-21 01:45:24.080081 Task 765 SUCCESS: paddle.var(Tensor([35791395, 3, 4, 10],"float16"), 2, True, False, )
2025-05-21 01:45:55.960331 Task 766 SUCCESS: paddle.var(Tensor([35791395, 3, 4, 10],"float16"), list[1,2,], True, False, )
2025-05-21 01:47:23.919425 Task 770 SUCCESS: paddle.var(x=Tensor([13, 175515491, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
2025-05-21 01:47:44.974964 Task 767 SUCCESS: paddle.var(Tensor([35791395, 3, 4, 10],"float16"), list[1,3,], False, False, )
2025-05-21 01:48:50.071428 Task 771 SUCCESS: paddle.var(x=Tensor([16, 142606337, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
2025-05-21 01:49:13.918455 Task 772 SUCCESS: paddle.var(x=Tensor([16, 71303169, 2],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
2025-05-21 01:50:15.411949 Task 773 SUCCESS: paddle.var(x=Tensor([2, 570425345, 2],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
2025-05-21 01:56:35.768081 Task 768 SUCCESS: paddle.var(Tensor([35791395, 3, 4, 10],"float16"), list[1,3,], True, False, )
2025-05-21 01:58:31.869457 Task 769 SUCCESS: paddle.var(Tensor([35791395, 3, 4, 10],"float16"), tuple(1,3,), True, False, )
2025-05-21 02:01:15.165791 Task 774 SUCCESS: paddle.var(x=Tensor([3, 3, 477218589],"float16"), axis=0, )
2025-05-21 02:02:45.231850 Task 775 SUCCESS: paddle.var(x=Tensor([3, 3, 477218589],"float16"), axis=0, unbiased=False, )
2025-05-21 02:08:10.593894 Task 776 SUCCESS: paddle.var(x=Tensor([3, 3, 477218589],"float16"), axis=list[0,1,], )
2025-05-21 02:10:07.411613 Task 777 SUCCESS: paddle.var(x=Tensor([3, 3, 477218589],"float16"), axis=tuple(0,1,), )
2025-05-21 02:12:46.785045 Task 778 SUCCESS: paddle.var(x=Tensor([3, 3, 477218589],"float16"), axis=tuple(0,1,), keepdim=True, )
2025-05-21 02:14:56.311777 Task 779 SUCCESS: paddle.var(x=Tensor([3, 477218589, 3],"float16"), axis=0, )
2025-05-21 02:18:17.664611 Task 781 SUCCESS: paddle.var(x=Tensor([3, 477218589, 3],"float16"), axis=list[0,1,], )
2025-05-21 02:20:51.813002 Task 780 SUCCESS: paddle.var(x=Tensor([3, 477218589, 3],"float16"), axis=0, unbiased=False, )
2025-05-21 02:20:55.231747 Task 782 SUCCESS: paddle.var(x=Tensor([3, 477218589, 3],"float16"), axis=tuple(0,1,), )
2025-05-21 02:23:05.794350 Task 783 SUCCESS: paddle.var(x=Tensor([3, 477218589, 3],"float16"), axis=tuple(0,1,), keepdim=True, )
2025-05-21 02:26:24.183775 Task 784 SUCCESS: paddle.var(x=Tensor([477218589, 3, 3],"float16"), axis=0, )
2025-05-21 02:28:57.989099 Task 785 SUCCESS: paddle.var(x=Tensor([477218589, 3, 3],"float16"), axis=0, unbiased=False, )
2025-05-21 02:29:01.158017 Task 786 SUCCESS: paddle.var(x=Tensor([477218589, 3, 3],"float16"), axis=list[0,1,], )
2025-05-21 02:31:14.423955 Task 787 SUCCESS: paddle.var(x=Tensor([477218589, 3, 3],"float16"), axis=tuple(0,1,), )
2025-05-21 02:34:33.239733 Task 788 SUCCESS: paddle.var(x=Tensor([477218589, 3, 3],"float16"), axis=tuple(0,1,), keepdim=True, )
2025-05-21 02:34:33.977219 Summary: 540 success, 236 error, 13 timeout.
