paddle.bernoulli(Tensor([100, 1000],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), p=0.3917133774091194, )
paddle.bernoulli(Tensor([32, 1024, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float64"), )
paddle.binomial(Tensor([32, 3, 1024, 768],"float32"), Tensor([],"float32"), )
paddle.dot(Tensor([0, 0],"float32"), Tensor([0, 0],"float32"), )
paddle.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.empty(list[], )
paddle.empty(list[1,], )
paddle.empty(list[10,], Dtype(float16), )
paddle.empty(list[128,], dtype=Dtype(int64), )
paddle.empty(list[13,], dtype="int64", )
paddle.empty(list[16,16,16,16,], dtype="float32", )
paddle.empty(list[2,2,], dtype="float32", )
paddle.empty(list[2,2,3,], "float32", )
paddle.empty(list[2,3,3,], "float32", )
paddle.empty(list[20,], )
paddle.empty(list[24,], dtype="int64", )
paddle.empty(list[4,2,], dtype="float32", )
paddle.empty(list[40,], dtype="float32", )
paddle.empty(list[5,1,], dtype=Dtype(float32), )
paddle.empty(list[5,2,], dtype=Dtype(float32), )
paddle.empty(list[5,3,], dtype=Dtype(float32), )
paddle.empty(list[5,4,], dtype=Dtype(float32), )
paddle.empty(list[5,5,], dtype=Dtype(float32), )
paddle.empty(list[5,6,], dtype=Dtype(float32), )
paddle.empty(list[5,7,], dtype=Dtype(float32), )
paddle.empty(list[5,8,], dtype=Dtype(float32), )
paddle.empty(list[512,768,], dtype="float64", )
paddle.empty(list[6,], )
paddle.empty(list[8,], dtype="int64", )
paddle.empty(list[8,], dtype=Dtype(int64), )
paddle.empty(shape=list[100,50,50,], dtype="float32", )
paddle.empty(shape=list[2,1,], dtype="float32", )
paddle.empty(shape=list[2,1,128,], dtype="float32", )
paddle.empty(shape=list[2,1,16,], dtype="float32", )
paddle.empty(shape=list[2,2,], )
paddle.empty(shape=list[2,384,1,1,], dtype="float32", )
paddle.empty(shape=list[2,4,8,8,], )
paddle.empty(shape=list[2,4,8,8,8,], )
paddle.empty(shape=list[2,8,], dtype="int64", )
paddle.empty(shape=list[2,8,16,], dtype="float32", )
paddle.empty(shape=list[2000,], dtype=Dtype(int64), )
paddle.empty(shape=list[3,3,], )
paddle.empty(shape=list[3,3,], dtype="int32", )
paddle.empty(shape=list[4,1,8,], dtype="float32", )
paddle.empty(shape=list[50,50,50,], dtype="float32", )
paddle.empty(shape=list[8,8,], dtype="float32", )
paddle.empty(shape=tuple(1,200,), )
paddle.empty(shape=tuple(2,3,6,10,), )
paddle.empty(shape=tuple(200,1,), )
paddle.empty(tuple(1,128,), )
paddle.empty(tuple(1,16,128,), )
paddle.empty(tuple(1,2,), )
paddle.empty(tuple(16,128,), )
paddle.empty(tuple(4,10,), )
paddle.empty(tuple(4,4,), )
paddle.empty_like(Tensor([1, 10, 5],"float32"), )
paddle.empty_like(Tensor([10, 1000],"bfloat16"), )
paddle.empty_like(Tensor([10, 1000],"bool"), )
paddle.empty_like(Tensor([10, 1000],"float16"), )
paddle.empty_like(Tensor([10, 1000],"float32"), )
paddle.empty_like(Tensor([10, 1000],"float64"), )
paddle.empty_like(Tensor([10, 1000],"int32"), )
paddle.empty_like(Tensor([10, 1000],"int64"), )
paddle.empty_like(Tensor([100, 200],"float32"), )
paddle.empty_like(Tensor([11, 20],"float32"), )
paddle.empty_like(Tensor([1500],"bool"), )
paddle.empty_like(Tensor([16, 16, 128],"float64"), )
paddle.empty_like(Tensor([180142],"uint8"), )
paddle.empty_like(Tensor([2, 2],"float32"), )
paddle.empty_like(Tensor([200, 200],"float32"), )
paddle.empty_like(Tensor([256, 128],"float64"), )
paddle.empty_like(Tensor([34, 13],"float32"), )
paddle.empty_like(Tensor([4, 20, 20],"float16"), )
paddle.empty_like(Tensor([4, 5, 20],"float32"), )
paddle.empty_like(Tensor([50, 200],"float32"), )
paddle.empty_like(Tensor([8, 16, 2],"float32"), )
paddle.full_like(Tensor([114, 1],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([114],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([144],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([400, 1],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([400],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([5],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([91, 1],"float64"), 1.7976931348623157e+308, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float16"), Tensor([2, 1024, 1, 1],"float16"), p=0.5, training=True, mode="downscale_in_infer", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float16"), Tensor([2, 1024, 1, 1],"float16"), p=0.5, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float16"), Tensor([2, 1024, 1, 1],"float16"), p=0.9, training=True, mode="downscale_in_infer", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float16"), Tensor([2, 1024, 1, 1],"float16"), p=0.9, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float32"), Tensor([2, 1024, 1, 1],"float32"), p=0.5, training=True, mode="downscale_in_infer", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float32"), Tensor([2, 1024, 1, 1],"float32"), p=0.5, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float32"), Tensor([2, 1024, 1, 1],"float32"), p=0.9, training=True, mode="downscale_in_infer", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float32"), Tensor([2, 1024, 1, 1],"float32"), p=0.9, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float64"), Tensor([2, 1024, 1, 1],"float64"), p=0.5, training=True, mode="downscale_in_infer", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float64"), Tensor([2, 1024, 1, 1],"float64"), p=0.5, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float64"), Tensor([2, 1024, 1, 1],"float64"), p=0.9, training=True, mode="downscale_in_infer", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 1, 1],"float64"), Tensor([2, 1024, 1, 1],"float64"), p=0.9, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 1024, 2, 1],"float16"), Tensor([2, 1024, 2, 1],"float16"), p=0.5, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 80, 8, 2],"float16"), Tensor([2, 80, 8, 2],"float16"), p=0.5, training=True, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([2, 80, 8, 2],"float16"), Tensor([2, 80, 8, 2],"float16"), p=0.5, training=True, mode="upscale_in_train", name=None, )
paddle.log_normal(0.0, 0.5, list[1000,], )
paddle.log_normal(0.0, Tensor([1000, 2],"float64"), None, )
paddle.log_normal(shape=list[1,2,3,], )
paddle.log_normal(Tensor([1000, 2],"float64"), 0.5, None, )
paddle.log_normal(Tensor([1000, 2],"float64"), Tensor([1000, 2],"float64"), None, )
paddle.multinomial(Tensor([1000],"float64"), num_samples=100, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 1, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 20000, replacement=True, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 5000, replacement=False, )
paddle.multinomial(Tensor([3, 10000],"float32"), )
paddle.multinomial(Tensor([3, 4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([4],"float32"), num_samples=10, replacement=True, )
paddle.multinomial(Tensor([4],"float64"), num_samples=100000, replacement=True, )
paddle.nn.functional.binary_cross_entropy(Tensor([20, 30],"float64"), Tensor([20, 30],"float64"), None, "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([20, 30],"float64"), Tensor([20, 30],"float64"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 30],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.class_center_sample(Tensor([10],"int32"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([10],"int64"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([20],"int32"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.class_center_sample(Tensor([20],"int64"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.dropout(Tensor([],"float32"), )
paddle.nn.functional.dropout(Tensor([1, 10],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 128],"float32"), 0.6, )
paddle.nn.functional.dropout(Tensor([1, 6, 8],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([1, 9, 6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([10, 1],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=0.5, training=True, )
paddle.nn.functional.dropout(Tensor([128, 128],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([16, 2048, 1, 1],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([16, 64, 128, 128],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 64, 128, 128],"float32"), p=0.6, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 10],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 2, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 12],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 128, 60],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 7, 9, 3],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 8, 8],"float32"), 0.2, )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 2],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 2],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 20],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 20],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 32, 32],"float32"), p=0.35, )
paddle.nn.functional.dropout(Tensor([3, 32, 32],"float32"), p=0.35, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([300, 4096],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([32, 4, 2048],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 4, 512],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 8, 4, 4],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([512, 512],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 140, 2],"float32"), p=0.1, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 140],"float32"), p=0.1, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([6, 9, 6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([8, 2048, 1, 1],"float32"), p=0.5, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([8, 6, 8],"float32"), p=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.gumbel_softmax(Tensor([2, 3, 4, 5],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=False, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=True, )
paddle.nn.functional.linear(x=Tensor([8, 12, 8],"float32"), weight=Tensor([8, 1000],"float32"), bias=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, fastemit_lambda=0.0, reduction="none", name=None, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, reduction="mean", fastemit_lambda=0.0, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, reduction="sum", fastemit_lambda=0.0, )
paddle.Tensor.squeeze(Tensor([0, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([128, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([28, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([3, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([30, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([32, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([38, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([4, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([4, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([5, 1],"int64"), )
paddle.Tensor.squeeze(Tensor([8, 1],"float32"), )
paddle.put_along_axis(Tensor([64, 1327104],"float32"), Tensor([64, 1327104],"int64"), Tensor([64, 1327104],"float32"), 1, )
