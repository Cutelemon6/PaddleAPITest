2025-03-03 11:03:19.448416 test begin: paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, )

W0303 11:04:45.320232 57613 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:04:45.321761 57613 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 1, 4194304], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:04:45.403987 test begin: paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 1, 4194304], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:03.682832 test begin: paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 4194304, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:25.752028 test begin: paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 4194304, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:44.130629 test begin: paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 119304648, 6, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:05.094924 test begin: paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 119304648, 6, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:27.740846 test begin: paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 44739243, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:49.453658 test begin: paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 44739243, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:07:07.357050 test begin: paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 5, 53687092], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:07:26.160710 test begin: paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 5, 53687092], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:07:51.235564 test begin: paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 53687092, 5], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:11.693390 test begin: paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 53687092, 5], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:32.854162 test begin: paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 6, 44739243], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:53.897345 test begin: paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 6, 44739243], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:18.653864 test begin: paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 171798692, 5, 5], X's size = 4294967300, 'shape' is [1, 4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:40.092047 test begin: paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 171798692, 5, 5], X's size = 4294967300, 'shape' is [1, 4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:00.634046 test begin: paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 1, 2097152], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:23.606617 test begin: paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 1, 2097152], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:49.193280 test begin: paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 2097152, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:11:12.046313 test begin: paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 2097152, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:11:32.648106 test begin: paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 1, 8388608], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:11:52.887431 test begin: paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 1, 8388608], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:12:19.034170 test begin: paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 8388608, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:12:38.076849 test begin: paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 8388608, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:01.207784 test begin: paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 7, 76695845], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:19.467157 test begin: paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 7, 76695845], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:42.473066 test begin: paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 76695845, 7], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:10.392620 test begin: paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 76695845, 7], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:39.341706 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:01.433318 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:29.526344 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:48.571225 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:16:10.785635 test begin: paddle.flatten(Tensor([1073741824, 4],"float16"), )

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float16"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:34.674092 test begin: paddle.flatten(Tensor([1073741824, 4],"float16"), ) 

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float16"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:41.872415 test begin: paddle.flatten(Tensor([1073741824, 4],"float32"), )

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:08.498536 test begin: paddle.flatten(Tensor([1073741824, 4],"float32"), ) 

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:34.071931 test begin: paddle.flatten(Tensor([107374183, 4, 5],"float64"), )

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:04.736417 test begin: paddle.flatten(Tensor([107374183, 4, 5],"float64"), ) 

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:22.448964 test begin: paddle.flatten(Tensor([107374183, 4, 5],"int64"), )

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:22.872606 test begin: paddle.flatten(Tensor([107374183, 4, 5],"int64"), ) 

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:34.305429 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:55.016990 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:14.034325 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:31.226240 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:47.940744 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:05.638148 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:25.704862 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:42.696133 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:00.185604 test begin: paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:22.306095 test begin: paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:43.692901 test begin: paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:25:03.752488 test begin: paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:04:38.640227 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:04:56.489920 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:05:13.804823 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:05:33.821326 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:05:58.104640 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:06:14.118921 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:06:31.111607 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:06:48.578192 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:07:12.227279 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:07:29.062455 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:07:51.932086 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:10.876355 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:30.517169 test begin: paddle.flatten(Tensor([2, 2147483648],"bfloat16"), )

[paddle error] paddle.flatten(Tensor([2, 2147483648],"bfloat16"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:52.075669 test begin: paddle.flatten(Tensor([2, 2147483648],"bfloat16"), ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648],"bfloat16"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:10.974775 test begin: paddle.flatten(Tensor([2, 2147483648],"float32"), )

[paddle error] paddle.flatten(Tensor([2, 2147483648],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:30.950339 test begin: paddle.flatten(Tensor([2, 2147483648],"float32"), ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:48.471578 test begin: paddle.flatten(Tensor([2, 2147483648],"int32"), )

[paddle error] paddle.flatten(Tensor([2, 2147483648],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:40.361042 test begin: paddle.flatten(Tensor([2, 2147483648],"int32"), ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:51.315291 test begin: paddle.flatten(Tensor([2, 214748365, 5],"float64"), )

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:14.567080 test begin: paddle.flatten(Tensor([2, 214748365, 5],"float64"), ) 

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:34.030906 test begin: paddle.flatten(Tensor([2, 214748365, 5],"int64"), )

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:13:38.032842 test begin: paddle.flatten(Tensor([2, 214748365, 5],"int64"), ) 

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:13:53.350744 test begin: paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:14:17.363741 test begin: paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:14:44.317694 test begin: paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483641], shape[1] = -2147483641.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483641 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:15:06.772152 test begin: paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483641], shape[1] = -2147483641.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483641 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:15:26.184992 test begin: paddle.flatten(Tensor([2, 4, 268435457],"float64"), )

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:15:49.490448 test begin: paddle.flatten(Tensor([2, 4, 268435457],"float64"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:07.594038 test begin: paddle.flatten(Tensor([2, 4, 268435457],"int64"), )

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:30.164247 test begin: paddle.flatten(Tensor([2, 4, 268435457],"int64"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:45.815056 test begin: paddle.flatten(Tensor([2, 4, 536870912],"float32"), )

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:08.026256 test begin: paddle.flatten(Tensor([2, 4, 536870912],"float32"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:23.946501 test begin: paddle.flatten(Tensor([2, 4, 536870912],"int32"), )

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:48.164666 test begin: paddle.flatten(Tensor([2, 4, 536870912],"int32"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:04.526236 test begin: paddle.flatten(Tensor([2, 429496730, 5],"float32"), )

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:21.084389 test begin: paddle.flatten(Tensor([2, 429496730, 5],"float32"), ) 

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:43.435084 test begin: paddle.flatten(Tensor([2, 429496730, 5],"int32"), )

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:55.062236 test begin: paddle.flatten(Tensor([2, 429496730, 5],"int32"), ) 

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:19:10.916548 test begin: paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483643], shape[1] = -2147483643.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483643 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:30.335532 test begin: paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483643], shape[1] = -2147483643.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483643 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:49.673021 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:08.522037 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:26.388111 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:42.637249 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:01.734924 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:17.693615 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:36.788184 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:54.514228 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:12.865766 test begin: paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483632], shape[1] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:33.362260 test begin: paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483632], shape[1] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:53.256864 test begin: paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:10.585145 test begin: paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:29.597970 test begin: paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:50.146653 test begin: paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:05.834082 test begin: paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483646], shape[1] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:24.230245 test begin: paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483646], shape[1] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:04:33.340805 test begin: paddle.flatten(Tensor([214748365, 4, 5],"float32"), )

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:04:56.699955 test begin: paddle.flatten(Tensor([214748365, 4, 5],"float32"), ) 

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:19.129818 test begin: paddle.flatten(Tensor([214748365, 4, 5],"int32"), )

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:28.737918 test begin: paddle.flatten(Tensor([214748365, 4, 5],"int32"), ) 

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:50.017311 test begin: paddle.flatten(Tensor([268435457, 4, 2],"float64"), )

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:18.248532 test begin: paddle.flatten(Tensor([268435457, 4, 2],"float64"), ) 

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:39.357288 test begin: paddle.flatten(Tensor([268435457, 4, 2],"int64"), )

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:09:50.319183 test begin: paddle.flatten(Tensor([268435457, 4, 2],"int64"), ) 

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:10:08.385055 test begin: paddle.flatten(Tensor([3, 357913942, 2],"float64"), )

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:10:30.374350 test begin: paddle.flatten(Tensor([3, 357913942, 2],"float64"), ) 

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:10:53.283081 test begin: paddle.flatten(Tensor([3, 357913942, 2],"int64"), )

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:11:14.957713 test begin: paddle.flatten(Tensor([3, 357913942, 2],"int64"), ) 

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:11:33.292504 test begin: paddle.flatten(Tensor([3, 4, 178956971],"float64"), )

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:11:52.804257 test begin: paddle.flatten(Tensor([3, 4, 178956971],"float64"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:12.976399 test begin: paddle.flatten(Tensor([3, 4, 178956971],"int64"), )

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:33.552292 test begin: paddle.flatten(Tensor([3, 4, 178956971],"int64"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:51.729963 test begin: paddle.flatten(Tensor([3, 4, 357913942],"float32"), )

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:13.607458 test begin: paddle.flatten(Tensor([3, 4, 357913942],"float32"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:36.504094 test begin: paddle.flatten(Tensor([3, 4, 357913942],"int32"), )

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:11.331639 test begin: paddle.flatten(Tensor([3, 4, 357913942],"int32"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:33.681808 test begin: paddle.flatten(Tensor([3, 715827883, 2],"float32"), )

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:56.374786 test begin: paddle.flatten(Tensor([3, 715827883, 2],"float32"), ) 

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:25.731069 test begin: paddle.flatten(Tensor([3, 715827883, 2],"int32"), )

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:43.065758 test begin: paddle.flatten(Tensor([3, 715827883, 2],"int32"), ) 

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:16:02.646021 test begin: paddle.flatten(Tensor([3, 715827883],"float64"), )

[paddle error] paddle.flatten(Tensor([3, 715827883],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483647], shape[0] = -2147483647.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483647 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:30.261017 test begin: paddle.flatten(Tensor([3, 715827883],"float64"), ) 

[paddle error] paddle.flatten(Tensor([3, 715827883],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483647], shape[0] = -2147483647.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483647 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:53.577926 test begin: paddle.flatten(Tensor([4, 7, 76695845],"float64"), )

[paddle error] paddle.flatten(Tensor([4, 7, 76695845],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:17:13.835291 test begin: paddle.flatten(Tensor([4, 7, 76695845],"float64"), ) 

[paddle error] paddle.flatten(Tensor([4, 7, 76695845],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:17:32.476966 test begin: paddle.flatten(Tensor([4, 89478486, 6],"float64"), )

[paddle error] paddle.flatten(Tensor([4, 89478486, 6],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483632], shape[0] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:17:53.088600 test begin: paddle.flatten(Tensor([4, 89478486, 6],"float64"), ) 

[paddle error] paddle.flatten(Tensor([4, 89478486, 6],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483632], shape[0] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:18:15.194358 test begin: paddle.flatten(Tensor([5, 429496730],"float64"), )

[paddle error] paddle.flatten(Tensor([5, 429496730],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:18:33.742460 test begin: paddle.flatten(Tensor([5, 429496730],"float64"), ) 

[paddle error] paddle.flatten(Tensor([5, 429496730],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:18:58.510277 test begin: paddle.flatten(Tensor([51130564, 7, 6],"float64"), )

[paddle error] paddle.flatten(Tensor([51130564, 7, 6],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483608], shape[0] = -2147483608.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483608 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:21.349923 test begin: paddle.flatten(Tensor([51130564, 7, 6],"float64"), ) 

[paddle error] paddle.flatten(Tensor([51130564, 7, 6],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483608], shape[0] = -2147483608.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483608 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:41.171603 test begin: paddle.flatten(Tensor([536870912, 4, 2],"float32"), )

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:20:05.637354 test begin: paddle.flatten(Tensor([536870912, 4, 2],"float32"), ) 

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:20:28.197053 test begin: paddle.flatten(Tensor([536870912, 4, 2],"int32"), )

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:20:51.041913 test begin: paddle.flatten(Tensor([536870912, 4, 2],"int32"), ) 

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:21:13.613186 test begin: paddle.flatten(Tensor([536870913, 4],"float64"), )

[paddle error] paddle.flatten(Tensor([536870913, 4],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:44.199247 test begin: paddle.flatten(Tensor([536870913, 4],"float64"), ) 

[paddle error] paddle.flatten(Tensor([536870913, 4],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:05.429426 test begin: paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), )

[paddle error] paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:22:30.531867 test begin: paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), ) 

[paddle error] paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:03:35.400790 test begin: paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), )

W0303 11:04:44.593679 58204 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:04:44.594627 58204 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:44.609715 test begin: paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), ) 

[paddle error] paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:46.335783 test begin: paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), )

[paddle error] paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:48.999623 test begin: paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), ) 

[paddle error] paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:50.684888 test begin: paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, )

[paddle error] paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:06:10.377575 test begin: paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, ) 

[paddle error] paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:06:18.635778 test begin: paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, )

[paddle error] paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, ) 
 (InvalidArgument) The expanded size (-1) for non-existing dimensions must be positive for expand_v2 op.
  [Hint: Expected expand_shape[i] >= 0, but received expand_shape[i]:-1 < 0:0.] (at ../paddle/phi/kernels/gpu/expand_kernel.cu:45)

2025-03-03 11:07:55.489709 test begin: paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, ) 

[paddle error] paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, )  
 (InvalidArgument) The expanded size (-1) for non-existing dimensions must be positive for expand_v2 op.
  [Hint: Expected expand_shape[i] >= 0, but received expand_shape[i]:-1 < 0:0.] (at ../paddle/phi/kernels/gpu/expand_kernel.cu:45)

2025-03-03 11:08:12.597788 test begin: paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )

[paddle error] paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:08:30.889760 test begin: paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 

[paddle error] paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:08:43.987851 test begin: paddle.maximum(Tensor([1],"float64"), Tensor([2147483649],"float64"), )

[paddle error] paddle.maximum(Tensor([1],"float64"), Tensor([2147483649],"float64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:10:20.996099 test begin: paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), )

[paddle error] paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:10:41.580043 test begin: paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), ) 

[paddle error] paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:10:57.987128 test begin: paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:11:14.255770 test begin: paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 

[paddle error] paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:11:36.386880 test begin: paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )

[paddle error] paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:11:48.924123 test begin: paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 

[paddle error] paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:12:01.479309 test begin: paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:12:28.626697 test begin: paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 

[paddle error] paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:13:07.187778 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:17.948707 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:39.521675 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:51.872458 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:59.677463 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:13.619241 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:22.936875 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:33.634322 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:45.863618 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:02.595974 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:15.701105 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:30.128777 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:43.778302 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:53.463927 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:26.697764 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:38.789926 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:07.499675 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:17.158257 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:43.390175 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:51.746756 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:06.288168 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:14.297306 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:21.279426 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:35.190751 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:47.778536 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:59.354231 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:20:34.512575 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:20:48.767280 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:01.702290 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:13.583871 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:22.420871 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:28.962521 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:40.803982 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:53.666790 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:00.192429 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:08.957612 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:16.210984 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:25.342213 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:33.328835 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:40.364609 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:47.370335 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:00.849549 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:03:40.059407 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, )

W0303 11:04:55.074301 58332 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:04:55.075467 58332 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:04:55.148537 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:08.039487 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:17.466022 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:26.874002 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:37.395225 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:22.268853 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:57.045907 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, )

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:05.932199 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, ) 

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:16.251030 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, )

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:26.594375 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, ) 

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:39.161851 test begin: paddle.nanmean(Tensor([4294967295],"float32"), axis=0, )

[paddle error] paddle.nanmean(Tensor([4294967295],"float32"), axis=0, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:49.542528 test begin: paddle.nanmean(Tensor([4294967295],"float32"), axis=0, ) 

[paddle error] paddle.nanmean(Tensor([4294967295],"float32"), axis=0, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:01.084921 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:15.571599 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:30.625343 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:41.355186 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:56.509883 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:08.310296 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:18.381518 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:29.213150 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:40.845112 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:53.213588 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:06.192986 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:19.646780 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:31.114570 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, )

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:42.377141 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, ) 

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:55.429125 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, )

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:08.863087 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, ) 

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:51.142941 test begin: paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, )

[paddle error] paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:18:27.849822 test begin: paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:18:46.959464 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, )

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:19:06.338135 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:19:27.739211 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, )

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:19:47.838418 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:20:10.318609 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, )

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:20:27.445349 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:20:48.850111 test begin: paddle.std(Tensor([4294967295],"float32"), )

[paddle error] paddle.std(Tensor([4294967295],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:21:01.766672 test begin: paddle.std(Tensor([4294967295],"float32"), ) 

[paddle error] paddle.std(Tensor([4294967295],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:21:11.500124 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:07.151048 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:14.316106 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:18.319540 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:21.326135 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:32.191113 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:04:32.962078 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=False, ) 

W0303 11:06:44.576926 59906 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:06:44.578033 59906 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:44.690981 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:48.316384 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:51.506095 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:08.350464 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:17.809469 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[0,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[0,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:21.082288 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:31.487165 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:41.129331 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:44.398799 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:47.408220 test begin: paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:04.616099 test begin: paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:18.033306 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:30.569334 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:41.322713 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:50.955726 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:58.888869 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:02.347639 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:06.567988 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:09.733433 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:13.382162 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:19.333997 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:28.991288 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:32.144435 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:36.262879 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:41.944020 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:47.999340 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:58.074251 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:06.750550 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:10.151469 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:13.268742 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:18.071857 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:23.359634 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:26.467815 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:29.323577 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:33.582196 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:37.521854 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:39.994032 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:42.956510 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:45.891939 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:48.879285 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:51.931236 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:54.842897 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:57.973724 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:00.958085 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:05.646138 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:09.285175 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:12.050235 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:14.944989 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:18.302038 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:31.110332 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:40.294569 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:50.296305 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:54.836356 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:58.323418 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:02.332419 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:07.128833 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:09.669023 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:12.921557 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:19.302369 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:27.457836 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:30.659416 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:33.863324 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:37.381556 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:41.059879 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:45.470134 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:48.637498 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:53.403782 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:56.517353 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:01.612339 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:06.103535 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:09.498853 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:13.687510 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:24.760146 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:33.732997 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:37.798238 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:03:48.773735 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, )

W0303 11:05:48.095377 58796 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:05:48.096498 58796 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:48.130840 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:51.113664 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:53.975986 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:57.032267 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:00.317925 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:03.309897 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:07.514398 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:12.402146 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:18.552303 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:26.559469 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:35.312149 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:40.755433 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:46.573188 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:01.071348 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:10.011060 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:19.319908 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:30.688076 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:43.515412 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:54.227301 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:03.553519 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:14.108329 test begin: paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:21.837876 test begin: paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:31.379244 test begin: paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:40.946973 test begin: paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:50.601936 test begin: paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:10:01.439425 test begin: paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:10:09.708804 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), )

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:58.321912 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:18.078364 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:36.256116 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), ) 

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:48.144693 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:57.258250 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), ) 

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:07.629999 test begin: paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:12:21.138511 test begin: paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:12:30.353638 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), )

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:39.764429 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), ) 

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:01.107385 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:11.656161 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), ) 

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:22.560423 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:32.913496 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), ) 

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:43.236185 test begin: paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:54.386041 test begin: paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:05.671565 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:09.495228 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:13.691252 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:17.532167 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:20.802882 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:44.198608 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:06.700943 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:26.143426 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:42.275159 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:52.215205 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:03.528950 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:23.190788 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:40.500542 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:50.405619 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:13.728377 test begin: paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:17:26.712188 test begin: paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:03:57.322331 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), ) 

W0303 11:05:48.480216 59158 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:05:48.481348 59158 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:48.526244 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, )

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:58.375956 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, ) 

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:09.782608 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:19.641887 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), ) 

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:30.244763 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:40.546406 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), ) 

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:49.285864 test begin: paddle.sum(Tensor([4294967295],"bool"), axis=list[0,], keepdim=False, )

[paddle error] paddle.sum(Tensor([4294967295],"bool"), axis=list[0,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:50.004256 test begin: paddle.sum(Tensor([4294967295],"int32"), )

[paddle error] paddle.sum(Tensor([4294967295],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:00.263283 test begin: paddle.sum(Tensor([4294967295],"int32"), ) 

[paddle error] paddle.sum(Tensor([4294967295],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:10.356416 test begin: paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:27.769734 test begin: paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:41.049564 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:53.137524 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:06.242732 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, )

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:34.359277 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:16.275443 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:26.399811 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:34.855441 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:44.066302 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:52.791734 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:58.112330 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:01.442769 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:05.304868 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:08.767189 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:15.758459 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:22.469686 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:26.060377 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:28.582922 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:31.939940 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:35.619064 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:44.079928 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:53.419635 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:57.085423 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:00.924795 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:04.056530 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:07.097912 test begin: paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:31.613546 test begin: paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:44.177417 test begin: paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:57.540757 test begin: paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:10.285335 test begin: paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:17.759028 test begin: paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:28.880300 test begin: paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:39.605138 test begin: paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:50.592247 test begin: paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:58.935916 test begin: paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:12.624183 test begin: paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:22.178674 test begin: paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:31.913755 test begin: paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:45.890050 test begin: paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:54.564379 test begin: paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:03.432890 test begin: paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:10.208719 test begin: paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:19.668350 test begin: paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:26.367370 test begin: paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:34.803005 test begin: paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:47.153766 test begin: paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:51.789324 test begin: paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:55.373954 test begin: paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

