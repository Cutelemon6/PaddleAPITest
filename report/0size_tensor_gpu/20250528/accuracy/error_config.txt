paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 128],"float32"), Tensor([1, 1, 128],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 16],"float32"), Tensor([1, 1, 16],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1],"float32"), Tensor([0, 1, 10285],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__add__(Tensor([0, 100],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.__add__(Tensor([0, 11, 256],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 12, 392, 392],"float32"), Tensor([0, 12, 1, 392, 392],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 12, 392, 392],"float32"), Tensor([1, 12, 1, 392, 392],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 24, 144, 144],"float32"), Tensor([0, 12, 1, 144, 144],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 24, 144, 144],"float32"), Tensor([1, 12, 1, 144, 144],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128, 128, 3, 3],"float32"), Tensor([1, 128, 128, 3, 3],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128, 256, 3, 3],"float32"), Tensor([1, 128, 256, 3, 3],"float32"), )
paddle.Tensor.__add__(Tensor([0, 18, 1, 5, 1, 2],"float32"), Tensor([0, 18, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 18, 1, 5, 1, 2],"float32"), Tensor([1, 18, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 192, 28, 28],"float32"), Tensor([192, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 192, 56, 56],"float32"), Tensor([192, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), Tensor([1001],"float32"), )
paddle.Tensor.__add__(Tensor([0, 21, 1, 5, 1, 2],"float32"), Tensor([0, 21, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 21, 1, 5, 1, 2],"float32"), Tensor([1, 21, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 22, 1, 5, 1, 2],"float32"), Tensor([0, 22, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 22, 1, 5, 1, 2],"float32"), Tensor([1, 22, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 256, 28, 28],"float32"), Tensor([256, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 12, 392, 392],"float32"), Tensor([1, 0, 1, 392, 392],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 128],"float32"), Tensor([1, 1, 128],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 16],"float32"), Tensor([1, 1, 16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 16],"float32"), Tensor([1, 16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1],"float32"), Tensor([1, 0, 10285],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 24, 144, 144],"float32"), Tensor([1, 0, 1, 144, 144],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 256],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 384],"float32"), Tensor([1, 384],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 512],"float32"), Tensor([1, 512],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0],"float16"), Tensor([10, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 27216, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 30324, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 33600, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 27216, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 30324, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 33600, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 27216, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 30324, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 33600, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 128],"float32"), Tensor([0, 1, 128],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 128],"float32"), Tensor([1, 0, 128],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 16],"float32"), Tensor([0, 1, 16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 16],"float32"), Tensor([1, 0, 16],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1],"float32"), Tensor([0, 1, 10285],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1],"float32"), Tensor([1, 0, 10285],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 384],"float32"), Tensor([0, 384],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 512],"float32"), Tensor([0, 512],"float32"), )
paddle.Tensor.__add__(Tensor([1, 100],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.__add__(Tensor([1, 10],"float16"), Tensor([0, 10],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 0, 144, 144],"float32"), Tensor([1, 12, 1, 144, 144],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 0, 392, 392],"float32"), Tensor([1, 12, 1, 392, 392],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 0, 392],"float32"), Tensor([1, 12, 1, 0, 392],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 0],"float32"), Tensor([1, 12, 1, 392, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 392],"float32"), Tensor([0, 12, 1, 392, 392],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 24, 0, 144],"float32"), Tensor([1, 12, 1, 0, 144],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 24, 144, 0],"float32"), Tensor([1, 12, 1, 144, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 24, 144, 144],"float32"), Tensor([0, 12, 1, 144, 144],"float32"), )
paddle.Tensor.__add__(Tensor([1, 128, 128, 3, 3],"float32"), Tensor([0, 128, 128, 3, 3],"float32"), )
paddle.Tensor.__add__(Tensor([1, 128, 256, 3, 3],"float32"), Tensor([0, 128, 256, 3, 3],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16, 0, 100],"float32"), Tensor([1, 100],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16, 0, 101],"float32"), Tensor([1, 101],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16, 0, 102],"float32"), Tensor([1, 102],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16, 1, 100],"float32"), Tensor([0, 100],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16, 1, 101],"float32"), Tensor([0, 101],"float32"), )
paddle.Tensor.__add__(Tensor([1, 16, 1, 102],"float32"), Tensor([0, 102],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 0, 5, 1, 2],"float32"), Tensor([1, 18, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 1, 0, 1, 2],"float32"), Tensor([1, 18, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 1, 5, 0, 2],"float32"), Tensor([1, 18, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 1, 5, 1, 0],"float32"), Tensor([1, 18, 8, 5, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 1, 5, 1, 2],"float32"), Tensor([0, 18, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 1, 5, 1, 2],"float32"), Tensor([1, 18, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 18, 1, 5, 1, 2],"float32"), Tensor([1, 18, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 0, 5, 1, 2],"float32"), Tensor([1, 21, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 1, 0, 1, 2],"float32"), Tensor([1, 21, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 1, 5, 0, 2],"float32"), Tensor([1, 21, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 1, 5, 1, 0],"float32"), Tensor([1, 21, 8, 5, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 1, 5, 1, 2],"float32"), Tensor([0, 21, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 1, 5, 1, 2],"float32"), Tensor([1, 21, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 21, 1, 5, 1, 2],"float32"), Tensor([1, 21, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 0, 5, 1, 2],"float32"), Tensor([1, 22, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 1, 0, 1, 2],"float32"), Tensor([1, 22, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 1, 5, 0, 2],"float32"), Tensor([1, 22, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 1, 5, 1, 0],"float32"), Tensor([1, 22, 8, 5, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 1, 5, 1, 2],"float32"), Tensor([0, 22, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 1, 5, 1, 2],"float32"), Tensor([1, 22, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 22, 1, 5, 1, 2],"float32"), Tensor([1, 22, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([124, 192, 0, 28],"float32"), Tensor([192, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 192, 0, 56],"float32"), Tensor([192, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 192, 28, 0],"float32"), Tensor([192, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 192, 56, 0],"float32"), Tensor([192, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 256, 0, 28],"float32"), Tensor([256, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 256, 28, 0],"float32"), Tensor([256, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([16, 1, 25, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([16, 1, 25, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([16, 2, 3, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([16, 2, 3, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 32],"float32"), Tensor([0, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 32],"float32"), Tensor([1, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 64],"float32"), Tensor([0, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 64],"float32"), Tensor([1, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 16384, 256],"float32"), Tensor([0, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 16384, 256],"float32"), Tensor([1, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 17, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 17, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([0, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([0, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([1, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([1, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 32],"float32"), Tensor([1, 0, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 32],"float32"), Tensor([1, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 64],"float32"), Tensor([1, 0, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 64],"float32"), Tensor([1, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 16384, 256],"float32"), Tensor([1, 0, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 16384, 256],"float32"), Tensor([1, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 2],"float64"), Tensor([1, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 2],"float64"), Tensor([1, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 256],"float32"), Tensor([1, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 64],"float32"), Tensor([1, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 32],"float32"), Tensor([0, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 32],"float32"), Tensor([1, 0, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 32],"float32"), Tensor([1, 1, 32, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 64],"float32"), Tensor([0, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 64],"float32"), Tensor([1, 0, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 64],"float32"), Tensor([1, 1, 64, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 256],"float32"), Tensor([0, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 256],"float32"), Tensor([1, 0, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 256],"float32"), Tensor([1, 1, 256, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 384],"float32"), Tensor([384, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 512],"float32"), Tensor([512, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 768],"float32"), Tensor([768, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 17, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 17, 2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 2, 2],"float64"), Tensor([0, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 2, 2],"float64"), Tensor([0, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 2, 2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.Tensor.__matmul__(Tensor([10, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([10, 768],"float32"), Tensor([768, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 4, 2, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 4, 2, 14],"float32"), Tensor([14, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1, 1, 1],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1, 1024],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1, 1024],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1, 10285],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1, 10285],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1, 10285],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 100],"complex128"), Tensor([1, 100],"float64"), )
paddle.Tensor.__mul__(Tensor([0, 100],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.__mul__(Tensor([0, 1024],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 10285, 4],"float32"), Tensor([10285, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 123904],"float32"), Tensor([1, 123904],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 128, 128, 3, 3],"float32"), Tensor([0, 128, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 128, 128, 3, 3],"float32"), Tensor([1, 128, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 128, 128, 3, 3],"float32"), Tensor([1, 128, 128, 3, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 17, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([0, 18, 8, 5, 4, 2],"float32"), Tensor([0, 18, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 18, 8, 5, 4, 2],"float32"), Tensor([1, 18, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1],"float32"), Tensor([2, 1, 102],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1],"float32"), Tensor([2, 1, 103],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 1],"float32"), Tensor([2, 1, 104],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 2, 1, 3, 1, 4],"float32"), Tensor([1, 2, 1, 3, 1, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 2, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__mul__(Tensor([0, 21, 8, 5, 4, 2],"float32"), Tensor([0, 21, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 21, 8, 5, 4, 2],"float32"), Tensor([1, 21, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 3, 8, 8],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 4, 10, 7],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 4, 10, 9],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 4, 2, 10],"float32"), Tensor([1, 2, 10],"float32"), )
paddle.Tensor.__mul__(Tensor([0, 4, 8, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 1024],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 1024],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 10285],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 10285],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 10285],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 128, 3, 3],"float32"), Tensor([1, 0, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 128, 3, 3],"float32"), Tensor([4, 0, 128, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0, 128, 3, 3],"float32"), Tensor([4, 1, 128, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1024],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1024],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1, 10285],"float32"), Tensor([0, 1, 10285],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1, 10285],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1, 10285],"float32"), Tensor([1, 0, 10285],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1, 10285],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 100],"complex128"), Tensor([0, 100],"float64"), )
paddle.Tensor.__mul__(Tensor([1, 100],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.__mul__(Tensor([1, 10285, 0],"float32"), Tensor([10285, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 123904],"float32"), Tensor([0, 123904],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 0, 3, 3],"float32"), Tensor([1, 128, 0, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 0, 3, 3],"float32"), Tensor([1, 128, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 0, 3, 3],"float32"), Tensor([4, 1, 0, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 0, 3],"float32"), Tensor([1, 128, 1, 0, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 0, 3],"float32"), Tensor([1, 128, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 0, 3],"float32"), Tensor([4, 1, 128, 0, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 0, 3],"float32"), Tensor([4, 1, 128, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 3, 0],"float32"), Tensor([1, 128, 1, 1, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 3, 0],"float32"), Tensor([1, 128, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 3, 0],"float32"), Tensor([4, 1, 128, 1, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 3, 0],"float32"), Tensor([4, 1, 128, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 3, 3],"float32"), Tensor([0, 128, 1, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 128, 128, 3, 3],"float32"), Tensor([0, 128, 128, 3, 3],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 0, 5, 4, 2],"float32"), Tensor([1, 18, 0, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 0, 5, 4, 2],"float32"), Tensor([1, 18, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 8, 0, 4, 2],"float32"), Tensor([1, 18, 1, 0, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 8, 5, 0, 2],"float32"), Tensor([1, 18, 1, 5, 0, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 8, 5, 0, 2],"float32"), Tensor([1, 18, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 8, 5, 4, 0],"float32"), Tensor([1, 18, 1, 5, 1, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 18, 8, 5, 4, 2],"float32"), Tensor([0, 18, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([0, 1, 102],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([0, 1, 103],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([0, 1, 104],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([2, 0, 102],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([2, 0, 103],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float32"), Tensor([2, 0, 104],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2, 0, 3, 1, 4],"float32"), Tensor([1, 2, 1, 3, 1, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2, 1, 3, 0, 4],"float32"), Tensor([1, 2, 1, 3, 1, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2, 1, 3, 1, 4],"float32"), Tensor([0, 2, 1, 3, 1, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2, 1, 3, 1, 4],"float32"), Tensor([1, 2, 0, 3, 1, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 2, 1, 3, 1, 4],"float32"), Tensor([1, 2, 1, 3, 0, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 0, 5, 4, 2],"float32"), Tensor([1, 21, 0, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 0, 5, 4, 2],"float32"), Tensor([1, 21, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 8, 0, 4, 2],"float32"), Tensor([1, 21, 1, 0, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 8, 5, 0, 2],"float32"), Tensor([1, 21, 1, 5, 0, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 8, 5, 0, 2],"float32"), Tensor([1, 21, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 8, 5, 4, 0],"float32"), Tensor([1, 21, 1, 5, 1, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 21, 8, 5, 4, 2],"float32"), Tensor([0, 21, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 1, 0, 1],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 1, 1, 1],"float32"), Tensor([0, 1, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 1, 1, 1],"float32"), Tensor([2, 0, 2],"float32"), )
paddle.Tensor.__mul__(Tensor([10, 1, 1, 1],"float32"), Tensor([2, 1, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([128, 128, 0, 56],"float32"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([128, 128, 0, 96],"float32"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([128, 128, 56, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([128, 128, 96, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([16, 128, 0, 96],"float32"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([16, 128, 96, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([0, 1024, 24],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([0, 20],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([0, 25],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([0, 30],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([1, 0, 24],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([1, 1024, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([1],"float32"), Tensor([100, 0],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 0, 2, 10],"float32"), Tensor([1, 2, 10],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 0, 8, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 3, 0, 8],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 3, 8, 0],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 4, 0, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 4, 8, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 0, 10, 7],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 0, 10, 9],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 4, 0, 7],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 4, 0, 9],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__mul__(Tensor([4, 4, 10, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__pow__(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.Tensor.__pow__(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 1],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 24276],"float32"), Tensor([0, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 24276],"float32"), Tensor([1, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 27216],"float32"), Tensor([0, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1, 27216],"float32"), Tensor([1, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1004],"float32"), Tensor([0, 1004],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1004],"float32"), Tensor([1, 1004],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.__sub__(Tensor([0, 100],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.__sub__(Tensor([0, 10285],"float32"), Tensor([0, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 10285],"float32"), Tensor([1, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 1],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 2, 1, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 2, 1, 512, 4, 4],"float32"), Tensor([0, 2, 1, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 2, 1, 512, 4, 4],"float32"), Tensor([1, 2, 1, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 2, 16, 4, 8],"float32"), Tensor([0, 2, 16, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 24, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 256000],"float32"), Tensor([256000],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 27216, 2],"float32"), Tensor([27216, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 3, 40, 40, 1],"float32"), Tensor([0, 3, 40, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 30324, 2],"float32"), Tensor([30324, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 33600, 2],"float32"), Tensor([33600, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 4, 8, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([0, 6, 3, 4, 2, 1],"float64"), Tensor([0, 6, 3, 4, 2, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([0, 7, 20],"float32"), Tensor([20],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 1],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 24276],"float32"), Tensor([1, 0, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 24276],"float32"), Tensor([1, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 27216],"float32"), Tensor([1, 0, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0, 27216],"float32"), Tensor([1, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.__sub__(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 27216, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 30324, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 33600, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 27216, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 30324, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 33600, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 24276],"float32"), Tensor([0, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 24276],"float32"), Tensor([1, 0, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 27216],"float32"), Tensor([0, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 27216],"float32"), Tensor([1, 0, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1004],"float32"), Tensor([0, 1004],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 100],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.__sub__(Tensor([1, 10285],"float32"), Tensor([0, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 2, 0, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 2, 1, 2],"float32"), Tensor([2, 0, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 0, 40, 40, 1],"float32"), Tensor([12, 0, 40, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 0, 40, 1],"float32"), Tensor([12, 3, 0, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 0, 1],"float32"), Tensor([12, 3, 40, 0, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 40, 0],"float32"), Tensor([12, 3, 40, 40, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 40, 0],"float32"), Tensor([12, 3, 40, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 40, 1],"float32"), Tensor([12, 3, 40, 40, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 0, 16, 4, 8],"float32"), Tensor([13, 0, 16, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 0, 4, 8],"float32"), Tensor([13, 2, 0, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 16, 0, 8],"float32"), Tensor([13, 2, 16, 0, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 16, 4, 0],"float32"), Tensor([13, 2, 16, 4, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 16, 4, 0],"float32"), Tensor([13, 2, 16, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 3, 0, 224],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 3, 224, 0],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 0, 20],"float32"), Tensor([20],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 0, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 0, 8, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 4, 0, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 4, 8, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([28, 0, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 0, 2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 0, 3, 4, 2, 1],"float64"), Tensor([3, 0, 3, 4, 2, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 1, 2, 0],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 1, 2, 1],"float32"), Tensor([2, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 6, 0, 4, 2, 1],"float64"), Tensor([3, 6, 0, 4, 2, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 0, 2, 1],"float64"), Tensor([3, 6, 3, 0, 2, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 0, 1],"float64"), Tensor([3, 6, 3, 4, 0, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 0],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 0],"float64"), )
paddle.Tensor.__sub__(Tensor([3, 96, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__sub__(Tensor([3, 96, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 0, 1, 512, 4, 4],"float32"), Tensor([1, 0, 1, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2, 0, 512, 4, 4],"float32"), Tensor([1, 2, 0, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2, 0, 512, 4, 4],"float32"), Tensor([1, 2, 1, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2, 1, 0, 4, 4],"float32"), Tensor([1, 2, 1, 0, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2, 1, 512, 0, 4],"float32"), Tensor([1, 2, 1, 512, 0, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2, 1, 512, 4, 0],"float32"), Tensor([1, 2, 1, 512, 4, 0],"float32"), )
paddle.Tensor.__sub__(Tensor([4, 2, 1, 512, 4, 4],"float32"), Tensor([1, 2, 0, 512, 4, 4],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 1, 24276],"float32"), Tensor([1, 1, 24276],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 1, 27216],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 1, 27216],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 1, 27216],"float32"), Tensor([1, 1, 27216],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 1004],"float32"), Tensor([1, 1004],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 10285],"float32"), Tensor([1, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 1031],"float32"), Tensor([1, 1031],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 11645, 8, 4, 4, 2],"float32"), Tensor([0, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 11645, 8, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 12, 9, 1],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 12, 9, 2],"float32"), Tensor([0, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 12, 9, 2],"float32"), Tensor([1, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 128, 128, 2],"float32"), Tensor([0, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 128, 128, 2],"float32"), Tensor([1, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 128, 32, 32],"float32"), Tensor([0, 1, 32, 32],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 128, 32, 32],"float32"), Tensor([1, 1, 32, 32],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 144, 200, 1],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 24276, 4],"float32"), Tensor([24276, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 27216, 4],"float32"), Tensor([27216, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 30324, 4],"float32"), Tensor([30324, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 6380, 8, 4, 4, 2],"float32"), Tensor([0, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 6380, 8, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 8550, 8, 4, 4, 2],"float32"), Tensor([0, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 8550, 8, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 128, 2],"float32"), Tensor([1, 0, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 128, 2],"float32"), Tensor([1, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 200, 1],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 24276],"float32"), Tensor([1, 1, 24276],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 27216],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 27216],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 27216],"float32"), Tensor([1, 1, 27216],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 1, 32, 32],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 8, 4, 4, 2],"float32"), Tensor([1, 0, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 8, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 9, 1],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 9, 2],"float32"), Tensor([1, 0, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0, 9, 2],"float32"), Tensor([1, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 24276],"float32"), Tensor([0, 1, 24276],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 24276],"float32"), Tensor([1, 0, 24276],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 27216],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 27216],"float32"), Tensor([0, 1, 27216],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 27216],"float32"), Tensor([1, 0, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 27216],"float32"), Tensor([1, 0, 27216],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1004],"float32"), Tensor([0, 1004],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 10285],"float32"), Tensor([0, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1031],"float32"), Tensor([0, 1031],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 12, 0, 1],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 12, 0, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 12, 0, 2],"float32"), Tensor([1, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 12, 9, 0],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 12, 9, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 12, 9, 2],"float32"), Tensor([0, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 0, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 0, 2],"float32"), Tensor([1, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 0, 32],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 128, 0],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 128, 2],"float32"), Tensor([0, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 32, 0],"float32"), Tensor([1, 1, 32, 0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 128, 32, 32],"float32"), Tensor([0, 1, 32, 32],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 144, 0, 1],"float32"), Tensor([128],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 144, 200, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 24276, 0],"float32"), Tensor([24276, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 27216, 0],"float32"), Tensor([27216, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 30324, 0],"float32"), Tensor([30324, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 0, 4, 4, 2],"float32"), Tensor([1, 1, 0, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 0, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 8, 0, 4, 2],"float32"), Tensor([1, 1, 1, 0, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 8, 4, 0, 2],"float32"), Tensor([1, 1, 1, 4, 0, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 8, 4, 0, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 8, 4, 4, 0],"float32"), Tensor([1, 1, 1, 4, 1, 0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6380, 8, 4, 4, 2],"float32"), Tensor([0, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 0, 4, 4, 2],"float32"), Tensor([1, 1, 0, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 0, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 8, 0, 4, 2],"float32"), Tensor([1, 1, 1, 0, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 8, 4, 0, 2],"float32"), Tensor([1, 1, 1, 4, 0, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 8, 4, 0, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 8, 4, 4, 0],"float32"), Tensor([1, 1, 1, 4, 1, 0],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 8550, 8, 4, 4, 2],"float32"), Tensor([0, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 40, 40, 0],"float32"), Tensor([12, 3, 40, 40, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 40, 40, 1],"float32"), Tensor([12, 3, 40, 40, 0],"float32"), )
paddle.Tensor.__truediv__(Tensor([13, 3, 0, 224],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([13, 3, 224, 0],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([13, 96, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([13, 96, 1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 0, 8, 4, 4, 2],"float32"), Tensor([1, 0, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 0, 8, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 0, 4, 4, 2],"float32"), Tensor([1, 1, 0, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 0, 4, 4, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 0, 4, 2],"float32"), Tensor([1, 1, 1, 0, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 4, 0, 2],"float32"), Tensor([1, 1, 1, 4, 0, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 4, 0, 2],"float32"), Tensor([1, 1, 1, 4, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 4, 4, 0],"float32"), Tensor([1, 1, 1, 4, 1, 0],"float32"), )
paddle.Tensor.add(Tensor([20, 0],"float32"), Tensor([20, 1],"float32"), )
paddle.Tensor.add(Tensor([20, 1],"float32"), Tensor([20, 0],"float32"), )
paddle.Tensor.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.argmax(Tensor([0, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 27216],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 30324],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 33600],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 100, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 101, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 102, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 103, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 104, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([0, 157920, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 3, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 4],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 77],"int64"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 7],"int32"), -1, )
paddle.Tensor.argmax(Tensor([0, 90, 22400],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([1, 1, 0],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([13, 3, 0],"float32"), 1, )
paddle.Tensor.argmax(Tensor([30, 0, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([4, 0, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([4, 90, 0],"float32"), axis=1, )
paddle.Tensor.bmm(Tensor([0, 108472, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 1156, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 120000, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 143264, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 146200, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 120000, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 143264, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 146200, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cumprod(Tensor([0],"float32"), -1, )
paddle.Tensor.cumprod(Tensor([0],"float64"), -1, )
paddle.Tensor.diag_embed(Tensor([0, 1, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([1, 0, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([1, 1, 0],"float32"), )
paddle.Tensor.diagonal(Tensor([0, 2],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([0, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([2, 0],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([3, 0],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 32],"float32"), Tensor([0, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1],"float32"), Tensor([0, 22400],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 64],"int64"), Tensor([0, 64],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0],"float32"), Tensor([64, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int64"), Tensor([26, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 298, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 32, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 34, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 298, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 32, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 34, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 64],"int64"), Tensor([0, 64],"int64"), )
paddle.Tensor.expand_as(Tensor([2, 0, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 0],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([4, 0],"float32"), Tensor([4, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([4, 1],"float32"), Tensor([4, 0],"int64"), )
paddle.Tensor.fill_diagonal_(Tensor([0, 128],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int32"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int32"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int64"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([0, 3],"int64"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([128, 0],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 0],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 0],"int32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 0],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 0],"int64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([5, 0],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 0],"float32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 0],"int32"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 0],"int32"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 0],"int64"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 0],"int64"), 4, 0, True, )
paddle.Tensor.flip(Tensor([0, 14],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([0, 224, 224],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 280, 350],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 280, 350],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([0, 2],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([0, 400, 300],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 400, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([0, 64, 64],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 64, 64],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([13, 0],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 224],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 300],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 0, 350],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 350],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 0, 64],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 64],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 224, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 280, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 280, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 400, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 400, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 64, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 64, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([4, 0],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([5, 0],"int64"), list[1,], )
paddle.Tensor.gather(Tensor([0, 4],"float32"), Tensor([0, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([0, 4],"float32"), Tensor([4, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([4, 0],"float32"), Tensor([4, 0],"int64"), 1, )
paddle.Tensor.gather(Tensor([4, 4],"float32"), Tensor([4, 0],"int64"), 1, )
paddle.Tensor.gather_nd(Tensor([0, 16384, 10],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 16384, 1],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 16384, 2],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 20, 2],"float32"), Tensor([1, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 3, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 3, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 500, 1],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 500, 2],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 2],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 32],"float32"), Tensor([12, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 3],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 0, 2],"float32"), Tensor([1, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([12, 0, 32],"float32"), Tensor([12, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([13, 0, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 0, 2],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 0, 3],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 0, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 0, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 0, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 10],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 1],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 1],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 2],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 2],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 16384, 10],"float32"), Tensor([4, 500, 0],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 500, 0],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 0, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 0, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 0, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 85],"float32"), Tensor([385, 0],"int64"), )
paddle.Tensor.imag(Tensor([0, 128, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([0, 15, 8, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([0, 32, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([0, 32, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([0, 513, 213],"complex64"), )
paddle.Tensor.imag(Tensor([0, 64, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([0, 64, 64],"complex64"), )
paddle.Tensor.imag(Tensor([0, 64, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 0, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 0, 213],"complex64"), )
paddle.Tensor.imag(Tensor([16, 0, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 128, 0, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 128, 8, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 0, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 0, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 16, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 8, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 513, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 0, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 0, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 16, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 8, 0],"complex64"), )
paddle.Tensor.imag(Tensor([20, 0, 64],"complex64"), )
paddle.Tensor.imag(Tensor([20, 64, 0],"complex64"), )
paddle.Tensor.imag(Tensor([32, 0, 8, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 0, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 8, 0, 32],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 8, 8, 0],"complex64"), )
paddle.Tensor.index_select(Tensor([0, 16],"float32"), Tensor([28],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 16],"float32"), Tensor([30],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 16],"float32"), Tensor([38],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([130],"int64"), )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([182],"int64"), )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([39],"int64"), )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([91],"int64"), )
paddle.Tensor.index_select(Tensor([0, 8],"float32"), Tensor([4],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 8],"float32"), Tensor([5],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0],"float32"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([0],"float64"), Tensor([40],"int64"), )
paddle.Tensor.index_select(Tensor([0],"float64"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([0],"int32"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([0],"int64"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([128, 16],"float32"), Tensor([0],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([12],"float32"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([12],"float64"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([12],"int32"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([12],"int64"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([2, 1, 0],"float32"), index=Tensor([2],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([2, 1, 400],"float32"), index=Tensor([0],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([3, 1, 0],"float32"), index=Tensor([2],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([3, 1, 500],"float32"), index=Tensor([0],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([4, 8],"float32"), Tensor([0],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([4004, 24],"float32"), axis=0, index=Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([8, 8],"float32"), Tensor([0],"int64"), axis=0, )
paddle.Tensor.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.Tensor.kthvalue(Tensor([0, 200, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 200, 0],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.Tensor.lu(Tensor([0, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([0, 3],"float32"), )
paddle.Tensor.lu(Tensor([0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0],"float32"), )
paddle.Tensor.lu(Tensor([3, 0],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.lu(Tensor([4, 0, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 0, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 0],"float64"), )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 256],"float32"), Tensor([0, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 4],"float32"), Tensor([0, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 4],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 256],"float32"), Tensor([0, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 4],"float32"), Tensor([0, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 4],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 6380, 256],"float32"), Tensor([0, 6380, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 6380, 256],"float32"), Tensor([1, 6380, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 6380, 4],"float32"), Tensor([0, 6380, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 6380, 4],"float32"), Tensor([1, 6380, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 8550, 256],"float32"), Tensor([0, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 8550, 256],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 8550, 4],"float32"), Tensor([0, 8550, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 8550, 4],"float32"), Tensor([1, 8550, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([0, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([0, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([0, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([0, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 6380, 0],"float32"), Tensor([1, 6380, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 6380, 0],"float32"), Tensor([1, 6380, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 6380, 0],"float32"), Tensor([1, 6380, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 6380, 0],"float32"), Tensor([1, 6380, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 6380, 256],"float32"), Tensor([0, 6380, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 6380, 4],"float32"), Tensor([0, 6380, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 0],"float32"), Tensor([1, 8550, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 0],"float32"), Tensor([1, 8550, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 0],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 0],"float32"), Tensor([1, 8550, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 256],"float32"), Tensor([0, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 4],"float32"), Tensor([0, 8550, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([10, 0, 25],"float32"), Tensor([10, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 0, 25],"float32"), Tensor([10, 0, 25],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 0],"float32"), Tensor([10, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 0],"float32"), Tensor([10, 25, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 32],"float32"), Tensor([13, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 7, 7],"float32"), Tensor([13, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0],"float32"), Tensor([13, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 0, 7],"float32"), Tensor([13, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 0],"float32"), Tensor([13, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([27, 0, 25],"float32"), Tensor([27, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 0],"float32"), Tensor([27, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([340, 0, 25],"float32"), Tensor([340, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([340, 25, 0],"float32"), Tensor([340, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 32],"float32"), Tensor([52, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 7, 7],"float32"), Tensor([52, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0],"float32"), Tensor([52, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 0, 7],"float32"), Tensor([52, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 0],"float32"), Tensor([52, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([85, 0, 25],"float32"), Tensor([85, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([85, 25, 0],"float32"), Tensor([85, 25, 0],"bool"), -100.0, )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([0, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([0, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([1, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([1, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float16"), Tensor([0, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float32"), Tensor([0, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 64],"float32"), Tensor([0, 12, 64, 197],"float32"), )
paddle.Tensor.matmul(Tensor([0, 16, 257, 257],"float32"), Tensor([0, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 16, 257, 64],"float32"), Tensor([0, 16, 64, 257],"float32"), )
paddle.Tensor.matmul(Tensor([1, 0, 12],"float64"), Tensor([1, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 12],"float64"), Tensor([1, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 12],"float64"), Tensor([0, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 12],"float64"), Tensor([0, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 12],"float64"), Tensor([1, 12, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 125],"float64"), Tensor([125, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float16"), Tensor([112, 0, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float32"), Tensor([112, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 64],"float32"), Tensor([112, 0, 64, 197],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 64],"float32"), Tensor([112, 12, 64, 197],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 12, 197, 0],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 197, 0],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 64],"float32"), Tensor([112, 12, 64, 0],"float32"), )
paddle.Tensor.matmul(Tensor([124, 0, 257, 257],"float32"), Tensor([124, 0, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 0, 257, 64],"float32"), Tensor([124, 0, 64, 257],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 0, 257],"float32"), Tensor([124, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 0, 64],"float32"), Tensor([124, 16, 64, 257],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 257],"float32"), Tensor([124, 16, 257, 0],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 64],"float32"), Tensor([124, 16, 64, 0],"float32"), )
paddle.Tensor.matmul(Tensor([128, 0, 197, 197],"float32"), Tensor([128, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 0, 197],"float32"), Tensor([128, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 197, 197],"float32"), Tensor([128, 12, 197, 0],"float32"), )
paddle.Tensor.max(Tensor([0, 1, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([0, 1, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 1, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([0, 1, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 1, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([0, 1, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 1, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([0, 1, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([0, 1, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([0, 10800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([0, 1083, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([0, 10],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 11109, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([0, 11109, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([0, 12096, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([0, 150402],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 153450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 158580],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 2],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 4, 38, 38],"float32"), axis=1, )
paddle.Tensor.max(Tensor([0, 4, 76, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([0, 4, 76, 136],"int64"), 1, )
paddle.Tensor.max(Tensor([0, 4, 9, 9],"float32"), axis=1, )
paddle.Tensor.max(Tensor([0, 4800, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([1, 0, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 0, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 0, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 0, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([100, 4, 0, 38],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 0, 9],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 38, 0],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 9, 0],"float32"), axis=1, )
paddle.Tensor.max(Tensor([12, 4, 0, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 0, 136],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 0, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 0],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 136, 0],"float32"), 1, )
paddle.Tensor.max(Tensor([2, 0, 50],"float32"), 2, )
paddle.Tensor.median(Tensor([0, 784],"float32"), )
paddle.Tensor.median(Tensor([1000, 0],"float32"), )
paddle.Tensor.min(Tensor([0, 1, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([0, 1, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([0, 1, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([0, 300, 18496],"float32"), -1, )
paddle.Tensor.min(Tensor([0, 300, 36864],"float32"), -1, )
paddle.Tensor.min(Tensor([0, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([0, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([0, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1, 0, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 0, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 0, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 0, 36864],"float32"), -1, )
paddle.Tensor.min(Tensor([2, 0, 18496],"float32"), -1, )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), axis=1, keepdim=False, )
paddle.Tensor.multigammaln(Tensor([0],"float32"), 3, )
paddle.Tensor.multiply(Tensor([0, 3072],"float16"), Tensor([0, 1],"float32"), )
paddle.Tensor.multiply(Tensor([0, 768],"float16"), Tensor([0, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 0],"float16"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 0],"float32"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([512, 0],"float16"), Tensor([512, 1],"float32"), )
paddle.Tensor.nansum(Tensor([0, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float32"), )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 0, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 0, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 0, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 0, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 0],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float32"), )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nonzero(Tensor([0, 12],"bool"), )
paddle.Tensor.nonzero(Tensor([0, 13],"bool"), )
paddle.Tensor.nonzero(Tensor([0, 14],"bool"), )
paddle.Tensor.outer(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.pow(Tensor([0, 2],"float64"), Tensor([0, 1],"float64"), )
paddle.Tensor.pow(Tensor([0, 33],"float32"), Tensor([0, 33],"float32"), )
paddle.Tensor.pow(Tensor([0, 3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.pow(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.Tensor.pow(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.Tensor.pow(Tensor([16, 0],"float32"), Tensor([16, 0],"float32"), )
paddle.Tensor.pow(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.Tensor.pow(Tensor([2, 0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.pow(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), )
paddle.Tensor.pow(Tensor([2, 0],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.pow(Tensor([23, 0],"float32"), Tensor([23, 0],"float32"), )
paddle.Tensor.pow(Tensor([32, 0],"float32"), Tensor([32, 0],"float32"), )
paddle.Tensor.pow(Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.Tensor.prod(Tensor([0, 1, 1, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 10285, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 21504, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 24276, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 27216, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1001, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 1002, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 1004, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 10164, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 10285, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1031, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 1034, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 11109, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 12096, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([0, 2],"int64"), 1, )
paddle.Tensor.prod(Tensor([0, 2],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([0, 3],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([0, 8400, 2],"float32"), 2, )
paddle.Tensor.prod(Tensor([0],"int64"), )
paddle.Tensor.prod(Tensor([1, 0, 1, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 10285, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 21504, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 24276, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 27216, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 2],"float32"), 2, )
paddle.Tensor.prod(Tensor([1, 0, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1, 0, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 1, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 10285, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 21504, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 24276, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 27216, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1001, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1002, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1004, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 10164, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 10285, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1031, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1034, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 11109, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 12096, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 8400, 0],"float32"), 2, )
paddle.Tensor.prod(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([4, 0],"int64"), 1, )
paddle.Tensor.prod(Tensor([5, 0],"int64"), 1, )
paddle.Tensor.put_along_axis(Tensor([2, 0],"float32"), Tensor([2, 4],"int64"), Tensor([2, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 0],"float32"), Tensor([6, 4],"int64"), Tensor([6, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 4],"int64"), Tensor([0, 4],"float32"), axis=1, )
paddle.Tensor.real(Tensor([0, 128, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([0, 15, 8, 8, 32],"complex64"), )
paddle.Tensor.real(Tensor([0, 257, 511],"complex64"), )
paddle.Tensor.real(Tensor([0, 32, 16, 9],"complex64"), )
paddle.Tensor.real(Tensor([0, 32, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([0, 4],"complex128"), )
paddle.Tensor.real(Tensor([0, 513, 213],"complex64"), )
paddle.Tensor.real(Tensor([0, 64, 16, 9],"complex64"), )
paddle.Tensor.real(Tensor([0, 64, 64],"complex64"), )
paddle.Tensor.real(Tensor([0, 64, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([0, 784],"complex64"), )
paddle.Tensor.real(Tensor([1000, 0],"complex64"), )
paddle.Tensor.real(Tensor([100000, 0],"complex128"), )
paddle.Tensor.real(Tensor([16, 0, 16, 9],"complex64"), )
paddle.Tensor.real(Tensor([16, 0, 213],"complex64"), )
paddle.Tensor.real(Tensor([16, 0, 511],"complex64"), )
paddle.Tensor.real(Tensor([16, 0, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 128, 0, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 128, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 257, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 0, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 0, 9],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 16, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 513, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 0, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 0, 9],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 16, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([20, 0, 64],"complex64"), )
paddle.Tensor.real(Tensor([20, 64, 0],"complex64"), )
paddle.Tensor.real(Tensor([32, 0, 8, 8, 32],"complex64"), )
paddle.Tensor.real(Tensor([32, 15, 0, 8, 32],"complex64"), )
paddle.Tensor.real(Tensor([32, 15, 8, 0, 32],"complex64"), )
paddle.Tensor.real(Tensor([32, 15, 8, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([4, 0],"complex128"), )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 3, 3],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 3, 3],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 3, 3],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 64, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"float32"), 4, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 64, 128],"float64"), 256, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 5],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 5],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 5],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([1, 0, 64, 128],"float64"), 256, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([1, 0, 64, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([1, 1, 0, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([1, 1, 64, 0],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([1, 3, 0, 128],"float64"), 256, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([1, 3, 64, 0],"float64"), 256, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 3, 3],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 3, 3],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 3, 3],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 3, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 3, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 3, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([64, 0],"float32"), 4, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0],"float32"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([0],"float64"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"int32"), repeats=2, axis=3, )
paddle.Tensor.reshape(Tensor([0, 1, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 5],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 5],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 5],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([0, 1, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([0, 1, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([0, 1, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([0, 1, 5, 5],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 8, 4],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([0, 1, 8, 8],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(100,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(256,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(56,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(87,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(100,9,10,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(227,9,10,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(256,9,10,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(82,9,10,), )
paddle.Tensor.reshape(Tensor([0, 128, 16, 16],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([0, 128, 256],"float32"), list[256,128,16,16,], )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(100,9,128,), )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(227,9,128,), )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(256,9,128,), )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(82,9,128,), )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 19, 84],"float32"), list[1,1,19,84,], )
paddle.Tensor.reshape(Tensor([0, 1],"float64"), list[1,1,1,1,], )
paddle.Tensor.reshape(Tensor([0, 2001, 2],"float32"), list[100,2001,2,], )
paddle.Tensor.reshape(Tensor([0, 2001, 2],"float32"), list[1000,2001,2,], )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(100,38,20,), )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(256,38,20,), )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(56,38,20,), )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(87,38,20,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(100,38,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(100,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(227,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(256,38,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(256,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(56,38,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(82,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(87,38,256,), )
paddle.Tensor.reshape(Tensor([0, 276, 49],"float32"), list[1,1,276,49,], )
paddle.Tensor.reshape(Tensor([0, 3, 2],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([0, 3, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([0, 3, 465750],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([0, 3, 64, 128],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([0, 3136, 2, 32],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([0, 3136, 2, 32],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([0, 324],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[100,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[256,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[56,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[87,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 380],"float32"), list[100,38,10,], )
paddle.Tensor.reshape(Tensor([0, 3],"float32"), list[1,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 1, 1],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 64, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 45],"float32"), list[100,9,5,], )
paddle.Tensor.reshape(Tensor([0, 49, 8, 64],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([0, 49, 8, 64],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([0, 4],"float32"), tuple(256,1,), )
paddle.Tensor.reshape(Tensor([0, 5, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([0, 5, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([0, 5, 1, 5],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([0, 5, 1, 5],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([0, 50, 16, 16],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([0, 50, 256],"float32"), list[256,50,16,16,], )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(100,38,512,), )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(256,38,512,), )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(56,38,512,), )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(87,38,512,), )
paddle.Tensor.reshape(Tensor([0, 5776],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 6, 16],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([0, 6, 16],"float32"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([0, 6, 16],"float64"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([0, 6, 16],"int16"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([0, 64, 2, 64],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(100,38,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(100,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(227,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(256,38,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(256,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(56,38,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(82,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(87,38,64,), )
paddle.Tensor.reshape(Tensor([0, 7, 7, 512],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([0, 7, 7, 768],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([0, 7, 7, 768],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([0, 784, 4, 32],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([0, 784, 4, 32],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([0, 8],"float32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([0, 8],"float64"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([0, 8],"int32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[100,9,64,4,], )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[227,9,64,4,], )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[256,9,64,4,], )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[82,9,64,4,], )
paddle.Tensor.reshape(Tensor([0],"complex64"), list[14,1,1,1,], )
paddle.Tensor.reshape(Tensor([0],"complex64"), list[39,1,1,1,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[15,48,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[2,20,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[2,50,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[2,64,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[20,1,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[20,20,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[20,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[3,90,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[3,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[48,48,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[48,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[5,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[50,50,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[50,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[64,5,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[64,64,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[64,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[90,4,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[90,90,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[90,], )
paddle.Tensor.reshape(Tensor([0],"float32"), tuple(1,), )
paddle.Tensor.reshape(Tensor([0],"float64"), list[1,1,], )
paddle.Tensor.reshape(Tensor([0],"float64"), list[], )
paddle.Tensor.reshape(Tensor([0],"float64"), tuple(1,), )
paddle.Tensor.reshape(Tensor([0],"int16"), list[12,20,2,], )
paddle.Tensor.reshape(Tensor([0],"int32"), list[12,20,2,], )
paddle.Tensor.reshape(Tensor([0],"int32"), list[2,3,], )
paddle.Tensor.reshape(Tensor([0],"int32"), list[], )
paddle.Tensor.reshape(Tensor([0],"int32"), tuple(1,), )
paddle.Tensor.reshape(Tensor([0],"int64"), list[12,20,2,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[2,2,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[2,3,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[3,1,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[3,3,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[4,4,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[], )
paddle.Tensor.reshape(Tensor([1, 0, 1, 1],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([1, 0, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([1, 0, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([1, 0, 2],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 0, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 0, 49],"float32"), list[1,1,276,49,], )
paddle.Tensor.reshape(Tensor([1, 0, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([1, 0, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([1, 0, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([1, 0, 8, 4],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([1, 0, 84],"float32"), list[1,1,19,84,], )
paddle.Tensor.reshape(Tensor([1, 0],"float32"), list[1,3,], )
paddle.Tensor.reshape(Tensor([1, 0],"float64"), list[1,1,1,1,], )
paddle.Tensor.reshape(Tensor([1, 1, 0, 4],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([1, 1, 8, 0],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([1, 19, 0],"float32"), list[1,1,19,84,], )
paddle.Tensor.reshape(Tensor([1, 276, 0],"float32"), list[1,1,276,49,], )
paddle.Tensor.reshape(Tensor([1, 3, 0],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 3, 0],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 4, 0, 1],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([1, 4, 1, 0],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([1, 5, 1, 0],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([1, 5, 1, 0],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 5, 0],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([1, 5, 5, 0],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 5, 0],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([100, 0, 1024],"float32"), list[100,38,256,4,], )
paddle.Tensor.reshape(Tensor([100, 0, 19, 19, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 0, 2, 19, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 0, 2, 2],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([100, 0, 256],"float32"), list[100,9,64,4,], )
paddle.Tensor.reshape(Tensor([100, 0, 2],"float32"), list[100,2001,2,], )
paddle.Tensor.reshape(Tensor([100, 0, 3, 3, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 0, 3, 3, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 0, 3, 3],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 0, 38, 38],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([100, 0, 9, 9],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,38,10,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,9,5,], )
paddle.Tensor.reshape(Tensor([100, 1444, 0, 2],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([100, 1444, 2, 0],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([100, 2001, 0],"float32"), list[100,2001,2,], )
paddle.Tensor.reshape(Tensor([100, 36, 0, 3],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 36, 3, 0],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 38, 0],"float32"), list[100,38,256,4,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 19, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 19, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 3, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 3, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 38],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 9],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 19, 0, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 19, 19, 0, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 19, 19, 2, 0],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 2, 0, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 2, 19, 0, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 2, 19, 2, 0],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 0, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 0, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 0, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 0, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 3, 0],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 3, 0],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 38, 0],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([100, 4, 9, 0],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 9, 0],"float32"), list[100,9,64,4,], )
paddle.Tensor.reshape(Tensor([1000, 0, 2],"float32"), list[1000,2001,2,], )
paddle.Tensor.reshape(Tensor([1000, 2001, 0],"float32"), list[1000,2001,2,], )
paddle.Tensor.reshape(Tensor([128, 0, 2, 32],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 0, 2, 32],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 0, 4, 32],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 0, 4, 32],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 0, 7, 512],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 0, 7, 768],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 0, 7, 768],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 0, 8, 64],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 0, 8, 64],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 3136, 0, 32],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 3136, 0, 32],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 3136, 2, 0],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 3136, 2, 0],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 49, 0, 64],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 49, 0, 64],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 49, 8, 0],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 49, 8, 0],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 7, 0, 512],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 7, 0, 768],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 7, 0, 768],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 7, 7, 0],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 7, 7, 0],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 7, 7, 0],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 784, 0, 32],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 784, 0, 32],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 784, 4, 0],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 784, 4, 0],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([2, 0, 2, 64],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([2, 0, 8, 8],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([2, 1, 0, 8],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([2, 1, 8, 0],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([2, 64, 0, 64],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([2, 64, 2, 0],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,10,), )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,128,), )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,256,), )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,64,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,1024,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,20,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,256,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,512,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,64,), )
paddle.Tensor.reshape(Tensor([227, 0, 256],"float32"), list[227,9,64,4,], )
paddle.Tensor.reshape(Tensor([227, 0, 3, 3, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 0, 3, 3, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 0, 3, 3],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 0, 9, 9],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 36, 0, 3],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 36, 3, 0],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 0, 3, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 0, 3, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 0, 9],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 0, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 0, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 0, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 0, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 3, 0],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 3, 0],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 9, 0],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 9, 0],"float32"), list[227,9,64,4,], )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,10,), )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,128,), )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,256,), )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,64,), )
paddle.Tensor.reshape(Tensor([256, 0, 1024],"float32"), list[256,38,256,4,], )
paddle.Tensor.reshape(Tensor([256, 0, 16, 16],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([256, 0, 16, 16],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([256, 0, 19, 19, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 0, 2, 19, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 0, 2, 2],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([256, 0, 256],"float32"), list[256,128,16,16,], )
paddle.Tensor.reshape(Tensor([256, 0, 256],"float32"), list[256,50,16,16,], )
paddle.Tensor.reshape(Tensor([256, 0, 256],"float32"), list[256,9,64,4,], )
paddle.Tensor.reshape(Tensor([256, 0, 3, 3, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 0, 3, 3, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 0, 3, 3],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 0, 38, 38],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([256, 0, 64, 128],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([256, 0, 9, 9],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 128, 0, 16],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([256, 128, 0],"float32"), list[256,128,16,16,], )
paddle.Tensor.reshape(Tensor([256, 128, 16, 0],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([256, 1444, 0, 2],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([256, 1444, 2, 0],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([256, 3, 0, 128],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([256, 3, 64, 0],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([256, 36, 0, 3],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 36, 3, 0],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 38, 0],"float32"), list[256,38,256,4,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 19, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 19, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 3, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 3, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 38],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 9],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 19, 0, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 19, 19, 0, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 19, 19, 2, 0],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 2, 0, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 2, 19, 0, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 2, 19, 2, 0],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 0, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 0, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 0, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 0, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 3, 0],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 3, 0],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 38, 0],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([256, 4, 9, 0],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 50, 0, 16],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([256, 50, 0],"float32"), list[256,50,16,16,], )
paddle.Tensor.reshape(Tensor([256, 50, 16, 0],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([256, 9, 0],"float32"), list[256,9,64,4,], )
paddle.Tensor.reshape(Tensor([3, 0, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([3, 1, 0],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,1024,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,20,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,256,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,512,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,64,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,1024,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,20,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,256,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,512,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,64,), )
paddle.Tensor.reshape(Tensor([4, 0, 16],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 0, 16],"float32"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 0, 16],"float64"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 0, 16],"int16"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 0, 465750],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 0],"float32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([4, 0],"float64"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([4, 0],"int32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([4, 3, 0],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 6, 0],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 6, 0],"float32"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 6, 0],"float64"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 6, 0],"int16"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 5],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 5],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 5],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 5, 1, 0],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 1, 0],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([56, 0, 1024],"float32"), list[56,38,256,4,], )
paddle.Tensor.reshape(Tensor([56, 0, 19, 19, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 0, 2, 19, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 0, 2, 2],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([56, 0, 38, 38],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([56, 1444, 0, 2],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([56, 1444, 2, 0],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([56, 38, 0],"float32"), list[56,38,256,4,], )
paddle.Tensor.reshape(Tensor([56, 4, 0, 19, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 0, 19, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 0, 38],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([56, 4, 19, 0, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 19, 19, 0, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 19, 19, 2, 0],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 2, 0, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 2, 19, 0, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 2, 19, 2, 0],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 38, 0],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([64, 0, 3, 64, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 0],"float32"), tuple(256,1,), )
paddle.Tensor.reshape(Tensor([64, 4, 0, 64, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 4, 3, 0, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 4, 3, 64, 0],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,10,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,128,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,256,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,64,), )
paddle.Tensor.reshape(Tensor([82, 0, 256],"float32"), list[82,9,64,4,], )
paddle.Tensor.reshape(Tensor([82, 0, 3, 3, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 0, 3, 3, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 0, 3, 3],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 0, 9, 9],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 36, 0, 3],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 36, 3, 0],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 0, 3, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 0, 3, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 0, 9],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 0, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 0, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 0, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 0, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 3, 0],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 3, 0],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 9, 0],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 9, 0],"float32"), list[82,9,64,4,], )
paddle.Tensor.reshape(Tensor([87, 0, 1024],"float32"), list[87,38,256,4,], )
paddle.Tensor.reshape(Tensor([87, 0, 19, 19, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 0, 2, 19, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 0, 2, 2],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([87, 0, 38, 38],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([87, 1444, 0, 2],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([87, 1444, 2, 0],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([87, 38, 0],"float32"), list[87,38,256,4,], )
paddle.Tensor.reshape(Tensor([87, 4, 0, 19, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 0, 19, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 0, 38],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([87, 4, 19, 0, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 19, 19, 0, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 19, 19, 2, 0],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 2, 0, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 2, 19, 0, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 2, 19, 2, 0],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 38, 0],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,10,), )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,128,), )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,256,), )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,64,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,1024,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,20,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,256,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,512,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,64,), )
paddle.Tensor.rot90(Tensor([0, 2],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(Tensor([3, 0],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float32"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([0, 4],"int32"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"int64"), )
paddle.Tensor.rot90(x=Tensor([3, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float32"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([4, 0],"int32"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"int64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([0, 3],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([15, 0],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float32"), Tensor([0, 3],"float32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float32"), Tensor([15, 0],"float32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float64"), Tensor([0, 3],"float64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float64"), Tensor([15, 0],"float64"), list[20,], list[2,], 0, )
paddle.Tensor.split(Tensor([0, 2, 128, 8, 96],"float16"), 2, )
paddle.Tensor.split(Tensor([1, 200, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 21, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 22, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 300, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 9, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([101, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([102, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([107, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([108, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([128, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([13, 7, 0],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([132, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([16, 176, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([160, 0, 3072],"float16"), 17, 1, )
paddle.Tensor.split(Tensor([160, 0, 3072],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([512, 0, 768],"float16"), 17, 1, )
paddle.Tensor.std(Tensor([0, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1, 54],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 10, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1024, 8],"float32"), )
paddle.Tensor.std(Tensor([0, 1024, 8],"float64"), )
paddle.Tensor.std(Tensor([0, 1024],"float32"), axis=1, )
paddle.Tensor.std(Tensor([0, 11, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1280],"float32"), axis=1, )
paddle.Tensor.std(Tensor([0, 2304],"float32"), axis=1, )
paddle.Tensor.std(Tensor([0, 2560],"float32"), axis=1, )
paddle.Tensor.std(Tensor([1, 0, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 0, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 0, 54],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 10, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 11, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1024, 0, 8],"float32"), )
paddle.Tensor.std(Tensor([1024, 0, 8],"float64"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float32"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float64"), )
paddle.Tensor.std(Tensor([1444, 0],"float32"), axis=1, )
paddle.Tensor.std(Tensor([36, 0],"float32"), axis=1, )
paddle.Tensor.std(Tensor([38, 0],"float32"), axis=1, )
paddle.Tensor.std(Tensor([9, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0, 150402],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 153450],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 158580],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 19528],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([0, 2],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 42],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 4],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 58584],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([0, 78112],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([0, 7],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([1358, 0],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([4, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.tile(Tensor([1, 0, 1],"float32"), list[1,14,1,], )
paddle.Tensor.tile(Tensor([1, 0, 20],"float32"), list[2,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 241, 241],"float32"), list[32,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 241, 241],"float32"), list[8,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 298, 364],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 32, 26],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 34, 34],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 4],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 768],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([1, 0],"float32"), list[100,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 241],"float32"), list[32,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 241],"float32"), list[8,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 26],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 34],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 364],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 241, 0],"float32"), list[32,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 241, 0],"float32"), list[8,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 298, 0],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 32, 0],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 34, 0],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 14, 0],"float32"), list[1,14,1,], )
paddle.Tensor.tile(Tensor([1, 22400, 0],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([1, 3, 0, 1, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([1, 3, 0],"float32"), list[144,1,1,], )
paddle.Tensor.tile(Tensor([1, 3, 2, 0, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([1, 3, 2, 1, 0],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([1, 33, 0],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([1, 4, 0],"float32"), list[284,1,1,], )
paddle.Tensor.tile(Tensor([1, 5, 0],"float32"), list[298,1,1,], )
paddle.Tensor.tile(Tensor([1, 7, 0],"float32"), list[2,1,1,], )
paddle.Tensor.tile(Tensor([1, 8, 0],"float32"), list[398,1,1,], )
paddle.Tensor.tile(Tensor([1, 9, 0],"float32"), list[420,1,1,], )
paddle.Tensor.tile(Tensor([1, 900, 0],"float32"), list[2,1,1,], )
paddle.Tensor.tile(Tensor([10, 0, 1, 1, 4],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 2, 0, 1, 4],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 2, 1, 0, 4],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 2, 1, 1, 0],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([1000, 0, 80],"float32"), list[1,10,1,], )
paddle.Tensor.tile(Tensor([1000, 0, 80],"float32"), list[1,16,1,], )
paddle.Tensor.tile(Tensor([1000, 1, 0],"float32"), list[1,10,1,], )
paddle.Tensor.tile(Tensor([1000, 1, 0],"float32"), list[1,16,1,], )
paddle.Tensor.tile(Tensor([1001, 0, 80],"float32"), list[1,10,1,], )
paddle.Tensor.tile(Tensor([1001, 0, 80],"float32"), list[1,11,1,], )
paddle.Tensor.tile(Tensor([1001, 0, 80],"float32"), list[1,7,1,], )
paddle.Tensor.tile(Tensor([1001, 0, 80],"float32"), list[1,8,1,], )
paddle.Tensor.tile(Tensor([1001, 1, 0],"float32"), list[1,10,1,], )
paddle.Tensor.tile(Tensor([1001, 1, 0],"float32"), list[1,11,1,], )
paddle.Tensor.tile(Tensor([1001, 1, 0],"float32"), list[1,7,1,], )
paddle.Tensor.tile(Tensor([1001, 1, 0],"float32"), list[1,8,1,], )
paddle.Tensor.tile(Tensor([1002, 0, 80],"float32"), list[1,2,1,], )
paddle.Tensor.tile(Tensor([1002, 0, 80],"float32"), list[1,3,1,], )
paddle.Tensor.tile(Tensor([1002, 0, 80],"float32"), list[1,4,1,], )
paddle.Tensor.tile(Tensor([1002, 0, 80],"float32"), list[1,5,1,], )
paddle.Tensor.tile(Tensor([1002, 0, 80],"float32"), list[1,8,1,], )
paddle.Tensor.tile(Tensor([1002, 1, 0],"float32"), list[1,2,1,], )
paddle.Tensor.tile(Tensor([1002, 1, 0],"float32"), list[1,3,1,], )
paddle.Tensor.tile(Tensor([1002, 1, 0],"float32"), list[1,4,1,], )
paddle.Tensor.tile(Tensor([1002, 1, 0],"float32"), list[1,5,1,], )
paddle.Tensor.tile(Tensor([1002, 1, 0],"float32"), list[1,8,1,], )
paddle.Tensor.tile(Tensor([1003, 0, 4],"float32"), list[1,7,1,], )
paddle.Tensor.tile(Tensor([1003, 0, 80],"float32"), list[1,2,1,], )
paddle.Tensor.tile(Tensor([1003, 0, 80],"float32"), list[1,3,1,], )
paddle.Tensor.tile(Tensor([1003, 1, 0],"float32"), list[1,2,1,], )
paddle.Tensor.tile(Tensor([1003, 1, 0],"float32"), list[1,3,1,], )
paddle.Tensor.tile(Tensor([1003, 1, 0],"float32"), list[1,7,1,], )
paddle.Tensor.tile(Tensor([1004, 0, 80],"float32"), list[1,10,1,], )
paddle.Tensor.tile(Tensor([1004, 0, 80],"float32"), list[1,11,1,], )
paddle.Tensor.tile(Tensor([1004, 0, 80],"float32"), list[1,2,1,], )
paddle.Tensor.tile(Tensor([1004, 0, 80],"float32"), list[1,3,1,], )
paddle.Tensor.tile(Tensor([1004, 1, 0],"float32"), list[1,10,1,], )
paddle.Tensor.tile(Tensor([1004, 1, 0],"float32"), list[1,11,1,], )
paddle.Tensor.tile(Tensor([1004, 1, 0],"float32"), list[1,2,1,], )
paddle.Tensor.tile(Tensor([1004, 1, 0],"float32"), list[1,3,1,], )
paddle.Tensor.tile(Tensor([1005, 0, 80],"float32"), list[1,4,1,], )
paddle.Tensor.tile(Tensor([1005, 0, 80],"float32"), list[1,5,1,], )
paddle.Tensor.tile(Tensor([1005, 0, 80],"float32"), list[1,9,1,], )
paddle.Tensor.tile(Tensor([1005, 1, 0],"float32"), list[1,4,1,], )
paddle.Tensor.tile(Tensor([1005, 1, 0],"float32"), list[1,5,1,], )
paddle.Tensor.tile(Tensor([1005, 1, 0],"float32"), list[1,9,1,], )
paddle.Tensor.tile(Tensor([1006, 0, 80],"float32"), list[1,4,1,], )
paddle.Tensor.tile(Tensor([1006, 0, 80],"float32"), list[1,5,1,], )
paddle.Tensor.tile(Tensor([1006, 0, 80],"float32"), list[1,6,1,], )
paddle.Tensor.tile(Tensor([1006, 0, 80],"float32"), list[1,7,1,], )
paddle.Tensor.tile(Tensor([1006, 1, 0],"float32"), list[1,4,1,], )
paddle.Tensor.tile(Tensor([1006, 1, 0],"float32"), list[1,5,1,], )
paddle.Tensor.tile(Tensor([1006, 1, 0],"float32"), list[1,6,1,], )
paddle.Tensor.tile(Tensor([1006, 1, 0],"float32"), list[1,7,1,], )
paddle.Tensor.tile(Tensor([1008, 0, 80],"float32"), list[1,6,1,], )
paddle.Tensor.tile(Tensor([1008, 1, 0],"float32"), list[1,6,1,], )
paddle.Tensor.tile(Tensor([1010, 0, 1],"float32"), list[1,16,1,], )
paddle.Tensor.tile(Tensor([1010, 0, 80],"float32"), list[1,6,1,], )
paddle.Tensor.tile(Tensor([1010, 1, 0],"float32"), list[1,16,1,], )
paddle.Tensor.tile(Tensor([1010, 1, 0],"float32"), list[1,6,1,], )
paddle.Tensor.tile(Tensor([1012, 0, 80],"float32"), list[1,14,1,], )
paddle.Tensor.tile(Tensor([1012, 1, 0],"float32"), list[1,14,1,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,10,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,11,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,12,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,14,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,15,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,2,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,3,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,4,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,40,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,5,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,8,], )
paddle.Tensor.tile(Tensor([10285, 0],"float32"), list[1,9,], )
paddle.Tensor.tile(Tensor([1036, 0, 80],"float32"), list[1,32,1,], )
paddle.Tensor.tile(Tensor([1036, 1, 0],"float32"), list[1,32,1,], )
paddle.Tensor.tile(Tensor([1043, 0, 80],"float32"), list[1,32,1,], )
paddle.Tensor.tile(Tensor([1043, 1, 0],"float32"), list[1,32,1,], )
paddle.Tensor.tile(Tensor([1096, 0, 1],"float32"), list[1,36,1,], )
paddle.Tensor.tile(Tensor([1096, 1, 0],"float32"), list[1,36,1,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,13,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,14,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,16,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,18,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,2,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,21,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,3,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,4,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,5,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,8,], )
paddle.Tensor.tile(Tensor([11050, 0],"float32"), list[1,9,], )
paddle.Tensor.tile(Tensor([1118, 0, 80],"float32"), list[1,43,1,], )
paddle.Tensor.tile(Tensor([1118, 1, 0],"float32"), list[1,43,1,], )
paddle.Tensor.tile(Tensor([121, 0],"float32"), list[64,1,1,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,10,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,11,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,12,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,13,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,14,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,16,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,18,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,2,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,20,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,21,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,23,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,25,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,29,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,32,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,4,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,5,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,7,], )
paddle.Tensor.tile(Tensor([12240, 0],"float32"), list[1,8,], )
paddle.Tensor.tile(Tensor([12544, 0],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([1296, 0],"float32"), list[2,1,1,], )
paddle.Tensor.tile(Tensor([1296, 0],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([1296, 0],"float32"), list[64,1,1,], )
paddle.Tensor.tile(Tensor([13, 0, 2, 1, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 7, 0, 1, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 7, 2, 0, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 7, 2, 1, 0],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13125, 0],"float32"), list[1,10,], )
paddle.Tensor.tile(Tensor([13125, 0],"float32"), list[1,3,], )
paddle.Tensor.tile(Tensor([13125, 0],"float32"), list[1,6,], )
paddle.Tensor.tile(Tensor([13125, 0],"float32"), list[1,7,], )
paddle.Tensor.tile(Tensor([1326, 0, 80],"float32"), list[1,77,1,], )
paddle.Tensor.tile(Tensor([1326, 1, 0],"float32"), list[1,77,1,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,11,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,12,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,13,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,15,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,16,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,17,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,18,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,19,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,20,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,21,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,22,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,23,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,24,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,25,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,26,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,27,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,28,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,29,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,30,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,32,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,35,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,40,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,6,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,7,], )
paddle.Tensor.tile(Tensor([1360, 0],"float32"), list[1,9,], )
paddle.Tensor.tile(Tensor([1423, 0, 1],"float32"), list[1,53,1,], )
paddle.Tensor.tile(Tensor([1423, 1, 0],"float32"), list[1,53,1,], )
paddle.Tensor.tile(Tensor([1439, 0, 1],"float32"), list[1,69,1,], )
paddle.Tensor.tile(Tensor([1439, 1, 0],"float32"), list[1,69,1,], )
paddle.Tensor.tile(Tensor([144, 0],"float32"), list[4,1,1,], )
paddle.Tensor.tile(Tensor([144, 0],"float32"), list[64,1,1,], )
paddle.Tensor.tile(Tensor([1444, 0],"float32"), list[2,1,1,], )
paddle.Tensor.tile(Tensor([1531, 0, 80],"float32"), list[1,48,1,], )
paddle.Tensor.tile(Tensor([1531, 1, 0],"float32"), list[1,48,1,], )
paddle.Tensor.tile(Tensor([1535, 0, 80],"float32"), list[1,51,1,], )
paddle.Tensor.tile(Tensor([1535, 1, 0],"float32"), list[1,51,1,], )
paddle.Tensor.tile(Tensor([1591, 0, 80],"float32"), list[1,50,1,], )
paddle.Tensor.tile(Tensor([1591, 1, 0],"float32"), list[1,50,1,], )
paddle.Tensor.tile(Tensor([16, 0, 2],"float32"), repeat_times=list[1,12,1,], )
paddle.Tensor.tile(Tensor([1600, 0],"float32"), list[2,1,1,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,15,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,17,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,19,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,20,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,27,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,28,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,29,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,41,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,58,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,6,], )
paddle.Tensor.tile(Tensor([16660, 0],"float32"), list[1,64,], )
paddle.Tensor.tile(Tensor([169, 0],"float32"), list[32,1,1,], )
paddle.Tensor.tile(Tensor([169, 0],"float32"), list[48,1,1,], )
paddle.Tensor.tile(Tensor([169, 0],"float32"), list[90,1,1,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,17,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,19,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,22,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,23,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,24,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,25,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,26,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,27,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,30,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,31,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,32,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,33,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,34,], )
paddle.Tensor.tile(Tensor([1726, 0],"float32"), list[1,36,], )
paddle.Tensor.tile(Tensor([1728, 0],"float32"), list[24,1,1,], )
paddle.Tensor.tile(Tensor([1837, 0, 1],"float32"), list[1,83,1,], )
paddle.Tensor.tile(Tensor([1837, 1, 0],"float32"), list[1,83,1,], )
paddle.Tensor.tile(Tensor([1900, 0],"float32"), list[24,1,1,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,22,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,26,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,30,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,31,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,37,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,41,], )
paddle.Tensor.tile(Tensor([19125, 0],"float32"), list[1,77,], )
paddle.Tensor.tile(Tensor([1936, 0],"float32"), list[32,1,1,], )
paddle.Tensor.tile(Tensor([1936, 0],"float32"), list[48,1,1,], )
paddle.Tensor.tile(Tensor([1936, 0],"float32"), list[90,1,1,], )
paddle.Tensor.tile(Tensor([196, 0],"float32"), list[32,1,1,], )
paddle.Tensor.tile(Tensor([196, 0],"float32"), list[48,1,1,], )
paddle.Tensor.tile(Tensor([196, 0],"float32"), list[90,1,1,], )
paddle.Tensor.tile(Tensor([2, 0, 2],"float32"), repeat_times=list[1,12,1,], )
paddle.Tensor.tile(Tensor([2, 0, 4],"float32"), list[1,100,1,], )
paddle.Tensor.tile(Tensor([2, 0],"float32"), list[1,100,], )
paddle.Tensor.tile(Tensor([2, 0],"float32"), list[1,200,], )
paddle.Tensor.tile(Tensor([2, 0],"float32"), list[1,66,], )
paddle.Tensor.tile(Tensor([2, 1, 0],"float32"), list[1,100,1,], )
paddle.Tensor.tile(Tensor([2, 1, 0],"float32"), repeat_times=list[1,12,1,], )
paddle.Tensor.tile(Tensor([2061, 0, 1],"float32"), list[1,99,1,], )
paddle.Tensor.tile(Tensor([2061, 1, 0],"float32"), list[1,99,1,], )
paddle.Tensor.tile(Tensor([2080, 0],"float32"), list[24,1,1,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,34,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,35,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,37,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,38,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,39,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,42,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,44,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,45,], )
paddle.Tensor.tile(Tensor([2125, 0],"float32"), list[1,77,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,33,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,42,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,43,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,50,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,51,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,54,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,59,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,63,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,64,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,67,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,71,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,73,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,78,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,81,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,92,], )
paddle.Tensor.tile(Tensor([24565, 0],"float32"), list[1,97,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,36,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,38,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,43,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,44,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,48,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,52,], )
paddle.Tensor.tile(Tensor([2577, 0],"float32"), list[1,54,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,139,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,39,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,46,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,56,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,58,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,65,], )
paddle.Tensor.tile(Tensor([27540, 0],"float32"), list[1,80,], )
paddle.Tensor.tile(Tensor([3, 0, 1],"float32"), repeat_times=list[1,12,1,], )
paddle.Tensor.tile(Tensor([3, 1, 0],"float32"), repeat_times=list[1,12,1,], )
paddle.Tensor.tile(Tensor([3060, 0],"float32"), list[1,45,], )
paddle.Tensor.tile(Tensor([3060, 0],"float32"), list[1,50,], )
paddle.Tensor.tile(Tensor([3060, 0],"float32"), list[1,51,], )
paddle.Tensor.tile(Tensor([3060, 0],"float32"), list[1,53,], )
paddle.Tensor.tile(Tensor([3140, 0, 1],"float32"), list[1,98,1,], )
paddle.Tensor.tile(Tensor([3140, 1, 0],"float32"), list[1,98,1,], )
paddle.Tensor.tile(Tensor([34000, 0],"float32"), list[1,126,], )
paddle.Tensor.tile(Tensor([34000, 0],"float32"), list[1,52,], )
paddle.Tensor.tile(Tensor([34000, 0],"float32"), list[1,55,], )
paddle.Tensor.tile(Tensor([34000, 0],"float32"), list[1,97,], )
paddle.Tensor.tile(Tensor([3598, 0],"float32"), list[1,47,], )
paddle.Tensor.tile(Tensor([3598, 0],"float32"), list[1,49,], )
paddle.Tensor.tile(Tensor([3598, 0],"float32"), list[1,50,], )
paddle.Tensor.tile(Tensor([3598, 0],"float32"), list[1,53,], )
paddle.Tensor.tile(Tensor([4, 0, 4],"float32"), list[1,200,1,], )
paddle.Tensor.tile(Tensor([4, 0, 512],"float32"), tuple(1,8,1,), )
paddle.Tensor.tile(Tensor([4, 0],"float32"), list[1,200,], )
paddle.Tensor.tile(Tensor([4, 1, 0],"float32"), list[1,200,1,], )
paddle.Tensor.tile(Tensor([4, 1, 0],"float32"), tuple(1,8,1,), )
paddle.Tensor.tile(Tensor([4165, 0],"float32"), list[1,48,], )
paddle.Tensor.tile(Tensor([4165, 0],"float32"), list[1,55,], )
paddle.Tensor.tile(Tensor([4882, 0, 1],"float32"), list[1,126,1,], )
paddle.Tensor.tile(Tensor([4882, 1, 0],"float32"), list[1,126,1,], )
paddle.Tensor.tile(Tensor([5468, 0, 1],"float32"), list[1,131,1,], )
paddle.Tensor.tile(Tensor([5468, 0, 1],"float32"), list[1,142,1,], )
paddle.Tensor.tile(Tensor([5468, 1, 0],"float32"), list[1,131,1,], )
paddle.Tensor.tile(Tensor([5468, 1, 0],"float32"), list[1,142,1,], )
paddle.Tensor.tile(Tensor([5635, 0, 1],"float32"), list[1,121,1,], )
paddle.Tensor.tile(Tensor([5635, 1, 0],"float32"), list[1,121,1,], )
paddle.Tensor.tile(Tensor([58, 0, 2, 1, 8],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([58, 1, 0, 1, 8],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([58, 1, 2, 0, 8],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([58, 1, 2, 1, 0],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([8, 0, 4],"float32"), list[1,200,1,], )
paddle.Tensor.tile(Tensor([8, 0, 512],"float32"), tuple(1,14,1,), )
paddle.Tensor.tile(Tensor([8, 0, 512],"float32"), tuple(1,8,1,), )
paddle.Tensor.tile(Tensor([8, 1, 0],"float32"), list[1,200,1,], )
paddle.Tensor.tile(Tensor([8, 1, 0],"float32"), tuple(1,14,1,), )
paddle.Tensor.tile(Tensor([8, 1, 0],"float32"), tuple(1,8,1,), )
paddle.Tensor.topk(Tensor([0, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.tril(Tensor([0, 2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([0, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 0, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 2, 0],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 0, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 0],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 2, 0],"float32"), -1, )
paddle.Tensor.var(Tensor([0, 1],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 2, 3],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0, 2, 3],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 2],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0, 4],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 784],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([1000, 0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([10000, 0, 3],"float32"), axis=0, )
paddle.Tensor.var(Tensor([10000, 0, 3],"float64"), axis=0, )
paddle.Tensor.var(Tensor([10000, 2, 0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([10000, 2, 0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([100000, 0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([1000000, 0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([5000, 0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([5000, 0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([50000, 0, 3],"float64"), axis=0, )
paddle.Tensor.var(Tensor([50000, 2, 0],"float64"), axis=0, )
paddle.add(Tensor([0, 1024, 64, 64],"float32"), Tensor([1, 1024, 64, 64],"float32"), None, )
paddle.add(Tensor([0, 128, 128, 128],"float32"), Tensor([1, 128, 128, 128],"float32"), None, )
paddle.add(Tensor([0, 128, 200, 304],"float32"), Tensor([1, 128, 200, 304],"float32"), )
paddle.add(Tensor([0, 128, 200, 312],"float32"), Tensor([1, 128, 200, 312],"float32"), )
paddle.add(Tensor([0, 128, 304, 200],"float32"), Tensor([1, 128, 304, 200],"float32"), )
paddle.add(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([0, 2048, 62, 64],"float32"), Tensor([1, 2048, 62, 64],"float32"), None, )
paddle.add(Tensor([0, 20],"float32"), Tensor([1, 20],"float32"), )
paddle.add(Tensor([0, 256, 256],"float32"), Tensor([0, 1, 256],"float32"), )
paddle.add(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.add(Tensor([1, 1024, 64, 64],"float32"), Tensor([0, 1024, 64, 64],"float32"), None, )
paddle.add(Tensor([1, 128, 128, 128],"float32"), Tensor([0, 128, 128, 128],"float32"), None, )
paddle.add(Tensor([1, 128, 200, 304],"float32"), Tensor([0, 128, 200, 304],"float32"), )
paddle.add(Tensor([1, 128, 200, 312],"float32"), Tensor([0, 128, 200, 312],"float32"), )
paddle.add(Tensor([1, 128, 304, 200],"float32"), Tensor([0, 128, 304, 200],"float32"), )
paddle.add(Tensor([1, 2048, 62, 64],"float32"), Tensor([0, 2048, 62, 64],"float32"), None, )
paddle.add(Tensor([100, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.add(Tensor([100, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([100, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.add(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.add(Tensor([24, 0, 256],"float32"), Tensor([24, 1, 256],"float32"), )
paddle.add(Tensor([24, 256, 0],"float32"), Tensor([24, 1, 0],"float32"), )
paddle.add(Tensor([8, 0, 512, 1, 40],"float32"), Tensor([8, 0, 512, 1, 1],"float32"), )
paddle.add(Tensor([8, 1, 0, 1, 40],"float32"), Tensor([8, 26, 0, 1, 1],"float32"), )
paddle.add(Tensor([8, 1, 512, 0, 40],"float32"), Tensor([8, 26, 512, 0, 1],"float32"), )
paddle.add(Tensor([8, 1, 512, 0, 40],"float32"), Tensor([8, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([8, 1, 512, 1, 0],"float32"), Tensor([8, 26, 512, 1, 0],"float32"), )
paddle.add(Tensor([8, 1, 512, 1, 0],"float32"), Tensor([8, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([8, 1, 512, 1, 40],"float32"), Tensor([8, 0, 512, 1, 1],"float32"), )
paddle.add(Tensor([8, 1, 512, 1, 40],"float32"), Tensor([8, 26, 512, 0, 1],"float32"), )
paddle.add(x=Tensor([0, 1024, 40, 54],"float32"), y=Tensor([1, 1024, 40, 54],"float32"), )
paddle.add(x=Tensor([0, 1024, 40, 60],"float32"), y=Tensor([1, 1024, 40, 60],"float32"), )
paddle.add(x=Tensor([0, 1024, 40, 62],"float32"), y=Tensor([1, 1024, 40, 62],"float32"), )
paddle.add(x=Tensor([0, 3, 3],"float64"), y=Tensor([0, 1, 3],"float64"), )
paddle.add(x=Tensor([0, 3, 3],"float64"), y=Tensor([0, 3, 1],"float64"), )
paddle.add(x=Tensor([1, 1024, 40, 54],"float32"), y=Tensor([0, 1024, 40, 54],"float32"), )
paddle.add(x=Tensor([1, 1024, 40, 60],"float32"), y=Tensor([0, 1024, 40, 60],"float32"), )
paddle.add(x=Tensor([1, 1024, 40, 62],"float32"), y=Tensor([0, 1024, 40, 62],"float32"), )
paddle.add(x=Tensor([3, 0, 3],"float64"), y=Tensor([3, 0, 1],"float64"), )
paddle.add(x=Tensor([3, 0, 3],"float64"), y=Tensor([3, 1, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 1, 0],"float64"), )
paddle.add(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3, 1],"float64"), )
paddle.add_n(list[Tensor([100, 0],"float32"),Tensor([100, 1],"float32"),], )
paddle.add_n(list[Tensor([100, 1],"float32"),Tensor([100, 0],"float32"),], )
paddle.add_n(list[Tensor([1200, 0],"float32"),Tensor([1200, 1],"float32"),], )
paddle.add_n(list[Tensor([1200, 1],"float32"),Tensor([1200, 0],"float32"),], )
paddle.add_n(list[Tensor([1291, 0],"float32"),Tensor([1291, 1],"float32"),], )
paddle.add_n(list[Tensor([1291, 1],"float32"),Tensor([1291, 0],"float32"),], )
paddle.add_n(list[Tensor([1800, 0],"float32"),Tensor([1800, 1],"float32"),], )
paddle.add_n(list[Tensor([1800, 1],"float32"),Tensor([1800, 0],"float32"),], )
paddle.add_n(list[Tensor([18211, 0],"float32"),Tensor([18211, 1],"float32"),], )
paddle.add_n(list[Tensor([18211, 1],"float32"),Tensor([18211, 0],"float32"),], )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([0, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.allclose(Tensor([0, 32, 32],"float32"), Tensor([0, 32, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 32, 64],"float32"), Tensor([0, 32, 64],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 32],"float32"), Tensor([0, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 4, 16],"float32"), Tensor([0, 4, 16],"float32"), )
paddle.allclose(Tensor([0, 4, 8],"float32"), Tensor([0, 4, 8],"float32"), )
paddle.allclose(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), atol=0.001, )
paddle.allclose(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 5],"float32"), Tensor([0, 5],"float32"), atol=0.001, )
paddle.allclose(Tensor([0, 64, 4],"float32"), Tensor([0, 64, 4],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 7, 16],"float32"), Tensor([0, 7, 16],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 7, 32],"float32"), Tensor([0, 7, 32],"float32"), )
paddle.allclose(Tensor([0, 7, 32],"float32"), Tensor([0, 7, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 7, 99],"float32"), Tensor([0, 7, 99],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 8],"float32"), Tensor([0, 8],"float32"), )
paddle.allclose(Tensor([13, 0, 16],"float32"), Tensor([13, 0, 16],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0, 32],"float32"), Tensor([13, 0, 32],"float32"), )
paddle.allclose(Tensor([13, 0, 64],"float32"), Tensor([13, 0, 64],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 32, 0],"float32"), Tensor([13, 32, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"float32"), )
paddle.allclose(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([14, 0, 32],"float32"), Tensor([14, 0, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 0, 4],"float32"), Tensor([14, 0, 4],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 0, 99],"float32"), Tensor([14, 0, 99],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 7, 0],"float32"), Tensor([14, 7, 0],"float32"), atol=1e-05, )
paddle.allclose(Tensor([2, 0, 16],"float32"), Tensor([2, 0, 16],"float32"), )
paddle.allclose(Tensor([2, 0, 8],"float32"), Tensor([2, 0, 8],"float32"), )
paddle.allclose(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.allclose(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), atol=0.001, )
paddle.allclose(Tensor([2, 4, 0],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amax(Tensor([0, 4],"float64"), 1, True, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([2, 0],"float64"), 0, False, )
paddle.amax(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([0, 4],"float64"), 1, True, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([2, 0],"float64"), 0, False, )
paddle.amin(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.argmax(Tensor([0, 100, 32],"float32"), axis=1, )
paddle.argmax(Tensor([0, 100, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 1000],"float32"), axis=1, )
paddle.argmax(Tensor([0, 100],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 1024, 50304],"float16"), -1, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.argmax(Tensor([0, 2, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 20, 32],"float32"), axis=1, )
paddle.argmax(Tensor([0, 20, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 256],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 3, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 30, 20],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 32, 64],"float16"), axis=1, )
paddle.argmax(Tensor([0, 32, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 32000],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 32],"float64"), axis=-1, )
paddle.argmax(Tensor([0, 51865],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 6],"float32"), axis=1, )
paddle.argmax(Tensor([0, 7, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 8, 14, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 8, 0, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 8, 14, 0],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([12988, 32, 0],"float16"), axis=1, )
paddle.argmax(Tensor([12988, 32, 0],"float32"), axis=1, )
paddle.argmax(Tensor([13, 0, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 0, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 0, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 4, 0, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([16, 0, 50304],"float16"), -1, )
paddle.argmax(Tensor([2, 0, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([29151, 100, 0],"float32"), axis=1, )
paddle.argmax(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmax(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmax(Tensor([4148, 0, 20],"float32"), axis=-1, )
paddle.argmax(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmax(Tensor([80239, 20, 0],"float32"), axis=1, )
paddle.argmax(x=Tensor([0, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([0, 3],"int64"), axis=-1, )
paddle.argmax(x=Tensor([3, 0],"int64"), axis=-2, )
paddle.argmax(x=Tensor([3, 0],"int64"), axis=Tensor([1],"int64"), )
paddle.argmax(x=Tensor([3, 3, 0],"float64"), axis=1, keepdim=False, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([0, 10],"float32"), axis=1, )
paddle.argmin(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmin(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmin(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmin(x=Tensor([0, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([0, 3],"int64"), axis=-1, )
paddle.argmin(x=Tensor([3, 0],"int64"), axis=-2, )
paddle.argmin(x=Tensor([3, 3, 0],"float64"), axis=1, keepdim=False, )
paddle.bincount(Tensor([0],"int32"), weights=Tensor([0],"float32"), )
paddle.bincount(Tensor([0],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(Tensor([0],"int64"), minlength=100, )
paddle.bincount(Tensor([0],"int64"), minlength=123, )
paddle.bincount(Tensor([0],"int64"), minlength=256, )
paddle.bincount(Tensor([0],"int64"), minlength=256000, )
paddle.bincount(Tensor([0],"int64"), minlength=32000, )
paddle.bincount(Tensor([0],"int64"), minlength=4, )
paddle.bincount(Tensor([0],"int64"), minlength=99, )
paddle.bincount(Tensor([0],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([0],"int64"), weights=Tensor([0],"float64"), )
paddle.bincount(Tensor([0],"int64"), weights=Tensor([4],"float64"), )
paddle.bincount(x=Tensor([0],"int32"), minlength=4, )
paddle.bincount(x=Tensor([0],"int32"), minlength=Tensor([1],"int64"), )
paddle.bincount(x=Tensor([0],"int32"), weights=Tensor([0],"int32"), )
paddle.bincount(x=Tensor([0],"int32"), weights=Tensor([10],"int32"), )
paddle.bmm(Tensor([0, 165, 126],"float32"), Tensor([0, 126, 64],"float32"), )
paddle.bmm(Tensor([0, 165, 165],"float32"), Tensor([0, 165, 64],"float32"), )
paddle.bmm(Tensor([0, 165, 64],"float32"), Tensor([0, 64, 126],"float32"), )
paddle.bmm(Tensor([0, 300, 128],"float32"), Tensor([0, 128, 30976],"float32"), )
paddle.bmm(Tensor([0, 300, 128],"float32"), Tensor([0, 128, 33856],"float32"), )
paddle.bmm(Tensor([0, 7, 128],"float32"), Tensor([0, 128, 7],"float32"), )
paddle.bmm(Tensor([0, 7, 7],"float32"), Tensor([0, 7, 128],"float32"), )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 0],"float32"), )
paddle.bmm(Tensor([1008, 7, 128],"float32"), Tensor([1008, 128, 0],"float32"), )
paddle.bmm(Tensor([1008, 7, 7],"float32"), Tensor([1008, 7, 0],"float32"), )
paddle.bmm(Tensor([112, 165, 126],"float32"), Tensor([112, 126, 0],"float32"), )
paddle.bmm(Tensor([112, 165, 165],"float32"), Tensor([112, 165, 0],"float32"), )
paddle.bmm(Tensor([112, 165, 64],"float32"), Tensor([112, 64, 0],"float32"), )
paddle.bmm(x=Tensor([0, 2, 3],"float32"), y=Tensor([0, 3, 2],"float32"), )
paddle.bmm(x=Tensor([0, 2, 3],"float64"), y=Tensor([0, 3, 2],"float64"), )
paddle.bmm(x=Tensor([2, 2, 3],"float32"), y=Tensor([2, 3, 0],"float32"), )
paddle.bmm(x=Tensor([2, 2, 3],"float64"), y=Tensor([2, 3, 0],"float64"), )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 2, 6, 1],"float64"),Tensor([0, 6, 1, 1, 3],"float64"),Tensor([0, 1, 1, 6, 3],"float64"),Tensor([0, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 2, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 1],"float64"),Tensor([0, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 6, 1],"float64"),Tensor([0, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 6, 1],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6],"float64"),Tensor([0, 1, 6],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6],"float64"),Tensor([0, 1],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 2, 6, 1],"float64"),Tensor([1, 0, 1, 1, 3],"float64"),Tensor([1, 0, 1, 6, 3],"float64"),Tensor([1, 0, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 6, 6, 1],"float64"),Tensor([1, 0, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float64"),Tensor([1, 6, 0, 1, 3],"float64"),Tensor([1, 1, 0, 6, 3],"float64"),Tensor([1, 6, 0, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float64"),Tensor([1, 6, 0, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 0, 1],"float64"),Tensor([1, 6, 1, 0, 3],"float64"),Tensor([1, 1, 1, 0, 3],"float64"),Tensor([1, 6, 1, 0, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 0],"float64"),Tensor([1, 6, 1, 1, 0],"float64"),Tensor([1, 1, 1, 6, 0],"float64"),Tensor([1, 6, 1, 6, 0],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float64"),Tensor([0, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([0, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([0, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 0, 1],"float64"),Tensor([1, 6, 1, 0, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 0],"float64"),Tensor([1, 6, 1, 6, 0],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float64"),Tensor([0, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float64"),Tensor([1, 6, 1, 6, 0],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6, 1],"float64"),Tensor([6, 0, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6, 1],"float64"),Tensor([6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6],"float64"),Tensor([6, 1, 6],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0],"float64"),Tensor([6, 1],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0, 1],"float64"),Tensor([6, 1, 0, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0],"float64"),Tensor([6, 1, 0],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 0],"float64"),Tensor([6, 1, 6, 0],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float64"),Tensor([6, 1, 6, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 4, 1],"complex64"),Tensor([0, 4, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 4, 1],"complex64"),Tensor([1, 4, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 4, 1],"float32"),Tensor([0, 4, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 4, 1],"float32"),Tensor([1, 4, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 4],"float32"),Tensor([0, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 4],"float64"),Tensor([1, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([3, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([3, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([0, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float64"),Tensor([0, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([4, 0, 4, 1],"complex64"),Tensor([1, 0, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 0, 4, 1],"float32"),Tensor([1, 0, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 0, 1],"complex64"),Tensor([1, 4, 0, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 0, 1],"complex64"),Tensor([1, 4, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 0, 1],"float32"),Tensor([1, 4, 0, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 0, 1],"float32"),Tensor([1, 4, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 0],"complex64"),Tensor([1, 4, 1, 0],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex64"),Tensor([1, 0, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex64"),Tensor([1, 4, 1, 0],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"float32"),Tensor([1, 0, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"float32"),Tensor([1, 4, 1, 0],"float32"),], )
paddle.broadcast_tensors(tuple(Tensor([0, 1],"float64"),Tensor([0, 3],"float64"),Tensor([0, 3],"float64"),), )
paddle.bucketize(Tensor([0, 4],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([0, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([0, 4],"float64"), Tensor([4],"float64"), right=True, )
paddle.bucketize(Tensor([2, 0],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 0],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 0],"float64"), Tensor([4],"float64"), right=True, )
paddle.cdist(Tensor([8550, 0],"float32"), Tensor([1, 0],"float32"), p=1, )
paddle.cdist(Tensor([8550, 4],"float32"), Tensor([0, 4],"float32"), p=1, )
paddle.cdist(Tensor([900, 0],"float32"), Tensor([1, 0],"float32"), p=1, )
paddle.cdist(Tensor([900, 4],"float32"), Tensor([0, 4],"float32"), p=1, )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([0],"int32"), )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=Tensor([0],"int64"), )
paddle.concat(list[Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0,  ...
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"f ...
paddle.concat(list[Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1,  ...
paddle.concat(list[Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"f ...
paddle.concat(list[Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"f ...
paddle.concat(list[Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1, 3, 336, 336],"float32"),Tensor([1,  ...
paddle.crop(x=Tensor([0, 3],"int32"), shape=list[2,2,], )
paddle.crop(x=Tensor([0, 3],"int64"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 0],"int32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 0],"int64"), shape=list[2,2,], )
paddle.cumprod(Tensor([0, 10],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 10],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 1],"complex128"), dim=-1, )
paddle.cumprod(Tensor([0, 1],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 2, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 20, 1],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([0, 2],"complex128"), dim=-1, )
paddle.cumprod(Tensor([0, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 3, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([0, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([0, 3],"complex128"), dim=-1, )
paddle.cumprod(Tensor([0],"float32"), dim=0, )
paddle.cumprod(Tensor([1, 0, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([1, 2, 0],"float32"), dim=-1, )
paddle.cumprod(Tensor([10, 0, 1],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([10, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([10, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([10, 20, 0],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([2, 0, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 0, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 0, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 0, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 0, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 2, 0],"float32"), dim=-1, )
paddle.cumprod(Tensor([2, 3, 0, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 0],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 10, 0],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=4, )
paddle.cumprod(Tensor([5, 0],"complex128"), dim=-1, )
paddle.cumprod(Tensor([5, 0],"float32"), dim=-1, )
paddle.cumprod(x=Tensor([0, 3, 2],"float64"), dim=-2, )
paddle.cumprod(x=Tensor([0, 3, 2],"float64"), dim=0, )
paddle.cumprod(x=Tensor([0, 4],"float32"), dim=0, )
paddle.cumprod(x=Tensor([0, 4],"float64"), dim=-1, )
paddle.cumprod(x=Tensor([0, 4],"float64"), dim=0, )
paddle.cumprod(x=Tensor([0, 4],"float64"), dim=1, )
paddle.cumprod(x=Tensor([0],"float64"), dim=0, )
paddle.cumprod(x=Tensor([2, 0, 2],"float64"), dim=-2, )
paddle.cumprod(x=Tensor([2, 0, 2],"float64"), dim=0, )
paddle.cumprod(x=Tensor([2, 3, 0],"float64"), dim=-2, )
paddle.cumprod(x=Tensor([2, 3, 0],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 0],"float32"), dim=0, )
paddle.cumprod(x=Tensor([3, 0],"float64"), dim=-1, )
paddle.cumprod(x=Tensor([3, 0],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 0],"float64"), dim=1, )
paddle.cumulative_trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 0],"float16"), )
paddle.diag(Tensor([0, 10],"float32"), offset=-1, )
paddle.diag(Tensor([0, 1500],"float32"), offset=-1, )
paddle.diag(Tensor([0, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([10, 0],"float32"), offset=1, )
paddle.diag(Tensor([2000, 0],"float32"), offset=1, )
paddle.diag(x=Tensor([0, 2],"float64"), offset=-1, )
paddle.diag(x=Tensor([0, 3],"float64"), offset=-1, )
paddle.diag(x=Tensor([2, 0],"float64"), offset=2, )
paddle.diag(x=Tensor([3, 0],"float64"), offset=1, )
paddle.diag_embed(Tensor([0, 12],"float64"), )
paddle.diag_embed(Tensor([0, 2],"float32"), )
paddle.diag_embed(Tensor([0, 2],"float64"), )
paddle.diag_embed(Tensor([0, 3, 12],"float64"), )
paddle.diag_embed(Tensor([0, 3, 2],"float64"), )
paddle.diag_embed(Tensor([0, 3, 4],"float64"), )
paddle.diag_embed(Tensor([0, 3, 6],"float64"), )
paddle.diag_embed(Tensor([0, 3, 8],"float64"), )
paddle.diag_embed(Tensor([0, 4],"float64"), )
paddle.diag_embed(Tensor([0, 6],"float64"), )
paddle.diag_embed(Tensor([0],"float32"), )
paddle.diag_embed(Tensor([0],"float64"), )
paddle.diag_embed(Tensor([1, 0],"float32"), )
paddle.diag_embed(Tensor([1, 0],"float64"), )
paddle.diag_embed(Tensor([2, 0, 12],"float64"), )
paddle.diag_embed(Tensor([2, 0, 2],"float64"), )
paddle.diag_embed(Tensor([2, 0, 4],"float64"), )
paddle.diag_embed(Tensor([2, 0, 6],"float64"), )
paddle.diag_embed(Tensor([2, 0, 8],"float64"), )
paddle.diag_embed(Tensor([2, 3, 0],"float64"), )
paddle.diagonal(Tensor([0, 2, 2],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(Tensor([0, 3, 4],"float32"), )
paddle.diagonal(Tensor([0, 3, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([0, 3, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([0, 3, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([1, 0, 2],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(Tensor([1, 2, 0],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(Tensor([10, 0, 4],"float32"), )
paddle.diagonal(Tensor([10, 0, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([10, 0, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([10, 0, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([10, 3, 0],"float32"), )
paddle.diagonal(Tensor([10, 3, 0],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([10, 3, 0],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([10, 3, 0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([2, 0, 4],"float32"), )
paddle.diagonal(Tensor([2, 0, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([2, 0, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([2, 0, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([2, 3, 0],"float32"), )
paddle.diagonal(Tensor([2, 3, 0],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([2, 3, 0],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([2, 3, 0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(x=Tensor([0, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([0, 6, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([0, 6, 6, 2, 2],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([0, 6, 6, 2, 2],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([0, 6, 6, 2, 2],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([0, 6, 6, 2, 2],"float64"), axis1=4, axis2=2, )
paddle.diagonal(x=Tensor([0, 6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([0, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([0, 6],"float32"), )
paddle.diagonal(x=Tensor([0, 6],"float64"), )
paddle.diagonal(x=Tensor([0, 6],"float64"), offset=-1, )
paddle.diagonal(x=Tensor([0, 6],"float64"), offset=1, )
paddle.diagonal(x=Tensor([6, 0, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 0, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 0, 6, 2, 2],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([6, 0, 6, 2, 2],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([6, 0, 6, 2, 2],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([6, 0, 6, 2, 2],"float64"), axis1=4, axis2=2, )
paddle.diagonal(x=Tensor([6, 0, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 0, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 0],"float32"), )
paddle.diagonal(x=Tensor([6, 0],"float64"), )
paddle.diagonal(x=Tensor([6, 0],"float64"), offset=-1, )
paddle.diagonal(x=Tensor([6, 0],"float64"), offset=1, )
paddle.diagonal(x=Tensor([6, 6, 0, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 0, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 0, 2, 2],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 0, 2, 2],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 0, 2, 2],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([6, 6, 0, 2, 2],"float64"), axis1=4, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 0, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 0],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 0, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 0, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 0, 2],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 0, 2],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 0, 2],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([6, 6, 6, 0, 2],"float64"), axis1=4, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 0],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 0],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 0],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 0],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 0],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 0],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 0],"float64"), axis1=4, axis2=2, )
paddle.digamma(Tensor([0, 10, 10, 2],"float64"), )
paddle.digamma(Tensor([0, 10, 10],"float64"), )
paddle.digamma(Tensor([0, 12],"float32"), )
paddle.digamma(Tensor([0, 1],"float32"), )
paddle.digamma(Tensor([0, 2, 2],"float32"), )
paddle.digamma(Tensor([0, 20, 1],"float32"), )
paddle.digamma(Tensor([0, 2],"float32"), )
paddle.digamma(Tensor([0, 3, 32, 32],"float32"), )
paddle.digamma(Tensor([0, 3, 32, 32],"float64"), )
paddle.digamma(Tensor([0, 3],"float32"), )
paddle.digamma(Tensor([0, 5, 2],"float64"), )
paddle.digamma(Tensor([0],"float32"), )
paddle.digamma(Tensor([0],"float64"), )
paddle.digamma(Tensor([1, 0, 2],"float32"), )
paddle.digamma(Tensor([1, 0],"float32"), )
paddle.digamma(Tensor([1, 2, 0],"float32"), )
paddle.digamma(Tensor([10, 0, 10, 2],"float64"), )
paddle.digamma(Tensor([10, 0, 10],"float64"), )
paddle.digamma(Tensor([10, 0, 1],"float32"), )
paddle.digamma(Tensor([10, 0],"float32"), )
paddle.digamma(Tensor([10, 10, 0, 2],"float64"), )
paddle.digamma(Tensor([10, 10, 0],"float64"), )
paddle.digamma(Tensor([10, 10, 10, 0],"float64"), )
paddle.digamma(Tensor([10, 20, 0],"float32"), )
paddle.digamma(Tensor([2, 0, 2],"float32"), )
paddle.digamma(Tensor([2, 0, 2],"float64"), )
paddle.digamma(Tensor([2, 0],"float32"), )
paddle.digamma(Tensor([2, 2, 0],"float32"), )
paddle.digamma(Tensor([2, 5, 0],"float64"), )
paddle.digamma(Tensor([8, 0, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 0, 32, 32],"float64"), )
paddle.digamma(Tensor([8, 3, 0, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 0, 32],"float64"), )
paddle.digamma(Tensor([8, 3, 32, 0],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 0],"float64"), )
paddle.digamma(x=Tensor([0, 3],"float32"), )
paddle.digamma(x=Tensor([0, 3],"float64"), )
paddle.digamma(x=Tensor([0, 6, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([0, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([0, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 0, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 0],"float32"), )
paddle.digamma(x=Tensor([3, 0],"float64"), )
paddle.digamma(x=Tensor([3, 6, 0, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 0, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 0],"float64"), )
paddle.digamma(x=Tensor([6, 0, 6, 6],"float64"), )
paddle.digamma(x=Tensor([6, 0, 6],"float64"), )
paddle.digamma(x=Tensor([6, 6, 0, 6],"float64"), )
paddle.digamma(x=Tensor([6, 6, 0],"float64"), )
paddle.digamma(x=Tensor([6, 6, 6, 0],"float64"), )
paddle.dist(Tensor([0, 2, 3, 2],"float32"), Tensor([0, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([0, 2, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), 0, )
paddle.dist(Tensor([2, 0, 3, 2],"float32"), Tensor([1, 0, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 0, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), 0, )
paddle.dist(Tensor([2, 2, 0, 2],"float32"), Tensor([1, 1, 0, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 0],"float32"), Tensor([1, 1, 3, 0],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 0],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(x=Tensor([0, 1, 1, 4, 4],"float64"), y=Tensor([0, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([0, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), p=0, )
paddle.dist(x=Tensor([0, 4, 1, 3],"float64"), y=Tensor([4, 3, 1],"float64"), p=7, )
paddle.dist(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.dist(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.dist(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), p=1, )
paddle.dist(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([0, 10],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([0, 10],"float64"), p=4, )
paddle.dist(x=Tensor([2, 0, 1, 4, 4],"float64"), y=Tensor([2, 0, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 0],"float64"), y=Tensor([2, 0],"float64"), p=0, )
paddle.dist(x=Tensor([2, 1, 0, 4, 4],"float64"), y=Tensor([2, 8, 0, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 0, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 0, 4],"float64"), y=Tensor([2, 8, 7, 0, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 0, 4],"float64"), y=Tensor([2, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 0],"float64"), y=Tensor([2, 8, 7, 1, 0],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 0, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 0, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([0, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 4, 1, 0],"float64"), y=Tensor([4, 3, 1],"float64"), p=7, )
paddle.dist(x=Tensor([2, 4, 1, 3],"float64"), y=Tensor([4, 0, 1],"float64"), p=7, )
paddle.dist(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.dist(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.dist(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), p=1, )
paddle.divide(Tensor([0, 128],"float32"), Tensor([0, 1],"float32"), )
paddle.divide(Tensor([0, 3, 3, 4],"float32"), Tensor([0, 3, 1, 1],"float32"), )
paddle.divide(Tensor([0, 3, 3, 4],"float32"), Tensor([0, 3, 1, 4],"float32"), )
paddle.divide(Tensor([104, 0],"float32"), Tensor([104, 1],"float32"), )
paddle.divide(Tensor([2, 0, 3, 4],"float32"), Tensor([2, 0, 1, 1],"float32"), )
paddle.divide(Tensor([2, 0, 3, 4],"float32"), Tensor([2, 0, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 0, 4],"float32"), Tensor([2, 3, 0, 1],"float32"), )
paddle.divide(Tensor([2, 3, 0, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.divide(Tensor([2, 3, 0, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 3, 0],"float32"), Tensor([2, 3, 1, 0],"float32"), )
paddle.divide(Tensor([2, 3, 3, 0],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.divide(x=Tensor([0, 1],"float64"), y=Tensor([0, 2],"float64"), )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([3, 0],"float64"), )
paddle.einsum("..., ...", Tensor([3, 12],"float64"), Tensor([0, 3, 12],"float64"), )
paddle.einsum("..., ...", Tensor([3, 13],"float64"), Tensor([0, 3, 13],"float64"), )
paddle.einsum("..., ...", Tensor([3, 14],"float64"), Tensor([0, 3, 14],"float64"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([0, 16, 128, 50],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([0, 16, 50, 50],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 0, 50],"float32"), Tensor([256, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 128, 50],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 50, 50],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 12],"float64"), Tensor([12],"float64"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 13],"float64"), Tensor([13],"float64"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 14],"float64"), Tensor([14],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 12],"float64"), Tensor([12],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 13],"float64"), Tensor([13],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 14],"float64"), Tensor([14],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 12],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 13],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 14],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 12],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 13],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 14],"float64"), )
paddle.einsum("...km,mlk->...lm", Tensor([0, 32, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...km,mlk->...lm", Tensor([4, 0, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...km,mlk->...lm", Tensor([4, 32, 32, 16],"float32"), Tensor([16, 0, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([0, 32, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([4, 0, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([4, 32, 32, 16],"float32"), Tensor([16, 32, 0],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([0, 128, 16, 16],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([0, 50, 16, 16],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 0, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 0, 16, 16],"float32"), Tensor([256, 50, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 128, 0, 16],"float32"), Tensor([256, 50, 0, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 128, 16, 0],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 128, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 50, 0, 16],"float32"), Tensor([256, 50, 0, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 50, 16, 0],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 50, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), )
paddle.einsum("abcd,bec->aecd", Tensor([0, 32, 32, 16],"float32"), Tensor([32, 32, 32],"float32"), )
paddle.einsum("abcd,bec->aecd", Tensor([4, 32, 32, 0],"float32"), Tensor([32, 32, 32],"float32"), )
paddle.einsum("abcd,bec->aecd", Tensor([4, 32, 32, 16],"float32"), Tensor([32, 0, 32],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 128, 8, 5],"float32"), Tensor([128, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 32, 16, 9],"float32"), Tensor([32, 32, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 32, 8, 5],"float32"), Tensor([32, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 64, 16, 9],"float32"), Tensor([64, 32, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 64, 8, 5],"float32"), Tensor([64, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 0, 5],"float32"), Tensor([128, 64, 0, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 8, 0],"float32"), Tensor([128, 64, 8, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 8, 5],"float32"), Tensor([128, 0, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 0, 5],"float32"), Tensor([32, 64, 0, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 0, 9],"float32"), Tensor([32, 32, 0, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 16, 0],"float32"), Tensor([32, 32, 16, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 16, 9],"float32"), Tensor([32, 0, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 8, 0],"float32"), Tensor([32, 64, 8, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 8, 5],"float32"), Tensor([32, 0, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 0, 5],"float32"), Tensor([64, 64, 0, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 0, 9],"float32"), Tensor([64, 32, 0, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 16, 0],"float32"), Tensor([64, 32, 16, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 16, 9],"float32"), Tensor([64, 0, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 8, 0],"float32"), Tensor([64, 64, 8, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 8, 5],"float32"), Tensor([64, 0, 8, 5],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([0, 15, 8, 8, 32],"float32"), Tensor([8, 32, 32],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([32, 0, 8, 8, 32],"float32"), Tensor([8, 32, 32],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([32, 15, 0, 8, 32],"float32"), Tensor([8, 32, 32],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([32, 15, 8, 8, 32],"float32"), Tensor([8, 32, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 113, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 145, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 157, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 145],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 145],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 157],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 157],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 169],"float32"), Tensor([0, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 169],"float32"), Tensor([1, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 145],"float32"), Tensor([1, 0, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 157],"float32"), Tensor([1, 0, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 169],"float32"), Tensor([1, 0, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 145],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 157],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 169],"float32"), Tensor([1, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 145],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 145],"float32"), Tensor([1, 8, 145, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 157],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 157],"float32"), Tensor([1, 8, 157, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 169],"float32"), Tensor([0, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 169],"float32"), Tensor([1, 8, 169, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 0, 1, 1, 7],"float32"), Tensor([52, 0, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 0, 3, 1, 3],"float32"), Tensor([52, 0, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 0, 1, 3],"float32"), Tensor([52, 4, 0, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 0, 1, 7],"float32"), Tensor([52, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 0, 1, 7],"float32"), Tensor([52, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 1, 0, 7],"float32"), Tensor([52, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 1, 1, 7],"float32"), Tensor([52, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 1, 1, 7],"float32"), Tensor([52, 4, 1, 7, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 3, 0, 3],"float32"), Tensor([52, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 3, 1, 3],"float32"), Tensor([52, 4, 3, 3, 0],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([0, 48, 48, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([60, 48, 0, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([60, 48, 48, 64],"float32"), Tensor([48, 0, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([864, 14, 0, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([864, 14, 14, 64],"float32"), Tensor([14, 0, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([96, 32, 0, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([96, 32, 32, 64],"float32"), Tensor([32, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([0, 48, 48, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([60, 0, 48, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([60, 48, 48, 64],"float32"), Tensor([48, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([864, 0, 14, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([864, 14, 14, 64],"float32"), Tensor([14, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([96, 0, 32, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([96, 32, 32, 64],"float32"), Tensor([32, 0, 64],"float32"), )
paddle.einsum("bi,bi->b", Tensor([0, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.einsum("bi,bi->b", Tensor([10000, 0],"float32"), Tensor([10000, 0],"float32"), )
paddle.einsum("bi,bi->b", Tensor([100000, 0],"float32"), Tensor([100000, 0],"float32"), )
paddle.einsum("bi,bi->b", Tensor([40, 0],"float32"), Tensor([40, 0],"float32"), )
paddle.einsum("bi,bi->b", Tensor([64, 0],"float32"), Tensor([64, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 4, 4, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 4, 4, 4],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 7, 4, 4],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 0, 4, 4],"float32"), Tensor([13, 7, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 0, 4],"float32"), Tensor([13, 4, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 0, 4],"float32"), Tensor([13, 7, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 4, 0],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 4, 0],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 4, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 7, 0, 4],"float32"), Tensor([13, 7, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 7, 4, 0],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 7, 4, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([0, 7, 4, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 7, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 4, 4, 4],"float32"), Tensor([15, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 4, 4, 4],"float32"), Tensor([8, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 7, 4, 4],"float32"), Tensor([14, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 0, 4, 4],"float32"), Tensor([14, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 0, 4, 4],"float32"), Tensor([15, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 4, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 7, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("bix,iox->box", Tensor([0, 64, 64],"float32"), Tensor([64, 64, 64],"float32"), )
paddle.einsum("bix,iox->box", Tensor([20, 64, 0],"float32"), Tensor([64, 64, 0],"float32"), )
paddle.einsum("bix,iox->box", Tensor([20, 64, 64],"float32"), Tensor([64, 0, 64],"float32"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([0, 32, 12, 12],"complex64"), Tensor([32, 32, 12, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([32, 32, 0, 12],"complex64"), Tensor([32, 32, 0, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([32, 32, 12, 0],"complex64"), Tensor([32, 32, 12, 0],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([32, 32, 12, 12],"complex64"), Tensor([32, 0, 12, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([8, 32, 0, 12],"complex64"), Tensor([32, 32, 0, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([8, 32, 12, 0],"complex64"), Tensor([32, 32, 12, 0],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([8, 32, 12, 12],"complex64"), Tensor([32, 0, 12, 12],"complex64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([52, 5, 0],"float32"), Tensor([52, 4, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([52, 5, 1],"float32"), Tensor([52, 0, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([52, 5, 1],"float32"), Tensor([52, 4, 5, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 4, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 4, 7],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 7, 7],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 0, 7],"float32"), Tensor([13, 7, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 4, 4],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 4, 7],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 7, 7],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 0, 7],"float32"), Tensor([7, 14, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 0, 8],"float32"), Tensor([8, 14, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 7, 7],"float32"), Tensor([7, 14, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 8, 7],"float32"), Tensor([7, 14, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 8, 8],"float32"), Tensor([8, 14, 4, 0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([3],"float32"), Tensor([0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([12],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([13],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([14],"float64"), )
paddle.einsum("i,j->ij", Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.einsum("i,j->ij", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ij", Tensor([0],"float64"), Tensor([6],"float64"), )
paddle.einsum("i,j->ij", Tensor([10],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ij", Tensor([11],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,j->ij", Tensor([131072],"float32"), Tensor([0],"float32"), )
paddle.einsum("i..., i...", Tensor([2, 0, 2],"float64"), Tensor([2],"float64"), )
paddle.einsum("i..., i...", Tensor([2, 3, 0],"float64"), Tensor([2],"float64"), )
paddle.einsum("i..., i...", Tensor([3, 0, 2],"float64"), Tensor([3],"float64"), )
paddle.einsum("i..., i...", Tensor([3, 3, 0],"float64"), Tensor([3],"float64"), )
paddle.einsum("i..., i...", Tensor([4, 0, 2],"float64"), Tensor([4],"float64"), )
paddle.einsum("i..., i...", Tensor([4, 3, 0],"float64"), Tensor([4],"float64"), )
paddle.einsum("i...->...", Tensor([0, 12],"float64"), )
paddle.einsum("i...->...", Tensor([0, 13],"float64"), )
paddle.einsum("i...->...", Tensor([0, 14],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 12],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 13],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 14],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 12],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 13],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 14],"float64"), )
paddle.einsum("ibm,hm->ibh", Tensor([0, 11, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([0, 4, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 11, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 14, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 4, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 11, 4, 8],"float32"), Tensor([0, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 11, 4, 8],"float32"), Tensor([14, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 11, 4, 8],"float32"), Tensor([7, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 14, 4, 8],"float32"), Tensor([0, 14, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 14, 4, 8],"float32"), Tensor([14, 14, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 0, 8],"float32"), Tensor([14, 11, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 0, 8],"float32"), Tensor([7, 11, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 4, 0],"float32"), Tensor([14, 11, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 4, 0],"float32"), Tensor([7, 11, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 4, 8],"float32"), Tensor([0, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 14, 0, 8],"float32"), Tensor([14, 14, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 14, 4, 0],"float32"), Tensor([14, 14, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 14, 4, 8],"float32"), Tensor([0, 14, 4, 8],"float32"), )
paddle.einsum("ic,pi->pc", Tensor([200, 0],"float32"), Tensor([128, 200],"float32"), )
paddle.einsum("ic,pi->pc", Tensor([200, 256],"float32"), Tensor([0, 200],"float32"), )
paddle.einsum("ij, j", Tensor([0, 12],"float64"), Tensor([12],"float64"), )
paddle.einsum("ij, j", Tensor([0, 13],"float64"), Tensor([13],"float64"), )
paddle.einsum("ij, j", Tensor([0, 14],"float64"), Tensor([14],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 12],"float64"), Tensor([12, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 13],"float64"), Tensor([13, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 14],"float64"), Tensor([14, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 12],"float64"), Tensor([12, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 13],"float64"), Tensor([13, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 14],"float64"), Tensor([14, 0],"float64"), )
paddle.einsum("ij,k->ijk", Tensor([0, 4096],"float32"), Tensor([64],"float32"), )
paddle.einsum("ij,k->ijk", Tensor([1, 0],"float32"), Tensor([64],"float32"), )
paddle.einsum("iok,dr->iokr", Tensor([0, 8, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 0, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 8, 0],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 8, 4],"complex64"), Tensor([0, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 8, 4],"complex64"), Tensor([1, 0],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([0, 8, 4],"complex64"), Tensor([1, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 0, 4],"complex64"), Tensor([1, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 8, 0],"complex64"), Tensor([1, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 8, 4],"complex64"), Tensor([0, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 8, 4],"complex64"), Tensor([1, 0],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([0, 8, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 0, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 8, 0],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 8, 4],"complex64"), Tensor([0, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 8, 4],"complex64"), Tensor([1, 0],"complex64"), )
paddle.einsum("ji,j", Tensor([11, 0],"float64"), Tensor([11],"float64"), )
paddle.einsum("ji,j", Tensor([12, 0],"float64"), Tensor([12],"float64"), )
paddle.einsum("ji,j", Tensor([13, 0],"float64"), Tensor([13],"float64"), )
paddle.einsum("m,d->md", Tensor([0],"float32"), Tensor([128],"float32"), )
paddle.einsum("m,d->md", Tensor([50],"float32"), Tensor([0],"float32"), )
paddle.einsum("mlk,k->mlk", Tensor([0, 32, 32],"float64"), Tensor([32],"float64"), )
paddle.einsum("mlk,k->mlk", Tensor([16, 0, 32],"float64"), Tensor([32],"float64"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([0, 3, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float32"), Tensor([0, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float32"), Tensor([1, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 0, 5, 2, 4],"float32"), Tensor([1, 0, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 0, 2, 4],"float32"), Tensor([1, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 0, 4],"float32"), Tensor([1, 3, 5, 0, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 0],"float32"), Tensor([1, 3, 5, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([0, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 0, 5, 2, 4],"float32"), Tensor([2, 0, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 0, 2, 4],"float32"), Tensor([2, 3, 0, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 0, 2, 4],"float32"), Tensor([2, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 5, 0, 4],"float32"), Tensor([2, 3, 5, 0, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 5, 2, 0],"float32"), Tensor([2, 3, 5, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 5, 2, 4],"float32"), Tensor([2, 3, 0, 2, 4],"float32"), )
paddle.einsum("se,sec->sec", Tensor([20, 60],"float32"), Tensor([20, 60, 0],"float32"), )
paddle.einsum("se,sec->sec", Tensor([30, 60],"float32"), Tensor([30, 60, 0],"float32"), )
paddle.einsum("se,sec->sec", Tensor([4, 60],"float32"), Tensor([4, 60, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 20],"float32"), Tensor([60, 20, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 30],"float32"), Tensor([60, 30, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 4],"float32"), Tensor([60, 4, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([20, 60, 20],"float32"), Tensor([60, 20, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([30, 60, 30],"float32"), Tensor([60, 30, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([4, 60, 4],"float32"), Tensor([60, 4, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([20, 0, 20],"float32"), Tensor([20, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([20, 60, 0],"float32"), Tensor([20, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([20, 60, 20],"float32"), Tensor([20, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([30, 0, 30],"float32"), Tensor([30, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([30, 60, 0],"float32"), Tensor([30, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([30, 60, 30],"float32"), Tensor([30, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([4, 0, 4],"float32"), Tensor([4, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([4, 60, 0],"float32"), Tensor([4, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([4, 60, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([4, 32],"float32"), Tensor([32, 0, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([4, 32],"float32"), Tensor([32, 4, 0],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([8, 32],"float32"), Tensor([32, 0, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([8, 32],"float32"), Tensor([32, 4, 0],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([0, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.equal_all(Tensor([0, 10],"int32"), Tensor([0, 10],"int32"), )
paddle.equal_all(Tensor([0, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.equal_all(Tensor([0, 2, 3],"int64"), Tensor([0, 2, 3],"int64"), )
paddle.equal_all(Tensor([0, 2, 4],"int64"), Tensor([0, 2, 4],"int64"), )
paddle.equal_all(Tensor([0, 7],"int64"), Tensor([0, 7],"int64"), )
paddle.equal_all(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )
paddle.equal_all(Tensor([13, 0],"int64"), Tensor([13, 0],"int64"), )
paddle.equal_all(Tensor([16, 0],"float32"), Tensor([16, 0],"float32"), )
paddle.equal_all(Tensor([2, 0, 3],"int64"), Tensor([2, 0, 3],"int64"), )
paddle.equal_all(Tensor([2, 2, 0],"int64"), Tensor([2, 2, 0],"int64"), )
paddle.equal_all(x=Tensor([0, 3, 3],"int32"), y=Tensor([0, 3, 3],"int32"), )
paddle.equal_all(x=Tensor([0, 3, 3],"int64"), y=Tensor([0, 3, 3],"int64"), )
paddle.equal_all(x=Tensor([3, 0, 3],"int32"), y=Tensor([3, 0, 3],"int32"), )
paddle.equal_all(x=Tensor([3, 0, 3],"int64"), y=Tensor([3, 0, 3],"int64"), )
paddle.equal_all(x=Tensor([3, 3, 0],"int32"), y=Tensor([3, 3, 0],"int32"), )
paddle.equal_all(x=Tensor([3, 3, 0],"int64"), y=Tensor([3, 3, 0],"int64"), )
paddle.expand_as(Tensor([0, 1],"float32"), Tensor([0, 3],"float32"), )
paddle.expand_as(Tensor([0, 1],"float32"), Tensor([0, 4],"float32"), )
paddle.expand_as(Tensor([0, 2, 1, 1],"float32"), Tensor([0, 2, 14, 14],"float32"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 2],"float16"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 2],"float32"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 4],"float16"), )
paddle.expand_as(Tensor([0, 80, 1, 1],"float32"), Tensor([0, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([0, 80, 1, 1],"float32"), Tensor([0, 80, 28, 28],"float32"), )
paddle.expand_as(Tensor([106, 0, 1, 1],"float32"), Tensor([106, 0, 28, 28],"float16"), )
paddle.expand_as(Tensor([106, 0, 1, 1],"float32"), Tensor([106, 0, 28, 28],"float32"), )
paddle.expand_as(Tensor([106, 80, 0, 1],"float32"), Tensor([106, 80, 0, 28],"float16"), )
paddle.expand_as(Tensor([106, 80, 0, 1],"float32"), Tensor([106, 80, 0, 28],"float32"), )
paddle.expand_as(Tensor([106, 80, 1, 0],"float32"), Tensor([106, 80, 28, 0],"float16"), )
paddle.expand_as(Tensor([106, 80, 1, 0],"float32"), Tensor([106, 80, 28, 0],"float32"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 0, 28],"float16"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 0, 28],"float32"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 28, 0],"float16"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 28, 0],"float32"), )
paddle.expand_as(Tensor([11, 0, 1, 1],"float32"), Tensor([11, 0, 14, 14],"float32"), )
paddle.expand_as(Tensor([11, 2, 0, 1],"float32"), Tensor([11, 2, 0, 14],"float32"), )
paddle.expand_as(Tensor([11, 2, 1, 0],"float32"), Tensor([11, 2, 14, 0],"float32"), )
paddle.expand_as(Tensor([11, 2, 1, 1],"float32"), Tensor([11, 2, 0, 14],"float32"), )
paddle.expand_as(Tensor([11, 2, 1, 1],"float32"), Tensor([11, 2, 14, 0],"float32"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 2],"float16"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 2],"float32"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 4],"float16"), )
paddle.expand_as(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.expand_as(Tensor([3, 1],"float32"), Tensor([3, 0],"float32"), )
paddle.expand_as(Tensor([3],"float32"), Tensor([0, 3],"int64"), )
paddle.expand_as(Tensor([6, 0],"float32"), Tensor([6, 0],"float32"), )
paddle.expand_as(Tensor([6, 1],"float32"), Tensor([6, 0],"float32"), )
paddle.expand_as(x=Tensor([3],"int64"), y=Tensor([0, 3],"int64"), )
paddle.fft.fftshift(x=Tensor([0, 128, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([0, 32, 16, 9],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([0, 32, 19, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([0, 32, 20, 11],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([0, 4, 2],"float64"), )
paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([0, 5, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([0, 64, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([0],"float32"), )
paddle.fft.fftshift(x=Tensor([0],"float64"), )
paddle.fft.fftshift(x=Tensor([16, 0, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 0, 16, 9],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 0, 19, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 0, 20, 11],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 128, 0, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 128, 10, 0],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 0, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 0, 11],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 0, 9],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 16, 0],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 19, 0],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 32, 20, 0],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 64, 0, 6],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 64, 10, 0],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([2, 0, 2],"float64"), )
paddle.fft.fftshift(x=Tensor([2, 4, 0],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 0, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 0],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"float64"), )
paddle.fft.ifftshift(x=Tensor([0, 4, 2],"float64"), )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([0, 5, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([0],"float32"), )
paddle.fft.ifftshift(x=Tensor([0],"float64"), )
paddle.fft.ifftshift(x=Tensor([2, 0, 2],"float64"), )
paddle.fft.ifftshift(x=Tensor([2, 4, 0],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 0, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 0],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"float64"), )
paddle.flip(Tensor([0, 2, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([0, 2],"float32"), tuple(-2,-1,), )
paddle.flip(Tensor([0, 2],"float64"), tuple(-2,-1,), )
paddle.flip(Tensor([0, 3],"float32"), list[0,], )
paddle.flip(Tensor([0, 4],"float32"), list[0,1,], )
paddle.flip(Tensor([0, 8, 224, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([0],"int32"), axis=list[0,], )
paddle.flip(Tensor([2, 0],"float32"), list[0,], )
paddle.flip(Tensor([2, 0],"float32"), tuple(-2,-1,), )
paddle.flip(Tensor([2, 0],"float64"), tuple(-2,-1,), )
paddle.flip(Tensor([3, 0, 224, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([3, 0, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([3, 2, 0],"float32"), list[0,1,], )
paddle.flip(Tensor([3, 8, 0, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([3, 8, 224, 0],"float32"), axis=list[3,], )
paddle.flip(Tensor([4, 0],"float32"), list[0,1,], )
paddle.flip(x=Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([0, 3, 3],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[0,], )
paddle.flip(x=Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 0, 3],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[0,], )
paddle.flip(x=Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 0],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[0,], )
paddle.flip(x=Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=list[-1,0,3,4,2,], )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmax(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.fmax(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.fmax(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.fmax(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmax(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.fmax(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.fmax(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.fmax(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.fmax(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.fmax(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.fmax(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmin(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.fmin(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.fmin(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.fmin(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmin(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.fmin(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.fmin(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.fmin(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.fmin(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.fmin(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.fmin(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.frac(Tensor([0, 20, 1],"float32"), )
paddle.frac(Tensor([0, 3],"float32"), )
paddle.frac(Tensor([0, 3],"float64"), )
paddle.frac(Tensor([10, 0, 1],"float32"), )
paddle.frac(Tensor([10, 20, 0],"float32"), )
paddle.frac(Tensor([2, 0],"float32"), )
paddle.frac(Tensor([2, 0],"float64"), )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int64"),Tensor([0],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int64"),Tensor([1],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int64"),Tensor([1],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([1],"int64"),Tensor([0],"int64"),], dtype="float32", fill_value=1.1, )
paddle.gammainc(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([0, 40],"float32"), y=Tensor([0, 40],"float32"), )
paddle.gammainc(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.gammainc(Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.gammaincc(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([0, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.gammaincc(Tensor([0, 40],"float32"), y=Tensor([0, 40],"float32"), )
paddle.gammaincc(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.gammaincc(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.gammaincc(Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.gather(Tensor([0, 1, 1, 11],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1, 1, 15],"float32"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 1, 1, 17],"float32"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 1, 1, 1],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1, 1, 3],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1, 16],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1000],"float32"), Tensor([128, 1],"int32"), )
paddle.gather(Tensor([0, 100],"float32"), Tensor([128, 1],"int32"), )
paddle.gather(Tensor([0, 11, 8],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 11],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 15],"int64"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 17],"int64"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 1],"int32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([33],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([4],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int64"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 20],"float32"), Tensor([3],"int32"), 0, )
paddle.gather(Tensor([0, 20],"float64"), Tensor([3],"int64"), 0, )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([1, 1],"int32"), )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([10, 1],"int32"), )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([106, 1],"int32"), )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([11, 1],"int32"), )
paddle.gather(Tensor([0, 256, 7, 7],"float32"), Tensor([1024, 1],"int32"), )
paddle.gather(Tensor([0, 25600],"float32"), Tensor([8400],"int64"), axis=0, )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([100],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([104],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([108],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([112],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([116],"int32"), )
paddle.gather(Tensor([0, 2],"float32"), index=Tensor([1242, 1],"int32"), )
paddle.gather(Tensor([0, 3, 4],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 3, 8],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 3],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 3],"float64"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 4],"float32"), Tensor([105840],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([110, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([111, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([115, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([0, 4],"float32"), Tensor([8],"int32"), axis=1, )
paddle.gather(Tensor([0, 50, 50],"float32"), Tensor([10],"int64"), )
paddle.gather(Tensor([0, 50, 50],"float32"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 544, 544],"float32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 544, 544],"float32"), Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 704, 704],"float32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 704, 704],"float32"), Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 736, 736],"float32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([10],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([2],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([3],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(Tensor([0, 80],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([0, 88, 10],"float32"), Tensor([3],"int32"), 0, )
paddle.gather(Tensor([0, 88, 10],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([0, 88, 30],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([0],"float32"), Tensor([1000110],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1001730],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1024, 1],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1],"int64"), name="Categorical_probs", )
paddle.gather(Tensor([0],"float32"), Tensor([3],"int32"), 0, )
paddle.gather(Tensor([0],"float32"), Tensor([3],"int64"), name="Categorical_probs", )
paddle.gather(Tensor([0],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([0],"float64"), Tensor([5, 1],"int64"), axis=0, )
paddle.gather(Tensor([0],"int32"), Tensor([1024, 1],"int64"), )
paddle.gather(Tensor([0],"int32"), Tensor([427],"int32"), )
paddle.gather(Tensor([0],"int32"), Tensor([451],"int32"), )
paddle.gather(Tensor([0],"int32"), Tensor([511],"int32"), )
paddle.gather(Tensor([0],"int32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([0],"int64"), Tensor([113],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([125],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([127],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([186],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([187],"int64"), axis=0, )
paddle.gather(Tensor([1, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([1, 256, 14, 14],"float32"), Tensor([1, 0],"int32"), )
paddle.gather(Tensor([10, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([10, 256, 14, 14],"float32"), Tensor([10, 0],"int32"), )
paddle.gather(Tensor([10, 88, 0],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([100, 0],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([100, 1000],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([1000, 0],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([1000, 100],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([1002624, 0],"float32"), Tensor([110, 0],"int64"), )
paddle.gather(Tensor([1002624, 0],"float32"), Tensor([111, 0],"int64"), )
paddle.gather(Tensor([1002624, 0],"float32"), Tensor([115, 0],"int64"), )
paddle.gather(Tensor([1002624, 4],"float32"), Tensor([110, 0],"int64"), )
paddle.gather(Tensor([1002624, 4],"float32"), Tensor([111, 0],"int64"), )
paddle.gather(Tensor([1002624, 4],"float32"), Tensor([115, 0],"int64"), )
paddle.gather(Tensor([1002624],"float32"), Tensor([1024, 0],"int64"), )
paddle.gather(Tensor([1002624],"int32"), Tensor([1024, 0],"int64"), )
paddle.gather(Tensor([100440],"float32"), Tensor([512, 0],"int64"), )
paddle.gather(Tensor([100440],"int32"), Tensor([512, 0],"int64"), )
paddle.gather(Tensor([100500],"float32"), Tensor([512, 0],"int64"), )
paddle.gather(Tensor([1024, 256, 7, 7],"float32"), Tensor([1024, 0],"int32"), )
paddle.gather(Tensor([106, 256, 14, 14],"float32"), Tensor([106, 0],"int32"), )
paddle.gather(Tensor([11, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([11, 256, 14, 14],"float32"), Tensor([11, 0],"int32"), )
paddle.gather(Tensor([12, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([1200, 0],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([13, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([1800, 0],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([2, 0],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([2, 0],"float64"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([2400, 0],"float32"), Tensor([8],"int32"), axis=1, )
paddle.gather(Tensor([2],"float64"), Tensor([5, 0],"int64"), axis=0, )
paddle.gather(Tensor([3, 0, 4],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([3, 3, 0],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([3, 88, 0],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([8120, 0],"float32"), index=Tensor([1242, 0],"int32"), )
paddle.gather(Tensor([8120, 2],"float32"), index=Tensor([1242, 0],"int32"), )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"float64"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float64"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"int32"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([0, 3],"int32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"int32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([0, 3],"int64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"float32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"float32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"float64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"float64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"int32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"int32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"int64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"int64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 10, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 108, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 11, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 12, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 13, 2],"int32"), )
paddle.gather_nd(Tensor([0, 100],"float32"), Tensor([2, 2],"int32"), )
paddle.gather_nd(Tensor([0, 128, 128],"float32"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float32"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float32"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 16384, 2],"float32"), index=Tensor([4, 128, 2],"int64"), )
paddle.gather_nd(Tensor([0, 16],"float32"), Tensor([400, 2],"int64"), )
paddle.gather_nd(Tensor([0, 16],"float32"), Tensor([404, 2],"int64"), )
paddle.gather_nd(Tensor([0, 2, 14, 14],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([0, 2, 28, 28],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([0, 2, 28, 28],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([0, 2, 28, 28],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([0, 256],"float32"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([0, 3],"float32"), Tensor([2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 128],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 2],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 4],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 4],"bool"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 4],"int64"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 64],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 7, 32],"float32"), Tensor([832, 3],"int64"), )
paddle.gather_nd(Tensor([0, 7, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.gather_nd(Tensor([0, 80, 28, 28],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), Tensor([4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), Tensor([40, 2],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), index=Tensor([364, 7, 2],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), index=Tensor([728, 14, 2],"int64"), )
paddle.gather_nd(Tensor([0],"float32"), Tensor([1],"int64"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 10, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 108, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 11, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 12, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 13, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 28, 28],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([1, 0],"float32"), Tensor([4, 2],"int64"), )
paddle.gather_nd(Tensor([1, 2, 0, 28],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([1, 2, 28, 0],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([10, 0, 28, 28],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([10, 0],"float32"), Tensor([40, 2],"int64"), )
paddle.gather_nd(Tensor([10, 2, 0, 28],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([10, 2, 28, 0],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([100, 0],"float32"), Tensor([2, 2],"int32"), )
paddle.gather_nd(Tensor([100, 0],"float32"), Tensor([400, 2],"int64"), )
paddle.gather_nd(Tensor([101, 0],"float32"), Tensor([404, 2],"int64"), )
paddle.gather_nd(Tensor([106, 0, 28, 28],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 80, 0, 28],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 80, 28, 0],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([11, 0, 14, 14],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([11, 0, 28, 28],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 0, 14],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 0, 28],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 14, 0],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 28, 0],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([13, 0, 32],"float32"), Tensor([832, 3],"int64"), )
paddle.gather_nd(Tensor([13, 0, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.gather_nd(Tensor([13, 7, 0],"float32"), Tensor([832, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float32"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float32"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float32"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float32"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float32"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float32"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([2, 0],"float32"), Tensor([2],"int64"), )
paddle.gather_nd(Tensor([2, 3],"float32"), Tensor([0],"int64"), )
paddle.gather_nd(Tensor([20, 0, 128],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 2],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 4],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([364, 0],"float32"), index=Tensor([364, 7, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0, 2],"float32"), index=Tensor([4, 128, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"bool"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"float32"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"int64"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([5],"float32"), Tensor([0],"int64"), )
paddle.gather_nd(Tensor([728, 0],"float32"), index=Tensor([728, 14, 2],"int64"), )
paddle.gather_nd(x=Tensor([0, 2, 3, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([0, 2, 3, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([0, 3],"float32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([0, 3],"float32"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([0, 3],"float64"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([0, 3],"float64"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([0, 3],"int32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([1, 0, 3, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([1, 0, 3, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 0, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 0, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 3, 2],"float64"), index=Tensor([0],"int64"), )
paddle.gather_nd(x=Tensor([3, 0],"float32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 0],"float32"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 0],"float64"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 0],"float64"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 0],"int32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float32"), index=Tensor([0],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float32"), index=Tensor([0],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"float64"), index=Tensor([0],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float64"), index=Tensor([0],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"int32"), index=Tensor([0],"int32"), )
paddle.geometric.segment_max(Tensor([0, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([0, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([0, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([40, 0],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 0],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 0],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 20],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([30, 0],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 0],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 0],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([40, 0],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 0],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 0],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 15],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 15],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 15],"float64"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 0],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 0],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 0],"float64"), Tensor([30],"int64"), )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([3, 0],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 0],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 0],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 0],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 0],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 3, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 0, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([4, 0],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "sub", "min", )
paddle.geometric.send_uv(Tensor([0, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="sub", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([0, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 0],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 0],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([0, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([0, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="sub", )
paddle.histogram(input=Tensor([0, 4],"int64"), )
paddle.histogram(input=Tensor([4, 0],"int64"), )
paddle.imag(Tensor([0, 10, 10, 20],"complex128"), )
paddle.imag(Tensor([0, 20, 2, 3],"complex128"), )
paddle.imag(Tensor([0, 20, 2, 3],"complex64"), )
paddle.imag(Tensor([0, 3],"complex128"), )
paddle.imag(Tensor([0, 3],"complex64"), )
paddle.imag(Tensor([10, 0, 10, 20],"complex128"), )
paddle.imag(Tensor([10, 10, 0, 20],"complex128"), )
paddle.imag(Tensor([10, 10, 10, 0],"complex128"), )
paddle.imag(Tensor([2, 0, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 0, 2, 3],"complex64"), )
paddle.imag(Tensor([2, 0],"complex128"), )
paddle.imag(Tensor([2, 0],"complex64"), )
paddle.imag(Tensor([2, 20, 0, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 0, 3],"complex64"), )
paddle.imag(Tensor([2, 20, 2, 0],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 0],"complex64"), )
paddle.imag(x=Tensor([0, 10],"complex128"), )
paddle.imag(x=Tensor([0, 10],"complex64"), )
paddle.imag(x=Tensor([1, 0],"complex64"), )
paddle.imag(x=Tensor([20, 0],"complex128"), )
paddle.imag(x=Tensor([20, 0],"complex64"), )
paddle.increment(x=Tensor([0],"int32"), )
paddle.increment(x=Tensor([0],"int64"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 11008],"float32"), Tensor([1, 1, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 18],"float32"), Tensor([1, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 86],"float32"), Tensor([1, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 10, 1408],"float32"), Tensor([1, 10, 1408],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 11008],"float32"), Tensor([1, 1, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 18],"float32"), Tensor([1, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 86],"float32"), Tensor([1, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 11008],"float32"), Tensor([0, 1, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 11008],"float32"), Tensor([1, 0, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 18],"float32"), Tensor([0, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 18],"float32"), Tensor([1, 0, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 86],"float32"), Tensor([0, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 86],"float32"), Tensor([1, 0, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 10, 1408],"float32"), Tensor([0, 10, 1408],"float32"), )
paddle.incubate.segment_max(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_max(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.index_add(Tensor([0, 3],"float16"), Tensor([3],"int64"), 0, Tensor([3, 3],"float16"), )
paddle.index_add(Tensor([0, 3],"float32"), Tensor([3],"int64"), 0, Tensor([3, 3],"float32"), )
paddle.index_add(Tensor([0, 3],"float64"), Tensor([3],"int64"), 0, Tensor([3, 3],"float64"), )
paddle.index_add(Tensor([0, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_add(Tensor([0, 5],"float64"), Tensor([20],"int64"), 0, Tensor([20, 5],"float64"), )
paddle.index_add(Tensor([0],"float32"), Tensor([0],"int32"), 0, Tensor([0],"float32"), )
paddle.index_add(Tensor([0],"float32"), Tensor([4],"int32"), 0, Tensor([4],"float32"), )
paddle.index_add(Tensor([10, 0],"float32"), Tensor([4],"int32"), -1, Tensor([10, 4],"float32"), )
paddle.index_add(Tensor([10, 10],"float32"), Tensor([0],"int32"), -1, Tensor([10, 4],"float32"), )
paddle.index_add(Tensor([100, 0, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 100, 0],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([0],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([0],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([0],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float64"), Tensor([0],"int64"), 0, Tensor([20, 5],"float64"), )
paddle.index_add(Tensor([101, 3],"float16"), Tensor([0],"int64"), 0, Tensor([3, 3],"float16"), )
paddle.index_add(Tensor([101, 3],"float32"), Tensor([0],"int64"), 0, Tensor([3, 3],"float32"), )
paddle.index_add(Tensor([101, 3],"float64"), Tensor([0],"int64"), 0, Tensor([3, 3],"float64"), )
paddle.index_add(Tensor([10],"float32"), Tensor([0],"int32"), 0, Tensor([4],"float32"), )
paddle.index_add(Tensor([4, 0, 2],"float32"), Tensor([16],"int64"), 1, Tensor([4, 16, 2],"float32"), )
paddle.index_add(Tensor([4, 3, 2],"float32"), Tensor([0],"int64"), 1, Tensor([4, 16, 2],"float32"), )
paddle.index_fill(Tensor([0, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([0, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([0, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([0, 40],"float64"), Tensor([5],"int64"), 0, -1, )
paddle.index_fill(Tensor([10, 0, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 0, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 0, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 15, 0],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 0],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 0],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 15, 10],"bool"), Tensor([0],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 10],"float16"), Tensor([0],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 10],"int64"), Tensor([0],"int32"), 1, -1, )
paddle.index_fill(Tensor([20, 0],"float64"), Tensor([5],"int64"), 0, -1, )
paddle.index_fill(Tensor([20, 40],"float64"), Tensor([0],"int64"), 0, -1, )
paddle.index_put(Tensor([0, 110],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), False, )
paddle.index_put(Tensor([0, 110],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), True, )
paddle.index_put(Tensor([0, 110],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), False, )
paddle.index_put(Tensor([0, 110],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), True, )
paddle.index_put(Tensor([0, 110],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), True, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([0, 110],"int32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int32"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),), Tensor([0, 1],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),), Tensor([0, 1],"float64"), True, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),), Tensor([0, 2],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),), Tensor([0, 2],"float64"), True, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), True, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), True, )
paddle.index_put(Tensor([0, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([100, 0],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), False, )
paddle.index_put(Tensor([100, 0],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), True, )
paddle.index_put(Tensor([100, 0],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), False, )
paddle.index_put(Tensor([100, 0],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), True, )
paddle.index_put(Tensor([100, 0],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), True, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([100, 0],"int32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int32"), False, )
paddle.index_put(Tensor([110, 0, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 0],"float64"), tuple(Tensor([110],"bool"),), Tensor([55, 94],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 42, 32, 0],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([0],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0, 94],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0, 94],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([55, 94],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([55, 94],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110, 0],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110, 0],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), Tensor([1, 0],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), Tensor([1, 0],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), Tensor([2, 0],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), Tensor([2, 0],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), True, )
paddle.index_put(Tensor([44, 0],"float64"), tuple(Tensor([44],"bool"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([44, 0],"float64"), tuple(Tensor([44],"bool"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([44, 0],"float64"), tuple(Tensor([44],"bool"),), Tensor([94],"float64"), True, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([94],"float64"), False, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([94],"float64"), True, )
paddle.index_sample(Tensor([0, 100],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([0, 10285],"float32"), Tensor([0, 36],"int64"), )
paddle.index_sample(Tensor([0, 200],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([0, 256],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([0, 30000],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 0],"float32"), Tensor([1, 0],"int64"), )
paddle.index_sample(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), )
paddle.index_sample(Tensor([1, 0],"float32"), Tensor([1, 36],"int64"), )
paddle.index_sample(Tensor([1, 100],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 100],"float32"), Tensor([1, 0],"int64"), )
paddle.index_sample(Tensor([1, 10285],"float32"), Tensor([0, 36],"int64"), )
paddle.index_sample(Tensor([1, 10285],"float32"), Tensor([1, 0],"int64"), )
paddle.index_sample(Tensor([1, 200],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 200],"float32"), Tensor([1, 0],"int64"), )
paddle.index_sample(Tensor([1, 256],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 256],"float32"), Tensor([1, 0],"int64"), )
paddle.index_sample(Tensor([1, 30000],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 30000],"float32"), Tensor([1, 0],"int64"), )
paddle.index_sample(x=Tensor([0, 4],"float32"), index=Tensor([0, 3],"int64"), )
paddle.index_sample(x=Tensor([0, 4],"float64"), index=Tensor([0, 3],"int64"), )
paddle.index_sample(x=Tensor([0, 4],"int32"), index=Tensor([0, 3],"int64"), )
paddle.index_sample(x=Tensor([0, 4],"int64"), index=Tensor([0, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"float32"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"float32"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"float64"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"float64"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"int32"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"int32"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"int64"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"int64"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"float32"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"float64"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"int32"), index=Tensor([3, 0],"int64"), )
paddle.index_sample(x=Tensor([3, 4],"int64"), index=Tensor([3, 0],"int64"), )
paddle.index_select(Tensor([0, 1, 3, 3],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 1, 3, 3],"int64"), Tensor([6],"int64"), )
paddle.index_select(Tensor([0, 10, 8, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 10],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 11, 8, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 11],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 128],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0, 12],"float32"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 12],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 13],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 14],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 16],"float32"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 2, 1, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 2001, 2],"float32"), Tensor([1000],"int64"), )
paddle.index_select(Tensor([0, 2001],"float32"), Tensor([1000],"int64"), )
paddle.index_select(Tensor([0, 3, 32],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 3, 32],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([0, 32],"float32"), index=Tensor([32],"int64"), axis=0, )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([1],"int64"), axis=0, )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([3],"int64"), )
paddle.index_select(Tensor([0, 4],"float32"), Tensor([1],"int64"), axis=0, )
paddle.index_select(Tensor([0, 4],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([10, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([11, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([12, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([13, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([14, 1],"int64"), )
paddle.index_select(Tensor([0, 5],"float32"), Tensor([20],"int32"), 0, )
paddle.index_select(Tensor([0, 5],"float64"), Tensor([20],"int64"), 0, )
paddle.index_select(Tensor([0, 64],"float32"), index=Tensor([16],"int64"), axis=0, )
paddle.index_select(Tensor([0, 64],"float32"), index=Tensor([3],"int64"), axis=0, )
paddle.index_select(Tensor([0, 8],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0],"float32"), Tensor([3],"int64"), axis=0, )
paddle.index_select(Tensor([0],"float32"), Tensor([4],"int32"), 0, )
paddle.index_select(Tensor([1, 10285, 0],"float32"), Tensor([11],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 10285, 12],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 0],"float32"), Tensor([10],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 0],"float32"), Tensor([15],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 11],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 16],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 24276, 0],"float32"), Tensor([10],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 24276, 11],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 27216, 0],"float32"), Tensor([10],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 27216, 11],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 4],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([10, 0],"float32"), Tensor([4],"int32"), 1, )
paddle.index_select(Tensor([10, 10],"float32"), Tensor([0],"int32"), 1, )
paddle.index_select(Tensor([10, 3],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([10, 4, 7, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([10, 4, 7, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([10, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([100, 0, 5],"float32"), Tensor([20],"int32"), 1, )
paddle.index_select(Tensor([100, 100, 0],"float32"), Tensor([20],"int32"), 2, )
paddle.index_select(Tensor([100, 100, 25],"float32"), Tensor([0],"int32"), 2, )
paddle.index_select(Tensor([100, 100, 5],"float32"), Tensor([0],"int32"), 1, )
paddle.index_select(Tensor([100, 5],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([100, 5],"float64"), Tensor([0],"int64"), 0, )
paddle.index_select(Tensor([1000, 2001, 2],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([1000, 2001],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([107136, 0],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([107136, 0],"float32"), Tensor([5],"int64"), axis=1, )
paddle.index_select(Tensor([107136, 5],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([107136, 7],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([10],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([11, 4, 7, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([11, 4, 7, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 7, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 7, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 0],"float32"), index=Tensor([8],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 15],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([16, 64],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([169, 12],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([169, 16],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([17, 4],"int64"), Tensor([0, 1],"int64"), )
paddle.index_select(Tensor([187679, 0],"float32"), Tensor([10],"int64"), axis=1, )
paddle.index_select(Tensor([187679, 13],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([2, 0, 2],"float32"), Tensor([1],"int64"), axis=1, )
paddle.index_select(Tensor([2, 0],"float32"), Tensor([1],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 1, 3, 3],"int64"), Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 10],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 11],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 12],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 13],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 14],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 1],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 2, 2],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([2, 2],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 3, 32],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([20, 3],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([21128, 128],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([21128],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([32, 32],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([4, 10, 8, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([4, 11, 8, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([4, 2, 1, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([4, 500, 0],"float32"), index=Tensor([8],"int32"), axis=-1, )
paddle.index_select(Tensor([4, 500, 8],"float32"), index=Tensor([0],"int32"), axis=-1, )
paddle.index_select(Tensor([40, 3],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([40000, 8],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([40000],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([5, 0, 1, 4],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([5, 0],"float32"), Tensor([1],"int64"), axis=1, )
paddle.index_select(Tensor([5, 2],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([5, 4, 1, 4],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([6, 0, 1, 4],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([6, 4, 1, 4],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([8, 5, 0, 7, 7],"float32"), Tensor([1],"int64"), axis=2, )
paddle.index_select(Tensor([8, 5, 0, 7, 7],"float32"), Tensor([24],"int64"), axis=2, )
paddle.index_select(Tensor([8, 5, 29, 7, 7],"float32"), Tensor([0],"int64"), axis=2, )
paddle.index_select(Tensor([8, 64],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([105344],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([4936],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([5168],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([58584],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([78112],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 3],"float32"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([0, 3],"float64"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([0, 3],"int32"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([0, 3],"int64"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([11661, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([1358, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([15548, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([2, 0],"float64"), index=Tensor([2],"int32"), axis=1, )
paddle.index_select(x=Tensor([2, 0],"float64"), index=Tensor([2],"int64"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"float32"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([0],"int32"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([0],"int64"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"int32"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([2, 3],"int64"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([26736, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([3029, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.inner(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.inner(x=Tensor([4, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([0, 3],"float64"), False, False, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([0, 3],"float64"), False, True, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([2, 3],"float64"), False, True, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([0, 3],"int32"), False, False, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([0, 3],"int32"), False, True, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([2, 3],"int32"), False, False, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([2, 3],"int32"), False, True, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, True, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, True, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 0],"float64"), False, False, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 0],"float64"), False, True, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 3],"float64"), False, True, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 0],"int32"), False, False, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 0],"int32"), False, True, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 3],"int32"), False, False, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 3],"int32"), False, True, )
paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.kron(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([0, 3],"complex128"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([0, 3],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([3, 3],"float64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([0, 3],"complex64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([0, 3],"float32"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([2, 2, 3],"float32"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([3, 3],"float32"), )
paddle.kron(Tensor([0, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([0, 8],"float16"), Tensor([0, 8],"float16"), )
paddle.kron(Tensor([0, 8],"float16"), Tensor([16, 8],"float16"), )
paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 0, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 0],"float32"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 0],"float16"), )
paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 8],"float16"), )
paddle.kron(Tensor([12, 8],"float16"), Tensor([0, 8],"float16"), )
paddle.kron(Tensor([12, 8],"float16"), Tensor([16, 0],"float16"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 0],"complex128"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 0],"float64"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 3],"float64"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([2, 2, 3],"float32"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 0],"complex64"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 0],"float32"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 0],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 0],"complex128"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 0],"float64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 2, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 0, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 2, 0],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 0],"complex64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 0],"float32"), )
paddle.kron(Tensor([5, 0, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 0, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 0, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 0, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 0],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([0, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 0],"float32"), )
paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3, 2],"float64"), )
paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.kron(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([0, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([0, 3],"int32"), y=Tensor([0, 3],"int32"), )
paddle.kron(x=Tensor([0, 3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.kron(x=Tensor([0, 3],"int64"), y=Tensor([0, 3],"int64"), )
paddle.kron(x=Tensor([0, 3],"int64"), y=Tensor([3, 3],"int64"), )
paddle.kron(x=Tensor([0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([1],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([1],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3, 2],"float64"), )
paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([2, 0],"int32"), y=Tensor([3, 0],"int32"), )
paddle.kron(x=Tensor([2, 0],"int32"), y=Tensor([3, 3],"int32"), )
paddle.kron(x=Tensor([2, 0],"int64"), y=Tensor([3, 0],"int64"), )
paddle.kron(x=Tensor([2, 0],"int64"), y=Tensor([3, 3],"int64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3, 2],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0, 2],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3, 0],"float64"), )
paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.kron(x=Tensor([2, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([2, 3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 3],"int32"), y=Tensor([0, 3],"int32"), )
paddle.kron(x=Tensor([2, 3],"int32"), y=Tensor([3, 0],"int32"), )
paddle.kron(x=Tensor([2, 3],"int64"), y=Tensor([0, 3],"int64"), )
paddle.kron(x=Tensor([2, 3],"int64"), y=Tensor([3, 0],"int64"), )
paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), )
paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([10, 1, 0, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 0, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 0],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 0, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([0, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([0, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )
paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.lgamma(Tensor([0, 1, 1, 1],"float32"), )
paddle.lgamma(Tensor([0, 1, 1],"float32"), )
paddle.lgamma(Tensor([0, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([0, 10, 10],"float64"), )
paddle.lgamma(Tensor([0, 12],"float32"), )
paddle.lgamma(Tensor([0, 1],"float32"), )
paddle.lgamma(Tensor([0, 2, 2],"float32"), )
paddle.lgamma(Tensor([0, 20, 1],"float32"), )
paddle.lgamma(Tensor([0, 20, 2],"float32"), )
paddle.lgamma(Tensor([0, 2],"float32"), )
paddle.lgamma(Tensor([0, 4],"float32"), )
paddle.lgamma(Tensor([0],"float32"), )
paddle.lgamma(Tensor([0],"float64"), )
paddle.lgamma(Tensor([1, 0, 2],"float32"), )
paddle.lgamma(Tensor([1, 0],"float32"), )
paddle.lgamma(Tensor([1, 2, 0],"float32"), )
paddle.lgamma(Tensor([10, 0, 1, 1],"float32"), )
paddle.lgamma(Tensor([10, 0, 10, 2],"float64"), )
paddle.lgamma(Tensor([10, 0, 10],"float64"), )
paddle.lgamma(Tensor([10, 0, 1],"float32"), )
paddle.lgamma(Tensor([10, 0, 2],"float32"), )
paddle.lgamma(Tensor([10, 0],"float32"), )
paddle.lgamma(Tensor([10, 1, 0, 1],"float32"), )
paddle.lgamma(Tensor([10, 1, 0],"float32"), )
paddle.lgamma(Tensor([10, 1, 1, 0],"float32"), )
paddle.lgamma(Tensor([10, 10, 0, 2],"float64"), )
paddle.lgamma(Tensor([10, 10, 0],"float64"), )
paddle.lgamma(Tensor([10, 10, 10, 0],"float64"), )
paddle.lgamma(Tensor([10, 20, 0],"float32"), )
paddle.lgamma(x=Tensor([0, 3],"float32"), )
paddle.lgamma(x=Tensor([0, 3],"float64"), )
paddle.lgamma(x=Tensor([0, 6, 6],"float64"), )
paddle.lgamma(x=Tensor([0, 6],"float32"), )
paddle.lgamma(x=Tensor([0, 6],"float64"), )
paddle.lgamma(x=Tensor([3, 0],"float32"), )
paddle.lgamma(x=Tensor([3, 0],"float64"), )
paddle.lgamma(x=Tensor([6, 0, 6],"float64"), )
paddle.lgamma(x=Tensor([6, 0],"float32"), )
paddle.lgamma(x=Tensor([6, 0],"float64"), )
paddle.lgamma(x=Tensor([6, 6, 0],"float64"), )
paddle.linalg.cholesky(Tensor([0, 2],"float32"), )
paddle.linalg.cholesky(Tensor([0, 2],"float64"), )
paddle.linalg.cholesky(Tensor([0, 3],"float64"), )
paddle.linalg.cholesky(Tensor([2, 0],"float32"), )
paddle.linalg.cholesky(Tensor([2, 0],"float64"), )
paddle.linalg.cholesky(Tensor([3, 0],"float64"), )
paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=-1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=2, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), None, )
paddle.linalg.cond(Tensor([0, 5],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 7],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), None, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -2, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), None, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), math.inf, )
paddle.linalg.cond(Tensor([3, 0],"float32"), )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=-1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=2, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), None, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), None, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), None, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), None, )
paddle.linalg.cond(Tensor([5, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([9, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), None, )
paddle.linalg.cond(x=Tensor([0, 3],"float32"), )
paddle.linalg.cond(x=Tensor([0, 3],"float64"), )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([3, 0],"float32"), )
paddle.linalg.cond(x=Tensor([3, 0],"float64"), )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([6, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([6, 2, 4, 0, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 0],"float64"), )
paddle.linalg.cov(Tensor([0, 4],"float32"), )
paddle.linalg.cov(Tensor([0],"float32"), )
paddle.linalg.cov(Tensor([3, 0],"float32"), )
paddle.linalg.cov(x=Tensor([0, 12],"float64"), )
paddle.linalg.cov(x=Tensor([0, 2],"float32"), )
paddle.linalg.cov(x=Tensor([0, 2],"float64"), )
paddle.linalg.cov(x=Tensor([4, 0],"float32"), )
paddle.linalg.cov(x=Tensor([4, 0],"float64"), )
paddle.linalg.det(Tensor([0, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([2, 0, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 0, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 0, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"complex128"), )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"float64"), name="small_x", )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lu(Tensor([0, 3, 2, 2],"float64"), )
paddle.linalg.lu(Tensor([0, 3, 3],"float64"), )
paddle.linalg.lu(Tensor([0, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 3],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([0, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 3],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 3, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 0],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 0, 2, 2],"float64"), )
paddle.linalg.lu(Tensor([4, 0, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 0, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 3, 0, 2],"float64"), )
paddle.linalg.lu(Tensor([4, 3, 2, 0],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 0, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 0],"float32"), )
paddle.linalg.lu(Tensor([5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu_unpack(Tensor([0, 3, 3],"float64"), Tensor([3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 3, 5],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 3, 5],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 3],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 3, 5],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 3, 5],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 5, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 5, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 5, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 5],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5, 5],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 0, 3, 5],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 0, 3, 5],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 0, 5],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 0, 5],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 0],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 0],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float32"), Tensor([0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float32"), Tensor([2, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float64"), Tensor([0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float64"), Tensor([2, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 0, 5],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 0, 5],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 0],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 0],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([0, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([2, 0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([2, 5, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([0, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([2, 0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([2, 5, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 3],"float64"), Tensor([3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 5, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 5],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 5],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3, 0],"float64"), Tensor([3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3, 3],"float64"), Tensor([0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3, 3],"float64"), Tensor([3, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float32"), Tensor([0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float64"), Tensor([0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 0],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 0],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([0, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 5, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([0, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 5, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float32"), Tensor([0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float32"), Tensor([3, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float64"), Tensor([0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float64"), Tensor([3, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float32"), Tensor([0],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float64"), Tensor([0],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 0, 5, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 0, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 0],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([0, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 5, 0],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 0],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3],"float32"), Tensor([0],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 3],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(x=Tensor([0, 3, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 0, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 0],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float16"),Tensor([8, 0],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float64"),Tensor([8, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.pinv(Tensor([0, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 0, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 200, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([0, 2, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([0, 4],"float32"), )
paddle.linalg.pinv(x=Tensor([0, 4],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([2, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([3, 0],"float32"), )
paddle.linalg.pinv(x=Tensor([3, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([4, 0, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([4, 2, 0],"float64"), rcond=5, hermitian=True, )
paddle.linalg.svd_lowrank(Tensor([0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([4, 0],"float64"), q=4, )
paddle.linalg.svdvals(Tensor([0, 40],"float64"), )
paddle.linalg.svdvals(Tensor([40, 0],"float64"), )
paddle.linalg.triangular_solve(Tensor([3, 3],"float64"), Tensor([3, 0],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 0],"float64"), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.logaddexp(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logaddexp(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logaddexp(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logsumexp(Tensor([0, 16, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([0, 4, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([0, 5, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([0, 8, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0],"float32"), axis=0, )
paddle.logsumexp(Tensor([10, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([20, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([26, 0, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 0, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 0, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 16, 0],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([4, 0, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([4, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([4, 5, 0],"float64"), list[-1,], False, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], keepdim=True, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([0, 60, 10],"int32"), Tensor([0, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 20],"int32"), Tensor([0, 60, 20],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 2],"int32"), Tensor([0, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 30],"int32"), Tensor([0, 60, 30],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 4],"int32"), Tensor([0, 60, 4],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([10, 0, 10],"int32"), Tensor([10, 0, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0],"int32"), Tensor([10, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 0],"int32"), Tensor([10, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0, 2],"int32"), Tensor([2, 0, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0],"int32"), Tensor([2, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 0],"int32"), Tensor([2, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([20, 0, 20],"int32"), Tensor([20, 0, 20],"bool"), 0, )
paddle.masked_fill(Tensor([20, 0],"int32"), Tensor([20, 0],"bool"), 0, )
paddle.masked_fill(Tensor([20, 60, 0],"int32"), Tensor([20, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([30, 0, 30],"int32"), Tensor([30, 0, 30],"bool"), 0, )
paddle.masked_fill(Tensor([30, 0],"int32"), Tensor([30, 0],"bool"), 0, )
paddle.masked_fill(Tensor([30, 60, 0],"int32"), Tensor([30, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([4, 0, 4],"int32"), Tensor([4, 0, 4],"bool"), 0, )
paddle.masked_fill(Tensor([4, 0],"int32"), Tensor([4, 0],"bool"), 0, )
paddle.masked_fill(Tensor([4, 60, 0],"int32"), Tensor([4, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.5797171592712402, )
paddle.masked_scatter(Tensor([0, 3],"float32"), Tensor([0, 1],"bool"), Tensor([0, 30],"float32"), )
paddle.masked_scatter(Tensor([0, 40],"float32"), Tensor([0, 1],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 0],"float32"), Tensor([3, 0],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([3, 0],"float32"), Tensor([3, 1],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 40],"float32"), Tensor([3, 1],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 40],"float32"), Tensor([3, 1],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([30, 0],"float32"), Tensor([30, 0],"bool"), Tensor([30, 0],"float32"), )
paddle.masked_scatter(Tensor([30, 0],"float32"), Tensor([30, 1],"bool"), Tensor([30, 30],"float32"), )
paddle.masked_scatter(Tensor([30, 3],"float32"), Tensor([30, 1],"bool"), Tensor([0, 30],"float32"), )
paddle.masked_scatter(Tensor([30, 3],"float32"), Tensor([30, 1],"bool"), Tensor([30, 0],"float32"), )
paddle.masked_scatter(Tensor([50, 0],"float32"), Tensor([50, 0],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([50, 3],"float32"), Tensor([50, 3],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([50, 3],"float32"), Tensor([50, 3],"bool"), Tensor([300, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 25],"float32"), Tensor([0, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 25],"float32"), Tensor([1, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 26],"float32"), Tensor([0, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 26],"float32"), Tensor([1, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 32],"float32"), Tensor([0, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 32],"float32"), Tensor([1, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([0, 1, 16, 49, 32],"float32"), Tensor([0, 1, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([0, 1, 16, 49, 49],"float32"), Tensor([0, 1, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 5, 2],"float64"), Tensor([0, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([0, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([0, 16, 4, 49, 32],"float32"), Tensor([0, 16, 4, 32, 49],"float32"), )
paddle.matmul(Tensor([0, 16, 512, 16],"float64"), Tensor([0, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 32],"float64"), Tensor([0, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 64],"float64"), Tensor([0, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([0, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([0, 23],"float32"), Tensor([512, 23, 2],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([0, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([0, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([0, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([2, 3, 1],"float64"), )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([0, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([0, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([1, 0, 1, 25],"float32"), Tensor([1, 0, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 25],"float32"), Tensor([1, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 26],"float32"), Tensor([1, 0, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 26],"float32"), Tensor([1, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 32],"float32"), Tensor([1, 0, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 32],"float32"), Tensor([1, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float32"), Tensor([1, 0, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 1, 0, 25],"float32"), Tensor([1, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 26],"float32"), Tensor([1, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 25],"float32"), Tensor([0, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 25],"float32"), Tensor([1, 0, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 25],"float32"), Tensor([1, 1, 25, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 26],"float32"), Tensor([0, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 26],"float32"), Tensor([1, 0, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 26],"float32"), Tensor([1, 1, 26, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 32],"float32"), Tensor([0, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 32],"float32"), Tensor([1, 0, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 32],"float32"), Tensor([1, 1, 32, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 64],"float32"), Tensor([64, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 768],"float32"), Tensor([768, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 8],"float32"), Tensor([0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 10, 32],"float32"), Tensor([0, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 0],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([1, 17, 64],"float32"), Tensor([64, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([1, 2],"float64"), Tensor([2, 0],"float64"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float32"), Tensor([1, 3, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 0],"float32"), )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 3, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 5, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1000, 2],"float32"), y=Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([1024, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 32],"float32"), Tensor([128, 0, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 32],"float32"), Tensor([128, 1, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 49],"float32"), Tensor([128, 0, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 49],"float32"), Tensor([128, 1, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 0, 4, 49, 32],"float32"), Tensor([128, 0, 4, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 0, 49, 32],"float32"), Tensor([128, 1, 0, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 0, 49, 49],"float32"), Tensor([128, 1, 0, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 0, 32],"float32"), Tensor([128, 1, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 0, 49],"float32"), Tensor([128, 1, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 32],"float32"), Tensor([128, 0, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 32],"float32"), Tensor([128, 1, 16, 32, 0],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 49],"float32"), Tensor([128, 0, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 49],"float32"), Tensor([128, 1, 16, 49, 0],"float32"), )
paddle.matmul(Tensor([128, 16, 0, 49, 32],"float32"), Tensor([128, 16, 0, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 16, 4, 0, 32],"float32"), Tensor([128, 16, 4, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 16, 4, 49, 32],"float32"), Tensor([128, 16, 4, 32, 0],"float32"), )
paddle.matmul(Tensor([16, 0, 512, 16],"float64"), Tensor([16, 0, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 32],"float64"), Tensor([16, 0, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 64],"float64"), Tensor([16, 0, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 64],"float64"), Tensor([16, 16, 0, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 0],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 16, 0, 64],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 0, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 0, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 5, 2],"float64"), Tensor([1, 0, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 0, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 3, 2, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([1, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([2, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([2, 5, 0],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 4, 0],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 0, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 4, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 4, 0],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 0, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 4, 0],"float64"), True, False, )
paddle.matmul(Tensor([200, 2],"float32"), y=Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([23, 23],"float32"), Tensor([0, 23, 2],"float32"), )
paddle.matmul(Tensor([23, 23],"float32"), Tensor([512, 23, 0],"float32"), )
paddle.matmul(Tensor([250, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([2],"float64"), Tensor([0, 2],"float64"), False, True, )
paddle.matmul(Tensor([2],"float64"), Tensor([2, 0],"float64"), False, False, )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([0, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([2, 3, 0],"float64"), )
paddle.matmul(Tensor([3200, 23],"float32"), Tensor([0, 23, 2],"float32"), )
paddle.matmul(Tensor([3200, 23],"float32"), Tensor([512, 23, 0],"float32"), )
paddle.matmul(Tensor([52, 0, 128],"float32"), Tensor([52, 0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([52, 0, 128],"float32"), Tensor([52, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([52, 7, 128],"float32"), Tensor([52, 0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 4, 12, 4],"float32"), y=Tensor([0, 4, 4, 12],"float32"), )
paddle.matmul(x=Tensor([0, 4, 38, 38],"float32"), y=Tensor([0, 4, 38, 256],"float32"), )
paddle.matmul(x=Tensor([0, 4, 9, 9],"float32"), y=Tensor([0, 4, 9, 64],"float32"), )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 101, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 102, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 103, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([100, 0, 38, 38],"float32"), y=Tensor([100, 0, 38, 256],"float32"), )
paddle.matmul(x=Tensor([100, 0, 9, 9],"float32"), y=Tensor([100, 0, 9, 64],"float32"), )
paddle.matmul(x=Tensor([100, 4, 0, 38],"float32"), y=Tensor([100, 4, 38, 256],"float32"), )
paddle.matmul(x=Tensor([100, 4, 0, 9],"float32"), y=Tensor([100, 4, 9, 64],"float32"), )
paddle.matmul(x=Tensor([100, 4, 38, 38],"float32"), y=Tensor([100, 4, 38, 0],"float32"), )
paddle.matmul(x=Tensor([100, 4, 9, 9],"float32"), y=Tensor([100, 4, 9, 0],"float32"), )
paddle.matmul(x=Tensor([13, 0, 12, 4],"float32"), y=Tensor([13, 0, 4, 12],"float32"), )
paddle.matmul(x=Tensor([13, 4, 0, 4],"float32"), y=Tensor([13, 4, 4, 12],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 4],"float32"), y=Tensor([13, 4, 4, 0],"float32"), )
paddle.matmul(x=Tensor([187679, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.matmul(x=Tensor([8, 24],"float32"), y=Tensor([24, 0],"float32"), )
paddle.max(Tensor([0, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.max(Tensor([0, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([0, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 5],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 5],"float64"), axis=1, )
paddle.max(Tensor([10, 10, 0, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([0],"int64"),Tensor([1],"int64"),], )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.max(Tensor([10, 5, 9, 0],"float64"), Tensor([2],"int64"), )
paddle.max(Tensor([2, 0],"float32"), axis=0, )
paddle.max(Tensor([2, 0],"int32"), axis=0, )
paddle.max(Tensor([20, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([30, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([4, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([416, 50, 0, 256],"float32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 0],"float32"), axis=1, )
paddle.max(Tensor([512, 50, 0, 256],"float32"), axis=1, )
paddle.max(Tensor([512, 50, 7, 0],"float32"), axis=1, )
paddle.max(Tensor([52, 50, 0, 256],"float32"), axis=1, )
paddle.max(Tensor([52, 50, 7, 0],"float32"), axis=1, )
paddle.max(Tensor([8, 0, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(x=Tensor([0, 3],"float32"), axis=Tensor([1],"int64"), )
paddle.max(x=Tensor([2, 0],"float32"), axis=Tensor([1],"int64"), )
paddle.median(Tensor([0, 4, 2],"int32"), -1, False, )
paddle.median(Tensor([0, 4, 2],"int32"), -1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), -1, True, )
paddle.median(Tensor([0, 4, 2],"int32"), -1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 1, False, )
paddle.median(Tensor([0, 4, 2],"int32"), 1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 1, True, )
paddle.median(Tensor([0, 4, 2],"int32"), 1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 2, False, )
paddle.median(Tensor([0, 4, 2],"int32"), 2, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 2, True, )
paddle.median(Tensor([0, 4, 2],"int32"), 2, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), -1, False, )
paddle.median(Tensor([0, 4, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), -1, True, )
paddle.median(Tensor([0, 4, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 1, False, )
paddle.median(Tensor([0, 4, 2],"int64"), 1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 1, True, )
paddle.median(Tensor([0, 4, 2],"int64"), 1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 2, False, )
paddle.median(Tensor([0, 4, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 2, True, )
paddle.median(Tensor([0, 4, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([0, 4, 5],"int32"), mode="min", )
paddle.median(Tensor([0, 4, 5],"int64"), mode="min", )
paddle.median(Tensor([0, 4],"float64"), -1, False, )
paddle.median(Tensor([0, 4],"float64"), -1, False, mode="min", )
paddle.median(Tensor([0, 4],"float64"), -1, True, )
paddle.median(Tensor([0, 4],"float64"), -1, True, mode="min", )
paddle.median(Tensor([0, 4],"float64"), 0, False, )
paddle.median(Tensor([0, 4],"float64"), 0, True, )
paddle.median(Tensor([0, 4],"float64"), 1, False, )
paddle.median(Tensor([0, 4],"float64"), 1, False, mode="min", )
paddle.median(Tensor([0, 4],"float64"), 1, True, )
paddle.median(Tensor([0, 4],"float64"), 1, True, mode="min", )
paddle.median(Tensor([0, 4],"float64"), None, False, mode="min", )
paddle.median(Tensor([2, 0, 5],"int32"), mode="min", )
paddle.median(Tensor([2, 0, 5],"int64"), mode="min", )
paddle.median(Tensor([2, 4, 0],"int32"), mode="min", )
paddle.median(Tensor([2, 4, 0],"int64"), mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), -1, False, )
paddle.median(Tensor([3, 0, 2],"int32"), -1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), -1, True, )
paddle.median(Tensor([3, 0, 2],"int32"), -1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 0, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 0, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 1, False, )
paddle.median(Tensor([3, 0, 2],"int32"), 1, True, )
paddle.median(Tensor([3, 0, 2],"int32"), 2, False, )
paddle.median(Tensor([3, 0, 2],"int32"), 2, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 2, True, )
paddle.median(Tensor([3, 0, 2],"int32"), 2, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), -1, False, )
paddle.median(Tensor([3, 0, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), -1, True, )
paddle.median(Tensor([3, 0, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 0, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 0, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 1, False, )
paddle.median(Tensor([3, 0, 2],"int64"), 1, True, )
paddle.median(Tensor([3, 0, 2],"int64"), 2, False, )
paddle.median(Tensor([3, 0, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 2, True, )
paddle.median(Tensor([3, 0, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([3, 0],"float64"), -1, False, )
paddle.median(Tensor([3, 0],"float64"), -1, True, )
paddle.median(Tensor([3, 0],"float64"), 0, False, )
paddle.median(Tensor([3, 0],"float64"), 0, True, )
paddle.median(Tensor([3, 0],"float64"), 1, False, )
paddle.median(Tensor([3, 0],"float64"), 1, True, )
paddle.median(Tensor([3, 4, 0],"int32"), -1, False, )
paddle.median(Tensor([3, 4, 0],"int32"), -1, True, )
paddle.median(Tensor([3, 4, 0],"int32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 1, False, )
paddle.median(Tensor([3, 4, 0],"int32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 1, True, )
paddle.median(Tensor([3, 4, 0],"int32"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 2, False, )
paddle.median(Tensor([3, 4, 0],"int32"), 2, True, )
paddle.median(Tensor([3, 4, 0],"int64"), -1, False, )
paddle.median(Tensor([3, 4, 0],"int64"), -1, True, )
paddle.median(Tensor([3, 4, 0],"int64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 1, False, )
paddle.median(Tensor([3, 4, 0],"int64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 1, True, )
paddle.median(Tensor([3, 4, 0],"int64"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 2, False, )
paddle.median(Tensor([3, 4, 0],"int64"), 2, True, )
paddle.median(Tensor([5, 0],"float64"), 0, False, mode="min", )
paddle.median(Tensor([5, 0],"float64"), 0, True, mode="min", )
paddle.median(Tensor([5, 0],"float64"), None, False, mode="min", )
paddle.min(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([10, 10, 9, 0],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([0],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.min(Tensor([10, 5, 0, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([8, 0],"float64"), axis=0, )
paddle.mm(Tensor([0, 1, 256],"float32"), Tensor([0, 256, 512],"float32"), )
paddle.mm(Tensor([0, 6, 49, 32],"float32"), Tensor([0, 6, 32, 49],"float32"), )
paddle.mm(Tensor([0, 6, 49, 49],"float32"), Tensor([0, 6, 49, 32],"float32"), )
paddle.mm(Tensor([0, 8, 144, 144],"float32"), Tensor([0, 8, 144, 32],"float32"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.mm(Tensor([1, 12],"float32"), Tensor([12, 0],"float32"), )
paddle.mm(Tensor([10, 20],"float64"), Tensor([20, 0],"float64"), )
paddle.mm(Tensor([1024, 0, 144, 144],"float32"), Tensor([1024, 0, 144, 32],"float32"), )
paddle.mm(Tensor([1024, 6, 0, 32],"float32"), Tensor([1024, 6, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 6, 0, 49],"float32"), Tensor([1024, 6, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 6, 49, 32],"float32"), Tensor([1024, 6, 32, 0],"float32"), )
paddle.mm(Tensor([1024, 6, 49, 49],"float32"), Tensor([1024, 6, 49, 0],"float32"), )
paddle.mm(Tensor([1024, 8, 0, 144],"float32"), Tensor([1024, 8, 144, 32],"float32"), )
paddle.mm(Tensor([1024, 8, 144, 144],"float32"), Tensor([1024, 8, 144, 0],"float32"), )
paddle.mm(Tensor([16, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.mm(Tensor([4, 0, 256],"float32"), Tensor([4, 256, 512],"float32"), )
paddle.mm(Tensor([4, 1, 256],"float32"), Tensor([4, 256, 0],"float32"), )
paddle.mm(Tensor([8, 0, 256],"float32"), Tensor([8, 256, 512],"float32"), )
paddle.mm(Tensor([8, 1, 256],"float32"), Tensor([8, 256, 0],"float32"), )
paddle.mm(input=Tensor([2, 3],"float32"), mat2=Tensor([3, 0],"float32"), )
paddle.mm(input=Tensor([2, 3],"float64"), mat2=Tensor([3, 0],"float64"), )
paddle.mode(x=Tensor([0, 2, 3],"int32"), )
paddle.mode(x=Tensor([0, 2, 3],"int64"), )
paddle.mode(x=Tensor([3, 0, 3],"int32"), )
paddle.mode(x=Tensor([3, 0, 3],"int64"), )
paddle.multigammaln(Tensor([0, 20],"float32"), 2, )
paddle.multigammaln(Tensor([0, 20],"float64"), 2, )
paddle.multigammaln(Tensor([10, 0],"float32"), 2, )
paddle.multigammaln(Tensor([10, 0],"float64"), 2, )
paddle.multiplex(inputs=list[Tensor([0, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([0, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([0, 4],"float32"),Tensor([7, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 0],"float32"),Tensor([2, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([2, 0],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 0],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([0, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([0, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 0],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 0],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 0],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiply(Tensor([0, 1, 2, 3],"float64"), Tensor([0, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([0, 1, 512, 1, 40],"float32"), Tensor([0, 26, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([0, 100, 256],"float32"), Tensor([1, 100, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 101, 256],"float32"), Tensor([1, 101, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 102, 256],"float32"), Tensor([1, 102, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 112, 14, 14],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.multiply(Tensor([0, 12, 10],"float32"), Tensor([0, 1, 10],"float32"), )
paddle.multiply(Tensor([0, 256, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 32, 20, 20],"float32"), Tensor([0, 32, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.multiply(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), )
paddle.multiply(Tensor([1, 100, 256],"float32"), Tensor([0, 100, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 101, 256],"float32"), Tensor([0, 101, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 102, 256],"float32"), Tensor([0, 102, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.multiply(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.multiply(Tensor([10, 12, 0],"float32"), Tensor([10, 1, 0],"float32"), )
paddle.multiply(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.multiply(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.multiply(Tensor([100, 0, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), )
paddle.multiply(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 0, 2, 2],"float32"), )
paddle.multiply(Tensor([100, 2, 3, 0],"float32"), Tensor([100, 2, 3, 1],"float32"), )
paddle.multiply(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 3, 0],"float32"), )
paddle.multiply(Tensor([128, 0, 14, 14],"float32"), Tensor([128, 0, 1, 1],"float32"), )
paddle.multiply(Tensor([128, 0, 14, 14],"float32"), Tensor([128, 1, 1, 1],"float32"), )
paddle.multiply(Tensor([128, 112, 0, 14],"float32"), Tensor([128, 1, 0, 1],"float32"), )
paddle.multiply(Tensor([128, 112, 0, 14],"float32"), Tensor([128, 1, 1, 1],"float32"), )
paddle.multiply(Tensor([128, 112, 14, 0],"float32"), Tensor([128, 1, 1, 0],"float32"), )
paddle.multiply(Tensor([128, 112, 14, 0],"float32"), Tensor([128, 1, 1, 1],"float32"), )
paddle.multiply(Tensor([16, 0, 20, 20],"float32"), Tensor([16, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([16, 32, 0, 20],"float32"), Tensor([16, 32, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([16, 32, 0, 20],"float32"), Tensor([16, 32, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([16, 32, 20, 0],"float32"), Tensor([16, 32, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([16, 32, 20, 0],"float32"), Tensor([16, 32, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 128, 128],"float32"), Tensor([2, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 2, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 0, 2, 3],"float64"), Tensor([2, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 3],"float64"), Tensor([2, 1, 0, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 3],"float64"), Tensor([2, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 0],"float64"), Tensor([2, 1, 1, 0],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 0],"float64"), Tensor([2, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 256, 0, 128],"float32"), Tensor([2, 256, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 256, 0, 128],"float32"), Tensor([2, 256, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 256, 128, 0],"float32"), Tensor([2, 256, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 256, 128, 0],"float32"), Tensor([2, 256, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([64, 0, 512, 1, 40],"float32"), Tensor([64, 0, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([64, 1, 0, 1, 40],"float32"), Tensor([64, 26, 0, 1, 40],"float32"), )
paddle.multiply(Tensor([64, 1, 0, 1, 40],"float32"), Tensor([64, 26, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([64, 1, 512, 0, 40],"float32"), Tensor([64, 26, 1, 0, 40],"float32"), )
paddle.multiply(Tensor([64, 1, 512, 0, 40],"float32"), Tensor([64, 26, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([64, 1, 512, 1, 0],"float32"), Tensor([64, 26, 1, 1, 0],"float32"), )
paddle.multiply(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 0, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 26, 1, 0, 40],"float32"), )
paddle.multiply(Tensor([8, 0, 512, 1, 40],"float32"), Tensor([8, 0, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([8, 1, 0, 1, 40],"float32"), Tensor([8, 26, 0, 1, 40],"float32"), )
paddle.multiply(Tensor([8, 1, 0, 1, 40],"float32"), Tensor([8, 26, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([8, 1, 512, 0, 40],"float32"), Tensor([8, 26, 1, 0, 40],"float32"), )
paddle.multiply(Tensor([8, 1, 512, 0, 40],"float32"), Tensor([8, 26, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([8, 1, 512, 1, 0],"float32"), Tensor([8, 26, 1, 1, 0],"float32"), )
paddle.multiply(Tensor([8, 1, 512, 1, 40],"float32"), Tensor([8, 0, 1, 1, 40],"float32"), )
paddle.multiply(Tensor([8, 1, 512, 1, 40],"float32"), Tensor([8, 26, 1, 0, 40],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 20, 20],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 20, 20],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 21, 21],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 21, 21],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 22, 22],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 22, 22],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1],"float32"), y=Tensor([0, 3],"float32"), )
paddle.multiply(x=Tensor([1, 0, 20, 20],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0, 21, 21],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0, 22, 22],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0],"float32"), y=Tensor([187679, 0],"float32"), )
paddle.multiply(x=Tensor([1, 0],"float32"), y=Tensor([187679, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 20],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 20],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 21],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 21],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 22],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 22],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 20, 0],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 20, 0],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 20, 20],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 21, 0],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 21, 0],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 21, 21],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 22, 0],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 22, 0],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 22, 22],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1],"float32"), y=Tensor([0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1],"float32"), y=Tensor([187679, 0],"float32"), )
paddle.multiply(x=Tensor([187679, 1],"float32"), y=Tensor([187679, 0],"float32"), )
paddle.mv(Tensor([0, 100],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([0, 12],"float32"), Tensor([12],"float32"), )
paddle.mv(Tensor([0, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([0, 36],"float32"), Tensor([36],"float32"), )
paddle.mv(Tensor([0, 6],"float32"), Tensor([6],"float32"), )
paddle.mv(x=Tensor([0, 1],"float64"), vec=Tensor([1],"float64"), )
paddle.mv(x=Tensor([0, 2],"float32"), vec=Tensor([2],"float32"), )
paddle.mv(x=Tensor([0, 2],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(x=Tensor([0, 3],"float64"), vec=Tensor([3],"float64"), )
paddle.nan_to_num(Tensor([0, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([0, 2],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([0, 3],"float32"), )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, None, None, )
paddle.nan_to_num(Tensor([0, 4],"float32"), )
paddle.nan_to_num(Tensor([0, 5, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([114, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([148, 0, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([148, 5, 0],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([1948, 0],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([2, 0],"float32"), )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, None, None, )
paddle.nan_to_num(Tensor([400, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([91, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([0, 3],"float32"), -1, False, )
paddle.nanmean(Tensor([0, 3],"float32"), 0, True, )
paddle.nanmean(Tensor([0, 3],"float32"), 1, False, )
paddle.nanmean(Tensor([0, 3],"float32"), None, False, )
paddle.nanmean(Tensor([0, 3],"float32"), None, True, )
paddle.nanmean(Tensor([0, 3],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([0, 5],"float32"), axis=None, )
paddle.nanmean(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nanmean(Tensor([0],"float32"), axis=0, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 0],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 0],"float32"), 0, True, )
paddle.nanmean(Tensor([2, 0],"float32"), 1, False, )
paddle.nanmean(Tensor([2, 0],"float32"), None, False, )
paddle.nanmean(Tensor([2, 0],"float32"), None, True, )
paddle.nanmean(Tensor([2, 0],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([3, 0],"float32"), axis=None, )
paddle.nanmean(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([0, 4],"float32"), )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nansum(Tensor([0],"float32"), axis=0, )
paddle.nansum(Tensor([0],"float32"), axis=list[0,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), )
paddle.nansum(Tensor([2, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nansum(x=Tensor([0, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), axis=-1, )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.nansum(x=Tensor([3, 0, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), axis=-1, )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), axis=0, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 0, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 0, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 0, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 0],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), axis=-1, )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.nextafter(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.nextafter(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.nextafter(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.nextafter(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.nextafter(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.nextafter(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 1024, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 1536, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 256, 16],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 768, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 0, 16],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 0, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 1024, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 256, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 0, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 1536, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 768, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 0, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 1536, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=8, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=8, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 4, 4],"float64"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 320, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 4, 4, 3],"float64"), output_size=Tensor([2],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 7, 7],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 64, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 19, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 20, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 18, 0],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 19, 0],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 20, 0],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 0, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 0, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 7, 7],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1950, 0, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1950, 2048, 0, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1950, 2048, 7, 0],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 4],"float64"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 0],"float64"), output_size=Tensor([2],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2012, 0, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2012, 2048, 0, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2012, 2048, 7, 0],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2022, 0, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2022, 2048, 0, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2022, 2048, 7, 0],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2036, 0, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2036, 2048, 0, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2036, 2048, 7, 0],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 0, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=Tensor([3],"int64"), )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 768, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 768, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 768, 16, 8, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 0, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 0, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 0, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 0, 16, 8, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 0, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 0, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 0, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 0, 8, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 0, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 0, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 0, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 8, 0],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([0, 16],"float32"), Tensor([128],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([0, 8],"float32"), Tensor([8],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 16],"float32"), Tensor([0],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([0],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 1, 4],"float64"), 4, True, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 8],"float64"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 1, 4],"float64"), output_size=4, return_mask=True, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 3, 32],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 3, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 8, 8],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 2, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 8, 8],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 2, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 2, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 2, 8, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 2, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 2, 8, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float32"), Tensor([0],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float64"), Tensor([0],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([0],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([0],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([0],"int32"), align_corners=True, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 40, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 42, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 44, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1056, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 64, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1536, 8, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 2048, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 208, 14, 14],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 256, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 256, 32, 32],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 256, 4, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 288, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 64, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 8, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([0, 384, 35, 35],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 16, 16],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 64, 16, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 8, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.batch_norm(Tensor([0, 128, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 128, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 128, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 24, 16, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 128, 0],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 0, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 16, 0],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 0, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 16, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 0, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.conv1d(Tensor([0, 1, 25500],"float32"), Tensor([64, 1, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 200, 1],"float32"), Tensor([256, 1, 4],"float32"), bias=Tensor([256],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([1, 32, 7],"float32"), bias=Tensor([1],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 62],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 384, 3000],"float32"), Tensor([384, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 400, 100],"float32"), Tensor([256, 100, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 512, 3000],"float32"), Tensor([512, 512, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 3],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 7],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 768, 3000],"float32"), Tensor([768, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 80, 3000],"float32"), Tensor([1024, 80, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 62],"float32"), Tensor([32, 0, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d_transpose(Tensor([0, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 64, 448],"float32"), Tensor([64, 32, 8],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1024, 2, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 2, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 2, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 32, 32],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 32, 32],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 4, 4],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 4, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 64, 64],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 64, 64],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 8, 8],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 24, 8, 8],"float32"), Tensor([96, 24, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 284, 284],"float32"), weight=Tensor([3, 1, 29, 29],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([0, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([32],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 384, 2, 2],"float32"), Tensor([96, 384, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 4096, 16, 16],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 32, 32],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 32, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 4, 4],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 4, 4],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 64, 64],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 64, 64],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 8, 8],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 48, 4, 4],"float32"), Tensor([192, 48, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 48, 9, 9],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 512, 15, 15],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 16, 16],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 17, 17],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 31, 31],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 32, 32],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 33, 33],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 4, 4],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 4, 4],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 63, 63],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 64, 64],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 513, 4, 4],"float32"), Tensor([512, 513, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 8, 2, 2],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 8, 8, 8],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 8, 8, 8],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 96, 2, 2],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 96, 5, 5],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 96, 8, 8],"float32"), Tensor([192, 96, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 293],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 389],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 421],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 36],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 48],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 52],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 2, 32],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 2, 34],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 2, 36],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 8, 8],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 8, 8],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 8, 8],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1024, 0, 259, 259],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 0, 260, 260],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 0, 11, 11],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([16, 0, 284, 284],"float32"), weight=Tensor([3, 0, 29, 29],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([2, 0, 2, 2],"float32"), Tensor([96, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 2, 2],"float32"), Tensor([96, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([192, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([96, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 8, 8],"float32"), Tensor([192, 0, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 8, 8],"float32"), Tensor([96, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 9, 9],"float32"), Tensor([48, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 2, 2],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 8, 8],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 8, 8],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([8, 0, 15, 15],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 16, 16],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 17, 17],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 31, 31],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 32, 32],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 33, 33],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 4, 4],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 63, 63],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 8, 8],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([227, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([256, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([82, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 4, 4],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 8, 8],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 32, 32],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 4, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 64, 64],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 8, 8],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 4, 4],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 64, 64],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 64, 64],"float32"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 32, 21, 9],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4096, 32, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4096, 4, 4],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4096, 64, 64],"float32"), Tensor([4096, 256, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4096, 8, 8],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 4, 4],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 64, 64],"float32"), Tensor([512, 256, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 21, 9],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 32, 32],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 4, 4],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 64, 64],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 8, 8],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 32, 32],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 4, 4],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 64, 64],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 8, 8],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([0],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 64, 64],"float32"), Tensor([256, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 64, 64],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([0],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 10],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 0],"float32"), Tensor([10, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0, 4],"float64"), x2=Tensor([2, 0, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cross_entropy(Tensor([0, 1000],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([0, 1024, 151936],"float32"), Tensor([0, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 1024, 50257],"float32"), Tensor([0, 1024, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 102],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 125696],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 151936],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 32000],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 65024],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 20],"float32"), Tensor([0, 1],"int64"), reduction="none", use_softmax=True, )
paddle.nn.functional.cross_entropy(Tensor([0, 212],"float32"), Tensor([0, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 22400, 2],"float32"), Tensor([0, 22400, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([0, 2],"float32"), Tensor([0, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([0, 2],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([0, 30522],"float32"), Tensor([0, 1],"int64"), reduction="none", ignore_index=-1, )
paddle.nn.functional.cross_entropy(Tensor([0, 400],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([0, 5],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([0, 93431],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 125696],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 151936],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 32000],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 50257],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 65024],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), label=Tensor([1, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1, 1024, 0],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 1024, 0],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2048, 0],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([10, 0],"float32"), Tensor([10],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([10, 0],"float32"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float32"), Tensor([100],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-1, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1000, 0],"float32"), Tensor([1000],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([10008, 0],"float32"), Tensor([10008],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1006, 0],"float32"), Tensor([1006],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([10080, 0],"float32"), Tensor([10080],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([101, 0],"float32"), Tensor([101, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([101, 0],"float32"), Tensor([101],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1015, 0],"float32"), Tensor([1015],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([10170, 0],"float32"), Tensor([10170],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1018, 0],"float32"), Tensor([1018],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([102, 0],"float32"), Tensor([102, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1020, 0],"float32"), Tensor([1020],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([104, 0],"float32"), Tensor([104, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([104, 0],"float32"), label=Tensor([104, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1040, 0],"float32"), Tensor([1040, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([105, 0],"float32"), Tensor([105, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([12, 0],"float32"), Tensor([12],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([12, 0],"float32"), Tensor([12],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([124, 0],"float32"), label=Tensor([124, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([128, 0],"float32"), label=Tensor([128, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([14, 0],"float32"), Tensor([14, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14, 7, 0],"float32"), Tensor([14, 7],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14800, 0],"float32"), Tensor([14800],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1536, 0],"float32"), Tensor([1536],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([16, 0],"float32"), Tensor([16, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([16032, 0],"float32"), Tensor([16032],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1914, 0],"float32"), Tensor([1914],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1914, 0],"float32"), Tensor([1914],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([192, 0],"float32"), Tensor([192],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float64"), Tensor([2],"int64"), weight=Tensor([4],"float64"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 32, 32, 0],"float32"), Tensor([2, 32, 32],"int64"), weight=None, ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([20, 0],"float32"), Tensor([20],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([200, 0],"float32"), Tensor([200],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([200, 0],"float32"), Tensor([200],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([24, 158, 0],"float32"), Tensor([24, 158],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([3, 0],"float32"), Tensor([3],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([30, 0],"float32"), Tensor([30, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32, 1],"int64"), reduction="none", use_softmax=True, )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32],"int64"), weight=None, ignore_index=512, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([36, 0],"float32"), Tensor([36, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([36, 0],"float32"), Tensor([36],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float32"), Tensor([4, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float32"), Tensor([4, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4],"int64"), soft_label=True, label_smoothing=0.5436483450993637, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 100, 0],"float32"), Tensor([4, 100],"int64"), weight=Tensor([5],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([4, 157920, 0],"float32"), Tensor([4, 157920],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 22400, 0],"float32"), Tensor([4, 22400, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 512, 0],"float64"), Tensor([4, 512, 512],"int64"), weight=Tensor([3],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([40, 0],"float32"), Tensor([40, 1],"int64"), reduction="none", ignore_index=-1, )
paddle.nn.functional.cross_entropy(Tensor([416, 30, 0],"float32"), Tensor([416, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4990, 0],"float32"), Tensor([4990],"int64"), weight=None, ignore_index=42, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), weight=Tensor([10],"float64"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 0],"float64"), label=Tensor([5],"int64"), weight=None, ignore_index=-100, soft_label=False, axis=-1, reduction="mean", name=None, )
paddle.nn.functional.cross_entropy(Tensor([512, 30, 0],"float32"), Tensor([512, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([52, 30, 0],"float32"), Tensor([52, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([58086, 0],"float32"), Tensor([58086],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([64, 0],"float32"), Tensor([64, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([64, 187, 0],"float32"), Tensor([64, 187],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 0],"float32"), Tensor([8, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 102, 0],"float32"), Tensor([8, 102],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 103, 0],"float32"), Tensor([8, 103],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 105, 0],"float32"), Tensor([8, 105],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(input=Tensor([0, 1000],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", use_softmax=True, )
paddle.nn.functional.cross_entropy(input=Tensor([0, 102],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([0, 10],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([0, 21128],"float32"), label=Tensor([0, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(input=Tensor([0, 2],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([100, 0],"float32"), label=Tensor([100, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([1024, 0],"float32"), label=Tensor([1024],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1242, 0],"float32"), label=Tensor([1242, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(input=Tensor([1950, 0],"float32"), label=Tensor([1950],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"int64"), soft_label=False, reduction="mean", use_softmax=True, )
paddle.nn.functional.cross_entropy(input=Tensor([20, 0],"float32"), label=Tensor([20, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([2012, 0],"float32"), label=Tensor([2012],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2022, 0],"float32"), label=Tensor([2022],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2036, 0],"float32"), label=Tensor([2036],"int64"), reduction="mean", )
paddle.nn.functional.embedding(Tensor([0, 100],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 101],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 128],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 16],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 2048],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 2],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1, 1],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 100],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 101],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 128],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 16],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([10, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([100],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([100],"int64"), weight=Tensor([0, 512],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([101],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([101],"int64"), weight=Tensor([0, 64],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1024, 1],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 2, 7],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 4, 7],"int32"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 7, 8],"int32"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 2],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([0, 512],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([0, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4],"int32"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([4],"int64"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([0, 2048],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([0, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 176, 176],"float32"), Tensor([0, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 176, 176],"float32"), Tensor([0, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 184, 184],"float32"), Tensor([0, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 184, 184],"float32"), Tensor([0, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 192, 192],"float32"), Tensor([0, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 128, 128, 128],"float32"), Tensor([0, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([0, 128, 128, 128],"float32"), Tensor([0, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 256, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 16, 16],"float32"), Tensor([0, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 2, 2],"float32"), Tensor([0, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 256, 256],"float32"), Tensor([0, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 256, 256],"float32"), Tensor([0, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 32, 32],"float32"), Tensor([0, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 4, 4],"float32"), Tensor([0, 4, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 64, 256],"float32"), Tensor([0, 32, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([0, 3, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 10, 15],"float32"), Tensor([0, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 20, 20],"float32"), Tensor([0, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 40, 40],"float32"), Tensor([0, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 80, 80],"float32"), Tensor([0, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([0, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([0, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([0, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 32, 26],"float32"), Tensor([0, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 64, 64],"float32"), Tensor([0, 76, 76, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 128, 128],"float32"), Tensor([1, 0, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 0, 128, 128],"float32"), Tensor([1, 0, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 0, 176, 176],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 176, 176],"float32"), Tensor([1, 0, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 184, 184],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 184, 184],"float32"), Tensor([1, 0, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 192, 192],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 0, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 0, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 0, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 32, 26],"float32"), Tensor([1, 0, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 0, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 0, 76, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 0, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 1, 0, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 184, 184],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 184, 184],"float32"), Tensor([1, 0, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 184, 184],"float32"), Tensor([1, 1, 0, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 192, 192],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 192, 192],"float32"), Tensor([1, 1, 0, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 128, 128, 128],"float32"), Tensor([1, 0, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 128, 128],"float32"), Tensor([1, 0, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 128, 128],"float32"), Tensor([1, 128, 0, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 128, 128],"float32"), Tensor([1, 256, 0, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 0, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 0, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 28, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 34, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 0, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 280, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([1, 0, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([1, 32, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 0, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 0, 76, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 64, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 76, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 0, 20, 20],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 0, 40, 40],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 0, 80, 80],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 20],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 20],"float32"), Tensor([128, 476, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 40, 40],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 40, 40],"float32"), Tensor([128, 476, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 80, 80],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 80, 80],"float32"), Tensor([128, 476, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 10, 15],"float32"), Tensor([16, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 64, 64],"float32"), Tensor([16, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 64],"float32"), Tensor([16, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 64],"float32"), Tensor([16, 64, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 0, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 15],"float32"), Tensor([16, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 15],"float32"), Tensor([16, 11645, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([176, 0, 64, 64],"float32"), Tensor([176, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 64, 64],"float32"), Tensor([176, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 64, 64],"float32"), Tensor([176, 64, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 0, 128, 128],"float32"), Tensor([4, 0, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 0, 128, 128],"float32"), Tensor([4, 0, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 0, 64, 64],"float32"), Tensor([4, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float32"), Tensor([4, 0, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float32"), Tensor([4, 0, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float32"), Tensor([4, 128, 0, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float32"), Tensor([4, 256, 0, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 32, 64, 64],"float32"), Tensor([4, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 32, 64, 64],"float32"), Tensor([4, 64, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([512, 0, 64, 256],"float32"), Tensor([512, 0, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 64, 256],"float32"), Tensor([512, 0, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 64, 256],"float32"), Tensor([512, 32, 0, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([56, 0, 16, 16],"float32"), Tensor([56, 0, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 2, 2],"float32"), Tensor([56, 0, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 32, 32],"float32"), Tensor([56, 0, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 4, 4],"float32"), Tensor([56, 0, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 64, 64],"float32"), Tensor([56, 0, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 0, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 16, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 0, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 2, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 32, 32],"float32"), Tensor([56, 0, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 32, 32],"float32"), Tensor([56, 32, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 4, 4],"float32"), Tensor([56, 0, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 4, 4],"float32"), Tensor([56, 4, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 64, 64],"float32"), Tensor([56, 0, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 64, 64],"float32"), Tensor([56, 64, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(x=Tensor([0, 64, 80, 94, 311],"float32"), grid=Tensor([0, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 0, 80, 94, 311],"float32"), grid=Tensor([4, 0, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 0, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 0, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 0, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.group_norm(Tensor([0, 1024, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([0, 1024, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([0, 1024, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 0, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 0, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 2, 0],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 0, 4, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 0, 4, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 0],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 0, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 0, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 0],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.interpolate(Tensor([0, 1, 128, 128],"float32"), list[256,256,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 128, 128],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 192, 192],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 256, 256],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 276, 49],"float32"), size=list[274,47,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 1, 64, 64],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 100, 176, 176],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 100, 184, 184],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1024, 8, 8],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 100, 156],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 128, 128],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 152, 100],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 23, 23],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 4, 4],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 150, 64, 64],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 160, 20, 20],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 21, 21],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 22, 22],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 19, 16, 32],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 32, 64],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 192, 108, 108],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 112, 112],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 116, 116],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 2, 19, 84],"float32"), size=list[17,82,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 256, 256],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 2, 608, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([0, 2, 64, 64],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 100, 156],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 124, 80],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 128, 84],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 16, 16],"float32"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 20, 20],"float16"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 256, 200, 272],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 200, 312],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 304, 200],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 62, 64],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 128],"float16"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 64],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 64],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 258, 100, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 100, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 152, 100],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 152, 100],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 25, 39],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 25, 39],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 38, 25],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 38, 25],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 50, 78],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 76, 50],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 3, 16, 16],"float32"), size=list[32,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 212, 274],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 227, 276],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 250, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 32, 32],"float32"), size=list[32,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 374, 297],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 32, 16, 16],"float32"), scale_factor=8, )
paddle.nn.functional.interpolate(Tensor([0, 32, 19, 19],"float32"), size=tuple(19,19,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 20, 20],"float32"), size=list[40,40,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 32, 32, 32],"float16"), scale_factor=4, )
paddle.nn.functional.interpolate(Tensor([0, 320, 30, 30],"float32"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 40, 8, 6],"float16"), size=None, scale_factor=4, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 512, 20, 20],"float16"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 512, 20, 20],"float32"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 64, 10, 10],"float32"), size=list[20,20,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 64, 10, 10],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 64, 2001],"float32"), size=list[2001,], mode="linear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 64, 40, 40],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 40, 40],"float32"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 8, 6],"float16"), scale_factor=4, )
paddle.nn.functional.interpolate(Tensor([0, 64, 8, 6],"float32"), scale_factor=4, )
paddle.nn.functional.interpolate(Tensor([0, 64, 80, 80],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 80, 80],"float32"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 768, 16, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 768, 16, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 768, 31, 32],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 768, 32, 32],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 80, 4, 3],"float32"), size=None, scale_factor=4, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 80, 8, 6],"float32"), size=None, scale_factor=4, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.l1_loss(Tensor([0, 1, 512, 512],"float16"), Tensor([0, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([0, 12, 170, 1],"float32"), Tensor([0, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([0, 213, 513],"float32"), Tensor([0, 213, 513],"float32"), )
paddle.nn.functional.l1_loss(Tensor([0, 3, 128, 128],"float32"), Tensor([0, 3, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.nn.functional.l1_loss(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([0, 500, 2],"float32"), Tensor([0, 500, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([0, 500, 4],"float16"), Tensor([0, 500, 4],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([0, 500, 4],"float32"), Tensor([0, 500, 4],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([0, 500, 8],"float32"), Tensor([0, 500, 8],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([0, 511, 257],"float32"), Tensor([0, 511, 257],"float32"), )
paddle.nn.functional.l1_loss(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), )
paddle.nn.functional.l1_loss(Tensor([101, 0],"float32"), Tensor([101, 0],"float32"), )
paddle.nn.functional.l1_loss(Tensor([101, 0],"float32"), Tensor([101, 0],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([102, 0],"float32"), Tensor([102, 0],"float32"), )
paddle.nn.functional.l1_loss(Tensor([128, 0],"float32"), Tensor([128, 0],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([132, 0],"float32"), Tensor([132, 0],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([16, 0, 257],"float32"), Tensor([16, 0, 257],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 0, 513],"float32"), Tensor([16, 0, 513],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 213, 0],"float32"), Tensor([16, 213, 0],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 511, 0],"float32"), Tensor([16, 511, 0],"float32"), )
paddle.nn.functional.l1_loss(Tensor([187679, 0],"float32"), Tensor([187679, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([187679, 0],"float32"), Tensor([187679, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([187679, 1],"float32"), Tensor([187679, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([20, 0, 2],"float32"), Tensor([20, 0, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 0, 4],"float16"), Tensor([20, 0, 4],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 0, 4],"float32"), Tensor([20, 0, 4],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 500, 0],"float32"), Tensor([20, 500, 0],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([28, 0, 170, 1],"float32"), Tensor([28, 0, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 0, 1],"float32"), Tensor([28, 12, 0, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 170, 0],"float32"), Tensor([28, 12, 170, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 170, 0],"float32"), Tensor([28, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 170, 1],"float32"), Tensor([28, 12, 170, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 0, 170, 1],"float32"), Tensor([3548, 0, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 0, 1],"float32"), Tensor([3548, 12, 0, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 0],"float32"), Tensor([3548, 12, 170, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 0],"float32"), Tensor([3548, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.nn.functional.l1_loss(Tensor([4, 0, 8],"float32"), Tensor([4, 0, 8],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.l1_loss(Tensor([64, 0, 128, 128],"float32"), Tensor([64, 0, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([64, 0, 170, 1],"float32"), Tensor([64, 0, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 0, 1],"float32"), Tensor([64, 12, 0, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 170, 0],"float32"), Tensor([64, 12, 170, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 170, 0],"float32"), Tensor([64, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 170, 1],"float32"), Tensor([64, 12, 170, 0],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 3, 0, 128],"float32"), Tensor([64, 3, 0, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([64, 3, 128, 0],"float32"), Tensor([64, 3, 128, 0],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([8, 0, 10],"float32"), Tensor([8, 0, 10],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([8, 0, 512, 512],"float16"), Tensor([8, 0, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 0, 512, 512],"float16"), Tensor([8, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 1, 0, 512],"float16"), Tensor([8, 1, 0, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 1, 512, 0],"float16"), Tensor([8, 1, 512, 0],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 1, 512, 512],"float16"), Tensor([8, 0, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 500, 0],"float32"), Tensor([8, 500, 0],"float32"), reduction="none", )
paddle.nn.functional.layer_norm(Tensor([0, 10, 4, 4],"float32"), list[10,4,4,], )
paddle.nn.functional.layer_norm(Tensor([0, 10, 4, 4],"float32"), tuple(10,4,4,), )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 30],"float32"), list[10,60,30,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 70],"float32"), list[10,60,70,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 100],"float32"), list[100,], weight=Tensor([100],"float32"), bias=Tensor([100],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 128, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 129],"float32"), list[129,], Tensor([129],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([0, 20],"float16"), list[20,], Tensor([20],"float16"), Tensor([20],"float16"), )
paddle.nn.functional.layer_norm(Tensor([0, 32, 128],"float32"), list[32,128,], )
paddle.nn.functional.layer_norm(Tensor([0, 4],"float32"), list[4,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 4],"float32"), list[4,], Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 512],"float32"), list[512,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float64"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 64, 128],"float32"), list[64,128,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 64, 64],"float32"), list[64,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 64, 64],"float32"), list[64,], Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 768],"float32"), list[768,], None, None, )
paddle.nn.functional.layer_norm(Tensor([128, 0, 64],"float32"), list[64,], None, None, )
paddle.nn.functional.layer_norm(Tensor([128, 0, 64],"float32"), list[64,], Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([8, 0, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([0, 2, 2, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([0, 2, 2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([0, 2, 2, 3],"float32"), epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([0, 2, 2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([0, 2, 2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([0, 2, 2, 3],"float64"), epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([0, 2, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([0, 2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([0, 2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([0, 2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([0, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([0, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([0, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([0, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.linear(Tensor([20, 64],"float32"), Tensor([64, 0],"float32"), None, )
paddle.nn.functional.linear(Tensor([30, 64],"float32"), Tensor([64, 0],"float32"), None, )
paddle.nn.functional.linear(Tensor([4, 512],"float32"), Tensor([512, 0],"float32"), )
paddle.nn.functional.linear(Tensor([4, 64],"float32"), Tensor([64, 0],"float32"), None, )
paddle.nn.functional.linear(Tensor([8, 512],"float32"), Tensor([512, 0],"float32"), )
paddle.nn.functional.linear(Tensor([8, 8192],"float32"), Tensor([8192, 0],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1, 1024],"float32"), weight=Tensor([1024, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 11008],"float32"), weight=Tensor([11008, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 1280],"float32"), weight=Tensor([1280, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 13696],"float32"), weight=Tensor([13696, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 15, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 16, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 17, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 18, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([10, 10],"float32"), weight=Tensor([10, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([10, 14336],"float32"), weight=Tensor([14336, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([10, 16],"float32"), weight=Tensor([16, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([10, 32],"float32"), weight=Tensor([32, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([30, 16],"float32"), weight=Tensor([16, 0],"float32"), )
paddle.nn.functional.linear(x=Tensor([30, 2],"float32"), weight=Tensor([2, 0],"float32"), )
paddle.nn.functional.linear(x=Tensor([32, 15, 15, 256],"float32"), weight=Tensor([256, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([38, 16],"float32"), weight=Tensor([16, 0],"float32"), )
paddle.nn.functional.linear(x=Tensor([8, 8],"float32"), weight=Tensor([8, 0],"float32"), bias=None, )
paddle.nn.functional.log_loss(Tensor([102400, 0],"float32"), Tensor([102400, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([102400, 0],"float32"), Tensor([102400, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([102400, 1],"float32"), Tensor([102400, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 0],"float32"), Tensor([25600, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 0],"float32"), Tensor([25600, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 1],"float32"), Tensor([25600, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_softmax(Tensor([0, 102],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([0, 5],"float32"), axis=1, )
paddle.nn.functional.max_pool2d(Tensor([0, 16, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 16, 40, 40],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 20, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 24, 320, 320],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 20, 20],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 20, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 21, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 21, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([0, 32, 20, 20],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 34, 34],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 34, 34],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 34, 34],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 36, 36],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 36, 36],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 36, 36],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 38, 38],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 38, 38],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 384, 38, 38],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 480, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 10, 10],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 528, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 17, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 17, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 248, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 256, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 320, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 320, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 336, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 49, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([0, 8, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 8, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([0, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([0, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 11, 11],"float32"), Tensor([0, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 11, 11],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 11, 11],"float64"), Tensor([0, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 11, 11],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 10],"float32"), Tensor([0, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 10],"float32"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 10],"float64"), Tensor([0, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 10],"float64"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 20],"float32"), Tensor([0, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 20],"float64"), Tensor([0, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 20, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 21, 21],"float32"), Tensor([0, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 21, 21],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 21, 21],"float64"), Tensor([0, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 21, 21],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 11, 11],"float32"), Tensor([2, 0, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 11, 11],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 11, 11],"float64"), Tensor([2, 0, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 11, 11],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 10],"float32"), Tensor([2, 0, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 10],"float32"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 10],"float64"), Tensor([2, 0, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 10],"float64"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 20],"float32"), Tensor([2, 0, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 20],"float64"), Tensor([2, 0, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 20, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 21, 21],"float32"), Tensor([2, 0, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 21, 21],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 21, 21],"float64"), Tensor([2, 0, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 21, 21],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 10],"float32"), Tensor([2, 4, 0, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 10],"float32"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 10],"float64"), Tensor([2, 4, 0, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 10],"float64"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float32"), Tensor([2, 4, 0, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float64"), Tensor([2, 4, 0, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 20],"float32"), Tensor([2, 4, 0, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 20],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 20],"float64"), Tensor([2, 4, 0, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 20],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float32"), Tensor([2, 4, 0, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float64"), Tensor([2, 4, 0, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float32"), Tensor([2, 4, 11, 0],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float64"), Tensor([2, 4, 11, 0],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float32"), Tensor([2, 4, 20, 0],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float32"), Tensor([2, 4, 20, 0],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float32"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float32"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float64"), Tensor([2, 4, 20, 0],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float64"), Tensor([2, 4, 20, 0],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float64"), Tensor([2, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 0],"float64"), Tensor([2, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float32"), Tensor([2, 4, 21, 0],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float64"), Tensor([2, 4, 21, 0],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 0, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 0, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.maxout(Tensor([0, 6, 5, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 0, 5, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 0, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 0],"float64"), 2, 1, None, )
paddle.nn.functional.mse_loss(Tensor([0, 12, 170, 1],"float32"), Tensor([0, 12, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 128, 1],"float32"), Tensor([0, 128, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 15, 3],"float32"), Tensor([0, 15, 3],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 1501, 1],"float32"), Tensor([0, 1501, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 16, 3],"float32"), Tensor([0, 16, 3],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 3, 3, 64, 128],"float32"), Tensor([0, 3, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 376, 1],"float32"), Tensor([0, 376, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 4, 3, 64, 128],"float32"), Tensor([0, 4, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 64, 64, 1],"float32"), Tensor([0, 64, 64, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0],"float32"), Tensor([100, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([100, 0, 1],"float32"), Tensor([100, 0, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([100, 0],"float32"), Tensor([100, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([100, 1],"float32"), Tensor([100, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([100, 376, 0],"float32"), Tensor([100, 376, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([100, 376, 0],"float32"), Tensor([100, 376, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([100, 376, 1],"float32"), Tensor([100, 376, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1000, 0],"float32"), Tensor([1000, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1000, 0],"float32"), Tensor([1000, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1000, 1],"float32"), Tensor([1000, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10000, 0],"float32"), Tensor([10000, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([10000, 0],"float32"), Tensor([10000, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([10000, 1],"float32"), Tensor([10000, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([100],"float32"), Tensor([0, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([101, 0],"float32"), Tensor([101, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([101, 0],"float32"), Tensor([101, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([101, 1],"float32"), Tensor([101, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([11661, 0],"float32"), Tensor([11661, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([128512, 0],"float32"), Tensor([128512, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([128512, 0],"float32"), Tensor([128512, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([128512, 1],"float32"), Tensor([128512, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([15548, 0],"float32"), Tensor([15548, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([17, 0, 1],"float32"), Tensor([17, 0, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([17, 376, 0],"float32"), Tensor([17, 376, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([17, 376, 0],"float32"), Tensor([17, 376, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([17, 376, 1],"float32"), Tensor([17, 376, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([17152, 0],"float32"), Tensor([17152, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([17152, 0],"float32"), Tensor([17152, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([17152, 1],"float32"), Tensor([17152, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 1],"float32"), Tensor([2, 0, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([2, 1501, 0],"float32"), Tensor([2, 1501, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([2, 1501, 0],"float32"), Tensor([2, 1501, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([2, 1501, 1],"float32"), Tensor([2, 1501, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([256, 0, 1],"float32"), Tensor([256, 0, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 0, 3],"float32"), Tensor([256, 0, 3],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 128, 0],"float32"), Tensor([256, 128, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 128, 0],"float32"), Tensor([256, 128, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 128, 1],"float32"), Tensor([256, 128, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 15, 0],"float32"), Tensor([256, 15, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 16, 0],"float32"), Tensor([256, 16, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([26736, 0],"float32"), Tensor([26736, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([3548, 0, 170, 1],"float32"), Tensor([3548, 0, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 0, 1],"float32"), Tensor([3548, 12, 0, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 0],"float32"), Tensor([3548, 12, 170, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 0],"float32"), Tensor([3548, 12, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([512, 0, 3],"float32"), Tensor([512, 0, 3],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([512, 15, 0],"float32"), Tensor([512, 15, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 0, 3, 64, 128],"float32"), Tensor([64, 0, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 0, 64, 1],"float32"), Tensor([64, 0, 64, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 0, 64, 128],"float32"), Tensor([64, 3, 0, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 0, 128],"float32"), Tensor([64, 3, 3, 0, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 64, 0],"float32"), Tensor([64, 3, 3, 64, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 0, 64, 128],"float32"), Tensor([64, 4, 0, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 0, 128],"float32"), Tensor([64, 4, 3, 0, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 64, 0],"float32"), Tensor([64, 4, 3, 64, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 64, 0, 1],"float32"), Tensor([64, 64, 0, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 64, 64, 0],"float32"), Tensor([64, 64, 64, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 64, 64, 0],"float32"), Tensor([64, 64, 64, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 64, 64, 1],"float32"), Tensor([64, 64, 64, 0],"float32"), "none", )
paddle.nn.functional.multi_margin_loss(Tensor([5, 0],"float64"), Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 0],"float64"), label=Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([4, 0],"float32"), Tensor([4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 0, 2, 4],"float32"), Tensor([5, 2, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0],"float32"), Tensor([5],"int64"), )
paddle.nn.functional.normalize(Tensor([0, 10],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 3],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 4],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 5],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 7],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([1, 0, 16, 16],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 0, 32, 32],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 0, 64, 64],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 0],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([10, 0],"float16"), )
paddle.nn.functional.normalize(Tensor([10, 0],"float32"), )
paddle.nn.functional.normalize(Tensor([10, 0],"float32"), p=1.5, )
paddle.nn.functional.normalize(Tensor([1006, 0],"float32"), )
paddle.nn.functional.normalize(Tensor([101, 0],"float32"), )
paddle.nn.functional.normalize(Tensor([12, 0],"float32"), axis=-1, )
paddle.nn.functional.normalize(Tensor([2, 0, 7, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 0],"float16"), p=2, axis=-1, )
paddle.nn.functional.normalize(Tensor([80, 0],"float32"), axis=-1, )
paddle.nn.functional.normalize(x=Tensor([1, 0],"float32"), axis=-1, )
paddle.nn.functional.normalize(x=Tensor([2, 0],"float32"), )
paddle.nn.functional.normalize(x=Tensor([2, 0],"float64"), )
paddle.nn.functional.normalize(x=Tensor([3, 0],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4, 0, 6, 7],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4, 0, 6, 7],"float64"), p=1, )
paddle.nn.functional.normalize(x=Tensor([4, 0, 6, 7],"float64"), p=4, )
paddle.nn.functional.normalize(x=Tensor([4, 0, 6],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4, 0],"float64"), p=1.2, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 0],"float64"), p=4, axis=3, )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"int64"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 10, 10],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 10, 22],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 10, 7],"int64"), pad=list[0,3,0,0,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 100, 100],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 100, 100],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 100, 112],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 101, 101],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 101, 101],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 101, 112],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 102, 102],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 102, 102],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 102, 113],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 103, 103],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 103, 114],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 104, 104],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 128, 128],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([0, 1, 128, 224],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 16, 16],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([0, 1, 160, 416],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 17, 82],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 192, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 1],"int64"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2, 2],"int32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2, 2],"int64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2],"int32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2],"int64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 3],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 237, 237],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([0, 1, 256, 256],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 257, 257],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 274, 47],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 3, 2],"int64"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 3, 3],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 31, 31],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 160],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 192],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 224],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 32],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 32, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 544],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 64, 64],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 7, 7],"int64"), pad=list[0,0,0,3,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 8, 7],"int64"), pad=list[0,1,0,0,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 120, 1, 1],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([0, 128, 16, 104],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([0, 128, 16, 112],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([0, 128, 16, 32],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 128, 4, 8],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 17, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 19, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 28, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 29, 192],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 29, 192],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 30, 192],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 32, 192],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 33, 192],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 33, 192],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 36, 192],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 28, 38, 192],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 29, 28, 192],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 29, 28, 192],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 30, 28, 192],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 31, 28, 192],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 32, 28, 192],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 32, 64],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 16, 35, 28, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 35, 28, 192],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 56, 96],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 58, 96],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 59, 96],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 60, 96],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 64, 96],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 65, 96],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 67, 96],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 68, 96],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 71, 96],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 56, 75, 96],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 57, 56, 96],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 57, 56, 96],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 59, 56, 96],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 60, 56, 96],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 64, 56, 96],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 7, 10, 768],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 7, 7, 768],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 7, 9, 768],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 8, 7, 768],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 9, 7, 768],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int32"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int64"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"int64"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 96],"float32"), pad=tuple(0,8,), mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 256, 4, 4],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 224, 224],"int64"), pad=list[2,2,4,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 256, 256],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([0, 3, 32, 224, 283],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 3, 400, 300],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"int32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"int64"), pad=list[1,2,3,4,5,6,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"int64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"int64"), pad=tuple(1,2,3,4,5,6,), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 32, 241, 241],"float32"), list[120,120,120,120,], mode="replicate", )
paddle.nn.functional.pad(Tensor([0, 32, 241, 241],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pad(Tensor([0, 32, 32, 32],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 4, 256],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"float32"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"float32"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"float32"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"float32"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"float32"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6, 16, 16],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 6, 16, 16],"float32"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 6, 6, 3],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 6, 6],"int32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6, 6],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6, 6],"int64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6, 6],"int64"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6, 6],"int64"), pad=tuple(1,2,), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 144],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 160],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 16],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 16],"float32"), list[0,3,0,3,], mode="constant", )
paddle.nn.functional.pad(Tensor([0, 64, 16, 256],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 272],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 288],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 336],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 2001],"float32"), list[0,100,], "constant", 0.0, "NCL", )
paddle.nn.functional.pad(Tensor([0, 64, 376, 280],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 64, 48, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 8, 8, 128],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 96, 4, 4],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 1, 1],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 10, 10],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 100, 100],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 100, 100],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 101, 101],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 101, 101],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 101, 112],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 102, 102],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 102, 102],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 102, 113],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 103, 103],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 103, 114],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 104, 104],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 128, 224],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 256],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 272],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 288],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 336],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 160, 416],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 17, 82],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 192, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 1],"int64"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 274, 47],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 28, 28, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 2],"int64"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 224, 283],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 32, 544],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 35, 28, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"int32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"int64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 400, 300],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 48, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 56, 56, 96],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 6, 3],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 7, 7, 768],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 1, 0, 100],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 100],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 101],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 101],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 102],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 102],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 103],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 104],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 10],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 1],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 224],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 416],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 47],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 544],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 82],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 1, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 1, 1],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 10, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 10, 10],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 0],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 100],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 101, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 101, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 101, 0],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 101, 101],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 102, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 102, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 102, 0],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 102, 102],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 103, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 103, 0],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 104, 0],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 128, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 128, 224],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 160, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 160, 416],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 17, 0],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 192, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 192, 512],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 274, 0],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 32, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 32, 512],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 32, 544],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 56, 96],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 56, 96],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 56, 96],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 56, 96],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 56, 96],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 7, 768],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 7, 768],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 7, 768],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 17, 0],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 19, 0],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 0, 192],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 28, 0],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 29, 0],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 29, 0],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 30, 0],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 32, 0],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 33, 0],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 33, 0],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 36, 0],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 28, 38, 0],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 29, 28, 0],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 29, 28, 0],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 30, 28, 0],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 28, 0],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 32, 28, 0],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 35, 0, 192],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 35, 28, 0],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 35, 28, 0],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 0, 96],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 0, 96],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 0, 96],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 0, 96],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 0, 96],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 0, 96],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 56, 0],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 58, 0],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 59, 0],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 60, 0],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 64, 0],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 65, 0],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 67, 0],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 68, 0],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 71, 0],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 56, 75, 0],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 57, 56, 0],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 57, 56, 0],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 59, 56, 0],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 60, 56, 0],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 64, 56, 0],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 7, 0, 768],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 7, 0, 768],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 7, 0, 768],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 7, 10, 0],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 7, 7, 0],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 7, 9, 0],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 8, 7, 0],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 9, 7, 0],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"float32"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 300],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 400, 0],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 6, 0, 3],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 6, 6, 0],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 6, 6, 3],"float32"), Tensor([0],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 64, 0, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 256],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 272],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 288],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 336],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 0],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 256],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 272],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 288],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 336],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 48, 0],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 48, 128],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1024, 0, 257, 257],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 0, 3, 3],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 0, 257],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 0, 3],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 257, 0],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 3, 0],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([12, 0, 256, 256],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 0, 32, 32],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 0, 4, 256],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 0, 64, 64],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 0, 8, 128],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 1, 0, 256],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 0, 32],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 0, 64],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 256, 0],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 32, 0],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 64, 0],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 4, 0, 256],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 4, 4, 0],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 8, 0, 128],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 8, 8, 0],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([120, 0, 1, 1],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([120, 120, 0, 1],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([120, 120, 1, 0],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([14, 0, 10, 7],"int64"), pad=list[0,3,0,0,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([14, 0, 8, 7],"int64"), pad=list[0,1,0,0,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([147968, 0, 1, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([147968, 1, 0, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([147968, 1, 1, 0],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([16, 0, 16, 16],"float32"), list[0,3,0,3,], mode="constant", )
paddle.nn.functional.pad(Tensor([16, 0, 256, 256],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([16, 3, 0, 256],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([16, 3, 256, 0],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([16, 64, 0, 16],"float32"), list[0,3,0,3,], mode="constant", )
paddle.nn.functional.pad(Tensor([16, 64, 16, 0],"float32"), list[0,3,0,3,], mode="constant", )
paddle.nn.functional.pad(Tensor([165888, 0, 1, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([165888, 1, 0, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([165888, 1, 1, 0],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([16777216, 0, 1, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([16777216, 1, 0, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([16777216, 1, 1, 0],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([192, 0, 1, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([192, 1, 0, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([192, 1, 1, 0],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([196608, 0, 1, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([196608, 1, 0, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([196608, 1, 1, 0],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([2, 0, 2, 3],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 1, 2, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 96, 0, 4],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 96, 4, 0],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([20, 0, 2001],"float32"), list[0,100,], "constant", 0.0, "NCL", )
paddle.nn.functional.pad(Tensor([20, 64, 0],"float32"), list[0,100,], "constant", 0.0, "NCL", )
paddle.nn.functional.pad(Tensor([2048, 0, 128, 128],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([2048, 1, 0, 128],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([2048, 1, 128, 0],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([24576, 0, 1, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([24576, 1, 0, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([24576, 1, 1, 0],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"float32"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"float32"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"float32"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"float32"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"float32"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"float32"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"float32"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"float32"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"float32"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"float32"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"float32"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"float32"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([30, 0, 16, 104],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([30, 0, 16, 112],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([30, 0, 16, 144],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 0, 16, 160],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 0, 16, 16],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 0, 32, 160],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 0, 32, 192],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 0, 32, 224],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 1, 0, 160],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 1, 0, 192],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 1, 0, 224],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 128, 0, 104],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([30, 128, 0, 112],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([30, 128, 16, 0],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([30, 64, 0, 144],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 64, 0, 160],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 64, 0, 16],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([32, 0, 241, 241],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pad(Tensor([32, 32, 0, 241],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pad(Tensor([32, 32, 241, 0],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pad(Tensor([4, 0, 16, 16],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([4, 0, 224, 224],"int64"), pad=list[2,2,4,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 376, 280],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"int32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"int64"), pad=list[1,2,3,4,5,6,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"int64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"int64"), pad=tuple(1,2,3,4,5,6,), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"int32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"int64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"int64"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"int64"), pad=tuple(1,2,), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 0, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 0, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 0],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int64"), pad=Tensor([0],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 0],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int64"), pad=Tensor([0],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 64, 0, 280],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 64, 376, 0],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4096, 0, 16, 16],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([4096, 1, 0, 16],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([4096, 1, 16, 0],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([8, 0, 237, 237],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([8, 0, 241, 241],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pad(Tensor([8, 1, 0, 237],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([8, 1, 237, 0],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([8, 32, 0, 241],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pad(Tensor([8, 32, 241, 0],"float32"), tuple(0,9,0,9,), mode="constant", )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(x=Tensor([0, 100],"float32"), y=Tensor([0, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([0, 100],"float32"), y=Tensor([100],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 0],"float32"), y=Tensor([100, 0],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 0],"float32"), y=Tensor([100, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 0, 17, 82],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 0, 274, 47],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 0, 47],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 0, 82],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 17, 0],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 274, 0],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 0, 64, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 0, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 64, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 0, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 0, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 64, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 9, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 9, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 0, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 0, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 9, 0, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 9, 4, 0],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.prelu(Tensor([0, 128, 28, 28],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([0, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([0, 256, 14, 14],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 0, 28],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 0, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 28, 0],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 56, 0],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 0, 14],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 14, 0],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.rrelu(Tensor([0, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 2, 3, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([1, 0, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 0, 3, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 0, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 0, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 0],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 0],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"bfloat16"), )
paddle.nn.functional.softmax(Tensor([0, 1, 102],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 1, 103],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 1, 104],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 1, 24, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 102],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 10],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 137, 50],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 16, 1, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 16, 10, 10],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 16, 21, 21],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 16, 22, 22],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 16, 28, 28],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 16, 32, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 16, 4, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 16, 5, 5],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 165, 165],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 17, 400, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 17],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 186, 126],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 186, 186],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 188, 50],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 20],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 3, 2, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 4, 16],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 4, 16],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 4, 2, 2],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 4, 2, 4],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 4, 3, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 4, 38, 38],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 4, 8, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 4, 8, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([0, 4, 8, 8],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([0, 4, 9, 9],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 64, 2, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 8, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 8, 153, 97],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 8, 154, 105],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 8, 154, 129],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 8, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([10, 0, 153, 97],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 0, 154, 105],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 0, 154, 129],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 0, 105],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 0, 129],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 0, 97],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([100, 4, 0, 38],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 0, 9],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 38, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 9, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([1024, 0, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 8, 0, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 8, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([104, 0, 21, 21],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 0, 22, 22],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 0, 28, 28],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 0, 32, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 0, 21],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 0, 22],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 0, 28],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 0, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([108, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([108, 6, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([112, 0, 165],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 0, 186],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([128, 0, 2, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 0, 4, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 0, 8, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 4, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 4, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 4, 8, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 64, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 64, 2, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([13, 0, 2, 2],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 0, 2, 4],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 0, 3, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 0, 2],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 0, 4],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([14, 0, 8, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 0, 8, 8],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 4, 0, 8],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([144, 0, 24, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([144, 1, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([144, 1, 24, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 1, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0, 10, 10],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0, 102],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 0, 103],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 0, 104],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 0, 2, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 0, 5, 5],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0],"float64"), axis=-1, )
paddle.nn.functional.softmax(Tensor([2, 16, 0, 10],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 0, 5],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 0, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 17, 400, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 3, 0, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 0, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([32, 256, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 0, 16],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 0, 16],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4, 0, 50],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 0, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([4, 256, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 4, 0, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([52, 0, 5, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([52, 4, 0, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([52, 4, 5, 0, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([728, 3, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([3, 0, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([3, 4, 0, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([32, 0, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([32, 4, 0, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([4, 0, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([4, 4, 0, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16],"float32"), Tensor([0, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 2],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([100, 0],"float32"), Tensor([100, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 0, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 0, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 0, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 0, 64],"float32"), Tensor([2, 16, 0, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 0, 64],"float32"), Tensor([2, 16, 0, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 0, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 0],"float32"), Tensor([2, 16, 1, 0],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 0],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 0],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([5, 0],"float32"), label=Tensor([5, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 1000],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 1000],"float64"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 10],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 128],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 32],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 4],"float64"), label=Tensor([0, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0],"float32"), label=Tensor([1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 0],"float32"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 0],"float64"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([16, 0],"float32"), label=Tensor([16, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([18, 0],"float32"), label=Tensor([18, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 0],"float64"), label=Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.temporal_shift(Tensor([0, 2048, 7, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([0, 2048, 7, 7],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([0, 256, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([0, 256, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([0, 512, 28, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([0, 512, 28, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([0, 64, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([0, 64, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(x=Tensor([0, 4, 2, 2],"float64"), seg_num=2, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"int32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"int64"), list[1,2,3,4,], )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"int64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"int64"), list[2,2,4,1,], )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"int64"), tuple(1,2,3,4,), )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"int32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"int64"), list[1,2,3,4,], )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"int64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"int64"), list[2,2,4,1,], )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"int64"), tuple(1,2,3,4,), )
paddle.nn.utils.parameters_to_vector(list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Ten ...
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([0, 15],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 0],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 15],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tenso ...
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Ten ...
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([0, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 0, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 2, 0],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([0, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 0],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([0, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 0],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([0],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([0],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([0, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 0],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([0, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 0],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([0],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([30],"float32"), list[Tensor([0, 3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([30],"float32"), list[Tensor([10, 0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([0, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 0],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([0, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 0],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([0],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([0],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([0, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 0],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([0, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 0],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([0],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([0, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 0, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 0, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 0, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 4, 0],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([0, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([2, 0],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([2, 2],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([0, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 0],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([0, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 0],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([0],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([0],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([0, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 0],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([0, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 0],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([0],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([0, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 0, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 0, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 4, 0],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([0],"float32"),], )
paddle.nonzero(Tensor([0, 196],"float32"), )
paddle.nonzero(Tensor([0, 1],"int32"), )
paddle.nonzero(Tensor([0, 2, 14, 14],"float32"), )
paddle.nonzero(Tensor([0, 200],"float32"), )
paddle.nonzero(Tensor([0, 80, 28, 28],"float32"), )
paddle.nonzero(Tensor([1, 0],"int32"), )
paddle.nonzero(Tensor([106, 0, 28, 28],"float32"), )
paddle.nonzero(Tensor([106, 80, 0, 28],"float32"), )
paddle.nonzero(Tensor([106, 80, 28, 0],"float32"), )
paddle.nonzero(Tensor([11, 0, 14, 14],"float32"), )
paddle.nonzero(Tensor([11, 0, 28, 28],"float32"), )
paddle.nonzero(Tensor([11, 2, 0, 14],"float32"), )
paddle.nonzero(Tensor([11, 2, 0, 28],"float32"), )
paddle.nonzero(Tensor([11, 2, 14, 0],"float32"), )
paddle.nonzero(Tensor([11, 2, 28, 0],"float32"), )
paddle.nonzero(x=Tensor([0, 3],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([0, 4, 7],"float32"), )
paddle.nonzero(x=Tensor([3, 0, 7],"float32"), )
paddle.nonzero(x=Tensor([3, 0],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 4, 0],"float32"), )
paddle.outer(Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.outer(Tensor([142],"float32"), Tensor([0],"float32"), )
paddle.outer(Tensor([16],"float32"), Tensor([0],"float32"), )
paddle.outer(Tensor([2048],"float32"), Tensor([0],"float32"), )
paddle.outer(x=Tensor([4, 1],"float64"), y=Tensor([0, 1],"float64"), )
paddle.outer(x=Tensor([4, 1],"float64"), y=Tensor([4, 0],"float64"), )
paddle.outer(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.pdist(Tensor([0, 20],"float32"), 0, )
paddle.pdist(Tensor([0, 20],"float32"), 1.0, )
paddle.pdist(Tensor([0, 20],"float32"), 1.5, )
paddle.pdist(Tensor([0, 20],"float32"), 2.0, )
paddle.pdist(Tensor([0, 20],"float32"), 2.5, )
paddle.pdist(Tensor([0, 20],"float32"), 3.0, )
paddle.pdist(Tensor([0, 20],"float32"), math.inf, )
paddle.pdist(Tensor([0, 20],"float64"), 2.0, )
paddle.pdist(Tensor([10, 0],"float32"), 0, )
paddle.pdist(Tensor([10, 0],"float32"), 1.0, )
paddle.pdist(Tensor([10, 0],"float32"), 1.5, )
paddle.pdist(Tensor([10, 0],"float32"), 2.0, )
paddle.pdist(Tensor([10, 0],"float32"), 2.5, )
paddle.pdist(Tensor([10, 0],"float32"), 3.0, )
paddle.pdist(Tensor([10, 0],"float32"), math.inf, )
paddle.pdist(Tensor([50, 0],"float64"), 2.0, )
paddle.prod(Tensor([0, 10, 5],"complex64"), )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=1, )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([0, 10, 5],"float32"), )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=-1, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([0, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([0, 1024],"float32"), -1, )
paddle.prod(Tensor([0, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([0, 5],"float32"), axis=None, )
paddle.prod(Tensor([0, 6, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([0, 6, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([0],"float32"), axis=0, )
paddle.prod(Tensor([10, 0, 5],"complex64"), )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=1, )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 0, 5],"float32"), )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=-1, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([10, 0, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 0, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 0, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 0],"complex64"), )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=1, )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 0],"float32"), )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=-1, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 9, 0],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([0],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.prod(Tensor([10, 5, 0, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 0],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 9],"float64"), Tensor([0],"int64"), )
paddle.prod(Tensor([16, 0],"float32"), -1, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(Tensor([2, 2],"float64"), axis=Tensor([0],"int64"), )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([3, 0],"float32"), axis=None, )
paddle.prod(Tensor([5, 0, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([5, 0, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0],"float32"), list[0,], False, )
paddle.prod(Tensor([5, 6, 0],"float64"), list[0,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float64"), list[2,3,4,], False, )
paddle.prod(x=Tensor([0, 2],"float32"), )
paddle.prod(x=Tensor([0, 2],"float32"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([0, 2],"float32"), dtype="float32", )
paddle.prod(x=Tensor([0, 2],"float64"), )
paddle.prod(x=Tensor([0, 2],"float64"), axis=-1, )
paddle.prod(x=Tensor([0, 2],"float64"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([0, 2],"float64"), axis=1, )
paddle.prod(x=Tensor([0, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(x=Tensor([0, 2],"float64"), axis=list[0,1,], )
paddle.prod(x=Tensor([0, 2],"float64"), axis=tuple(0,1,), )
paddle.prod(x=Tensor([0, 2],"float64"), dtype="float32", )
paddle.prod(x=Tensor([0, 2],"int32"), )
paddle.prod(x=Tensor([0, 2],"int32"), dtype="int64", )
paddle.prod(x=Tensor([0, 2],"int64"), dtype="int64", )
paddle.prod(x=Tensor([2, 0],"float32"), )
paddle.prod(x=Tensor([2, 0],"float32"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 0],"float32"), dtype="float32", )
paddle.prod(x=Tensor([2, 0],"float64"), )
paddle.prod(x=Tensor([2, 0],"float64"), axis=-1, )
paddle.prod(x=Tensor([2, 0],"float64"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 0],"float64"), axis=1, )
paddle.prod(x=Tensor([2, 0],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(x=Tensor([2, 0],"float64"), axis=list[0,1,], )
paddle.prod(x=Tensor([2, 0],"float64"), axis=tuple(0,1,), )
paddle.prod(x=Tensor([2, 0],"float64"), dtype="float32", )
paddle.prod(x=Tensor([2, 0],"int32"), )
paddle.prod(x=Tensor([2, 0],"int32"), dtype="int64", )
paddle.prod(x=Tensor([2, 0],"int64"), dtype="int64", )
paddle.prod(x=Tensor([2, 2],"float64"), axis=Tensor([0],"int64"), )
paddle.put_along_axis(Tensor([0, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 4, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 4, 4],"float64"), Tensor([1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 4],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([0, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "assign", True, False, )
paddle.put_along_axis(Tensor([0, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([0],"float32"), Tensor([1],"int64"), Tensor([1],"float32"), 0, "assign", )
paddle.put_along_axis(Tensor([0],"float64"), Tensor([1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([10, 0, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 0, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 0, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 0, 10],"uint8"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"uint8"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([2, 0],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "add", )
paddle.put_along_axis(Tensor([2, 0],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "assign", )
paddle.put_along_axis(Tensor([2, 0],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "mul", )
paddle.put_along_axis(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.real(Tensor([0, 10, 10, 20],"complex64"), )
paddle.real(Tensor([0, 20, 2, 3],"complex128"), )
paddle.real(Tensor([0, 20, 2, 3],"complex64"), )
paddle.real(Tensor([0, 8, 39, 14, 14],"complex64"), )
paddle.real(Tensor([10, 0, 10, 20],"complex64"), )
paddle.real(Tensor([10, 10, 0, 20],"complex64"), )
paddle.real(Tensor([10, 10, 10, 0],"complex64"), )
paddle.real(Tensor([2, 0, 2, 3],"complex128"), )
paddle.real(Tensor([2, 0, 2, 3],"complex64"), )
paddle.real(Tensor([2, 20, 0, 3],"complex128"), )
paddle.real(Tensor([2, 20, 0, 3],"complex64"), )
paddle.real(Tensor([2, 20, 2, 0],"complex128"), )
paddle.real(Tensor([2, 20, 2, 0],"complex64"), )
paddle.real(Tensor([50, 0, 39, 14, 14],"complex64"), )
paddle.real(Tensor([50, 8, 0, 14, 14],"complex64"), )
paddle.real(Tensor([50, 8, 39, 0, 14],"complex64"), )
paddle.real(Tensor([50, 8, 39, 14, 0],"complex64"), )
paddle.real(x=Tensor([0, 10],"complex128"), )
paddle.real(x=Tensor([0, 10],"complex64"), )
paddle.real(x=Tensor([0, 8, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([1, 0],"complex64"), )
paddle.real(x=Tensor([20, 0],"complex128"), )
paddle.real(x=Tensor([20, 0],"complex64"), )
paddle.real(x=Tensor([50, 0, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 0, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 0, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 14, 0],"complex64"), )
paddle.renorm(Tensor([0, 2, 3],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([0, 2, 3],"float32"), 1.0, 2, 2.05, )
paddle.renorm(Tensor([0, 20, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([10, 0, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([10, 20, 0],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([2, 0, 3],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([2, 0, 3],"float32"), 1.0, 2, 2.05, )
paddle.renorm(Tensor([2, 2, 0],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([2, 2, 0],"float32"), 1.0, 2, 2.05, )
paddle.renorm(x=Tensor([0, 2, 3],"float32"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([0, 2, 3],"float64"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([0, 2, 3],"float64"), p=1.2, axis=2, max_norm=6.5, )
paddle.renorm(x=Tensor([0, 2, 3],"float64"), p=1.5, axis=2, max_norm=20, )
paddle.renorm(x=Tensor([0, 2, 3],"float64"), p=2, axis=1, max_norm=20, )
paddle.renorm(x=Tensor([0, 2, 3],"float64"), p=2, axis=1, max_norm=40, )
paddle.renorm(x=Tensor([0, 2, 3],"float64"), p=2, axis=1, max_norm=50, )
paddle.renorm(x=Tensor([3, 0, 3],"float32"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 0, 3],"float64"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 0, 3],"float64"), p=1.2, axis=2, max_norm=6.5, )
paddle.renorm(x=Tensor([3, 0, 3],"float64"), p=1.5, axis=2, max_norm=20, )
paddle.renorm(x=Tensor([3, 0, 3],"float64"), p=2, axis=1, max_norm=20, )
paddle.renorm(x=Tensor([3, 0, 3],"float64"), p=2, axis=1, max_norm=40, )
paddle.renorm(x=Tensor([3, 0, 3],"float64"), p=2, axis=1, max_norm=50, )
paddle.renorm(x=Tensor([3, 2, 0],"float32"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 2, 0],"float64"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 2, 0],"float64"), p=1.2, axis=2, max_norm=6.5, )
paddle.renorm(x=Tensor([3, 2, 0],"float64"), p=1.5, axis=2, max_norm=20, )
paddle.renorm(x=Tensor([3, 2, 0],"float64"), p=2, axis=1, max_norm=20, )
paddle.renorm(x=Tensor([3, 2, 0],"float64"), p=2, axis=1, max_norm=40, )
paddle.renorm(x=Tensor([3, 2, 0],"float64"), p=2, axis=1, max_norm=50, )
paddle.repeat_interleave(Tensor([0, 1, 192, 672],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([0, 1, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([0, 1, 2],"float32"), 3029, axis=1, )
paddle.repeat_interleave(Tensor([0, 1, 2],"float32"), 458, axis=1, )
paddle.repeat_interleave(Tensor([0, 1, 384, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([0, 1, 768, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([0, 128],"float32"), 128, 0, )
paddle.repeat_interleave(Tensor([0, 1358, 2],"float32"), 11661, axis=0, )
paddle.repeat_interleave(Tensor([0, 1358, 2],"float32"), 15548, axis=0, )
paddle.repeat_interleave(Tensor([0, 1358, 2],"float32"), 3887, axis=0, )
paddle.repeat_interleave(Tensor([0, 1500, 1024],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([0, 1500, 1280],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([0, 1500, 384],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([0, 1500, 512],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([0, 1500, 768],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([0, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([0, 2],"int64"), 1, axis=0, )
paddle.repeat_interleave(Tensor([0, 2],"int64"), 2, axis=0, )
paddle.repeat_interleave(Tensor([0, 3029, 2],"float32"), 26736, axis=0, )
paddle.repeat_interleave(Tensor([0, 3029, 2],"float32"), 6684, axis=0, )
paddle.repeat_interleave(Tensor([0, 384, 1],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([0, 3],"bfloat16"), 2, None, )
paddle.repeat_interleave(Tensor([0, 3],"int32"), 2, None, )
paddle.repeat_interleave(Tensor([0, 3],"int64"), 5, axis=0, )
paddle.repeat_interleave(Tensor([0, 458, 2],"float32"), 3029, axis=0, )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([4],"int32"), -1, )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([4],"int32"), 1, )
paddle.repeat_interleave(Tensor([0, 70],"int64"), 3, 1, )
paddle.repeat_interleave(Tensor([1, 0, 1024],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 1280],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 2],"float32"), 11661, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 2],"float32"), 15548, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 2],"float32"), 26736, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 2],"float32"), 3029, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 2],"float32"), 3887, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 2],"float32"), 6684, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 384],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 512],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 0, 768],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 0],"float32"), 128, 0, )
paddle.repeat_interleave(Tensor([1, 0],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([1, 0],"int64"), 1, axis=0, )
paddle.repeat_interleave(Tensor([1, 0],"int64"), 2, axis=0, )
paddle.repeat_interleave(Tensor([1, 0],"int64"), 3, 1, )
paddle.repeat_interleave(Tensor([1, 0],"int64"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 1358, 0],"float32"), 11661, axis=0, )
paddle.repeat_interleave(Tensor([1, 1358, 0],"float32"), 15548, axis=0, )
paddle.repeat_interleave(Tensor([1, 1358, 0],"float32"), 3887, axis=0, )
paddle.repeat_interleave(Tensor([1, 1500, 0],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 3029, 0],"float32"), 26736, axis=0, )
paddle.repeat_interleave(Tensor([1, 3029, 0],"float32"), 6684, axis=0, )
paddle.repeat_interleave(Tensor([1, 458, 0],"float32"), 3029, axis=0, )
paddle.repeat_interleave(Tensor([10, 0],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([11661, 0, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([11661, 1, 0],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([13, 0, 1],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([13, 384, 0],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([14, 0, 384, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([14, 1, 0, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([14, 1, 384, 0],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([15548, 0, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([15548, 1, 0],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([16, 0, 1],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([16, 384, 0],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([2, 0],"bfloat16"), 2, None, )
paddle.repeat_interleave(Tensor([2, 0],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([2, 0],"int32"), 2, None, )
paddle.repeat_interleave(Tensor([26736, 0, 2],"float32"), 3029, axis=1, )
paddle.repeat_interleave(Tensor([26736, 1, 0],"float32"), 3029, axis=1, )
paddle.repeat_interleave(Tensor([3, 0, 1],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([3, 0],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([3, 0],"float32"), Tensor([3],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([3, 384, 0],"float32"), 1, 2, )
paddle.repeat_interleave(Tensor([3029, 0, 2],"float32"), 458, axis=1, )
paddle.repeat_interleave(Tensor([3029, 1, 0],"float32"), 458, axis=1, )
paddle.repeat_interleave(Tensor([3887, 0, 2],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([3887, 1, 0],"float32"), 1358, axis=1, )
paddle.repeat_interleave(Tensor([4, 0],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([5, 0, 768, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([5, 1, 0, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([5, 1, 768, 0],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([6684, 0, 2],"float32"), 3029, axis=1, )
paddle.repeat_interleave(Tensor([6684, 1, 0],"float32"), 3029, axis=1, )
paddle.repeat_interleave(Tensor([7, 0, 192, 672],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([7, 1, 0, 672],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([7, 1, 192, 0],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([0, 2, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([0, 2, 4],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([0, 2],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([0],"float32"), repeats=3, )
paddle.repeat_interleave(x=Tensor([0],"float64"), repeats=3, )
paddle.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([4, 0, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 0, 4],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 0],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 0, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 0],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 0],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.reshape(Tensor([0, 1, 128, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([0, 1, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([0, 1, 128, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([0, 1, 15, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([0, 1, 512, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([0, 1, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([0, 1, 512, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([0, 1, 58081],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([0, 1, 58081],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([0, 1, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 1, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 100],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([0, 15, 8, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([0, 15, 8, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([0, 1],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([0, 1],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([0, 2, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([0, 2, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 20, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([0, 225, 256],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([0, 25],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([0, 25],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([0, 2],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([0, 3, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([0, 3, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([0, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 4, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([0],"float32"), list[1,1,1,481,], )
paddle.reshape(Tensor([0],"float32"), list[1,1,481,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,16,1,1,], )
paddle.reshape(Tensor([0],"float64"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float64"), Tensor([1],"int64"), )
paddle.reshape(Tensor([0],"float64"), list[1,1,1,1,], )
paddle.reshape(Tensor([1, 0, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 0, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 0, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 0],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([1, 0],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([1, 0],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1, 2, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 0],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([10, 0, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([10, 20, 0],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([1000, 0],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([2, 0, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 0, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([2, 0, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([2, 0],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([2, 1, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 3, 0, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 3, 0, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([2, 3, 128, 0],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 3, 512, 0],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([2, 4, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([3, 0, 128, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 0, 512, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([3, 1, 0, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 1, 0, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([3, 1, 128, 0],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 1, 512, 0],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([32, 0, 15, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 0, 256],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([32, 0, 58081],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([32, 0, 8, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 0, 8, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 1, 0, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 0],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([32, 1, 15, 0, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 15, 16, 0, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 15, 16, 15, 0],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 15, 0, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 15, 0, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 15, 8, 0, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 15, 8, 0],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 15, 8, 8, 0],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 225, 0],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([6, 0, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 0, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([6, 1, 0, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 1, 0, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([6, 1, 128, 0],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 1, 512, 0],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([8, 0, 128, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 0, 512, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([8, 0, 58081],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([8, 1, 0, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 1, 0, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([8, 1, 0],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([8, 1, 128, 0],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 1, 512, 0],"float32"), list[8,1,512,512,], )
paddle.reshape(x=Tensor([0, 1, 10],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 2048],"float16"), shape=list[16777216,], )
paddle.reshape(x=Tensor([0, 2],"float64"), shape=Tensor([2],"int32"), )
paddle.reshape(x=Tensor([0, 2],"int32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([0, 2],"int64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([0, 30, 256],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([0, 30, 256],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([0, 30, 256],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([0, 30, 4, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([0, 30, 4, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([0, 30, 4, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([0, 50, 256],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([0, 50, 256],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([0, 50, 256],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([0, 50, 4, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([0, 50, 4, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([0, 50, 4, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([0, 7, 256],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([0, 7, 256],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([0, 7, 256],"float32"), shape=list[52,7,4,64,], )
paddle.reshape(x=Tensor([2, 0],"float64"), shape=Tensor([2],"int32"), )
paddle.reshape(x=Tensor([2, 0],"int32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 0],"int64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([416, 0, 256],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([416, 0, 256],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([416, 0, 256],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([416, 0, 4, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 0, 4, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 30, 0, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 30, 0],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([416, 30, 4, 0],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 50, 0, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 50, 0],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([416, 50, 4, 0],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 7, 0],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([5, 0, 10],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([512, 0, 256],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([512, 0, 256],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([512, 0, 256],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([512, 0, 4, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 0, 4, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 30, 0, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 30, 0],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([512, 30, 4, 0],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 50, 0, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 50, 0],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([512, 50, 4, 0],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 7, 0],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([52, 0, 256],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([52, 0, 256],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([52, 0, 256],"float32"), shape=list[52,7,4,64,], )
paddle.reshape(x=Tensor([52, 0, 4, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 0, 4, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 30, 0, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 30, 0],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([52, 30, 4, 0],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 50, 0, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 50, 0],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([52, 50, 4, 0],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 7, 0],"float32"), shape=list[52,7,4,64,], )
paddle.reshape(x=Tensor([8192, 0],"float16"), shape=list[16777216,], )
paddle.reverse(Tensor([0, 1, 4],"float32"), axis=0, )
paddle.reverse(Tensor([0, 12, 8],"float64"), axis=1, )
paddle.reverse(Tensor([2, 0, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([2, 0, 4],"float32"), axis=0, )
paddle.reverse(Tensor([2, 1, 0],"float32"), axis=list[0,], )
paddle.reverse(Tensor([4, 0, 8],"float64"), axis=1, )
paddle.roll(Tensor([0, 1, 16, 16],"float32"), shifts=-1, axis=-1, )
paddle.roll(Tensor([0, 1, 16, 16],"float32"), shifts=-1, axis=-2, )
paddle.roll(Tensor([0, 1, 16, 16],"float32"), shifts=1, axis=-1, )
paddle.roll(Tensor([0, 1, 16, 16],"float32"), shifts=1, axis=-2, )
paddle.roll(Tensor([0, 10, 25, 1024],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 10, 25, 1024],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 12, 12, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 12, 12, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 14, 14, 512],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 14, 14, 512],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 15, 45, 512],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 15, 45, 512],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 21, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 21, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 16, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 16, 21, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 21, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 28, 28, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 28, 28, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 28, 35, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 28, 35, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 161, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 161, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 192, 144, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 192, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 21, 21, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 21, 21, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 24, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 24, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 32, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 32, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 3],"float64"), shifts=1, )
paddle.roll(Tensor([0, 3],"float64"), shifts=1, axis=0, )
paddle.roll(Tensor([0, 42, 35, 384],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 42, 35, 384],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 48, 36, 768],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 48, 36, 768],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 8, 8, 128],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 8, 8, 128],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 84, 63, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 84, 63, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 96, 72, 384],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 96, 72, 384],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0],"float32"), -19, name=None, )
paddle.roll(Tensor([0],"float32"), -2, name=None, )
paddle.roll(Tensor([0],"float32"), -5, name=None, )
paddle.roll(Tensor([0],"float32"), -7, name=None, )
paddle.roll(Tensor([1, 0, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 21, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 21, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 144, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 21, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 21, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 21, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 21, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 28, 28, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 28, 28, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 28, 35, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 28, 35, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 35, 384],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 35, 384],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 36, 768],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 36, 768],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 63, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 63, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 72, 384],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 72, 384],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 21, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 21, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 28, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 28, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 35, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 35, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 21, 0],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 21, 0],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 0, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 0, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 14, 0],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 14, 0],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 0, 192],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 0, 192],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 28, 0],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 28, 0],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 35, 0],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 35, 0],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 161, 0, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 161, 0, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 161, 126, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 161, 126, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 0, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 0, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 144, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 144, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 0, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 0, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 21, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 21, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 0, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 0, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 24, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 24, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 42, 0, 384],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 42, 0, 384],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 42, 35, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 42, 35, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 48, 0, 768],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 48, 0, 768],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 48, 36, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 48, 36, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 84, 0, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 84, 0, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 84, 63, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 84, 63, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 96, 0, 384],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 96, 0, 384],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 96, 72, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 96, 72, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 14, 512],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 14, 512],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 8, 128],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 8, 128],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 14, 0, 512],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 14, 0, 512],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 14, 14, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 14, 14, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 0, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 0, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 16, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 16, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 0, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 0, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 32, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 32, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 8, 0, 128],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 8, 0, 128],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 8, 8, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 8, 8, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([16, 0, 16, 16],"float32"), shifts=-1, axis=-1, )
paddle.roll(Tensor([16, 0, 16, 16],"float32"), shifts=-1, axis=-2, )
paddle.roll(Tensor([16, 0, 16, 16],"float32"), shifts=1, axis=-1, )
paddle.roll(Tensor([16, 0, 16, 16],"float32"), shifts=1, axis=-2, )
paddle.roll(Tensor([16, 1, 0, 16],"float32"), shifts=-1, axis=-1, )
paddle.roll(Tensor([16, 1, 0, 16],"float32"), shifts=-1, axis=-2, )
paddle.roll(Tensor([16, 1, 0, 16],"float32"), shifts=1, axis=-1, )
paddle.roll(Tensor([16, 1, 0, 16],"float32"), shifts=1, axis=-2, )
paddle.roll(Tensor([16, 1, 16, 0],"float32"), shifts=-1, axis=-1, )
paddle.roll(Tensor([16, 1, 16, 0],"float32"), shifts=-1, axis=-2, )
paddle.roll(Tensor([16, 1, 16, 0],"float32"), shifts=1, axis=-1, )
paddle.roll(Tensor([16, 1, 16, 0],"float32"), shifts=1, axis=-2, )
paddle.roll(Tensor([28, 0, 12, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([28, 0, 12, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([28, 12, 0, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([28, 12, 0, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([28, 12, 12, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([28, 12, 12, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([3, 0],"float64"), shifts=1, )
paddle.roll(Tensor([3, 0],"float64"), shifts=1, axis=0, )
paddle.roll(Tensor([7, 0, 25, 1024],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 0, 25, 1024],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 0, 45, 512],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 0, 45, 512],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 10, 0, 1024],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 10, 0, 1024],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 10, 25, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 10, 25, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 15, 0, 512],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 15, 0, 512],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 15, 45, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([7, 15, 45, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(x=Tensor([0, 3],"float32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=-1, axis=0, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=0, axis=None, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=1, axis=None, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=list[-1,1,], axis=list[0,1,], )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=tuple(-1,1,), axis=tuple(0,1,), )
paddle.roll(x=Tensor([3, 0],"float32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=-1, axis=0, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=1, axis=None, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=list[-1,1,], axis=list[0,1,], )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=tuple(-1,1,), axis=tuple(0,1,), )
paddle.rot90(Tensor([0, 3],"float32"), k=1, axes=list[0,1,], )
paddle.rot90(Tensor([2, 0],"float32"), k=1, axes=list[0,1,], )
paddle.rot90(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([0, 4, 4],"float64"), )
paddle.rot90(x=Tensor([0, 4],"float32"), )
paddle.rot90(x=Tensor([0, 4],"float64"), )
paddle.rot90(x=Tensor([0, 4],"float64"), k=-1, )
paddle.rot90(x=Tensor([0, 4],"int32"), )
paddle.rot90(x=Tensor([0, 4],"int64"), )
paddle.rot90(x=Tensor([3, 0],"float64"), )
paddle.rot90(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 0, 4],"float64"), )
paddle.rot90(x=Tensor([4, 0],"float32"), )
paddle.rot90(x=Tensor([4, 0],"float64"), )
paddle.rot90(x=Tensor([4, 0],"float64"), k=-1, )
paddle.rot90(x=Tensor([4, 0],"int32"), )
paddle.rot90(x=Tensor([4, 0],"int64"), )
paddle.rot90(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 4, 0],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=tuple(2,3,), )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([105344],"int64"), Tensor([105344, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([4936],"int64"), Tensor([4936, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([58584],"int64"), Tensor([58584, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([78112],"int64"), Tensor([78112, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 1],"float32"), Tensor([100],"int64"), Tensor([100, 1],"float32"), )
paddle.scatter(Tensor([0, 1],"float32"), Tensor([4],"int64"), Tensor([4, 1],"float32"), )
paddle.scatter(Tensor([0, 1],"float32"), Tensor([800],"int64"), Tensor([800, 1],"float32"), )
paddle.scatter(Tensor([0, 1],"int64"), Tensor([100],"int64"), Tensor([100, 1],"int64"), )
paddle.scatter(Tensor([0, 1],"int64"), Tensor([4],"int64"), Tensor([4, 1],"int64"), )
paddle.scatter(Tensor([0, 2],"float32"), Tensor([4],"int64"), Tensor([4, 2],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 3],"float32"), index=Tensor([2],"int32"), updates=Tensor([2, 3],"float32"), )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([0, 1],"int64"), Tensor([0, 64],"float32"), )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([16, 1],"int64"), Tensor([16, 64],"float32"), )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([5551],"int32"), Tensor([5551, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([5633],"int32"), Tensor([5633, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([7355],"int32"), Tensor([7355, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([7485],"int32"), Tensor([7485, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([7974],"int32"), Tensor([7974, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0],"float32"), Tensor([0],"int64"), Tensor([0],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([1024],"int64"), Tensor([1024],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([12],"int64"), Tensor([12],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([20],"int64"), Tensor([20],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([24],"int64"), Tensor([24],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([28],"int64"), Tensor([28],"float32"), )
paddle.scatter(Tensor([0],"int32"), Tensor([0],"int64"), Tensor([0],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([10],"int64"), Tensor([10],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([12],"int64"), Tensor([12],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([13],"int64"), Tensor([13],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([14],"int64"), Tensor([14],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), index=Tensor([0],"int32"), updates=Tensor([0],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52367],"int32"), updates=Tensor([52367],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52376],"int32"), updates=Tensor([52376],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52388],"int32"), updates=Tensor([52388],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52397],"int32"), updates=Tensor([52397],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52404],"int32"), updates=Tensor([52404],"int32"), )
paddle.scatter(Tensor([0],"int64"), Tensor([0],"int64"), Tensor([0],"int64"), overwrite=True, )
paddle.scatter(Tensor([0],"int64"), Tensor([1664],"int64"), Tensor([1664],"int64"), overwrite=True, )
paddle.scatter(Tensor([100, 0],"float32"), Tensor([100],"int64"), Tensor([100, 1],"float32"), )
paddle.scatter(Tensor([100, 0],"int64"), Tensor([100],"int64"), Tensor([100, 1],"int64"), )
paddle.scatter(Tensor([100, 1],"float32"), Tensor([0],"int64"), Tensor([100, 1],"float32"), )
paddle.scatter(Tensor([100, 1],"int64"), Tensor([0],"int64"), Tensor([100, 1],"int64"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([0],"int64"), Tensor([20],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([0],"int64"), Tensor([24],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([0],"int64"), Tensor([28],"float32"), )
paddle.scatter(Tensor([1024],"float32"), Tensor([0],"int64"), Tensor([1024],"float32"), )
paddle.scatter(Tensor([1024],"float32"), Tensor([0],"int64"), Tensor([12],"float32"), )
paddle.scatter(Tensor([11661, 128],"float32"), Tensor([0],"int64"), Tensor([58584, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([1200, 0],"float32"), Tensor([4],"int64"), Tensor([4, 1],"float32"), )
paddle.scatter(Tensor([1200, 0],"int64"), Tensor([4],"int64"), Tensor([4, 1],"int64"), )
paddle.scatter(Tensor([1200, 1],"float32"), Tensor([0],"int64"), Tensor([4, 1],"float32"), )
paddle.scatter(Tensor([1200, 1],"int64"), Tensor([0],"int64"), Tensor([4, 1],"int64"), )
paddle.scatter(Tensor([1358, 128],"float32"), Tensor([0],"int64"), Tensor([4936, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([15548, 128],"float32"), Tensor([0],"int64"), Tensor([78112, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([1600, 0],"float32"), Tensor([800],"int64"), Tensor([800, 1],"float32"), )
paddle.scatter(Tensor([1600, 1],"float32"), Tensor([0],"int64"), Tensor([800, 1],"float32"), )
paddle.scatter(Tensor([1664],"int64"), Tensor([0],"int64"), Tensor([1664],"int64"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([0],"int32"), Tensor([5551, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([0],"int32"), Tensor([5633, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([0],"int32"), Tensor([7355, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([0],"int32"), Tensor([7485, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([0],"int32"), Tensor([7974, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([26736, 128],"float32"), Tensor([0],"int64"), Tensor([105344, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([3, 2],"float32"), Tensor([0],"int64"), Tensor([4, 2],"float32"), overwrite=False, )
paddle.scatter(Tensor([3, 3],"float32"), index=Tensor([0],"int32"), updates=Tensor([2, 3],"float32"), )
paddle.scatter(Tensor([31, 0],"float32"), Tensor([16, 0],"int64"), Tensor([16, 0],"float32"), )
paddle.scatter(Tensor([31, 64],"float32"), Tensor([0, 1],"int64"), Tensor([16, 64],"float32"), )
paddle.scatter(Tensor([31, 64],"float32"), Tensor([16, 0],"int64"), Tensor([16, 64],"float32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([0],"int32"), updates=Tensor([52367],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([0],"int32"), updates=Tensor([52376],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([0],"int32"), updates=Tensor([52388],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([0],"int32"), updates=Tensor([52397],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([0],"int32"), updates=Tensor([52404],"int32"), )
paddle.scatter(Tensor([64],"int32"), Tensor([0],"int64"), Tensor([10],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([0],"int64"), Tensor([12],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([0],"int64"), Tensor([13],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([0],"int64"), Tensor([14],"int32"), overwrite=True, )
paddle.scatter(x=Tensor([0, 3],"float32"), index=Tensor([3],"int64"), updates=Tensor([3, 3],"float32"), overwrite=False, )
paddle.scatter(x=Tensor([100, 3],"float32"), index=Tensor([0],"int64"), updates=Tensor([3, 3],"float32"), overwrite=False, )
paddle.scatter_nd(Tensor([0, 1],"int64"), Tensor([4],"float32"), list[4,], )
paddle.scatter_nd(Tensor([0, 1],"int64"), Tensor([4],"int64"), list[4,], )
paddle.scatter_nd(Tensor([4, 0],"int64"), Tensor([4],"float32"), list[4,], )
paddle.scatter_nd(Tensor([4, 0],"int64"), Tensor([4],"int64"), list[4,], )
paddle.scatter_nd_add(Tensor([0, 2, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([0, 2, 2],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([0, 3, 4],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([0, 5, 9, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), )
paddle.scatter_nd_add(Tensor([1, 0, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 0],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 2],"float32"), Tensor([0, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 2],"float32"), Tensor([1, 0],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([2, 0, 2],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 0, 4],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([2, 2, 0],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 2, 2],"float32"), Tensor([0, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 2, 2],"float32"), Tensor([2, 0],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 3, 0],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([3, 0, 9, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.searchsorted(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.searchsorted(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.searchsorted(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.searchsorted(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.searchsorted(Tensor([1024],"float32"), Tensor([0],"float32"), )
paddle.searchsorted(Tensor([1024],"float64"), Tensor([0],"float64"), )
paddle.searchsorted(Tensor([1024],"int32"), Tensor([0],"int32"), )
paddle.searchsorted(Tensor([1024],"int64"), Tensor([0],"int64"), )
paddle.searchsorted(Tensor([3],"float64"), Tensor([0],"float64"), right=True, )
paddle.searchsorted(Tensor([4],"float64"), Tensor([0],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([0, 5],"int32"), values=Tensor([0, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([0, 5],"int64"), values=Tensor([0, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float64"), values=Tensor([0],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"int32"), values=Tensor([0],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 0],"int32"), values=Tensor([2, 0],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 0],"int64"), values=Tensor([2, 0],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int32"), values=Tensor([2, 0],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int64"), values=Tensor([2, 0],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([0, 2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([0, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([0],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2, 0],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([4, 0],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([0, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([0],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2, 0],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"int32"), values=Tensor([0, 2, 2],"int32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int32"), values=Tensor([2, 0, 2],"int32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int32"), values=Tensor([2, 2, 0],"int32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int64"), values=Tensor([0, 2, 2],"int64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int64"), values=Tensor([2, 0, 2],"int64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"int64"), values=Tensor([2, 2, 0],"int64"), right=True, )
paddle.sgn(Tensor([0, 4],"complex128"), )
paddle.sgn(Tensor([0, 4],"complex64"), )
paddle.sgn(Tensor([2, 0],"complex128"), )
paddle.sgn(Tensor([2, 0],"complex64"), )
paddle.shard_index(input=Tensor([0, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.shard_index(input=Tensor([0, 1],"int64"), index_num=20, nshards=2, shard_id=1, )
paddle.shard_index(input=Tensor([0, 1],"int64"), index_num=6, nshards=40, shard_id=4, )
paddle.shard_index(input=Tensor([0, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([0, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.shard_index(input=Tensor([2, 0],"int64"), index_num=20, nshards=2, shard_id=1, )
paddle.shard_index(input=Tensor([2, 0],"int64"), index_num=6, nshards=40, shard_id=4, )
paddle.shard_index(input=Tensor([4, 0, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 0, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.shard_index(input=Tensor([4, 0],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.shard_index(input=Tensor([4, 2, 0],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 2, 0],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.sinc(Tensor([0, 64],"float32"), )
paddle.sinc(Tensor([0, 64],"float64"), )
paddle.sinc(Tensor([0],"float32"), )
paddle.sinc(Tensor([0],"float64"), )
paddle.sinc(Tensor([16, 0],"float32"), )
paddle.sinc(Tensor([16, 0],"float64"), )
paddle.split(Tensor([0, 1000],"float16"), 2, axis=0, )
paddle.split(Tensor([0, 1000],"float32"), 2, axis=0, )
paddle.split(Tensor([0, 1000],"float64"), 2, axis=0, )
paddle.split(Tensor([0, 20, 20],"float16"), 2, )
paddle.split(Tensor([1, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 0],"float64"), num_or_sections=3, axis=1, )
paddle.split(Tensor([1, 11, 16, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1156, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 121, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 1296, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 13, 16, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 16, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 16, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 192, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 196, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 2, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 2048, 0],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 310, 0],"float32"), 4, axis=-1, )
paddle.split(Tensor([1, 4, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 58, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 9, 0],"float32"), 2, axis=2, )
paddle.split(Tensor([100, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([1000, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([10000, 0],"float32"), 3, axis=1, )
paddle.split(Tensor([10000, 0],"float32"), 4, axis=-1, )
paddle.split(Tensor([101, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([101, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1024, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1024, 0],"float32"), 6, axis=-1, )
paddle.split(Tensor([1024, 16, 2, 0],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([103, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([108, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([11, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1100, 0],"float32"), 4, axis=-1, )
paddle.split(Tensor([114, 4, 1, 0],"float16"), 3, axis=-1, )
paddle.split(Tensor([128, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([128, 0],"float32"), 6, axis=-1, )
paddle.split(Tensor([13, 4, 7, 0],"float32"), 2, -1, )
paddle.split(Tensor([13, 7, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1300, 0],"float32"), 4, axis=-1, )
paddle.split(Tensor([14, 1, 4, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([14, 10, 4, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([16, 0],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([2000, 0],"float32"), 6, axis=-1, )
paddle.split(Tensor([20000, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([2048, 0],"float32"), 6, axis=-1, )
paddle.split(Tensor([20600, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([25, 0],"float32"), 6, axis=-1, )
paddle.split(Tensor([3, 0, 5],"float64"), num_or_sections=2, axis=Tensor([1],"int64"), )
paddle.split(Tensor([3, 8, 0],"float64"), num_or_sections=2, axis=Tensor([1],"int64"), )
paddle.split(Tensor([3, 8, 5],"float64"), num_or_sections=2, axis=Tensor([0],"int64"), )
paddle.split(Tensor([32, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([32812, 0],"float32"), 3, axis=1, )
paddle.split(Tensor([4, 6, 6],"int32"), num_or_sections=list[-1,], axis=Tensor([0],"int32"), )
paddle.split(Tensor([4, 6, 6],"int32"), num_or_sections=list[2,2,2,], axis=Tensor([0],"int32"), )
paddle.split(Tensor([4096, 0],"float32"), 4, axis=-1, )
paddle.split(Tensor([50000, 0],"float32"), 3, axis=1, )
paddle.split(Tensor([5200, 0],"float32"), 4, axis=-1, )
paddle.split(Tensor([600, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([64, 0, 16, 16],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0, 16, 16],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), 4, 1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), 4, 1, )
paddle.split(Tensor([64, 0, 8, 8],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([8810, 0],"float32"), 3, axis=1, )
paddle.split(x=Tensor([2, 0],"int32"), num_or_sections=3, axis=Tensor([1],"int32"), )
paddle.split(x=Tensor([2, 3],"int32"), num_or_sections=3, axis=Tensor([0],"int32"), )
paddle.squeeze(Tensor([1, 2, 1, 3],"float32"), axis=Tensor([0],"int64"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), axis=Tensor([0],"int64"), )
paddle.std(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([0, 32],"float32"), )
paddle.std(Tensor([0, 5],"float32"), )
paddle.std(Tensor([0, 9],"float32"), axis=1, )
paddle.std(Tensor([0],"float32"), )
paddle.std(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([3, 0],"float32"), )
paddle.std(Tensor([32, 0],"float32"), )
paddle.std(Tensor([6, 0],"float32"), axis=1, )
paddle.std(x=Tensor([0, 3, 3],"float64"), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([0, 3],"float32"), )
paddle.std(x=Tensor([0, 3],"float64"), )
paddle.std(x=Tensor([2, 0],"float32"), )
paddle.std(x=Tensor([2, 0],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([3, 3, 0],"float64"), )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.subtract(Tensor([0, 1, 1, 1],"complex64"), Tensor([8, 8, 4],"complex64"), )
paddle.subtract(Tensor([0, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), )
paddle.subtract(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.subtract(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.subtract(Tensor([0, 3, 3, 4],"float32"), Tensor([0, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([0, 3, 3, 64, 128],"float32"), Tensor([0, 3, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([0, 3, 32, 32],"float32"), Tensor([0, 3, 32, 32],"float32"), )
paddle.subtract(Tensor([0, 3, 32, 32],"float32"), Tensor([1, 3, 32, 32],"float32"), )
paddle.subtract(Tensor([0, 376, 1],"float32"), Tensor([0, 376, 1],"float32"), )
paddle.subtract(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([0, 4, 3, 64, 128],"float32"), Tensor([0, 4, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([0, 64, 64, 1],"float32"), Tensor([0, 64, 64, 1],"float64"), )
paddle.subtract(Tensor([0, 64, 64, 1],"float32"), Tensor([1, 64, 64, 1],"float64"), )
paddle.subtract(Tensor([0],"float32"), Tensor([100, 1],"float32"), )
paddle.subtract(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 0, 32, 32],"float32"), )
paddle.subtract(Tensor([1, 0, 64, 1],"float32"), Tensor([1, 0, 64, 1],"float64"), )
paddle.subtract(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.subtract(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.subtract(Tensor([1, 3, 0, 32],"float32"), Tensor([1, 3, 0, 32],"float32"), )
paddle.subtract(Tensor([1, 3, 32, 0],"float32"), Tensor([1, 3, 32, 0],"float32"), )
paddle.subtract(Tensor([1, 3, 32, 32],"float32"), Tensor([0, 3, 32, 32],"float32"), )
paddle.subtract(Tensor([1, 64, 0, 1],"float32"), Tensor([1, 64, 0, 1],"float64"), )
paddle.subtract(Tensor([1, 64, 64, 0],"float32"), Tensor([1, 64, 64, 0],"float64"), )
paddle.subtract(Tensor([1, 64, 64, 0],"float32"), Tensor([1, 64, 64, 1],"float64"), )
paddle.subtract(Tensor([1, 64, 64, 1],"float32"), Tensor([0, 64, 64, 1],"float64"), )
paddle.subtract(Tensor([1, 64, 64, 1],"float32"), Tensor([1, 64, 64, 0],"float64"), )
paddle.subtract(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.subtract(Tensor([10, 1],"float32"), Tensor([10, 0],"float32"), )
paddle.subtract(Tensor([100, 0, 1],"float32"), Tensor([100, 0, 1],"float32"), )
paddle.subtract(Tensor([100, 376, 0],"float32"), Tensor([100, 376, 0],"float32"), )
paddle.subtract(Tensor([100, 376, 0],"float32"), Tensor([100, 376, 1],"float32"), )
paddle.subtract(Tensor([100, 376, 1],"float32"), Tensor([100, 376, 0],"float32"), )
paddle.subtract(Tensor([100],"float32"), Tensor([0, 1],"float32"), )
paddle.subtract(Tensor([14, 1, 1, 1],"complex64"), Tensor([0, 8, 4],"complex64"), )
paddle.subtract(Tensor([14, 1, 1, 1],"complex64"), Tensor([8, 0, 4],"complex64"), )
paddle.subtract(Tensor([14, 1, 1, 1],"complex64"), Tensor([8, 8, 0],"complex64"), )
paddle.subtract(Tensor([17, 0, 1],"float32"), Tensor([17, 0, 1],"float32"), )
paddle.subtract(Tensor([17, 376, 0],"float32"), Tensor([17, 376, 0],"float32"), )
paddle.subtract(Tensor([17, 376, 0],"float32"), Tensor([17, 376, 1],"float32"), )
paddle.subtract(Tensor([17, 376, 1],"float32"), Tensor([17, 376, 0],"float32"), )
paddle.subtract(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 10],"float32"), )
paddle.subtract(Tensor([2, 0, 3, 4],"float32"), Tensor([2, 0, 1, 1],"float32"), )
paddle.subtract(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 0],"float32"), )
paddle.subtract(Tensor([2, 3, 0, 4],"float32"), Tensor([2, 3, 0, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 0, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 0],"float32"), Tensor([2, 3, 1, 0],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 0],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([39, 1, 1, 1],"complex64"), Tensor([0, 8, 4],"complex64"), )
paddle.subtract(Tensor([39, 1, 1, 1],"complex64"), Tensor([8, 0, 4],"complex64"), )
paddle.subtract(Tensor([39, 1, 1, 1],"complex64"), Tensor([8, 8, 0],"complex64"), )
paddle.subtract(Tensor([64, 0, 3, 64, 128],"float32"), Tensor([64, 0, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 0, 64, 128],"float32"), Tensor([64, 3, 0, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 0, 128],"float32"), Tensor([64, 3, 3, 0, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 64, 0],"float32"), Tensor([64, 3, 3, 64, 0],"float32"), )
paddle.subtract(Tensor([64, 4, 0, 64, 128],"float32"), Tensor([64, 4, 0, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 0, 128],"float32"), Tensor([64, 4, 3, 0, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 64, 0],"float32"), Tensor([64, 4, 3, 64, 0],"float32"), )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=0, )
paddle.sum(Tensor([0, 3],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=0, )
paddle.sum(Tensor([2, 0],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=0, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=2, keepdim=True, )
paddle.sum(x=Tensor([0, 2],"int32"), )
paddle.sum(x=Tensor([2, 0],"int32"), )
paddle.take_along_axis(Tensor([0, 2, 5],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([0, 2],"float32"), Tensor([4, 2],"float32"), 0, )
paddle.take_along_axis(Tensor([0, 2],"float32"), Tensor([4, 2],"int64"), 0, )
paddle.take_along_axis(Tensor([0, 2],"float64"), Tensor([1, 1],"int64"), 1, )
paddle.take_along_axis(Tensor([0, 3, 2],"float32"), Tensor([1, 3, 2],"int64"), axis=1, )
paddle.take_along_axis(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 4],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 36828, 4],"float32"), Tensor([1, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([0, 38367, 4],"float32"), Tensor([1, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([0, 3],"float32"), Tensor([1, 3],"float32"), 0, )
paddle.take_along_axis(Tensor([0, 3],"float32"), Tensor([1, 3],"int64"), 0, )
paddle.take_along_axis(Tensor([0, 3],"float32"), Tensor([1, 3],"int64"), 0, False, )
paddle.take_along_axis(Tensor([0, 3],"float64"), Tensor([1, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 5],"float32"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([0, 5],"float64"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([0, 6380, 4],"float32"), Tensor([1, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([0, 8550, 4],"float32"), Tensor([1, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 0, 4],"float32"), Tensor([1, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 0, 4],"float32"), Tensor([1, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 36828, 4],"float32"), Tensor([0, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 38367, 4],"float32"), Tensor([0, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 6380, 4],"float32"), Tensor([0, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 8550, 4],"float32"), Tensor([0, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([128, 0],"float32"), Tensor([128, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([2, 0],"float32"), Tensor([2, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([28, 0],"float32"), Tensor([28, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([3, 0, 5],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 0],"float32"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 0],"float32"), Tensor([3, 2],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 0],"float64"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 2, 0],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([30, 0],"float32"), Tensor([30, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([38, 0],"float32"), Tensor([38, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 0, 2],"float32"), Tensor([1, 3, 2],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 0, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 0, 4],"float64"), Tensor([1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 0, 6],"float64"), Tensor([4, 1, 6],"int32"), axis=1, )
paddle.take_along_axis(Tensor([4, 0],"float64"), Tensor([1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 0, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 0],"float64"), Tensor([1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 4, 0],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 7, 0],"float64"), Tensor([4, 7, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([5, 0, 4],"float64"), Tensor([5, 1, 4],"int32"), axis=1, )
paddle.take_along_axis(Tensor([8, 0, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 0],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([0],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 0],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([0],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 0, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 0],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([0, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([0, 4, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 0, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 3, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 3, 4, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([3, 0, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([3, 4, 4, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 0, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 0, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 0, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 0, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 3, 0],"float64"), axes=1, )
paddle.tile(Tensor([0, 1],"float32"), list[1,1,49,], )
paddle.tile(Tensor([0, 7],"float32"), list[40,1,1,], )
paddle.tile(Tensor([0],"float32"), list[245,1,], )
paddle.tile(Tensor([0],"float32"), list[7,1,], )
paddle.tile(Tensor([1, 0, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 0, 1, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 0, 1, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 1, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 0, 13, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 2, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 0, 29, 29],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 0, 5, 5],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 64, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 0],"float32"), list[256,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[5,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[58,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[64,1,], )
paddle.tile(Tensor([1, 0],"float32"), repeat_times=list[2,1,], )
paddle.tile(Tensor([1, 1, 0, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 0, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 29],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 1, 0, 5],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 1, 0, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 1, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 1, 1, 0, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 1, 1, 1, 0],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 13, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 2, 0],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 1, 29, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 5, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 64, 0, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 64, 64, 0],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 192, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 196, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 2, 0, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 0, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 64, 0],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 200, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 3, 0, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 0, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 0, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 1, 0],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([13, 0, 16, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 0, 32],"float32"), list[1,1,4,], )
paddle.tile(Tensor([13, 0, 7],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([13, 1, 0],"float32"), list[1,1,4,], )
paddle.tile(Tensor([13, 1, 0],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([13, 2, 0, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 2, 16, 0],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 7, 0],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([16, 0, 1, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 0, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 0, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 0, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([16, 1, 0, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 0, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 0, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 64, 0],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 10, 0, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 0, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 0, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 1, 0, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 1, 0],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 1, 58, 0],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 176, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([18, 0],"float32"), repeat_times=list[1,18,], )
paddle.tile(Tensor([2, 0, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([2, 192, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([256, 0],"float32"), list[1,256,], )
paddle.tile(Tensor([3, 0, 1, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 0, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 1, 0, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 1, 64, 0],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([4, 0, 16],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 0, 1],"float32"), list[1,1,16,], )
paddle.tile(Tensor([4, 0, 1],"float32"), list[1,1,32,], )
paddle.tile(Tensor([4, 0, 32],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 0, 32],"float32"), list[1,8,1,], )
paddle.tile(Tensor([4, 0],"float32"), repeat_times=list[1,4,], )
paddle.tile(Tensor([4, 1, 0],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 1, 0],"float32"), list[1,8,1,], )
paddle.tile(Tensor([4, 4, 0],"float32"), list[1,1,16,], )
paddle.tile(Tensor([4, 4, 0],"float32"), list[1,1,32,], )
paddle.tile(Tensor([4, 8, 0],"float32"), list[1,1,32,], )
paddle.tile(Tensor([40, 0],"float32"), list[1,1,49,], )
paddle.tile(Tensor([5, 0],"float32"), list[1,5,], )
paddle.tile(Tensor([5, 0],"float32"), list[8,1,], )
paddle.tile(Tensor([58, 0],"float32"), list[1,58,], )
paddle.tile(Tensor([64, 0],"float32"), list[1,64,], )
paddle.tile(Tensor([7, 0],"float32"), list[40,1,1,], )
paddle.tile(Tensor([8, 0, 1],"float64"), list[1,1,100,], )
paddle.tile(Tensor([8, 0, 32],"float64"), list[1,4,1,], )
paddle.tile(Tensor([8, 1, 0],"float64"), list[1,4,1,], )
paddle.tile(Tensor([8, 4, 0],"float64"), list[1,1,100,], )
paddle.tile(x=Tensor([1, 0, 2],"float64"), repeat_times=tuple(2,3,), )
paddle.tile(x=Tensor([1, 0],"float64"), repeat_times=list[471,1,], )
paddle.tile(x=Tensor([1, 3, 0],"float64"), repeat_times=tuple(2,3,), )
paddle.tile(x=Tensor([2, 0],"float64"), repeat_times=list[3,2,], )
paddle.topk(Tensor([0, 1, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 1, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 1, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 1000],"float16"), k=1, )
paddle.topk(Tensor([0, 1000],"float32"), k=1, )
paddle.topk(Tensor([0, 1000],"float32"), k=5, )
paddle.topk(Tensor([0, 102],"float32"), k=1, )
paddle.topk(Tensor([0, 102],"float32"), k=5, )
paddle.topk(Tensor([0, 11645],"float32"), 900, axis=1, )
paddle.topk(Tensor([0, 11],"float64"), k=Tensor([1],"int64"), )
paddle.topk(Tensor([0, 12096],"float32"), 300, axis=1, )
paddle.topk(Tensor([0, 1358],"float32"), k=3, largest=True, )
paddle.topk(Tensor([0, 16],"float32"), 2, axis=-1, )
paddle.topk(Tensor([0, 200],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 246],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 256000],"float32"), 2, axis=1, )
paddle.topk(Tensor([0, 256],"float32"), 2, axis=1, )
paddle.topk(Tensor([0, 32000],"float32"), 2, axis=1, )
paddle.topk(Tensor([0, 396],"float32"), 8, axis=1, )
paddle.topk(Tensor([0, 4, 2],"int32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([0, 4, 2],"int32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 4, 2],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([0, 4, 2],"int64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 4, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 458],"float32"), k=3, largest=True, )
paddle.topk(Tensor([0, 4],"float64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 4],"float64"), k=1, axis=-1, )
paddle.topk(Tensor([0, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([0, 4],"int64"), k=1, axis=-1, )
paddle.topk(Tensor([0, 512],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 6380],"float32"), 300, axis=1, )
paddle.topk(Tensor([0, 6804],"float32"), 300, axis=1, )
paddle.topk(Tensor([0, 7, 8],"float64"), k=Tensor([1],"int64"), axis=1, )
paddle.topk(Tensor([1, 0, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1000, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([13, 0],"float64"), k=Tensor([1],"int64"), )
paddle.topk(Tensor([3, 0, 2],"int32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 0, 2],"int32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 0, 2],"int64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 0, 2],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 0],"float64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([4, 4, 0],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([6, 7, 0],"float64"), k=Tensor([1],"int64"), axis=1, )
paddle.topk(x=Tensor([0, 400],"float64"), k=4, )
paddle.trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 0],"float16"), )
paddle.trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 4],"float16"), )
paddle.tril(Tensor([0, 1, 1, 1],"float32"), )
paddle.tril(Tensor([0, 1, 1024, 1024],"int64"), )
paddle.tril(Tensor([0, 1, 20, 20],"float32"), )
paddle.tril(Tensor([0, 1, 2048, 2048],"bool"), )
paddle.tril(Tensor([0, 1, 2048, 2048],"float32"), )
paddle.tril(Tensor([0, 10, 10],"int32"), )
paddle.tril(Tensor([0, 1007],"bool"), )
paddle.tril(Tensor([0, 107],"bool"), )
paddle.tril(Tensor([0, 107],"float16"), )
paddle.tril(Tensor([0, 109],"bool"), )
paddle.tril(Tensor([0, 10],"bool"), )
paddle.tril(Tensor([0, 10],"float32"), diagonal=0, )
paddle.tril(Tensor([0, 1],"float32"), diagonal=0, )
paddle.tril(Tensor([0, 20, 1],"float32"), 0, )
paddle.tril(Tensor([0, 20, 20],"float32"), )
paddle.tril(Tensor([0, 20, 20],"int32"), )
paddle.tril(Tensor([0, 32],"float32"), -1, )
paddle.tril(Tensor([0, 5],"float32"), diagonal=0, )
paddle.tril(Tensor([0, 6],"float32"), diagonal=0, )
paddle.tril(Tensor([1, 0, 1, 1],"float32"), )
paddle.tril(Tensor([1, 0, 1024, 1024],"int64"), )
paddle.tril(Tensor([1, 0, 20, 20],"float32"), )
paddle.tril(Tensor([1, 0, 2048, 2048],"bool"), )
paddle.tril(Tensor([1, 0, 2048, 2048],"float32"), )
paddle.tril(Tensor([1, 0, 20],"float32"), )
paddle.tril(Tensor([1, 0],"float32"), diagonal=0, )
paddle.tril(Tensor([1, 1, 0, 1024],"int64"), )
paddle.tril(Tensor([1, 1, 0, 1],"float32"), )
paddle.tril(Tensor([1, 1, 0, 2048],"bool"), )
paddle.tril(Tensor([1, 1, 0, 2048],"float32"), )
paddle.tril(Tensor([1, 1, 0, 20],"float32"), )
paddle.tril(Tensor([1, 1, 1, 0],"float32"), )
paddle.tril(Tensor([1, 1, 1024, 0],"int64"), )
paddle.tril(Tensor([1, 1, 20, 0],"float32"), )
paddle.tril(Tensor([1, 1, 2048, 0],"bool"), )
paddle.tril(Tensor([1, 1, 2048, 0],"float32"), )
paddle.tril(Tensor([1, 20, 0],"float32"), )
paddle.tril(Tensor([10, 0, 1],"float32"), 0, )
paddle.tril(Tensor([10, 0],"bool"), )
paddle.tril(Tensor([10, 0],"float32"), diagonal=0, )
paddle.tril(Tensor([10, 20, 0],"float32"), 0, )
paddle.tril(Tensor([1007, 0],"bool"), )
paddle.tril(Tensor([107, 0],"bool"), )
paddle.tril(Tensor([107, 0],"float16"), )
paddle.tril(Tensor([109, 0],"bool"), )
paddle.tril(Tensor([2, 0, 10],"int32"), )
paddle.tril(Tensor([2, 0, 20],"int32"), )
paddle.tril(Tensor([2, 10, 0],"int32"), )
paddle.tril(Tensor([2, 20, 0],"int32"), )
paddle.tril(Tensor([32, 0],"float32"), -1, )
paddle.tril(Tensor([5, 0],"float32"), diagonal=0, )
paddle.tril(Tensor([6, 0],"float32"), diagonal=0, )
paddle.tril(x=Tensor([0, 2, 2],"float32"), diagonal=0, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=0, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=1, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=5, )
paddle.tril(x=Tensor([0, 2, 2],"int32"), diagonal=0, )
paddle.tril(x=Tensor([0, 2, 2],"int64"), diagonal=0, )
paddle.tril(x=Tensor([3, 0, 2],"float32"), diagonal=0, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=0, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=1, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=5, )
paddle.tril(x=Tensor([3, 0, 2],"int32"), diagonal=0, )
paddle.tril(x=Tensor([3, 0, 2],"int64"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 0],"float32"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=1, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=5, )
paddle.tril(x=Tensor([3, 2, 0],"int32"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 0],"int64"), diagonal=0, )
paddle.triu(Tensor([0, 1, 1, 100],"float16"), )
paddle.triu(Tensor([0, 1, 1, 101],"float16"), )
paddle.triu(Tensor([0, 1, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([0, 1, 1, 10],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 1, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([0, 1, 1, 11],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 1, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([0, 1, 1, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 1, 10, 16],"float32"), )
paddle.triu(Tensor([0, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([0, 128],"float32"), 1, )
paddle.triu(Tensor([0, 128],"float32"), diagonal=0, )
paddle.triu(Tensor([0, 128],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 13],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 16],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 2, 10, 16],"bool"), )
paddle.triu(Tensor([0, 20, 1],"float32"), 0, )
paddle.triu(Tensor([0, 22],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 7, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 77],"float32"), 1, )
paddle.triu(Tensor([0, 7],"float32"), 1, )
paddle.triu(Tensor([0, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 10],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 11],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 10, 16],"bool"), )
paddle.triu(Tensor([1, 0, 10, 16],"float32"), )
paddle.triu(Tensor([1, 0, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 0, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 10],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 11],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 16],"float32"), )
paddle.triu(Tensor([1, 1, 0, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 1, 0],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 10, 0],"float32"), )
paddle.triu(Tensor([1, 1, 2048, 0],"float16"), )
paddle.triu(Tensor([1, 2, 0, 16],"bool"), )
paddle.triu(Tensor([1, 2, 10, 0],"bool"), )
paddle.triu(Tensor([10, 0, 1],"float32"), 0, )
paddle.triu(Tensor([10, 20, 0],"float32"), 0, )
paddle.triu(Tensor([11, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([12, 0, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([12, 7, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([128, 0],"float32"), 1, )
paddle.triu(Tensor([128, 0],"float32"), diagonal=0, )
paddle.triu(Tensor([128, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([13, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 0, 1, 100],"float16"), )
paddle.triu(Tensor([2, 0, 1, 101],"float16"), )
paddle.triu(Tensor([2, 1, 0, 100],"float16"), )
paddle.triu(Tensor([2, 1, 0, 101],"float16"), )
paddle.triu(Tensor([2, 1, 1, 0],"float16"), )
paddle.triu(Tensor([22, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([7, 0],"float32"), 1, )
paddle.triu(Tensor([77, 0],"float32"), 1, )
paddle.triu(x=Tensor([0, 2, 2],"float32"), diagonal=0, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=-5, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=0, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=1, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=5, )
paddle.triu(x=Tensor([0, 2, 2],"int32"), diagonal=0, )
paddle.triu(x=Tensor([0, 2, 2],"int64"), diagonal=0, )
paddle.triu(x=Tensor([3, 0, 2],"float32"), diagonal=0, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=-5, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=0, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=1, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=5, )
paddle.triu(x=Tensor([3, 0, 2],"int32"), diagonal=0, )
paddle.triu(x=Tensor([3, 0, 2],"int64"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 0],"float32"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=-5, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=5, )
paddle.triu(x=Tensor([3, 2, 0],"int32"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 0],"int64"), diagonal=0, )
paddle.trunc(Tensor([0, 20, 1],"float32"), )
paddle.trunc(Tensor([0, 20],"float32"), )
paddle.trunc(Tensor([10, 0, 1],"float32"), )
paddle.trunc(Tensor([10, 20, 0],"float32"), )
paddle.trunc(Tensor([20, 0],"float32"), )
paddle.trunc(input=Tensor([0, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([0, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([0, 6, 6],"float64"), )
paddle.trunc(input=Tensor([0, 6],"int32"), )
paddle.trunc(input=Tensor([0, 6],"int64"), )
paddle.trunc(input=Tensor([3, 0, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 0, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 6, 0, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 6, 6, 0],"float64"), )
paddle.trunc(input=Tensor([6, 0, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 0, 6],"float64"), )
paddle.trunc(input=Tensor([6, 0],"int32"), )
paddle.trunc(input=Tensor([6, 0],"int64"), )
paddle.trunc(input=Tensor([6, 6, 0, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 0],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6, 0],"float64"), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unfold(Tensor([5, 0],"float64"), 0, 5, 1, )
paddle.unique(x=Tensor([0, 2],"int32"), axis=0, )
paddle.unique(x=Tensor([0, 2],"int64"), axis=0, )
paddle.unique(x=Tensor([2, 0],"float32"), axis=1, )
paddle.unique(x=Tensor([2, 0],"float64"), axis=1, )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unique_consecutive(x=Tensor([0, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unique_consecutive(x=Tensor([3, 0],"float64"), axis=1, )
paddle.var(Tensor([0, 16, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0, 256],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([0, 256],"float64"), axis=-1, keepdim=True, )
paddle.var(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([0, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0, 48, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0],"float32"), )
paddle.var(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([16, 0, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 0, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 16, 0, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 16, 3, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 32, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 32, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 8, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 8, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([192, 0, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([192, 48, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([192, 48, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([192, 96, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([192, 96, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(x=Tensor([0, 3, 3],"float64"), )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([0, 3],"float32"), )
paddle.var(x=Tensor([0, 3],"float64"), )
paddle.var(x=Tensor([0, 96, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([0, 96, 2],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([13, 0, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([13, 96, 0],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([16, 0, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([16, 0, 2],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([16, 96, 0],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([2, 0, 2],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([2, 0],"float32"), )
paddle.var(x=Tensor([2, 0],"float64"), )
paddle.var(x=Tensor([2, 96, 0],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([3, 0, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([3, 0, 3],"float64"), )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([3, 3, 0],"float64"), )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([3, 96, 0],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, Tensor([0, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([0, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([0, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 2, 5, 5],"float32"), Tensor([0, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 4, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 4, 4, 4],"float64"), Tensor([0, 18, 4, 4],"float64"), Tensor([0, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 6, 4, 4],"float64"), Tensor([0, 18, 4, 4],"float64"), Tensor([0, 6, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([0, 9, 4, 4],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([0, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 8, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([0, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 8, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([4, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([4, 6, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([0, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([0, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 6, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([0, 6, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 8, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([4, 0, 4, 4],"float32"), Tensor([4, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, Tensor([4, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([4, 3, 4, 4],"float32"), Tensor([4, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, Tensor([4, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([5, 0, 4, 4],"float32"), Tensor([5, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([5, 3, 4, 4],"float32"), Tensor([5, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 128, 100, 100],"float32"), offset=Tensor([0, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 128, 200, 200],"float32"), offset=Tensor([0, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 256, 100, 100],"float32"), offset=Tensor([0, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 256, 50, 50],"float32"), offset=Tensor([0, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 10, 10],"float32"), offset=Tensor([0, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 13, 13],"float32"), offset=Tensor([0, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 15, 15],"float32"), offset=Tensor([0, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 16, 16],"float32"), offset=Tensor([0, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 20, 20],"float32"), offset=Tensor([0, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 25, 25],"float32"), offset=Tensor([0, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 26, 26],"float32"), offset=Tensor([0, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 30, 30],"float32"), offset=Tensor([0, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 32, 32],"float32"), offset=Tensor([0, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 50, 50],"float32"), offset=Tensor([0, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 0, 10, 10],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 0, 20, 20],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 10, 10],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 20, 20],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 38, 68],"float32"), offset=Tensor([20, 18, 38, 68],"float32"), weight=Tensor([128, 256, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 38, 68],"float32"), offset=Tensor([20, 18, 38, 68],"float32"), weight=Tensor([256, 256, 3, 3],"float32"), bias=Tensor([256],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 38, 68],"float32"), offset=Tensor([20, 18, 38, 68],"float32"), weight=Tensor([64, 256, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([64, 128, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 16, 16],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 32, 32],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=Tensor([4, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 5, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=Tensor([4, 45, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 64, 64],"float32"), offset=Tensor([4, 144, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([4, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 64, 64],"float32"), offset=Tensor([4, 72, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=4, groups=1, mask=Tensor([4, 36, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 512, 16, 16],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 512, 32, 32],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 100, 100],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 100, 100],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([256, 256, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 200, 200],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 25, 25],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 50, 50],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 50, 50],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([256, 256, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 100, 100],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 200, 200],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 256, 100, 100],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 256, 50, 50],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 512, 25, 25],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 512, 50, 50],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 0, 16, 16],"float32"), offset=Tensor([64, 144, 16, 16],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 0, 32, 32],"float32"), offset=Tensor([64, 144, 32, 32],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 32, 32],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 13, 13],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 15, 15],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 16, 16],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 26, 26],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 30, 30],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 32, 32],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 13, 13],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 15, 15],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 16, 16],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 26, 26],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 30, 30],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 32, 32],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.roi_align(Tensor([0, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([0, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 0],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 0],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([0],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([0],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(x=Tensor([0, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 1024, 40, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 1024, 42, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 1024, 44, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 1024, 44, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 1024, 44, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 100, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 100, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 100, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 100, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 100, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 12, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 144, 200],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 160, 216],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 160, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 160, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 160, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 20, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 36, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 60],"float32"), boxes=Tensor([1, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([0, 256, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=1, spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 0, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 0, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 0, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 0, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 0, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 40, 0],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 40, 60],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 40, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 42, 0],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 42, 63],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 42, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 0],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 59],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 66],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 69],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 0],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 0],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([103, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([115, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([124, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([133, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([159, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 12, 0],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 12, 9],"float32"), boxes=Tensor([5, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 12, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 144, 0],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 144, 200],"float32"), boxes=Tensor([462, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 144, 200],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 0],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([200, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([208, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([113, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([145, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 0],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 15],"float32"), boxes=Tensor([9, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([11, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([16, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([9, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([10, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([11, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([14, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 36, 0],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 36, 50],"float32"), boxes=Tensor([11, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 36, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 30],"float32"), boxes=Tensor([34, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([116, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([119, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([1, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([1, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([142, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([17, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([18, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_pool(Tensor([0, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([0, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([0, 3, 6, 4],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([1, 0, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 0, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([3, 0, 6, 4],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 4],"float64"), Tensor([6, 0],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 4],"float64"), Tensor([6, 4],"float64"), Tensor([0],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(x=Tensor([0, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([0, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 0, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 0, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
