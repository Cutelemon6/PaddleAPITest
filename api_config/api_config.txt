paddle.abs(Tensor([1, 1, 32, 32],"float32"), )
paddle.abs(Tensor([1, 100],"float64"), )
paddle.abs(Tensor([1, 1025, 118],"complex64"), )
paddle.abs(Tensor([1, 1025, 431],"complex64"), )
paddle.abs(Tensor([1, 1025, 73],"complex64"), )
paddle.abs(Tensor([1, 1025, 91],"complex64"), )
paddle.abs(Tensor([1, 1025, 98],"complex64"), )
paddle.abs(Tensor([1, 120],"float32"), )
paddle.abs(Tensor([1, 14, 5, 14],"complex128"), )
paddle.abs(Tensor([1, 16, 12, 12],"float32"), )
paddle.abs(Tensor([1, 1],"float64"), )
paddle.abs(Tensor([1, 2, 3, 4],"float32"), )
paddle.abs(Tensor([1, 2, 3, 4],"float64"), )
paddle.abs(Tensor([1, 21, 118],"complex64"), )
paddle.abs(Tensor([1, 21, 431],"complex64"), )
paddle.abs(Tensor([1, 21, 84],"complex64"), )
paddle.abs(Tensor([1, 257, 1723],"complex64"), )
paddle.abs(Tensor([1, 257, 289],"complex64"), )
paddle.abs(Tensor([1, 257, 333],"complex64"), )
paddle.abs(Tensor([1, 257, 363],"complex64"), )
paddle.abs(Tensor([1, 257, 382],"complex64"), )
paddle.abs(Tensor([1, 257, 392],"complex64"), )
paddle.abs(Tensor([1, 257, 470],"complex64"), )
paddle.abs(Tensor([1, 3, 256, 256],"float32"), )
paddle.abs(Tensor([1, 3, 32, 32],"float32"), )
paddle.abs(Tensor([1, 33, 431],"complex64"), )
paddle.abs(Tensor([1, 33, 96],"complex64"), )
paddle.abs(Tensor([1, 33, 98],"complex64"), )
paddle.abs(Tensor([1, 576],"float32"), )
paddle.abs(Tensor([1, 6, 16, 16],"float32"), )
paddle.abs(Tensor([1, 6, 32, 32],"float32"), )
paddle.abs(Tensor([1, 84],"float32"), )
paddle.abs(Tensor([10, 12],"float32"), )
paddle.abs(Tensor([10, 12],"float64"), )
paddle.abs(Tensor([10, 16],"float32"), )
paddle.abs(Tensor([10, 2, 5],"float32"), )
paddle.abs(Tensor([10, 20, 1],"float32"), )
paddle.abs(Tensor([10, 200, 300],"float32"), )
paddle.abs(Tensor([10, 200, 300],"int32"), )
paddle.abs(Tensor([10, 200, 300],"int64"), )
paddle.abs(Tensor([10, 20],"float64"), )
paddle.abs(Tensor([10, 20],"int32"), )
paddle.abs(Tensor([100, 1],"float64"), )
paddle.abs(Tensor([10],"float32"), )
paddle.abs(Tensor([10],"float64"), )
paddle.abs(Tensor([120, 84],"float32"), )
paddle.abs(Tensor([120],"float32"), )
paddle.abs(Tensor([128, 1, 128],"float32"), )
paddle.abs(Tensor([128, 128],"float32"), )
paddle.abs(Tensor([13, 3, 3],"float32"), )
paddle.abs(Tensor([13, 3, 3],"float64"), )
paddle.abs(Tensor([150, 16],"float32"), )
paddle.abs(Tensor([16, 1, 28, 28],"float32"), )
paddle.abs(Tensor([16, 120],"float32"), )
paddle.abs(Tensor([16, 400],"float32"), )
paddle.abs(Tensor([16, 6, 14, 14],"float32"), )
paddle.abs(Tensor([16, 6, 5, 5],"float32"), )
paddle.abs(Tensor([16, 84],"float32"), )
paddle.abs(Tensor([16],"float32"), )
paddle.abs(Tensor([1],"float32"), )
paddle.abs(Tensor([1],"float64"), )
paddle.abs(Tensor([1],"int64"), )
paddle.abs(Tensor([2, 2],"float64"), )
paddle.abs(Tensor([2, 3, 4],"float32"), )
paddle.abs(Tensor([2, 3],"float32"), )
paddle.abs(Tensor([2, 3],"float64"), )
paddle.abs(Tensor([2, 4],"complex128"), )
paddle.abs(Tensor([2, 4],"complex64"), )
paddle.abs(Tensor([2, 5, 5],"complex64"), )
paddle.abs(Tensor([2],"float64"), )
paddle.abs(Tensor([3, 3, 3, 3, 3],"float32"), )
paddle.abs(Tensor([3, 5],"float32"), )
paddle.abs(Tensor([3, 5],"float64"), )
paddle.abs(Tensor([3, 6],"float64"), )
paddle.abs(Tensor([32, 1, 28, 28],"float32"), )
paddle.abs(Tensor([32, 120],"float32"), )
paddle.abs(Tensor([32, 400],"float32"), )
paddle.abs(Tensor([32, 6, 14, 14],"float32"), )
paddle.abs(Tensor([32, 84],"float32"), )
paddle.abs(Tensor([3],"float32"), )
paddle.abs(Tensor([3],"float64"), )
paddle.abs(Tensor([4, 3, 2],"float32"), )
paddle.abs(Tensor([4, 3, 2],"float64"), )
paddle.abs(Tensor([4, 5, 2],"float32"), )
paddle.abs(Tensor([4, 5, 2],"float64"), )
paddle.abs(Tensor([400, 120],"float32"), )
paddle.abs(Tensor([5, 5],"complex64"), )
paddle.abs(Tensor([5, 5],"float64"), )
paddle.abs(Tensor([576, 120],"float32"), )
paddle.abs(Tensor([5],"float64"), )
paddle.abs(Tensor([6, 1, 3, 3],"float32"), )
paddle.abs(Tensor([6, 3],"float64"), )
paddle.abs(Tensor([64, 1, 28, 28],"float32"), )
paddle.abs(Tensor([64, 120],"float32"), )
paddle.abs(Tensor([64, 400],"float32"), )
paddle.abs(Tensor([64, 6, 14, 14],"float32"), )
paddle.abs(Tensor([64, 84],"float32"), )
paddle.abs(Tensor([6],"float32"), )
paddle.abs(Tensor([6],"int32"), )
paddle.abs(Tensor([8, 10],"float64"), )
paddle.abs(Tensor([8, 16, 32],"complex128"), )
paddle.abs(Tensor([8, 16, 32],"complex64"), )
paddle.abs(Tensor([8, 16, 32],"float16"), )
paddle.abs(Tensor([8, 16, 32],"float32"), )
paddle.abs(Tensor([8, 16, 32],"float64"), )
paddle.abs(Tensor([84, 10],"float32"), )
paddle.abs(Tensor([84],"float32"), )
paddle.abs(Tensor([9, 6],"float32"), )
paddle.abs(Tensor([],"complex64"), )
paddle.abs(Tensor([],"float32"), )
paddle.abs(Tensor([],"int64"), )
paddle.abs_(Tensor([10, 20, 1],"float32"), )
paddle.abs_(Tensor([10, 20],"int32"), )
paddle.acos(Tensor([10, 10],"float32"), )
paddle.acos(Tensor([10, 20, 1],"float32"), )
paddle.acos(Tensor([2, 3],"float32"), )
paddle.acos(Tensor([],"float32"), )
paddle.acosh(Tensor([10, 20, 1],"float32"), )
paddle.acosh(Tensor([2, 3],"float32"), )
paddle.acosh(Tensor([],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.all(Tensor([1, 0, 2],bool), axis=None, keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=None, keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(-1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(-1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(-2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(-2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(0), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(0), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=int(2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],bool), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(-1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(-1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(-2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(-2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(0), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(0), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=int(2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(-1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(-1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(-2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(-2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(0), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(0), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=int(2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=None, keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=None, keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(-1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(-2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(-2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(0), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(0), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=int(2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=None, keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=None, keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(-1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(-2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(-2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(0), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(0), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=int(2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=None, keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=None, keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(-1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(-1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(-2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(-2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(0), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(0), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(1), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(2), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=int(2), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.all(Tensor([10],bool), )
paddle.all(Tensor([12, 10],bool), )
paddle.all(Tensor([12, 10],bool), axis=int(-1), )
paddle.all(Tensor([12, 10],bool), axis=int(0), )
paddle.all(Tensor([12, 10],bool), axis=int(1), keepdim=bool(True), )
paddle.all(Tensor([12, 10],"float64"), )
paddle.all(Tensor([12, 10],"int64"), )
paddle.all(Tensor([1],bool), )
paddle.all(Tensor([2],bool), )
paddle.all(Tensor([2],bool), axis=int(-1), )
paddle.all(Tensor([3, 40],bool), )
paddle.all(Tensor([5, 6, 10],bool), None, bool(False), None, )
paddle.all(Tensor([5, 6, 10],"float64"), None, bool(False), None, )
paddle.all(Tensor([5, 6, 10],"int64"), None, bool(False), None, )
paddle.all(Tensor([5],bool), )
paddle.all(Tensor([8, 4],bool), )
paddle.all(Tensor([],bool), )
paddle.amax(Tensor([2, 2, 2],"int32"), tuple(int(0),int(1),), bool(False), )
paddle.amax(Tensor([2, 4],"float64"), None, bool(False), )
paddle.amax(Tensor([2, 4],"float64"), int(0), bool(False), )
paddle.amax(Tensor([2, 4],"float64"), int(1), bool(True), )
paddle.amax(Tensor([],"float64"), None, bool(False), )
paddle.amin(Tensor([2, 2, 2],"int32"), tuple(int(0),int(1),), bool(False), )
paddle.amin(Tensor([2, 4],"float64"), None, bool(False), )
paddle.amin(Tensor([2, 4],"float64"), int(0), bool(False), )
paddle.amin(Tensor([2, 4],"float64"), int(1), bool(True), )
paddle.amin(Tensor([],"float64"), None, bool(False), )
paddle.angle(Tensor([2, 3],"complex128"), )
paddle.angle(Tensor([],"complex64"), )
paddle.any(Tensor([1, 0, 2],bool), axis=None, keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=None, keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(-1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(-1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(-2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(-2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(0), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(0), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=int(2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],bool), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(-1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(-1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(-2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(-2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(0), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(0), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=int(2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(-1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(-1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(-2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(-2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(0), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(0), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=int(2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=None, keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=None, keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(-1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(-2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(-2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(0), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(0), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=int(2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=None, keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=None, keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(-1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(-2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(-2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(0), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(0), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=int(2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=None, keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=None, keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(-1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(-1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(-2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(-2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(0), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(0), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(1), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(2), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=int(2), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(-1),int(-2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(-1),int(-2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(1),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(0),int(2),), keepdim=bool(True), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(1),int(2),), keepdim=bool(False), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(int(1),int(2),), keepdim=bool(True), )
paddle.any(Tensor([10, 2, 1],bool), )
paddle.any(Tensor([10, 20],bool), )
paddle.any(Tensor([10, 2],bool), )
paddle.any(Tensor([12, 10],bool), )
paddle.any(Tensor([12, 10],bool), axis=int(-1), )
paddle.any(Tensor([12, 10],bool), axis=int(0), )
paddle.any(Tensor([12, 10],bool), axis=int(1), keepdim=bool(True), )
paddle.any(Tensor([12, 10],"float32"), )
paddle.any(Tensor([12, 10],"int64"), )
paddle.any(Tensor([1],bool), )
paddle.any(Tensor([5, 6, 10],bool), None, bool(False), None, )
paddle.any(Tensor([5, 6, 10],"float64"), None, bool(False), None, )
paddle.any(Tensor([5, 6, 10],"int64"), None, bool(False), None, )
paddle.any(Tensor([6],bool), )
paddle.any(Tensor([],bool), )
paddle.argmax(Tensor([1, 1000],"float32"), axis=int(1), )
paddle.argmax(Tensor([1, 32],"float64"), axis=int(-1), )
paddle.argmax(Tensor([1, 8, 14, 12],"float32"), axis=int(1), keepdim=bool(True), )
paddle.argmax(Tensor([10, 10],"float32"), )
paddle.argmax(Tensor([10, 10],"float32"), axis=int(-1), )
paddle.argmax(Tensor([10, 10],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.argmax(Tensor([10, 10],"float32"), axis=int(-1), keepdim=bool(True), dtype=str(int32), )
paddle.argmax(Tensor([10, 10],"float32"), axis=int(1), )
paddle.argmax(Tensor([2, 3, 4],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=int(0), )
paddle.argmax(Tensor([3, 5],"float32"), )
paddle.argmax(Tensor([3, 5],"float32"), keepdim=bool(True), )
paddle.argmax(Tensor([4, 4, 4, 4, 4],"float64"), axis=int(0), )
paddle.argmax(Tensor([5, 5, 5, 5],"float64"), axis=int(0), )
paddle.argmax(Tensor([5],"float32"), int(0), )
paddle.argmax(Tensor([],"float32"), None, )
paddle.argmax(Tensor([],"float32"), int(-1), )
paddle.argmax(Tensor([],"float32"), int(0), )
paddle.argmin(Tensor([10, 10],"float32"), )
paddle.argmin(Tensor([10, 10],"float32"), axis=int(-1), )
paddle.argmin(Tensor([10, 10],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.argmin(Tensor([10, 10],"float32"), axis=int(-1), keepdim=bool(True), dtype=str(int32), )
paddle.argmin(Tensor([10, 10],"float32"), axis=int(1), )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=int(0), )
paddle.argmin(Tensor([3, 5],"float32"), )
paddle.argmin(Tensor([3, 5],"float32"), keepdim=bool(True), )
paddle.argmin(Tensor([4, 4, 4, 4, 4],"float64"), axis=int(0), )
paddle.argmin(Tensor([5, 5, 5, 5],"float64"), axis=int(0), )
paddle.argmin(Tensor([5],"float32"), int(0), )
paddle.argmin(Tensor([],"float32"), None, )
paddle.argmin(Tensor([],"float32"), int(-1), )
paddle.argmin(Tensor([],"float32"), int(0), )
paddle.argsort(Tensor([1, 10000],"float64"), axis=int(1), )
paddle.argsort(Tensor([1, 10000],"float64"), axis=int(1), descending=bool(True), )
paddle.argsort(Tensor([1, 30],"float64"), axis=int(1), descending=bool(True), stable=bool(True), )
paddle.argsort(Tensor([1, 30],"float64"), axis=int(1), stable=bool(True), )
paddle.argsort(Tensor([1000, 10],"float32"), descending=bool(True), )
paddle.argsort(Tensor([1000, 5],"float32"), descending=bool(True), )
paddle.argsort(Tensor([10000, 1],"float64"), axis=int(0), )
paddle.argsort(Tensor([10000, 1],"float64"), axis=int(0), descending=bool(True), )
paddle.argsort(Tensor([10000],"float64"), axis=int(0), )
paddle.argsort(Tensor([10000],"float64"), axis=int(0), descending=bool(True), )
paddle.argsort(Tensor([10],"float32"), descending=bool(True), )
paddle.argsort(Tensor([13],"float32"), descending=bool(True), )
paddle.argsort(Tensor([15],"float32"), descending=bool(True), )
paddle.argsort(Tensor([16],"float32"), descending=bool(True), )
paddle.argsort(Tensor([17],"float32"), descending=bool(True), )
paddle.argsort(Tensor([19],"float32"), descending=bool(True), )
paddle.argsort(Tensor([1],"int64"), )
paddle.argsort(Tensor([2, 100],"int64"), axis=int(1), stable=bool(True), )
paddle.argsort(Tensor([2, 3, 4],"float64"), axis=int(1), )
paddle.argsort(Tensor([2, 3, 4],"float64"), axis=int(1), descending=bool(True), )
paddle.argsort(Tensor([2, 3, 4],"float64"), descending=bool(True), )
paddle.argsort(Tensor([20],"float32"), descending=bool(True), )
paddle.argsort(Tensor([21],"float32"), descending=bool(True), )
paddle.argsort(Tensor([2],"int64"), )
paddle.argsort(Tensor([3, 10],"int64"), axis=int(1), stable=bool(True), )
paddle.argsort(Tensor([3, 4, 2],"int64"), axis=int(0), stable=bool(True), )
paddle.argsort(Tensor([3, 4, 2],"int64"), axis=int(1), stable=bool(True), )
paddle.argsort(Tensor([3, 4, 2],"int64"), axis=int(2), stable=bool(True), )
paddle.argsort(Tensor([3, 4],"int64"), axis=int(0), stable=bool(True), )
paddle.argsort(Tensor([3, 4],"int64"), axis=int(1), stable=bool(True), )
paddle.argsort(Tensor([30, 1],"float64"), axis=int(0), descending=bool(True), stable=bool(True), )
paddle.argsort(Tensor([30, 1],"float64"), axis=int(0), stable=bool(True), )
paddle.argsort(Tensor([30],"float64"), axis=int(0), descending=bool(True), stable=bool(True), )
paddle.argsort(Tensor([30],"float64"), axis=int(0), stable=bool(True), )
paddle.argsort(Tensor([32],"float32"), descending=bool(True), )
paddle.argsort(Tensor([35],"float32"), descending=bool(True), )
paddle.argsort(Tensor([36, 10],"float32"), descending=bool(True), )
paddle.argsort(Tensor([4, 4],"float64"), descending=bool(True), )
paddle.argsort(Tensor([40, 3, 4],"float64"), axis=int(0), descending=bool(True), stable=bool(True), )
paddle.argsort(Tensor([40, 3, 4],"float64"), axis=int(0), stable=bool(True), )
paddle.argsort(Tensor([4],"float64"), axis=int(0), )
paddle.argsort(Tensor([4],"float64"), axis=int(0), descending=bool(True), )
paddle.argsort(Tensor([5, 4],"int64"), axis=int(0), stable=bool(True), )
paddle.argsort(Tensor([5, 4],"int64"), axis=int(1), stable=bool(True), )
paddle.argsort(Tensor([60],"float32"), descending=bool(True), )
paddle.argsort(Tensor([61],"float32"), descending=bool(True), )
paddle.argsort(Tensor([64, 10],"float32"), descending=bool(True), )
paddle.argsort(Tensor([64],"float32"), descending=bool(True), )
paddle.argsort(Tensor([8, 10],"float32"), descending=bool(True), )
paddle.argsort(Tensor([],"float32"), axis=int(-1), )
paddle.argsort(Tensor([],"float32"), axis=int(0), )
paddle.as_complex(Tensor([10, 10, 10, 2],"float32"), )
paddle.as_complex(Tensor([10, 10, 2],"float64"), )
paddle.as_complex(Tensor([2, 4, 2],"float32"), )
paddle.as_complex(Tensor([2, 4, 2],"float64"), )
paddle.as_complex(Tensor([2],"float32"), )
paddle.as_real(Tensor([10, 10, 10, 20],"complex128"), )
paddle.as_real(Tensor([10, 10],"complex128"), )
paddle.as_real(Tensor([2, 4],"complex128"), )
paddle.as_real(Tensor([2, 4],"complex64"), )
paddle.as_real(Tensor([201, 45],"complex64"), )
paddle.as_real(Tensor([],"complex64"), )
paddle.as_strided(Tensor([15, 3],"float32"), list(int(15),int(3),), list(int(2),), int(0), )
paddle.as_strided(Tensor([15, 3],"float32"), list(int(15),int(3),), list(int(3),int(1),), int(0), )
paddle.as_strided(Tensor([15, 3],"float32"), list(int(20),), list(int(1),), int(0), )
paddle.as_strided(Tensor([15, 3],"float32"), list(int(20),), list(int(2),), int(0), )
paddle.as_strided(Tensor([2, 4, 6],"float32"), list(int(8),int(6),), list(int(6),int(1),), )
paddle.as_strided(Tensor([6, 3],"float16"), list(int(3),int(8),), list(int(2),int(2),), int(0), )
paddle.as_strided(Tensor([6, 3],"float16"), list(int(3),int(8),), list(int(8),int(1),), int(0), )
paddle.as_strided(Tensor([6, 3],"float16"), list(int(6),int(3),), list(int(2),int(2),), int(0), )
paddle.as_strided(Tensor([6, 3],"float16"), list(int(6),int(3),), list(int(3),int(1),), int(0), )
paddle.asin(Tensor([10, 20, 1],"float32"), )
paddle.asin(Tensor([2, 3],"float32"), )
paddle.asin(Tensor([8, 16, 32],"complex128"), )
paddle.asin(Tensor([8, 16, 32],"complex64"), )
paddle.asin(Tensor([8, 16, 32],"float16"), )
paddle.asin(Tensor([8, 16, 32],"float32"), )
paddle.asin(Tensor([8, 16, 32],"float64"), )
paddle.asin(Tensor([],"float32"), )
paddle.asinh(Tensor([10, 20, 1],"float32"), )
paddle.asinh(Tensor([2, 3],"float32"), )
paddle.asinh(Tensor([8, 16, 32],"complex128"), )
paddle.asinh(Tensor([8, 16, 32],"complex64"), )
paddle.asinh(Tensor([8, 16, 32],"float16"), )
paddle.asinh(Tensor([8, 16, 32],"float32"), )
paddle.asinh(Tensor([8, 16, 32],"float64"), )
paddle.asinh(Tensor([],"float32"), )
paddle.atan(Tensor([10, 20, 1],"float32"), )
paddle.atan(Tensor([1],"float32"), name=str(Cauchy_cdf), )
paddle.atan(Tensor([1],"float64"), name=str(Cauchy_cdf), )
paddle.atan(Tensor([2, 3],"float32"), )
paddle.atan(Tensor([3],"float32"), name=str(Cauchy_cdf), )
paddle.atan(Tensor([8, 16, 32],"complex128"), )
paddle.atan(Tensor([8, 16, 32],"complex64"), )
paddle.atan(Tensor([8, 16, 32],"float16"), )
paddle.atan(Tensor([8, 16, 32],"float32"), )
paddle.atan(Tensor([8, 16, 32],"float64"), )
paddle.atan(Tensor([],"float32"), )
paddle.atan(Tensor([],"float32"), name=str(Cauchy_cdf), )
paddle.atan(Tensor([],"float64"), name=str(Cauchy_cdf), )
paddle.atan2(Tensor([0, 0, 0],"float64"), Tensor([0],"float64"), )
paddle.atan2(Tensor([0],"float64"), Tensor([0, 0],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([100, 100],"float64"), )
paddle.atan2(Tensor([11, 17],"float64"), Tensor([11, 17],"float64"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([5, 17, 1, 6],"float64"), Tensor([5, 17, 0, 6],"float64"), )
paddle.atan2(Tensor([5, 17, 6],"float64"), Tensor([0, 5, 17, 6],"float64"), )
paddle.atan2(Tensor([],"float32"), Tensor([],"float32"), )
paddle.atan2(Tensor([],"float64"), Tensor([0],"float64"), )
paddle.atan2(Tensor([],"float64"), Tensor([5, 17, 6],"float64"), )
paddle.atanh(Tensor([10, 20, 1],"float32"), )
paddle.atanh(Tensor([2, 3],"float32"), )
paddle.atanh(Tensor([8, 16, 32],"complex128"), )
paddle.atanh(Tensor([8, 16, 32],"complex64"), )
paddle.atanh(Tensor([8, 16, 32],"float16"), )
paddle.atanh(Tensor([8, 16, 32],"float32"), )
paddle.atanh(Tensor([8, 16, 32],"float64"), )
paddle.atanh(Tensor([],"float32"), )
paddle.bernoulli(Tensor([100, 1000],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), p=float(0.02650835959228448), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float64"), )
paddle.bernoulli(Tensor([],"float32"), )
paddle.bernoulli(Tensor([],"float32"), name=str(Bernoulli_sample), )
paddle.bincount(Tensor([20],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([4],"int64"), None, minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([4],"int64"), Tensor([4],"float64"), minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([7],"int64"), )
paddle.bincount(Tensor([8],"int64"), None, minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([8],"int64"), Tensor([8],"float64"), minlength=Tensor([],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), bool(False), )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), bool(True), )
paddle.bitwise_not(Tensor([2, 3, 5],"int32"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int32"), )
paddle.bitwise_not(Tensor([],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bmm(Tensor([2, 2, 3],"float32"), Tensor([2, 3, 2],"float32"), )
paddle.broadcast_to(Tensor([0, 0, 0],"float64"), list(int(0),int(0),int(0),), )
paddle.broadcast_to(Tensor([0, 0],"float64"), list(int(0),int(0),), )
paddle.broadcast_to(Tensor([0, 5, 17, 6],"float64"), list(int(0),int(5),int(17),int(6),), )
paddle.broadcast_to(Tensor([0],"float64"), list(int(0),), )
paddle.broadcast_to(Tensor([0],"float64"), list(int(0),int(0),), )
paddle.broadcast_to(Tensor([0],"float64"), list(int(0),int(0),int(0),), )
paddle.broadcast_to(Tensor([1, 1, 1, 1],"int32"), tuple(int(10),int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([1, 1, 3],"int64"), tuple(int(3),int(2),int(3),), )
paddle.broadcast_to(Tensor([1, 1, 6],bool), list(int(4),int(5),int(6),), )
paddle.broadcast_to(Tensor([1, 1, 6],"float64"), list(int(4),int(5),int(6),), )
paddle.broadcast_to(Tensor([1, 1],"int64"), tuple(int(1),int(3),), )
paddle.broadcast_to(Tensor([1, 3, 4],"int32"), tuple(int(1),int(3),int(4),), )
paddle.broadcast_to(Tensor([1, 3],"float32"), tuple(int(1),int(3),), )
paddle.broadcast_to(Tensor([1, 3],"int32"), tuple(int(1),int(3),), )
paddle.broadcast_to(Tensor([1, 3],"int64"), tuple(int(1),int(3),), )
paddle.broadcast_to(Tensor([1, 3],"int64"), tuple(int(3),int(3),), )
paddle.broadcast_to(Tensor([1, 5, 1],"float64"), list(int(4),int(5),int(6),), )
paddle.broadcast_to(Tensor([1, 5, 5],"int32"), tuple(int(1),int(5),int(5),), )
paddle.broadcast_to(Tensor([1, 5, 6],"float64"), list(int(4),int(5),int(6),), )
paddle.broadcast_to(Tensor([10, 1, 10],"float16"), tuple(int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([10, 1, 10],"float32"), tuple(int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([10, 1, 10],"float64"), tuple(int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([10, 1, 10],"int32"), tuple(int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([10, 1, 10],"int64"), tuple(int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([10, 1, 1],"float32"), list(int(10),int(20),int(1),), )
paddle.broadcast_to(Tensor([10, 20],"int32"), list(int(10),int(20),), )
paddle.broadcast_to(Tensor([100, 100],"float64"), list(int(100),int(100),), )
paddle.broadcast_to(Tensor([100],"float64"), list(int(100),int(100),), )
paddle.broadcast_to(Tensor([10],"float32"), list(int(84),int(10),), )
paddle.broadcast_to(Tensor([111, 222, 333],"float64"), list(int(111),int(222),int(333),), )
paddle.broadcast_to(Tensor([120],"float32"), list(int(400),int(120),), )
paddle.broadcast_to(Tensor([168],"float64"), tuple(int(168),), )
paddle.broadcast_to(Tensor([16],"float32"), list(int(150),int(16),), )
paddle.broadcast_to(Tensor([1],"float32"), list(int(1),int(1),), )
paddle.broadcast_to(Tensor([1],"float32"), list(int(128),int(1),), )
paddle.broadcast_to(Tensor([1],"float32"), tuple(int(1),), )
paddle.broadcast_to(Tensor([1],"float64"), list(int(10),int(10),int(5),), )
paddle.broadcast_to(Tensor([1],"float64"), list(int(4),), )
paddle.broadcast_to(Tensor([1],"int32"), list(int(6),), )
paddle.broadcast_to(Tensor([1],"int32"), tuple(int(1),), )
paddle.broadcast_to(Tensor([1],"int64"), list(int(1),), )
paddle.broadcast_to(Tensor([1],"int64"), list(int(2),int(100),), )
paddle.broadcast_to(Tensor([1],"int64"), list(int(3),int(10),), )
paddle.broadcast_to(Tensor([1],"int64"), list(int(3),int(4),), )
paddle.broadcast_to(Tensor([1],"int64"), list(int(3),int(4),int(2),), )
paddle.broadcast_to(Tensor([1],"int64"), list(int(5),int(4),), )
paddle.broadcast_to(Tensor([2, 1, 4],bool), list(int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 1, 4],"float32"), list(int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 1],bool), list(int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 1],"int32"), tuple(int(2),int(1),), )
paddle.broadcast_to(Tensor([2, 2, 1],bool), list(int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 2, 1],"float32"), list(int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 2, 1],"float32"), list(int(3),int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 2, 4],"float32"), list(int(3),int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([2, 2],bool), list(int(1),int(2),int(2),), )
paddle.broadcast_to(Tensor([2, 2],bool), list(int(2),int(2),), )
paddle.broadcast_to(Tensor([2, 2],"float32"), tuple(int(2),int(2),), )
paddle.broadcast_to(Tensor([2, 2],"int64"), tuple(int(2),int(2),), )
paddle.broadcast_to(Tensor([2, 3, 4],"float64"), tuple(int(2),int(3),int(4),), )
paddle.broadcast_to(Tensor([2, 3],"float32"), tuple(int(2),int(3),), )
paddle.broadcast_to(Tensor([2, 3],"float64"), tuple(int(2),int(3),), )
paddle.broadcast_to(Tensor([2, 4],bool), list(int(2),int(2),int(4),), )
paddle.broadcast_to(Tensor([222, 333],"float64"), list(int(111),int(222),int(333),), )
paddle.broadcast_to(Tensor([3, 2, 5],"float32"), tuple(int(3),int(2),int(5),), )
paddle.broadcast_to(Tensor([3, 2],"int64"), tuple(int(3),int(2),), )
paddle.broadcast_to(Tensor([3, 3],"float32"), tuple(int(3),int(3),), )
paddle.broadcast_to(Tensor([3, 5],"float32"), tuple(int(3),int(5),), )
paddle.broadcast_to(Tensor([3, 5],"float64"), tuple(int(3),int(5),), )
paddle.broadcast_to(Tensor([30, 1],bool), list(int(30),int(3),), )
paddle.broadcast_to(Tensor([3],"float32"), tuple(int(3),), )
paddle.broadcast_to(Tensor([4, 1, 6],"int32"), tuple(int(4),int(1),int(6),), )
paddle.broadcast_to(Tensor([4, 1],"int32"), tuple(int(4),int(1),), )
paddle.broadcast_to(Tensor([4, 2],"float32"), list(int(4),int(2),), )
paddle.broadcast_to(Tensor([4, 2],"int64"), list(int(4),int(2),), )
paddle.broadcast_to(Tensor([4, 42],"float64"), tuple(int(4),int(42),), )
paddle.broadcast_to(Tensor([4, 7, 1],"int32"), tuple(int(4),int(7),int(1),), )
paddle.broadcast_to(Tensor([4, 7, 6],"float64"), tuple(int(4),int(7),int(6),), )
paddle.broadcast_to(Tensor([4, 7],"float32"), tuple(int(4),int(7),), )
paddle.broadcast_to(Tensor([4, 7],"float64"), tuple(int(4),int(7),), )
paddle.broadcast_to(Tensor([5, 1, 4],"int32"), tuple(int(5),int(1),int(4),), )
paddle.broadcast_to(Tensor([5, 12],"float64"), tuple(int(5),int(12),), )
paddle.broadcast_to(Tensor([5, 17, 0, 6],"float64"), list(int(5),int(17),int(0),int(6),), )
paddle.broadcast_to(Tensor([5, 17, 1, 6],"float64"), list(int(5),int(17),int(0),int(6),), )
paddle.broadcast_to(Tensor([5, 17, 6],"float64"), list(int(0),int(5),int(17),int(6),), )
paddle.broadcast_to(Tensor([5, 17, 6],"float64"), list(int(5),int(17),int(6),), )
paddle.broadcast_to(Tensor([5, 1],"int32"), tuple(int(5),int(1),), )
paddle.broadcast_to(Tensor([5, 3, 4],"float64"), tuple(int(5),int(3),int(4),), )
paddle.broadcast_to(Tensor([5, 5, 1],"int32"), tuple(int(5),int(5),int(1),), )
paddle.broadcast_to(Tensor([5, 5, 5],"float16"), tuple(int(5),int(5),int(5),), )
paddle.broadcast_to(Tensor([5, 5, 5],"float32"), tuple(int(5),int(5),int(5),), )
paddle.broadcast_to(Tensor([5, 5, 5],"float64"), tuple(int(5),int(5),int(5),), )
paddle.broadcast_to(Tensor([5, 6, 1],"int64"), tuple(int(5),int(6),int(1),), )
paddle.broadcast_to(Tensor([5, 6, 7],"float32"), tuple(int(5),int(6),int(7),), )
paddle.broadcast_to(Tensor([64, 1327104],"float32"), tuple(int(64),int(1327104),), )
paddle.broadcast_to(Tensor([64, 1327104],"int64"), tuple(int(64),int(1327104),), )
paddle.broadcast_to(Tensor([6],"float32"), list(int(9),int(6),), )
paddle.broadcast_to(Tensor([6],"float32"), tuple(int(6),), )
paddle.broadcast_to(Tensor([6],"int32"), list(int(6),), )
paddle.broadcast_to(Tensor([7, 1],"int32"), tuple(int(7),int(1),), )
paddle.broadcast_to(Tensor([7, 24],"float64"), tuple(int(7),int(24),), )
paddle.broadcast_to(Tensor([84],"float32"), list(int(120),int(84),), )
paddle.broadcast_to(Tensor([8],"float32"), tuple(int(8),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(1),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(1),int(3),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(100),int(1000),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(2),int(2),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(2),int(3),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(3),int(5),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(30),int(3),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(4),int(2),), )
paddle.broadcast_to(Tensor([],"float32"), list(int(4),int(5),int(6),), )
paddle.broadcast_to(Tensor([],"float32"), shape=list(), )
paddle.broadcast_to(Tensor([],"float32"), shape=list(int(1),), )
paddle.broadcast_to(Tensor([],"float32"), shape=list(int(1),int(1),), )
paddle.broadcast_to(Tensor([],"float32"), shape=list(int(3),int(3),), )
paddle.broadcast_to(Tensor([],"float32"), tuple(int(1),int(3),), )
paddle.broadcast_to(Tensor([],"float32"), tuple(int(10),int(10),int(1),int(10),), )
paddle.broadcast_to(Tensor([],"float32"), tuple(int(2),int(2),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(0),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(100),int(1000),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(2),int(200),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(3),int(4),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(3),int(5),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(3),int(6),int(4),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(4),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(5),), )
paddle.broadcast_to(Tensor([],"float64"), list(int(5),int(17),int(6),), )
paddle.broadcast_to(Tensor([],"int64"), list(), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), out_int32=bool(True), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), right=bool(True), )
paddle.ceil(Tensor([1, 3, 4],"float64"), )
paddle.ceil(Tensor([1, 3],"float64"), )
paddle.ceil(Tensor([1],"float32"), )
paddle.ceil(Tensor([1],"float64"), )
paddle.ceil(Tensor([2, 1],"float32"), )
paddle.ceil(Tensor([2, 3],"float32"), )
paddle.ceil(Tensor([32, 32, 128],"float32"), )
paddle.ceil(Tensor([4, 1, 6],"float64"), )
paddle.ceil(Tensor([4, 1],"float32"), )
paddle.ceil(Tensor([4, 1],"float64"), )
paddle.ceil(Tensor([4, 7, 1],"float64"), )
paddle.ceil(Tensor([5, 1, 4],"float64"), )
paddle.ceil(Tensor([5, 1],"float64"), )
paddle.ceil(Tensor([7, 1],"float64"), )
paddle.ceil(Tensor([],"float32"), )
paddle.chunk(Tensor([4, 6, 6],bool), chunks=int(3), axis=int(1), )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=int(3), axis=Tensor([1],"int32"), )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=int(3), axis=int(1), )
paddle.clip(Tensor([1, 2, 2],"float32"), min=float(-1.0), max=float(1.0), )
paddle.clip(Tensor([1, 2],"float32"), min=float(1.1754943508222875e-38), )
paddle.clip(Tensor([10, 2, 1],"float32"), min=float(1e-06), )
paddle.clip(Tensor([10, 2],"float32"), min=float(1e-06), )
paddle.clip(Tensor([10, 2],"float64"), min=float(1e-06), )
paddle.clip(Tensor([10],"float32"), min=int(0), )
paddle.clip(Tensor([128, 128],"float32"), int(-8), int(7), )
paddle.clip(Tensor([16, 256],"float16"), int(-127), int(127), )
paddle.clip(Tensor([16, 256],"float64"), int(-127), int(127), )
paddle.clip(Tensor([2, 2, 2],"float32"), min=float(-1.0), max=float(1.0), )
paddle.clip(Tensor([2, 2],"float32"), min=float(1.1754943508222875e-38), )
paddle.clip(Tensor([2, 4096],"float16"), int(-126), int(126), )
paddle.clip(Tensor([2, 8, 8],"float32"), float(0.0), float(1.0), )
paddle.clip(Tensor([28, 28],"float32"), float(0.0), float(1.0), )
paddle.clip(Tensor([2],"float32"), min=float(1.1754943508222875e-38), )
paddle.clip(Tensor([32, 256],"float16"), int(-127), int(127), )
paddle.clip(Tensor([4, 4],"float32"), int(-1), int(1), )
paddle.clip(Tensor([4, 4],"float64"), int(-1), int(1), )
paddle.clip(Tensor([5, 2],"float64"), min=float(0.0), )
paddle.clip(Tensor([5, 5],"float32"), int(-1), int(1), )
paddle.clip(Tensor([5, 5],"float64"), int(-1), int(1), )
paddle.clip(Tensor([5],"float64"), min=float(0.0), )
paddle.clip(Tensor([5],"float64"), min=int(0), )
paddle.clip(Tensor([8, 8],"float32"), float(0.0), float(1.0), )
paddle.clip(Tensor([90],"int64"), min=int(0), )
paddle.clip(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.clip(Tensor([],"float32"), int(-5), int(5), )
paddle.clip(Tensor([],"float32"), min=float(1.1920928955078125e-07), max=float(0.9999998807907104), )
paddle.clip(Tensor([],"float32"), min=int(0), )
paddle.clip(Tensor([],"float64"), min=int(0), )
paddle.clip(x=Tensor([10, 10],"float32"), min=float(-0.1), max=float(0.8), )
paddle.clip(x=Tensor([10, 10],"float32"), min=float(-0.6), max=float(0.6), )
paddle.clip(x=Tensor([100],"float32"), min=float(-0.1), max=float(0.1), )
paddle.clip(x=Tensor([16, 16],"float32"), min=float(-1.0), max=float(1.0), )
paddle.clip(x=Tensor([4, 8, 16],"float32"), min=float(0.0), max=float(0.0), )
paddle.clone(Tensor([1, 10000, 1],"float32"), )
paddle.clone(Tensor([1, 10000, 4],"float32"), )
paddle.clone(Tensor([1, 10000, 80],"float32"), )
paddle.clone(Tensor([1, 1024, 48, 72],"float32"), )
paddle.clone(Tensor([1, 12, 11, 16],"float32"), )
paddle.clone(Tensor([1, 12, 168, 256],"float32"), )
paddle.clone(Tensor([1, 12, 21, 32],"float32"), )
paddle.clone(Tensor([1, 12, 42, 64],"float32"), )
paddle.clone(Tensor([1, 12, 84, 128],"float32"), )
paddle.clone(Tensor([1, 192, 44, 44],"float32"), )
paddle.clone(Tensor([1, 192, 64, 64],"float32"), )
paddle.clone(Tensor([1, 2048, 24, 36],"float32"), )
paddle.clone(Tensor([1, 21504, 15],"float32"), )
paddle.clone(Tensor([1, 21504, 1],"float32"), )
paddle.clone(Tensor([1, 21504, 2],"float32"), )
paddle.clone(Tensor([1, 21504, 4],"float32"), )
paddle.clone(Tensor([1, 21504, 91],"float32"), )
paddle.clone(Tensor([1, 2500, 1],"float32"), )
paddle.clone(Tensor([1, 2500, 4],"float32"), )
paddle.clone(Tensor([1, 2500, 80],"float32"), )
paddle.clone(Tensor([1, 2541, 4],"float32"), )
paddle.clone(Tensor([1, 2541, 68],"float32"), )
paddle.clone(Tensor([1, 2541, 80],"float32"), )
paddle.clone(Tensor([1, 2541],bool), )
paddle.clone(Tensor([1, 256, 192, 288],"float32"), )
paddle.clone(Tensor([1, 3, 11, 16],"float32"), )
paddle.clone(Tensor([1, 3, 168, 256],"float32"), )
paddle.clone(Tensor([1, 3, 21, 32],"float32"), )
paddle.clone(Tensor([1, 3, 42, 64],"float32"), )
paddle.clone(Tensor([1, 3, 544, 736],"float32"), )
paddle.clone(Tensor([1, 3, 84, 128],"float32"), )
paddle.clone(Tensor([1, 384, 32, 32],"float32"), )
paddle.clone(Tensor([1, 512, 96, 144],"float32"), )
paddle.clone(Tensor([1, 625, 1],"float32"), )
paddle.clone(Tensor([1, 625, 4],"float32"), )
paddle.clone(Tensor([1, 625, 80],"float32"), )
paddle.clone(Tensor([1, 80, 44, 44],"float32"), )
paddle.clone(Tensor([1, 96, 128, 128],"float32"), )
paddle.clone(Tensor([10, 1280, 1, 1],"float32"), )
paddle.clone(Tensor([10, 2048, 10, 10],"float32"), )
paddle.clone(Tensor([10, 2048, 7, 7],"float32"), )
paddle.clone(Tensor([10, 32, 14, 14],"float32"), )
paddle.clone(Tensor([10, 32, 56, 56],"float32"), )
paddle.clone(Tensor([10, 320, 8, 8],"float32"), )
paddle.clone(Tensor([10, 36, 28, 28],"float32"), )
paddle.clone(Tensor([11, 1280, 7, 7],"float32"), )
paddle.clone(Tensor([11, 24, 56, 56],"float32"), )
paddle.clone(Tensor([12, 288, 192],"float32"), )
paddle.clone(Tensor([129024, 4],"float32"), )
paddle.clone(Tensor([12],"float32"), )
paddle.clone(Tensor([1],"float32"), )
paddle.clone(Tensor([2, 256, 28, 28],"float32"), )
paddle.clone(Tensor([2, 28, 28],"int32"), )
paddle.clone(Tensor([2016, 4],"float32"), )
paddle.clone(Tensor([22, 1024, 1, 1],"float32"), )
paddle.clone(Tensor([22, 1024, 14, 14],"float32"), )
paddle.clone(Tensor([22, 1056, 14, 14],"float32"), )
paddle.clone(Tensor([22, 128, 56, 56],"float32"), )
paddle.clone(Tensor([22, 144, 56, 56],"float32"), )
paddle.clone(Tensor([22, 196, 128],"float32"), )
paddle.clone(Tensor([22, 2048, 7, 7],"float32"), )
paddle.clone(Tensor([22, 288, 14, 14],"float32"), )
paddle.clone(Tensor([24, 8],"float32"), )
paddle.clone(Tensor([24],"float32"), )
paddle.clone(Tensor([2541, 2],"float32"), )
paddle.clone(Tensor([2],"float32"), )
paddle.clone(Tensor([2],"int32"), )
paddle.clone(Tensor([32256, 4],"float32"), )
paddle.clone(Tensor([4, 3, 384, 384],"float32"), )
paddle.clone(Tensor([43, 32, 112, 112],"float32"), )
paddle.clone(Tensor([512, 256, 7, 7],"float32"), )
paddle.clone(Tensor([528, 4],"float32"), )
paddle.clone(Tensor([6, 9216, 96],"float32"), )
paddle.clone(Tensor([8064, 4],"float32"), )
paddle.clone(Tensor([86, 192],"float32"), )
paddle.clone(Tensor([86, 704, 7, 7],"float32"), )
paddle.clone(Tensor([91],"float32"), )
paddle.clone(Tensor([],"float32"), )
paddle.column_stack(list(Tensor([1, 1, 1, 1],"float64"),), )
paddle.column_stack(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), )
paddle.column_stack(list(Tensor([1, 1, 1],"float64"),), )
paddle.column_stack(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), )
paddle.column_stack(list(Tensor([1, 1],"float64"),), )
paddle.column_stack(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), )
paddle.column_stack(list(Tensor([1],"float64"),), )
paddle.column_stack(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.column_stack(list(Tensor([2],"float64"),Tensor([2, 1],"float64"),), )
paddle.column_stack(list(Tensor([3, 2],"float64"),), )
paddle.column_stack(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), )
paddle.column_stack(list(Tensor([3, 4, 2, 5],"float64"),), )
paddle.column_stack(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), )
paddle.column_stack(list(Tensor([3, 4, 2],"float64"),), )
paddle.column_stack(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), )
paddle.column_stack(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), )
paddle.column_stack(list(Tensor([],"float16"),), )
paddle.column_stack(list(Tensor([],"float32"),), )
paddle.column_stack(list(Tensor([],"float64"),), )
paddle.column_stack(list(Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),), )
paddle.column_stack(list(Tensor([],"int32"),), )
paddle.column_stack(list(Tensor([],"int64"),), )
paddle.combinations(Tensor([0],"float32"), r=int(2), )
paddle.combinations(Tensor([0],"float32"), r=int(2), with_replacement=bool(True), )
paddle.combinations(Tensor([10],"float64"), int(5), bool(False), )
paddle.combinations(Tensor([10],"int32"), int(1), bool(True), )
paddle.combinations(Tensor([10],"int64"), int(0), bool(True), )
paddle.combinations(Tensor([3],"float32"), r=int(4), )
paddle.complex(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.complex(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.complex(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.complex(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.complex(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.complex(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.complex(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.complex(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([],"float32"), Tensor([],"float32"), )
paddle.concat(list(Tensor([0],"int64"),Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.concat(list(Tensor([1, 1, 1, 1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1, 1, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1, 1, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float16"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float32"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"int32"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 1],"int64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 1, 2],"float32"),Tensor([1, 1, 2],"float32"),), axis=int(-2), )
paddle.concat(list(Tensor([1, 10, 5],"float32"),Tensor([1, 10, 5],"float32"),), )
paddle.concat(list(Tensor([1, 12, 10, 10],"float32"),Tensor([1, 12, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 128, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 128, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 160, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 160, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 192, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 192, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 1],"float16"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1],"float16"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1],"float32"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1],"float32"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1],"int32"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1],"int32"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1],"int64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 1],"int64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([1, 1],"int64"),Tensor([1, 2],"int64"),), axis=int(1), )
paddle.concat(list(Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 2, 8, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([1, 224, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 224, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 24, 5, 5],"float32"),Tensor([1, 24, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 256, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 256, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 288, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 288, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),), )
paddle.concat(list(Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),), axis=int(-2), )
paddle.concat(list(Tensor([1, 2],"float64"),Tensor([1, 2],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 2],"int64"),Tensor([1, 2],"int64"),), )
paddle.concat(list(Tensor([1, 3, 256, 256],"float32"),Tensor([1, 10, 256, 256],"float32"),), int(1), )
paddle.concat(list(Tensor([1, 3, 32, 32],"float32"),Tensor([1, 10, 32, 32],"float32"),), int(1), )
paddle.concat(list(Tensor([1, 320, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 320, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 352, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 352, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 384, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 384, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),), int(0), )
paddle.concat(list(Tensor([1, 4, 8, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([1, 416, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 416, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 448, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 448, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 48, 3, 3],"float32"),Tensor([1, 48, 3, 3],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 480, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 480, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([1, 512, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 512, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 544, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 544, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 576, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 576, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 5],"float64"),Tensor([1, 5],"float64"),Tensor([1, 5],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1, 608, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 608, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 64, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 640, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 640, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 672, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 672, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 704, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 704, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 736, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 736, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 768, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 768, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 800, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 800, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 832, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 832, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 864, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 864, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 896, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 896, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 928, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 928, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 96, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 960, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 960, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 992, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1, 992, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([10, 2],"float32"),Tensor([10, 2],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([100, 200],"float32"),Tensor([100, 200],"float32"),), )
paddle.concat(list(Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),), )
paddle.concat(list(Tensor([11, 20],"float32"),Tensor([11, 20],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([12, 4, 8],"float64"),Tensor([12, 4, 8],"float64"),), int(-1), )
paddle.concat(list(Tensor([128, 256],"float32"),Tensor([128, 256],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([128, 64],"float32"),Tensor([128, 64],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([1],"float16"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([1],"float32"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.concat(list(Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.concat(list(Tensor([1],"float32"),Tensor([2],"float32"),), )
paddle.concat(list(Tensor([1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"float64"),Tensor([2],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"int32"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"int64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([1],"int64"),Tensor([1],"int64"),Tensor([1],"int64"),), axis=int(0), )
paddle.concat(list(Tensor([2, 1, 2],"float32"),Tensor([2, 1, 2],"float32"),), axis=int(-2), )
paddle.concat(list(Tensor([2, 1, 8, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 10, 5],"float32"),Tensor([2, 10, 5],"float32"),), )
paddle.concat(list(Tensor([2, 1008, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1024, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1024, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1088, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1088, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1104, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1104, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 112, 28, 28],"float32"),Tensor([2, 112, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1120, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1120, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 116, 14, 14],"float32"),Tensor([2, 116, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1184, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1184, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 12, 28, 28],"float32"),Tensor([2, 12, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1200, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1200, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1216, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1216, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 26, 26],"float32"),Tensor([2, 128, 26, 26],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 54, 54],"float32"),Tensor([2, 128, 54, 54],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 128, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1280, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1280, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1296, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1296, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),), axis=int(1), )
paddle.concat(list(Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1312, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1312, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1376, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1376, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1392, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1392, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1408, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1408, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 144, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1472, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1472, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1488, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1488, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1504, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1504, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1568, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1568, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1584, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1584, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 16, 28, 28],"float32"),Tensor([2, 16, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 160, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 160, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1600, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1600, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1664, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1664, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1680, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1680, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1696, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1696, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 176, 14, 14],"float32"),Tensor([2, 176, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1760, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1760, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1776, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1776, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1792, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1792, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1856, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1856, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1872, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1872, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1888, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1888, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 13, 13],"float32"),Tensor([2, 192, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 26, 26],"float32"),Tensor([2, 192, 26, 26],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 192, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1952, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1952, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1968, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1968, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1984, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1984, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([2, 1],"int64"),Tensor([2, 2],"int64"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2, 8, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([2, 20, 20],"float16"),Tensor([2, 20, 20],"float16"),), )
paddle.concat(list(Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2048, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2048, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2064, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2064, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2080, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2080, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2112, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2144, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2144, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2160, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2176, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2176, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2208, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2208, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 224, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 224, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2240, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2240, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2272, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2272, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2304, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 232, 7, 7],"float32"),Tensor([2, 232, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2336, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2368, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 24, 14, 14],"float32"),Tensor([2, 24, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 24, 28, 28],"float32"),Tensor([2, 24, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 240, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 240, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2400, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2432, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 244, 14, 14],"float32"),Tensor([2, 244, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2464, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2496, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2528, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 12, 12],"float32"),Tensor([2, 256, 12, 12],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 26, 26],"float32"),Tensor([2, 256, 26, 26],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2560, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2592, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2624, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2656, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 288, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 288, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 288, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 288, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),), )
paddle.concat(list(Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 32, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 32, 32, 128],"float16"),Tensor([2, 32, 1, 128],"float16"),), axis=int(2), )
paddle.concat(list(Tensor([2, 320, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 320, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 336, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 336, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 352, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 352, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 352, 7, 7],"float32"),Tensor([2, 352, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 5, 5],"float32"),Tensor([2, 384, 5, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),), axis=int(1), )
paddle.concat(list(Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),), )
paddle.concat(list(Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),), axis=int(1), )
paddle.concat(list(Tensor([2, 4, 8, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([2, 416, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 416, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 432, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 432, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 448, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 448, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 48, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 48, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 480, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 480, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 480, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 480, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 488, 7, 7],"float32"),Tensor([2, 488, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 512, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 512, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 528, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 528, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 544, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 544, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 576, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 576, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 576, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 576, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 58, 28, 28],"float32"),Tensor([2, 58, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 5],"float32"),Tensor([2, 3],"float32"),Tensor([2, 5],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 608, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 608, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 624, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 624, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 54, 54],"float32"),Tensor([2, 64, 54, 54],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 55, 55],"float32"),Tensor([2, 64, 55, 55],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 64, 7, 7],"float32"),Tensor([2, 64, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 640, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 640, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 66],"float32"),Tensor([2, 66],"float32"),Tensor([2, 66],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 672, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 672, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 672, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 672, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 704, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 704, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 720, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 720, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 736, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 736, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 768, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 768, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 768, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),), axis=int(2), )
paddle.concat(list(Tensor([2, 800, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 800, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 816, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 832, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 832, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 864, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 864, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 864, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 88, 28, 28],"float32"),Tensor([2, 88, 28, 28],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 896, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 896, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 912, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 928, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 928, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 96, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 96, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 96, 7, 7],"float32"),Tensor([2, 96, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 960, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 960, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 960, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 992, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2, 992, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([2048, 64],"float32"),Tensor([2048, 64],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([24],"float64"),Tensor([24],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([2],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([2],"float64"),Tensor([2],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([2],"int64"),Tensor([2],"int64"),), axis=int(0), )
paddle.concat(list(Tensor([2],"int64"),Tensor([2],"int64"),), int(-1), )
paddle.concat(list(Tensor([3, 100, 120],"float64"),Tensor([3, 100, 120],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([3, 2, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([3, 2],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([3, 2],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([3, 4, 2, 5],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([3, 4, 2, 5],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([3, 4, 2, 5],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([3, 4, 2],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([3, 4, 2],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([3, 4, 2],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), axis=int(2), name=None, )
paddle.concat(list(Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),), )
paddle.concat(list(Tensor([34, 13],"float32"),Tensor([34, 13],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([3],"float32"),Tensor([3],"float32"),Tensor([3],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([4, 101],"float16"),Tensor([4, 101],"float16"),), axis=int(-1), )
paddle.concat(list(Tensor([4, 101],"float32"),Tensor([4, 101],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([4, 101],"float64"),Tensor([4, 101],"float64"),), axis=int(-1), )
paddle.concat(list(Tensor([4, 10],"float32"),), int(1), )
paddle.concat(list(Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),), int(1), )
paddle.concat(list(Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),), int(1), )
paddle.concat(list(Tensor([4, 12, 32],"float64"),Tensor([4, 12, 32],"float64"),), int(-1), )
paddle.concat(list(Tensor([4, 12, 8],"float64"),Tensor([4, 12, 8],"float64"),), int(-1), )
paddle.concat(list(Tensor([4, 128, 76, 76],"float32"),Tensor([4, 256, 76, 76],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([4, 20, 20],"float16"),Tensor([4, 20, 20],"float16"),), )
paddle.concat(list(Tensor([4, 256, 38, 38],"float32"),Tensor([4, 512, 38, 38],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([4, 5, 20],"float32"),Tensor([4, 5, 20],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([40, 50, 50, 5],"float32"),Tensor([60, 50, 50, 5],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([4098, 4098],"float32"),Tensor([4098, 4098],"float32"),), )
paddle.concat(list(Tensor([4],"float32"),Tensor([4],"float32"),Tensor([4],"float32"),Tensor([4],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([4],"float64"),Tensor([4],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([5, 1],"float64"),Tensor([5, 1],"float64"),Tensor([5, 1],"float64"),), axis=int(1), name=None, )
paddle.concat(list(Tensor([5, 2, 2],"float32"),Tensor([5, 2, 2],"float32"),), axis=int(2), )
paddle.concat(list(Tensor([5, 2, 4],"float32"),Tensor([5, 2, 4],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([5, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([5, 2],"float32"),Tensor([5, 2],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),), axis=int(1), )
paddle.concat(list(Tensor([5, 50, 50],"float32"),Tensor([10, 50, 50],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), axis=int(0), name=None, )
paddle.concat(list(Tensor([64, 96],"float32"),Tensor([64, 96],"float32"),), int(0), )
paddle.concat(list(Tensor([6],"float32"),), )
paddle.concat(list(Tensor([6],"float32"),Tensor([36],"float32"),Tensor([10],"float32"),), )
paddle.concat(list(Tensor([6],"float32"),Tensor([6],"float32"),), )
paddle.concat(list(Tensor([6],"float32"),Tensor([9],"float32"),), )
paddle.concat(list(Tensor([6],"float64"),Tensor([6],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([8, 100],"float16"),Tensor([8, 100],"float16"),), axis=int(-1), )
paddle.concat(list(Tensor([8, 100],"float32"),Tensor([8, 100],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([8, 100],"float64"),Tensor([8, 100],"float64"),), axis=int(-1), )
paddle.concat(list(Tensor([8, 16, 128, 64],"float32"),Tensor([8, 16, 1, 64],"float32"),), axis=int(-2), )
paddle.concat(list(Tensor([8, 16, 2],"float32"),Tensor([8, 16, 2],"float32"),), axis=int(-1), )
paddle.concat(list(Tensor([80],"float32"),Tensor([8],"float32"),Tensor([80],"float32"),Tensor([10],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),Tensor([200],"float32"),), )
paddle.concat(list(Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),), axis=int(0), )
paddle.concat(list(Tensor([8],"float64"),Tensor([8],"float64"),), axis=int(0), )
paddle.concat(list(Tensor([8],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),), axis=int(0), )
paddle.concat(tuple(Tensor([1, 3, 28, 28],"float32"),Tensor([1, 1, 28, 28],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 280, 350],"float32"),Tensor([1, 1, 280, 350],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 314, 378],"float32"),Tensor([1, 1, 314, 378],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 32, 26],"float32"),Tensor([1, 1, 32, 26],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 400, 300],"float32"),Tensor([1, 1, 400, 300],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 426, 446],"float32"),Tensor([1, 1, 426, 446],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 494, 450],"float32"),Tensor([1, 1, 494, 450],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 494, 452],"float32"),Tensor([1, 1, 494, 452],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 64, 64],"float32"),Tensor([1, 1, 64, 64],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([1, 3, 8, 8],"float32"),Tensor([1, 1, 8, 8],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([12],"float64"),Tensor([12],"float64"),), )
paddle.concat(tuple(Tensor([1],"float32"),), )
paddle.concat(tuple(Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.concat(tuple(Tensor([2, 12],"float64"),), int(1), )
paddle.concat(tuple(Tensor([2, 2],"float32"),Tensor([2, 1],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([2, 3, 32, 32],"float32"),Tensor([2, 3, 32, 32],"float32"),), int(1), )
paddle.concat(tuple(Tensor([2, 3, 4, 4],"float32"),Tensor([2, 1, 4, 4],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([2, 3, 8, 8],"float32"),Tensor([2, 1, 8, 8],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([2, 3],"float64"),), int(1), )
paddle.concat(tuple(Tensor([24],"float64"),), )
paddle.concat(tuple(Tensor([2],"float32"),Tensor([2],"float32"),), )
paddle.concat(tuple(Tensor([2],"float64"),), )
paddle.concat(tuple(Tensor([3, 3],"float32"),), int(1), )
paddle.concat(tuple(Tensor([3],"float32"),), )
paddle.concat(tuple(Tensor([3],"float64"),Tensor([3],"float64"),), )
paddle.concat(tuple(Tensor([4, 1],"float32"),Tensor([4, 1],"float32"),Tensor([4, 1],"float32"),), axis=int(1), )
paddle.concat(tuple(Tensor([4],"float32"),), )
paddle.concat(tuple(Tensor([4],"float32"),Tensor([4],"float32"),), )
paddle.concat(tuple(Tensor([4],"float64"),), )
paddle.concat(tuple(Tensor([4],"float64"),Tensor([4],"float64"),), )
paddle.concat(tuple(Tensor([5, 1],"float32"),), int(1), )
paddle.concat(tuple(Tensor([5, 2],"float32"),), int(1), )
paddle.concat(tuple(Tensor([5, 2],"float32"),Tensor([5, 2],"float32"),), int(1), )
paddle.concat(tuple(Tensor([5, 4],"float32"),), int(1), )
paddle.concat(tuple(Tensor([60],"float16"),Tensor([60],"float16"),), )
paddle.concat(tuple(Tensor([60],"float32"),Tensor([60],"float32"),), )
paddle.concat(tuple(Tensor([6],"float64"),), )
paddle.concat(tuple(Tensor([8],"float32"),), )
paddle.concat(x=list(Tensor([1, 3],"float32"),Tensor([1, 3],"float32"),), axis=int(0), )
paddle.concat(x=list(Tensor([1, 8, 14, 12],"float32"),Tensor([1, 8, 14, 12],"float32"),), axis=int(0), )
paddle.conj(Tensor([2, 20, 2, 3],"complex128"), )
paddle.conj(Tensor([2, 20, 2, 3],"complex64"), )
paddle.conj(Tensor([2, 20, 2, 3],"float32"), )
paddle.conj(Tensor([2, 20, 2, 3],"float64"), )
paddle.conj(Tensor([],"complex64"), )
paddle.copysign(Tensor([0, 0],"float64"), Tensor([0, 0],"float64"), )
paddle.copysign(Tensor([0, 5, 10],"float64"), Tensor([0, 5, 10],"float64"), )
paddle.copysign(Tensor([10, 20],bool), Tensor([10, 20],bool), )
paddle.copysign(Tensor([10, 20],"float16"), Tensor([10, 20],"float16"), )
paddle.copysign(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.copysign(Tensor([10, 20],"float32"), Tensor([],"float32"), )
paddle.copysign(Tensor([10, 20],"float32"), float(-3.0), )
paddle.copysign(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), )
paddle.copysign(Tensor([10, 20],"int16"), Tensor([10, 20],"int16"), )
paddle.copysign(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.copysign(Tensor([10, 20],"int64"), Tensor([10, 20],"int64"), )
paddle.copysign(Tensor([10, 20],"int8"), Tensor([10, 20],"int8"), )
paddle.copysign(Tensor([10, 20],uint8), Tensor([10, 20],uint8), )
paddle.copysign(Tensor([11, 17, 10],"int16"), Tensor([11, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 10],"int32"), Tensor([11, 17, 10],"int32"), )
paddle.copysign(Tensor([11, 17],"float32"), Tensor([11, 17],"float32"), )
paddle.copysign(Tensor([132],"int64"), Tensor([132],"int64"), )
paddle.copysign(Tensor([132],uint8), Tensor([132],uint8), )
paddle.copysign(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 5],"int8"), Tensor([2, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([20, 6],"float64"), Tensor([20, 6],"float64"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([4, 5],"float16"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.copysign(Tensor([4, 5],"float16"), Tensor([3, 4, 5],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.cos(Tensor([10, 20, 1],"float32"), )
paddle.cos(Tensor([2, 3, 4],"float32"), )
paddle.cos(Tensor([2, 3],"float32"), )
paddle.cos(Tensor([2049],"float32"), )
paddle.cos(Tensor([2],"float32"), )
paddle.cos(Tensor([2],"float64"), )
paddle.cos(Tensor([40, 64],"float32"), )
paddle.cos(Tensor([41],"float32"), )
paddle.cos(Tensor([513],"float32"), )
paddle.cos(Tensor([64, 64],"float32"), )
paddle.cos(Tensor([65],"float32"), )
paddle.cos(Tensor([],"float32"), )
paddle.cosh(Tensor([10, 20, 1],"float32"), )
paddle.cosh(Tensor([2, 3],"float32"), )
paddle.cosh(Tensor([],"float32"), )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list(int(1),int(3),), keepdim=bool(False), name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list(int(1),int(3),), keepdim=bool(True), name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=bool(False), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=bool(True), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=int(-1), keepdim=bool(False), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=int(2), keepdim=bool(True), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=list(int(0),int(1),int(2),int(3),), keepdim=bool(False), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=list(int(0),int(2),), keepdim=bool(False), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=tuple(int(0),int(1),int(3),), keepdim=bool(False), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.cross(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), axis=int(1), )
paddle.cross(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.cross(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), axis=int(1), )
paddle.cumprod(Tensor([1, 2, 2],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([10, 20, 1],"float32"), int(-1), dtype=str(float32), )
paddle.cumprod(Tensor([2, 2, 2],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([2, 3, 10, 10],"float64"), int(1), )
paddle.cumprod(Tensor([5, 1],"complex128"), dim=int(-1), )
paddle.cumprod(Tensor([5, 1],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([5, 2],"complex128"), dim=int(-1), )
paddle.cumprod(Tensor([5, 2],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([5, 3],"complex128"), dim=int(-1), )
paddle.cumprod(Tensor([5, 3],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([5, 4],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([5, 5],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([5, 6],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([5, 7],"float32"), dim=int(-1), )
paddle.cumprod(Tensor([],"float32"), int(0), )
paddle.cumsum(Tensor([1, 3],"float32"), axis=int(0), )
paddle.cumsum(Tensor([10, 12],"float16"), dtype=str(float16), )
paddle.cumsum(Tensor([10, 12],"float32"), dtype=str(float32), )
paddle.cumsum(Tensor([10, 20, 1],"float32"), dtype=str(float32), )
paddle.cumsum(Tensor([2, 128],"int64"), axis=int(-1), )
paddle.cumsum(Tensor([2, 2],"float32"), axis=int(1), )
paddle.cumsum(Tensor([2, 2],"float64"), axis=int(1), )
paddle.cumsum(Tensor([2, 3],"float32"), int(1), )
paddle.cumsum(Tensor([200],"float32"), dtype=str(float32), )
paddle.cumsum(Tensor([3, 2, 4],"float32"), axis=int(1), )
paddle.cumsum(Tensor([3, 4],"int64"), )
paddle.cumsum(Tensor([3, 4],"int64"), axis=int(-1), )
paddle.cumsum(Tensor([3, 4],"int64"), axis=int(-2), )
paddle.cumsum(Tensor([3, 4],"int64"), axis=int(0), )
paddle.cumsum(Tensor([3, 4],"int64"), dtype=str(float64), )
paddle.cumsum(Tensor([4, 3],"float16"), axis=int(1), )
paddle.cumsum(Tensor([4],"int32"), )
paddle.cumsum(Tensor([5, 6],"float64"), axis=Tensor([1],"int32"), )
paddle.cumsum(Tensor([5],"int32"), )
paddle.cumsum(Tensor([],"float32"), )
paddle.cumsum(Tensor([],"float32"), axis=int(-1), )
paddle.cumsum(Tensor([],"float32"), axis=int(0), )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=None, axis=int(-1), )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=int(-1), )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=int(0), )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=int(-1), )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float64"), x=None, dx=None, axis=int(-1), )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=int(-1), )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"int64"), axis=int(1), )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=int(1), )
paddle.cumulative_trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([4, 4],"float16"), )
paddle.deg2rad(Tensor([1],"int64"), )
paddle.deg2rad(Tensor([6],"float32"), )
paddle.deg2rad(Tensor([8, 16, 32],"float32"), )
paddle.deg2rad(Tensor([],"float32"), )
paddle.diag(Tensor([10, 10],"float32"), )
paddle.diag(Tensor([10, 10],"float32"), offset=int(-1), )
paddle.diag(Tensor([10, 10],"float32"), offset=int(1), )
paddle.diag(Tensor([100],"float64"), padding_value=int(8), )
paddle.diag(Tensor([100],"int64"), padding_value=float(8.0), )
paddle.diag(Tensor([100],"int64"), padding_value=int(-8), )
paddle.diag(Tensor([1],"float64"), )
paddle.diag(Tensor([2000, 1500],"float32"), offset=int(-1), )
paddle.diag(Tensor([2000, 2000],"float32"), )
paddle.diag(Tensor([2000, 2000],"float32"), offset=int(-1), )
paddle.diag(Tensor([2000, 2000],"float32"), offset=int(1), )
paddle.diag(Tensor([2000],"float32"), )
paddle.diag(Tensor([2000],"float32"), offset=int(-1), )
paddle.diag(Tensor([2000],"float32"), offset=int(1), )
paddle.diag(Tensor([2],"float64"), )
paddle.diag(Tensor([3],"float64"), )
paddle.diag(Tensor([4, 4],"float32"), )
paddle.diag(Tensor([4, 4],"float64"), )
paddle.diag(Tensor([5, 5],"float32"), )
paddle.diag(Tensor([5, 5],"float64"), )
paddle.diag(Tensor([5],"float64"), )
paddle.diag_embed(Tensor([1, 12],"float64"), )
paddle.diag_embed(Tensor([1, 2],"float32"), )
paddle.diag_embed(Tensor([1, 2],"float64"), )
paddle.diag_embed(Tensor([1, 4],"float64"), )
paddle.diag_embed(Tensor([1, 6],"float64"), )
paddle.diag_embed(Tensor([1, 8],"float64"), )
paddle.diag_embed(Tensor([12],"float64"), )
paddle.diag_embed(Tensor([2, 2],"float32"), )
paddle.diag_embed(Tensor([2, 3, 12],"float64"), )
paddle.diag_embed(Tensor([2, 3, 2],"float64"), )
paddle.diag_embed(Tensor([2, 3, 4],"float64"), )
paddle.diag_embed(Tensor([2, 3, 6],"float64"), )
paddle.diag_embed(Tensor([2, 3, 8],"float64"), )
paddle.diag_embed(Tensor([2],"float32"), )
paddle.diag_embed(Tensor([2],"float64"), )
paddle.diag_embed(Tensor([3, 12],"float64"), )
paddle.diag_embed(Tensor([3, 2],"float64"), )
paddle.diag_embed(Tensor([3, 4],"float64"), )
paddle.diag_embed(Tensor([3, 6],"float64"), )
paddle.diag_embed(Tensor([3, 8],"float64"), )
paddle.diag_embed(Tensor([4],"float64"), )
paddle.diag_embed(Tensor([6],"float64"), )
paddle.diag_embed(Tensor([8],"float64"), )
paddle.diagflat(Tensor([10, 10],"float64"), )
paddle.diagflat(Tensor([10, 10],"float64"), offset=int(-1), )
paddle.diagflat(Tensor([10, 10],"float64"), offset=int(1), )
paddle.diagflat(Tensor([20],"float64"), )
paddle.diagflat(Tensor([20],"float64"), offset=int(-1), )
paddle.diagflat(Tensor([20],"float64"), offset=int(1), )
paddle.diagflat(Tensor([],"float32"), int(-1), )
paddle.diagflat(Tensor([],"float32"), int(0), )
paddle.diagflat(Tensor([],"float32"), int(1), )
paddle.diagonal(Tensor([1, 2, 2],"float32"), offset=int(0), axis1=int(-1), axis2=int(-2), )
paddle.diagonal(Tensor([10, 3, 4],"float32"), )
paddle.diagonal(Tensor([10, 3, 4],"float32"), offset=int(0), axis1=int(1), axis2=int(2), )
paddle.diagonal(Tensor([10, 3, 4],"float32"), offset=int(0), axis1=int(2), axis2=int(1), )
paddle.diagonal(Tensor([10, 3, 4],"float32"), offset=int(1), axis1=int(0), axis2=int(1), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), offset=int(0), axis1=int(1), axis2=int(2), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), offset=int(0), axis1=int(2), axis2=int(1), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), offset=int(1), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],bool), Tensor([10],bool), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"complex128"), Tensor([10],"complex128"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"complex64"), Tensor([10],"complex64"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"float16"), Tensor([10],"float16"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([10],"float32"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([10],"float32"), offset=int(0), axis1=int(1), axis2=int(0), )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([8],"float32"), offset=int(-2), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([9],"float32"), offset=int(1), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"float64"), Tensor([10],"float64"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"int16"), Tensor([10],"int16"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"int32"), Tensor([10],"int32"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"int64"), Tensor([10],"int64"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],"int8"), Tensor([10],"int8"), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diagonal_scatter(Tensor([10, 10],uint8), Tensor([10],uint8), offset=int(0), axis1=int(0), axis2=int(1), )
paddle.diff(Tensor([10, 10],"float32"), n=int(1), axis=int(-1), prepend=None, append=None, )
paddle.diff(Tensor([2, 3],"float32"), axis=int(1), )
paddle.diff(Tensor([2, 3],"float64"), axis=int(1), )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(-1), prepend=None, append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(-1), prepend=Tensor([2, 2],"float32"), append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(-1), prepend=Tensor([2, 3],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(0), prepend=None, append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(0), prepend=None, append=Tensor([1, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(0), prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(1), axis=int(0), prepend=Tensor([3, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(-1), prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(-1), prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(-1), prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(0), prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(0), prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(0), prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=int(2), axis=int(1), prepend=None, append=None, )
paddle.diff(Tensor([3],"float32"), )
paddle.diff(Tensor([4, 4],"float16"), axis=int(1), )
paddle.diff(Tensor([4],"float32"), n=int(1), axis=int(-1), prepend=None, append=None, )
paddle.diff(Tensor([4],"float32"), n=int(2), axis=int(0), prepend=None, append=None, )
paddle.diff(Tensor([6],bool), n=int(1), axis=int(-1), prepend=None, append=None, )
paddle.digamma(Tensor([1, 2, 2],"float32"), )
paddle.digamma(Tensor([1, 2],"float32"), )
paddle.digamma(Tensor([10, 10, 10, 2],"float64"), )
paddle.digamma(Tensor([10, 10, 10],"float64"), )
paddle.digamma(Tensor([10, 20, 1],"float32"), )
paddle.digamma(Tensor([2, 5, 2],"float64"), )
paddle.digamma(Tensor([2, 5],"float64"), )
paddle.digamma(Tensor([2],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 32],"float64"), )
paddle.digamma(Tensor([89],"float64"), )
paddle.digamma(Tensor([],"float32"), )
paddle.digamma(Tensor([],"float64"), )
paddle.dist(Tensor([2, 2, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), int(2), )
paddle.dist(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), int(0), )
paddle.dist(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.dot(Tensor([0, 0],"float32"), Tensor([0, 0],"float32"), )
paddle.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.dot(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.dsplit(Tensor([4, 2, 6],bool), int(3), )
paddle.dsplit(Tensor([4, 2, 6],"float16"), int(3), )
paddle.dsplit(Tensor([4, 2, 6],"float32"), int(3), )
paddle.dsplit(Tensor([4, 2, 6],"float64"), int(3), )
paddle.dsplit(Tensor([4, 2, 6],"int32"), int(3), )
paddle.dsplit(Tensor([4, 2, 6],"int64"), int(3), )
paddle.dsplit(Tensor([4, 2, 6],uint8), int(3), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), int(2), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), int(3), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list(int(-1),), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list(int(-1),int(1),int(3),), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list(int(2),int(4),), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), tuple(int(2),int(1),int(3),), )
paddle.dstack(list(Tensor([1, 1, 1, 1],"float64"),), )
paddle.dstack(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), )
paddle.dstack(list(Tensor([1, 1, 1],"float64"),), )
paddle.dstack(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), )
paddle.dstack(list(Tensor([1, 1],"float64"),), )
paddle.dstack(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), )
paddle.dstack(list(Tensor([1],"float64"),), )
paddle.dstack(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.dstack(list(Tensor([2],"float64"),Tensor([1, 2, 1],"float64"),), )
paddle.dstack(list(Tensor([2],"float64"),Tensor([1, 2],"float64"),), )
paddle.dstack(list(Tensor([3, 2],"float64"),), )
paddle.dstack(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), )
paddle.dstack(list(Tensor([3, 4, 2, 5],"float64"),), )
paddle.dstack(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), )
paddle.dstack(list(Tensor([3, 4, 2],"float64"),), )
paddle.dstack(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), )
paddle.dstack(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), )
paddle.dstack(list(Tensor([],"float16"),), )
paddle.dstack(list(Tensor([],"float32"),), )
paddle.dstack(list(Tensor([],"float64"),), )
paddle.dstack(list(Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),), )
paddle.dstack(list(Tensor([],"int32"),), )
paddle.dstack(list(Tensor([],"int64"),), )
paddle.empty_like(Tensor([1, 10, 5],"float32"), )
paddle.empty_like(Tensor([10, 1000],bfloat16), )
paddle.empty_like(Tensor([10, 1000],bool), )
paddle.empty_like(Tensor([10, 1000],"float16"), )
paddle.empty_like(Tensor([10, 1000],"float32"), )
paddle.empty_like(Tensor([10, 1000],"float64"), )
paddle.empty_like(Tensor([10, 1000],"int32"), )
paddle.empty_like(Tensor([10, 1000],"int64"), )
paddle.empty_like(Tensor([10, 1000],"int8"), )
paddle.empty_like(Tensor([10, 1000],uint8), )
paddle.empty_like(Tensor([100, 200],"float32"), )
paddle.empty_like(Tensor([11, 20],"float32"), )
paddle.empty_like(Tensor([16, 128],"float64"), )
paddle.empty_like(Tensor([16, 16, 128],"float64"), )
paddle.empty_like(Tensor([180142],uint8), )
paddle.empty_like(Tensor([2, 10, 5],"float32"), )
paddle.empty_like(Tensor([2, 20, 20],"float16"), )
paddle.empty_like(Tensor([2, 2],"float32"), )
paddle.empty_like(Tensor([200, 200],"float32"), )
paddle.empty_like(Tensor([256, 128],"float64"), )
paddle.empty_like(Tensor([2],"int64"), )
paddle.empty_like(Tensor([34, 13],"float32"), )
paddle.empty_like(Tensor([4, 20, 20],"float16"), )
paddle.empty_like(Tensor([4, 5, 20],"float32"), )
paddle.empty_like(Tensor([50, 200],"float32"), )
paddle.empty_like(Tensor([8, 16, 2],"float32"), )
paddle.empty_like(Tensor([],"float16"), )
paddle.empty_like(Tensor([],"float32"), )
paddle.empty_like(Tensor([],"int64"), )
paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.equal(Tensor([10, 20],"int32"), int(0), )
paddle.equal(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.equal(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([1],"int64"), int(0), )
paddle.equal(Tensor([1],"int64"), int(10), )
paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.equal(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.equal(Tensor([2, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.equal(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.equal(Tensor([28, 28],"float32"), Tensor([28, 28],"float32"), )
paddle.equal(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.equal(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.equal(Tensor([4],"int64"), bool(True), )
paddle.equal(Tensor([4],"int64"), float(1.0), )
paddle.equal(Tensor([4],"int64"), int(1), )
paddle.equal(Tensor([64],"int64"), Tensor([],"int64"), )
paddle.equal(Tensor([6],"int32"), int(0), )
paddle.equal(Tensor([8, 4],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.equal(Tensor([],"float32"), float(2.0), )
paddle.equal(Tensor([],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([],"int64"), int(0), )
paddle.equal(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.erf(Tensor([11, 17],"float64"), )
paddle.erf(Tensor([],"float32"), )
paddle.erfinv(Tensor([5],"float32"), )
paddle.erfinv(Tensor([],"float32"), )
paddle.exp(Tensor([1, 2, 3, 4],"float32"), )
paddle.exp(Tensor([1, 2, 3, 4],"float64"), )
paddle.exp(Tensor([1, 2, 3],"float32"), )
paddle.exp(Tensor([10, 10, 10],"float64"), )
paddle.exp(Tensor([10, 200, 300],"float32"), )
paddle.exp(Tensor([10, 200, 300],"int32"), )
paddle.exp(Tensor([10, 200, 300],"int64"), )
paddle.exp(Tensor([10, 20],"float64"), )
paddle.exp(Tensor([10, 2],bfloat16), )
paddle.exp(Tensor([10, 2],"float16"), )
paddle.exp(Tensor([10, 2],"float32"), )
paddle.exp(Tensor([10, 2],"float64"), )
paddle.exp(Tensor([10, 3],"float32"), )
paddle.exp(Tensor([10, 3],"float64"), )
paddle.exp(Tensor([1000, 2],"float64"), )
paddle.exp(Tensor([1000],"float32"), )
paddle.exp(Tensor([1],"complex64"), )
paddle.exp(Tensor([1],"float32"), )
paddle.exp(Tensor([1],"float64"), )
paddle.exp(Tensor([2, 2],"float64"), )
paddle.exp(Tensor([2, 3, 4],"float32"), )
paddle.exp(Tensor([2, 3],"complex128"), )
paddle.exp(Tensor([2, 3],"complex64"), )
paddle.exp(Tensor([2, 3],"float32"), )
paddle.exp(Tensor([2, 3],"float64"), )
paddle.exp(Tensor([2, 5],"float64"), )
paddle.exp(Tensor([2],"float32"), )
paddle.exp(Tensor([2],"float64"), )
paddle.exp(Tensor([3, 2, 5],"float32"), )
paddle.exp(Tensor([3, 3],"float64"), )
paddle.exp(Tensor([3, 5],"float32"), )
paddle.exp(Tensor([3, 5],"float64"), )
paddle.exp(Tensor([32, 32, 128],"float32"), )
paddle.exp(Tensor([3],"float32"), )
paddle.exp(Tensor([3],"float64"), )
paddle.exp(Tensor([4, 3, 2],bfloat16), )
paddle.exp(Tensor([4, 3, 2],"float16"), )
paddle.exp(Tensor([4, 3, 2],"float32"), )
paddle.exp(Tensor([4, 3, 2],"float64"), )
paddle.exp(Tensor([42],"float32"), )
paddle.exp(Tensor([4],"float64"), )
paddle.exp(Tensor([5, 5],"float64"), )
paddle.exp(Tensor([512, 256],"float32"), )
paddle.exp(Tensor([5],"float32"), )
paddle.exp(Tensor([64, 96],"float32"), )
paddle.exp(Tensor([66],"float32"), )
paddle.exp(Tensor([6],"float32"), )
paddle.exp(Tensor([9, 10, 20],"float64"), )
paddle.exp(Tensor([],"float32"), )
paddle.exp(Tensor([],"float64"), )
paddle.expm1(Tensor([2, 2],"float64"), )
paddle.expm1(Tensor([2],"float64"), )
paddle.expm1(Tensor([3, 3],"float64"), )
paddle.expm1(Tensor([4],"float64"), )
paddle.expm1(Tensor([8, 16, 32],"complex128"), )
paddle.expm1(Tensor([8, 16, 32],"complex64"), )
paddle.expm1(Tensor([8, 16, 32],"float16"), )
paddle.expm1(Tensor([8, 16, 32],"float32"), )
paddle.expm1(Tensor([8, 16, 32],"float64"), )
paddle.expm1(Tensor([],"float32"), )
paddle.eye(Tensor([],"int64"), Tensor([],"int64"), )
paddle.eye(int(10), )
paddle.eye(int(10), dtype=str(int64), )
paddle.eye(int(10), num_columns=int(7), dtype=str(float64), )
paddle.eye(int(2), int(2), )
paddle.eye(int(3), )
paddle.eye(int(5), )
paddle.flatten(Tensor([1, 1024, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([1, 1280, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([1, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([1, 16, 6, 6],"float32"), int(1), )
paddle.flatten(Tensor([1, 2048, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([1, 512, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([1, 512, 7, 7],"float32"), int(1), )
paddle.flatten(Tensor([1, 576, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([1, 8, 14, 12],"float32"), start_axis=int(1), stop_axis=int(2), )
paddle.flatten(Tensor([1, 8, 7, 7],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([16, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([2, 1024, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([2, 1024, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 128, 3, 3],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 1280, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([2, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([2, 1664, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 1920, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 2048, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([2, 2048, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 2208, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 256, 6, 6],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 2688, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 3, 0],"float64"), )
paddle.flatten(Tensor([2, 3, 4, 4],"float32"), start_axis=int(-2), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 3, 4, 4],"float32"), start_axis=int(1), stop_axis=int(2), )
paddle.flatten(Tensor([2, 3],bfloat16), )
paddle.flatten(Tensor([2, 3],"float32"), )
paddle.flatten(Tensor([2, 3],"int32"), )
paddle.flatten(Tensor([2, 4, 5],"float32"), )
paddle.flatten(Tensor([2, 4, 5],"float64"), )
paddle.flatten(Tensor([2, 4, 5],"int32"), )
paddle.flatten(Tensor([2, 4, 5],"int64"), )
paddle.flatten(Tensor([2, 512, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([2, 512, 1, 1],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([2, 512, 7, 7],"float32"), int(1), )
paddle.flatten(Tensor([2, 576, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([2, 6, 10, 10],"float32"), int(1), )
paddle.flatten(Tensor([2, 960, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([272, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([3, 100, 120],"float64"), int(1), int(2), )
paddle.flatten(Tensor([3, 4, 2],"float32"), )
paddle.flatten(Tensor([3, 4, 2],"float64"), )
paddle.flatten(Tensor([3, 4, 2],"int32"), )
paddle.flatten(Tensor([3, 4, 2],"int64"), )
paddle.flatten(Tensor([3, 4, 4, 5],"float32"), start_axis=int(1), stop_axis=int(-1), )
paddle.flatten(Tensor([3, 4],"float16"), )
paddle.flatten(Tensor([3, 4],"float32"), )
paddle.flatten(Tensor([3, 4],"float64"), )
paddle.flatten(Tensor([32, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([32, 16, 6, 6],"float32"), int(1), )
paddle.flatten(Tensor([36, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([4, 7, 6],"float64"), )
paddle.flatten(Tensor([4, 7, 6],"float64"), int(1), int(2), )
paddle.flatten(Tensor([5, 3, 4],"float64"), int(1), int(2), )
paddle.flatten(Tensor([5, 4],"float32"), )
paddle.flatten(Tensor([5, 4],"float64"), )
paddle.flatten(Tensor([512, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([64, 16, 5, 5],"float16"), int(1), )
paddle.flatten(Tensor([64, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([64, 16, 5, 5],"float32"), int(1), int(-1), )
paddle.flatten(Tensor([64, 512, 1, 1],"float32"), int(1), )
paddle.flatten(Tensor([7, 4, 6],"float64"), int(1), int(2), )
paddle.flatten(Tensor([8, 16, 5, 5],"float32"), int(1), )
paddle.flatten(Tensor([],"float32"), )
paddle.flatten(Tensor([],"float32"), start_axis=int(0), stop_axis=int(-1), )
paddle.flip(Tensor([2, 3],"float32"), int(1), )
paddle.flip(Tensor([2, 3],"float32"), list(int(0),), )
paddle.flip(Tensor([3, 2, 2],"float32"), list(int(0),int(1),), )
paddle.flip(Tensor([],"float32"), axis=list(), )
paddle.floor(Tensor([1, 3, 4],"float64"), )
paddle.floor(Tensor([1, 3],"float64"), )
paddle.floor(Tensor([10, 12],"float32"), )
paddle.floor(Tensor([10, 12],"float64"), )
paddle.floor(Tensor([100000, 2, 3],"float32"), )
paddle.floor(Tensor([100000, 2],"float32"), )
paddle.floor(Tensor([120, 84],"float32"), )
paddle.floor(Tensor([150, 16],"float32"), )
paddle.floor(Tensor([16, 1, 28, 28],"float32"), )
paddle.floor(Tensor([16, 120],"float32"), )
paddle.floor(Tensor([16, 400],"float32"), )
paddle.floor(Tensor([16, 6, 14, 14],"float32"), )
paddle.floor(Tensor([16, 6, 5, 5],"float32"), )
paddle.floor(Tensor([16, 84],"float32"), )
paddle.floor(Tensor([1],"float32"), )
paddle.floor(Tensor([1],"float64"), )
paddle.floor(Tensor([2, 1],"float32"), )
paddle.floor(Tensor([2, 3],"float32"), )
paddle.floor(Tensor([2, 5, 2, 3],"float32"), )
paddle.floor(Tensor([2, 5, 2],"float32"), )
paddle.floor(Tensor([2, 8, 8],"float32"), )
paddle.floor(Tensor([200],"float32"), )
paddle.floor(Tensor([200],"int16"), )
paddle.floor(Tensor([200],"int32"), )
paddle.floor(Tensor([200],"int64"), )
paddle.floor(Tensor([200],"int8"), )
paddle.floor(Tensor([200],uint8), )
paddle.floor(Tensor([28, 28],"float32"), )
paddle.floor(Tensor([2],"float32"), )
paddle.floor(Tensor([32, 1, 28, 28],"float32"), )
paddle.floor(Tensor([32, 120],"float32"), )
paddle.floor(Tensor([32, 400],"float32"), )
paddle.floor(Tensor([32, 6, 14, 14],"float32"), )
paddle.floor(Tensor([32, 84],"float32"), )
paddle.floor(Tensor([4, 1, 6],"float64"), )
paddle.floor(Tensor([4, 1],"float32"), )
paddle.floor(Tensor([4, 1],"float64"), )
paddle.floor(Tensor([4, 2, 2, 3],"float32"), )
paddle.floor(Tensor([4, 2, 2],"float32"), )
paddle.floor(Tensor([4, 5, 2],"float32"), )
paddle.floor(Tensor([4, 5, 2],"float64"), )
paddle.floor(Tensor([4, 7, 1],"float64"), )
paddle.floor(Tensor([400, 120],"float32"), )
paddle.floor(Tensor([5, 1, 4],"float64"), )
paddle.floor(Tensor([5, 1],"float64"), )
paddle.floor(Tensor([6, 1, 3, 3],"float32"), )
paddle.floor(Tensor([64, 1, 28, 28],"float32"), )
paddle.floor(Tensor([64, 120],"float32"), )
paddle.floor(Tensor([64, 400],"float32"), )
paddle.floor(Tensor([64, 6, 14, 14],"float32"), )
paddle.floor(Tensor([64, 84],"float32"), )
paddle.floor(Tensor([7, 1],"float64"), )
paddle.floor(Tensor([8, 8],"float32"), )
paddle.floor(Tensor([84, 10],"float32"), )
paddle.floor(Tensor([9, 6],"float32"), )
paddle.floor(Tensor([],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.fmax(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.fmax(Tensor([],"float32"), Tensor([],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.fmin(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.fmin(Tensor([],"float32"), Tensor([],"float32"), )
paddle.frac(Tensor([10, 20, 1],"float32"), )
paddle.frac(Tensor([2, 3],"float32"), )
paddle.frac(Tensor([2, 3],"float64"), )
paddle.frac(Tensor([2, 3],"int32"), )
paddle.frac(Tensor([2, 3],"int64"), )
paddle.frac(Tensor([],"float32"), )
paddle.full(list(), bool(True), dtype=str(bool), )
paddle.full(list(), float(-1.0), str(float32), )
paddle.full(list(), float(-5.0), )
paddle.full(list(), float(0.0), )
paddle.full(list(), float(0.0), Dtype(float32), )
paddle.full(list(), float(0.0), Dtype(float64), )
paddle.full(list(), float(0.0), dtype=str(float32), )
paddle.full(list(), float(0.0), str(float32), )
paddle.full(list(), float(0.25), dtype=str(float32), )
paddle.full(list(), float(0.5), )
paddle.full(list(), float(0.6), )
paddle.full(list(), float(1.0), )
paddle.full(list(), float(1.0), Dtype(float32), )
paddle.full(list(), float(1.0), Dtype(float64), )
paddle.full(list(), float(1.0), dtype=str(float32), )
paddle.full(list(), float(1.0), str(float32), )
paddle.full(list(), float(1.1447298858494002), dtype=Dtype(float32), )
paddle.full(list(), float(1.1447298858494002), dtype=Dtype(float64), )
paddle.full(list(), float(2.0), )
paddle.full(list(), float(2.5310242469692907), dtype=Dtype(float32), )
paddle.full(list(), float(2.5310242469692907), dtype=Dtype(float64), )
paddle.full(list(), float(3.0), )
paddle.full(list(), float(4.0), )
paddle.full(list(), float(5.0), )
paddle.full(list(), float(6.0), )
paddle.full(list(), int(-1), dtype=str(int32), )
paddle.full(list(), int(-1), str(int32), )
paddle.full(list(), int(0), )
paddle.full(list(), int(0), dtype=str(int32), )
paddle.full(list(), int(0), dtype=str(int64), )
paddle.full(list(), int(0), str(int32), )
paddle.full(list(), int(0), str(int64), )
paddle.full(list(), int(1), )
paddle.full(list(), int(1), dtype=str(int32), )
paddle.full(list(), int(1), str(float32), )
paddle.full(list(), int(1), str(int32), )
paddle.full(list(), int(1), str(int64), )
paddle.full(list(), int(11), dtype=str(float32), )
paddle.full(list(), int(12), dtype=str(int32), )
paddle.full(list(), int(12), str(int64), )
paddle.full(list(), int(2), )
paddle.full(list(), int(2), dtype=str(float32), )
paddle.full(list(), int(2), dtype=str(int32), )
paddle.full(list(), int(2), dtype=str(int64), )
paddle.full(list(), int(2), str(int32), )
paddle.full(list(), int(2), str(int64), )
paddle.full(list(), int(3), )
paddle.full(list(), int(3), dtype=str(int64), )
paddle.full(list(), int(3), str(int32), )
paddle.full(list(), int(3), str(int64), )
paddle.full(list(), int(4), str(int32), )
paddle.full(list(), int(4), str(int64), )
paddle.full(list(), int(5), str(int32), )
paddle.full(list(), int(5), str(int64), )
paddle.full(list(), int(6), str(int64), )
paddle.full(list(), int(7), str(int64), )
paddle.full(list(), int(8), str(int64), )
paddle.full(list(), int(9), str(int64), )
paddle.full(list(Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),), float(0.5), )
paddle.full(list(int(0),), int(0), str(int64), )
paddle.full(list(int(1),), float(-1.0), )
paddle.full(list(int(1),), float(-3.4028234663852886e+38), str(float64), )
paddle.full(list(int(1),), float(0.0), )
paddle.full(list(int(1),), float(0.0), str(float64), )
paddle.full(list(int(1),), float(1.0), dtype=str(float32), )
paddle.full(list(int(1),), float(1.0), str(float64), )
paddle.full(list(int(1),), float(1.1447298858494002), dtype=Dtype(float32), )
paddle.full(list(int(1),), float(1.1447298858494002), dtype=Dtype(float64), )
paddle.full(list(int(1),), float(2.0), )
paddle.full(list(int(1),), float(2.0), str(float64), )
paddle.full(list(int(1),), float(2.5310242469692907), dtype=Dtype(float32), )
paddle.full(list(int(1),), float(3.4), dtype=str(float32), )
paddle.full(list(int(1),), float(9.99999993922529e-09), str(float32), )
paddle.full(list(int(1),), int(-1), str(int32), )
paddle.full(list(int(1),), int(-65504), dtype=str(float64), )
paddle.full(list(int(1),), int(0), )
paddle.full(list(int(1),), int(0), dtype=str(float64), )
paddle.full(list(int(1),), int(0), dtype=str(int32), )
paddle.full(list(int(1),), int(0), str(int64), )
paddle.full(list(int(1),), int(1), )
paddle.full(list(int(1),), int(1), dtype=str(int32), )
paddle.full(list(int(1),), int(1), dtype=str(int64), )
paddle.full(list(int(1),), int(1), str(float32), )
paddle.full(list(int(1),), int(1), str(int32), )
paddle.full(list(int(1),), int(1), str(int64), )
paddle.full(list(int(1),), int(2), )
paddle.full(list(int(1),), int(2), dtype=str(int64), )
paddle.full(list(int(1),), int(2), str(int64), )
paddle.full(list(int(1),), int(3), dtype=str(int32), )
paddle.full(list(int(1),), int(4096), dtype=str(float32), )
paddle.full(list(int(1),), int(5), dtype=str(int32), )
paddle.full(list(int(1),), int(6), dtype=str(int32), )
paddle.full(list(int(1),int(1),), int(1), dtype=str(int64), )
paddle.full(list(int(1),int(2),), float(inf), )
paddle.full(list(int(10),), bool(True), dtype=str(bool), )
paddle.full(list(int(10),int(10),), float(-1.0), dtype=str(float32), )
paddle.full(list(int(10),int(10),int(10),int(10),int(10),), bool(True), dtype=str(bool), )
paddle.full(list(int(16),int(1024),int(1024),), float(5.0), dtype=str(float32), )
paddle.full(list(int(16),int(513),int(513),int(19),), fill_value=int(2), dtype=str(float64), )
paddle.full(list(int(16),int(513),int(513),int(19),), fill_value=int(3), dtype=str(float64), )
paddle.full(list(int(2),), float(0.0), str(float64), )
paddle.full(list(int(2),), float(1.1447298858494002), dtype=Dtype(float32), )
paddle.full(list(int(2),), float(2.5310242469692907), dtype=Dtype(float32), )
paddle.full(list(int(2),), int(1), str(int64), )
paddle.full(list(int(2),), int(2), )
paddle.full(list(int(2),int(2),), float(1.1447298858494002), dtype=Dtype(float32), )
paddle.full(list(int(2),int(2),), float(2.5310242469692907), dtype=Dtype(float32), )
paddle.full(list(int(2),int(2),int(2),), float(-0.5), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), float(0.5), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), float(1.5), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), float(2.5), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), int(1), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), int(1), dtype=str(int64), )
paddle.full(list(int(2),int(2),int(2),), int(2), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), int(2), dtype=str(int64), )
paddle.full(list(int(2),int(2),int(2),), int(3), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), int(3), dtype=str(int64), )
paddle.full(list(int(2),int(2),int(2),), int(8), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), int(8), dtype=str(int64), )
paddle.full(list(int(2),int(2),int(2),), int(9), dtype=str(float32), )
paddle.full(list(int(2),int(2),int(2),), int(9), dtype=str(int64), )
paddle.full(list(int(2),int(3),), float(0.0), Dtype(float32), )
paddle.full(list(int(2),int(3),), float(0.0), Dtype(float64), )
paddle.full(list(int(2),int(3),), float(0.0), str(float32), )
paddle.full(list(int(2),int(3),), float(0.0), str(float64), )
paddle.full(list(int(2),int(3),), float(0.5), )
paddle.full(list(int(2),int(3),), float(0.6), )
paddle.full(list(int(2),int(3),), float(2.0), )
paddle.full(list(int(2),int(4),), int(2), )
paddle.full(list(int(3),), float(1.1447298858494002), dtype=Dtype(float32), )
paddle.full(list(int(3),), float(2.5310242469692907), dtype=Dtype(float32), )
paddle.full(list(int(3),int(3),), float(0.0), str(float64), )
paddle.full(list(int(3),int(3),), int(1), str(float32), )
paddle.full(list(int(3),int(5),), float(0.5), )
paddle.full(list(int(32),int(3),int(1024),int(768),), float(10.0), dtype=str(float32), )
paddle.full(list(int(4),), int(0), )
paddle.full(list(int(4),), int(1), )
paddle.full(shape=Tensor([1],"int32"), dtype=str(float32), fill_value=float(1.1), )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([1],"float32"), )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([1],"int32"), )
paddle.full(shape=Tensor([2],"int32"), fill_value=float(3.8), )
paddle.full(shape=int(10), dtype=str(complex128), fill_value=complex((1.1+1.1j)), )
paddle.full(shape=int(10), dtype=str(complex128), fill_value=complex((nan+infj)), )
paddle.full(shape=int(10), dtype=str(complex128), fill_value=complex((nan+nanj)), )
paddle.full(shape=int(10), dtype=str(complex128), fill_value=complex((nan-infj)), )
paddle.full(shape=int(10), dtype=str(complex64), fill_value=complex((1.1+1.1j)), )
paddle.full(shape=int(10), dtype=str(complex64), fill_value=complex((nan+infj)), )
paddle.full(shape=int(10), dtype=str(complex64), fill_value=complex((nan+nanj)), )
paddle.full(shape=int(10), dtype=str(complex64), fill_value=complex((nan-infj)), )
paddle.full(shape=int(10), dtype=str(float32), fill_value=float(1.1), )
paddle.full(shape=int(10), fill_value=bool(True), )
paddle.full(shape=int(10), fill_value=complex((1.1+1.1j)), )
paddle.full(shape=list(), dtype=Dtype(bool), fill_value=bool(False), )
paddle.full(shape=list(), dtype=Dtype(bool), fill_value=bool(True), )
paddle.full(shape=list(), dtype=Dtype(float32), fill_value=float(0.5), )
paddle.full(shape=list(), dtype=Dtype(float32), fill_value=float(1.0), )
paddle.full(shape=list(), dtype=Dtype(float32), fill_value=float(1e-06), )
paddle.full(shape=list(), dtype=Dtype(float32), fill_value=int(0), )
paddle.full(shape=list(), dtype=Dtype(int64), fill_value=int(0), )
paddle.full(shape=list(), dtype=Dtype(int64), fill_value=int(1), )
paddle.full(shape=list(), dtype=Dtype(int64), fill_value=int(3), )
paddle.full(shape=list(), dtype=str(bool), fill_value=bool(False), )
paddle.full(shape=list(), dtype=str(bool), fill_value=bool(True), )
paddle.full(shape=list(), dtype=str(bool), fill_value=int(0), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(-2.0), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(0.001), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(0.1), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(0.2), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(0.3), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(0.5), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(1.0), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(10.0), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(2.0), )
paddle.full(shape=list(), dtype=str(float32), fill_value=float(5.0), )
paddle.full(shape=list(), dtype=str(int32), fill_value=int(1), )
paddle.full(shape=list(), dtype=str(int32), fill_value=int(2), )
paddle.full(shape=list(), dtype=str(int32), fill_value=int(3), )
paddle.full(shape=list(), dtype=str(int32), fill_value=int(5), )
paddle.full(shape=list(), dtype=str(int32), fill_value=int(6), )
paddle.full(shape=list(), dtype=str(int32), fill_value=int(7), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(0), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(1), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(10), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(100), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(2), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(3), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(4), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(5), )
paddle.full(shape=list(), dtype=str(int64), fill_value=int(7), )
paddle.full(shape=list(), fill_value=bool(False), dtype=str(bool), )
paddle.full(shape=list(), fill_value=bool(True), dtype=str(bool), )
paddle.full(shape=list(), fill_value=float(0.2), )
paddle.full(shape=list(), fill_value=float(0.3), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(0.36), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(0.5), )
paddle.full(shape=list(), fill_value=float(0.5), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(1.0), )
paddle.full(shape=list(), fill_value=float(1.0), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(1.1), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(1.2), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(2.0), )
paddle.full(shape=list(), fill_value=float(2.1), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=float(9.869604401089358), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=int(0), dtype=str(float16), )
paddle.full(shape=list(), fill_value=int(1), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=int(1), dtype=str(int64), )
paddle.full(shape=list(), fill_value=int(10), dtype=Dtype(float32), )
paddle.full(shape=list(), fill_value=int(10), dtype=Dtype(float64), )
paddle.full(shape=list(), fill_value=int(2), dtype=str(int64), )
paddle.full(shape=list(), fill_value=int(3), dtype=str(float32), )
paddle.full(shape=list(), fill_value=int(3), dtype=str(float64), )
paddle.full(shape=list(), fill_value=int(3), dtype=str(int32), )
paddle.full(shape=list(), fill_value=int(3), dtype=str(int64), )
paddle.full(shape=list(), fill_value=int(5), dtype=Dtype(float64), )
paddle.full(shape=list(), fill_value=int(9), dtype=Dtype(float64), )
paddle.full(shape=list(Tensor([1],"int32"),Tensor([1],"int32"),), fill_value=float(0.0), )
paddle.full(shape=list(Tensor([1],"int32"),Tensor([1],"int32"),), fill_value=float(3.8), )
paddle.full(shape=list(Tensor([1],"int32"),Tensor([1],"int32"),), fill_value=int(10000000000), )
paddle.full(shape=list(Tensor([1],"int32"),Tensor([1],"int32"),), fill_value=int(3), )
paddle.full(shape=list(Tensor([1],"int32"),Tensor([1],"int64"),Tensor([1],"int64"),), dtype=str(float32), fill_value=float(1.1), )
paddle.full(shape=list(Tensor([],"int64"),int(4),), fill_value=Tensor([1],"int64"), dtype=Dtype(int64), )
paddle.full(shape=list(Tensor([],"int64"),int(4),), fill_value=bool(False), dtype=str(bool), )
paddle.full(shape=list(int(1),), dtype=Dtype(int64), fill_value=int(0), )
paddle.full(shape=list(int(1),), dtype=VarType(float32), fill_value=float(1.0), )
paddle.full(shape=list(int(1),), dtype=VarType(float64), fill_value=float(0.2), )
paddle.full(shape=list(int(1),), dtype=str(int64), fill_value=int(0), )
paddle.full(shape=list(int(1),), dtype=str(int64), fill_value=int(1), )
paddle.full(shape=list(int(1),), dtype=str(int64), fill_value=int(100), )
paddle.full(shape=list(int(1),), dtype=str(int64), fill_value=int(2), )
paddle.full(shape=list(int(1),), fill_value=float(1.0), dtype=VarType(float32), )
paddle.full(shape=list(int(1),), fill_value=float(1e-06), dtype=Dtype(float32), )
paddle.full(shape=list(int(1),), fill_value=float(1e-10), dtype=Dtype(float32), )
paddle.full(shape=list(int(1),), fill_value=float(1e-12), dtype=Dtype(float32), )
paddle.full(shape=list(int(1),), fill_value=int(0), )
paddle.full(shape=list(int(1),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(1),), fill_value=int(0), dtype=str(float32), )
paddle.full(shape=list(int(1),), fill_value=int(0), dtype=str(int32), )
paddle.full(shape=list(int(1),), fill_value=int(0), dtype=str(int64), )
paddle.full(shape=list(int(1),), fill_value=int(1), )
paddle.full(shape=list(int(1),), fill_value=int(1), dtype=str(int32), )
paddle.full(shape=list(int(1),), fill_value=int(10), )
paddle.full(shape=list(int(1),), fill_value=int(10), dtype=str(float32), )
paddle.full(shape=list(int(1),), fill_value=int(10), dtype=str(int32), )
paddle.full(shape=list(int(1),), fill_value=int(10), dtype=str(int64), )
paddle.full(shape=list(int(1),), fill_value=int(100), dtype=str(int32), )
paddle.full(shape=list(int(1),), fill_value=int(2), dtype=str(float32), )
paddle.full(shape=list(int(1),), fill_value=int(2), dtype=str(int32), )
paddle.full(shape=list(int(1),), fill_value=int(2), dtype=str(int64), )
paddle.full(shape=list(int(1),), fill_value=int(20), dtype=str(int64), )
paddle.full(shape=list(int(1),), fill_value=int(3), dtype=str(int32), )
paddle.full(shape=list(int(1),), fill_value=int(5), )
paddle.full(shape=list(int(1),), fill_value=int(5), dtype=str(int32), )
paddle.full(shape=list(int(1),int(1),), dtype=str(float32), fill_value=float(1.0), )
paddle.full(shape=list(int(1),int(2),), dtype=str(float32), fill_value=float(1.1), )
paddle.full(shape=list(int(1),int(2),), dtype=str(float32), fill_value=float(1.2), )
paddle.full(shape=list(int(1),int(2),), dtype=str(float32), fill_value=int(1), )
paddle.full(shape=list(int(1),int(2),), dtype=str(float32), fill_value=int(3), )
paddle.full(shape=list(int(1),int(2),), fill_value=int(1), dtype=str(int32), )
paddle.full(shape=list(int(1),int(2),), fill_value=int(9), dtype=str(float32), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex128), fill_value=complex((1.1+1.1j)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex128), fill_value=complex((nan+infj)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex128), fill_value=complex((nan+nanj)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex128), fill_value=complex((nan-infj)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex64), fill_value=complex((1.1+1.1j)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex64), fill_value=complex((nan+infj)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex64), fill_value=complex((nan+nanj)), )
paddle.full(shape=list(int(1),int(2),int(3),), dtype=str(complex64), fill_value=complex((nan-infj)), )
paddle.full(shape=list(int(1),int(2),int(3),), fill_value=bool(True), )
paddle.full(shape=list(int(1),int(2),int(3),), fill_value=complex((1.1+1.1j)), )
paddle.full(shape=list(int(1),int(3),), fill_value=int(5), dtype=str(float32), )
paddle.full(shape=list(int(1),int(3),), fill_value=int(6), dtype=str(float32), )
paddle.full(shape=list(int(1),int(32),), fill_value=float(0.0), dtype=str(float64), )
paddle.full(shape=list(int(1),int(4),), fill_value=int(5), dtype=str(float32), )
paddle.full(shape=list(int(1),int(4),), fill_value=int(6), dtype=str(float32), )
paddle.full(shape=list(int(1),int(512),int(64),), fill_value=float(0.5), dtype=str(float32), )
paddle.full(shape=list(int(10),), fill_value=float(0.25), dtype=str(float64), )
paddle.full(shape=list(int(10),int(20),), fill_value=float(0.0), dtype=str(float32), )
paddle.full(shape=list(int(11),int(16),), fill_value=float(-inf), dtype=Dtype(float32), )
paddle.full(shape=list(int(11),int(7),), fill_value=float(-inf), dtype=Dtype(float32), )
paddle.full(shape=list(int(123),int(92),), fill_value=float(0.0), )
paddle.full(shape=list(int(123),int(92),), fill_value=float(3.8), )
paddle.full(shape=list(int(123),int(92),), fill_value=int(10000000000), )
paddle.full(shape=list(int(123),int(92),), fill_value=int(3), )
paddle.full(shape=list(int(2),), fill_value=int(0), )
paddle.full(shape=list(int(2),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),), fill_value=int(1), )
paddle.full(shape=list(int(2),), fill_value=int(1), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),), fill_value=int(2), )
paddle.full(shape=list(int(2),), fill_value=int(2), dtype=str(float32), )
paddle.full(shape=list(int(2),), fill_value=int(3), )
paddle.full(shape=list(int(2),), fill_value=int(4), )
paddle.full(shape=list(int(2),int(1),), fill_value=int(1), dtype=str(int64), )
paddle.full(shape=list(int(2),int(2),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),int(2),), fill_value=int(0), dtype=str(float32), )
paddle.full(shape=list(int(2),int(2),), fill_value=int(1), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),int(2),), fill_value=int(1), dtype=str(float32), )
paddle.full(shape=list(int(2),int(2),), fill_value=int(2), dtype=str(float32), )
paddle.full(shape=list(int(2),int(2),), fill_value=int(3), dtype=str(float32), )
paddle.full(shape=list(int(2),int(2),int(2),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),int(2),int(2),), fill_value=int(1), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),int(255),int(13),int(13),), fill_value=float(0.3), dtype=str(float32), )
paddle.full(shape=list(int(2),int(3),), dtype=str(int64), fill_value=int(1), )
paddle.full(shape=list(int(2),int(3),), dtype=str(int64), fill_value=int(2), )
paddle.full(shape=list(int(2),int(3),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),int(3),), fill_value=int(1), dtype=Dtype(float32), )
paddle.full(shape=list(int(2),int(4),), dtype=str(float32), fill_value=float(-2.0), )
paddle.full(shape=list(int(2),int(4),), fill_value=float(0.25), )
paddle.full(shape=list(int(2),int(4),), fill_value=float(0.5), )
paddle.full(shape=list(int(2),int(4),int(32),), fill_value=int(0), dtype=Dtype(float64), )
paddle.full(shape=list(int(2),int(4),int(8),), fill_value=int(0), dtype=Dtype(float64), )
paddle.full(shape=list(int(2),int(6),), fill_value=float(0.5), dtype=str(float32), )
paddle.full(shape=list(int(2),int(6),), fill_value=float(1.0), dtype=str(int32), )
paddle.full(shape=list(int(2),int(6),int(4),), fill_value=float(0.5), dtype=str(float32), )
paddle.full(shape=list(int(3),int(1),int(3),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(3),int(3),), fill_value=int(5), dtype=str(float32), )
paddle.full(shape=list(int(3),int(3),), fill_value=str(0.5), dtype=str(float32), )
paddle.full(shape=list(int(4),), fill_value=float(9.869604401089358), dtype=Dtype(float64), )
paddle.full(shape=list(int(4),), fill_value=int(0), dtype=Dtype(float64), )
paddle.full(shape=list(int(4),int(2),int(2),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(4),int(2),int(2),), fill_value=int(0), dtype=VarType(float32), )
paddle.full(shape=list(int(4),int(32),), fill_value=float(0.0), dtype=str(float64), )
paddle.full(shape=list(int(4),int(4),int(32),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(4),int(4),int(32),), fill_value=int(0), dtype=Dtype(float64), )
paddle.full(shape=list(int(4),int(4),int(8),), fill_value=int(0), dtype=Dtype(float64), )
paddle.full(shape=list(int(4),int(5),), dtype=str(float32), fill_value=float(10.0), )
paddle.full(shape=list(int(4),int(5),), fill_value=float(-inf), dtype=Dtype(float32), )
paddle.full(shape=list(int(5),), fill_value=int(8), dtype=str(int32), )
paddle.full(shape=list(int(5),int(10),), fill_value=float(5.0), dtype=str(float32), )
paddle.full(shape=list(int(5),int(3),), fill_value=float(9.869604401089358), dtype=Dtype(float64), )
paddle.full(shape=list(int(5),int(3),), fill_value=int(0), dtype=Dtype(float64), )
paddle.full(shape=list(int(6),int(1),), dtype=str(float32), fill_value=int(3), )
paddle.full(shape=list(int(6),int(1),int(3),), fill_value=int(0), dtype=Dtype(float32), )
paddle.full(shape=list(int(6),int(4),), fill_value=float(-inf), dtype=Dtype(float32), )
paddle.full(shape=list(int(64),), fill_value=float(1.0), dtype=str(float32), )
paddle.full(shape=list(int(64),int(64),), fill_value=float(0.5), dtype=str(float32), )
paddle.full(shape=tuple(), fill_value=float(-1.2), )
paddle.full(shape=tuple(), fill_value=float(0.0), )
paddle.full(shape=tuple(), fill_value=float(0.1), )
paddle.full(shape=tuple(), fill_value=float(0.1), dtype=str(float32), )
paddle.full(shape=tuple(), fill_value=float(0.5), dtype=Dtype(float32), )
paddle.full(shape=tuple(), fill_value=float(0.7), dtype=Dtype(float32), )
paddle.full(shape=tuple(), fill_value=float(1.0), )
paddle.full(shape=tuple(), fill_value=float(1.0), dtype=str(float32), )
paddle.full(shape=tuple(), fill_value=float(1.2), )
paddle.full(shape=tuple(), fill_value=float(2.0), )
paddle.full(shape=tuple(), fill_value=float(2.3), )
paddle.full(shape=tuple(), fill_value=int(3), )
paddle.full(shape=tuple(), fill_value=int(4), )
paddle.full(shape=tuple(int(1),int(128),int(32),int(32),), fill_value=float(-inf), dtype=Dtype(float32), )
paddle.full(shape=tuple(int(1),int(3),), dtype=str(float32), fill_value=float(-2.0), )
paddle.full(shape=tuple(int(3),int(4),), dtype=str(float32), fill_value=float(-2.0), )
paddle.full(tuple(), float(-0.6), dtype=Dtype(float32), )
paddle.full(tuple(), float(-0.6), dtype=Dtype(float64), )
paddle.full(tuple(), float(-1.2), )
paddle.full(tuple(), float(-1.2), dtype=str(float64), )
paddle.full(tuple(), float(0.0), )
paddle.full(tuple(), float(0.0), dtype=str(float64), )
paddle.full(tuple(), float(0.1), )
paddle.full(tuple(), float(0.1), dtype=str(float64), )
paddle.full(tuple(), float(0.3), )
paddle.full(tuple(), float(0.3), dtype=str(float64), )
paddle.full(tuple(), float(0.6), dtype=Dtype(float32), )
paddle.full(tuple(), float(0.6), dtype=Dtype(float64), )
paddle.full(tuple(), float(1.0), )
paddle.full(tuple(), float(1.0), dtype=str(float64), )
paddle.full(tuple(), float(1.2), )
paddle.full(tuple(), float(1.2), dtype=str(float64), )
paddle.full(tuple(), float(2.3), )
paddle.full(tuple(), float(2.3), dtype=str(float64), )
paddle.full(tuple(), float(5.7), dtype=Dtype(float32), )
paddle.full(tuple(), float(5.7), dtype=Dtype(float64), )
paddle.full(tuple(int(0),int(0),), float(1.0), dtype=str(float32), )
paddle.full(tuple(int(0),int(0),int(2),int(3),), float(1.0), dtype=str(float32), )
paddle.full(tuple(int(0),int(6),), float(1.0), dtype=str(float32), )
paddle.full(tuple(int(1),), float(0.1), )
paddle.full(tuple(int(1),), float(1.2), )
paddle.full(tuple(int(1),), int(1), )
paddle.full(tuple(int(1),), int(2), )
paddle.full(tuple(int(1),), int(3), )
paddle.full(tuple(int(100),int(1000),), float(0.5), )
paddle.full(tuple(int(2),int(0),int(6),int(6),), float(1.0), dtype=str(float32), )
paddle.full(tuple(int(2),int(3),int(0),int(0),), float(1.0), dtype=str(float32), )
paddle.full(tuple(int(32),int(32),), fill_value=float(-inf), dtype=Dtype(float32), )
paddle.full(tuple(int(6),int(0),), float(1.0), dtype=str(float32), )
paddle.full_like(Tensor([1, 3, 4],"float64"), fill_value=int(1), )
paddle.full_like(Tensor([10, 12],"float32"), int(0), )
paddle.full_like(Tensor([10, 12],"float64"), int(0), )
paddle.full_like(Tensor([1024, 1024],"float32"), float(0.02650835959228448), )
paddle.full_like(Tensor([1],"float32"), fill_value=int(0), )
paddle.full_like(Tensor([1],"float32"), fill_value=int(2), )
paddle.full_like(Tensor([1],"float32"), fill_value=int(5), )
paddle.full_like(Tensor([1],"float32"), fill_value=int(7), )
paddle.full_like(Tensor([1],"float64"), fill_value=int(167), )
paddle.full_like(Tensor([2, 1],"float32"), fill_value=int(2), )
paddle.full_like(Tensor([2, 3],"float32"), float(-10.0), )
paddle.full_like(Tensor([2, 3],"float32"), float(-3.4028234663852886e+38), )
paddle.full_like(Tensor([2, 3],"float32"), float(-inf), )
paddle.full_like(Tensor([2, 3],"float32"), float(0.0), )
paddle.full_like(Tensor([2, 3],"float32"), float(1.0), )
paddle.full_like(Tensor([2, 3],"float32"), float(100.0), )
paddle.full_like(Tensor([2, 3],"float32"), float(2.0), )
paddle.full_like(Tensor([2, 3],"float32"), float(3.4028234663852886e+38), )
paddle.full_like(Tensor([2, 3],"float32"), float(inf), )
paddle.full_like(Tensor([2, 4],"float32"), float(-3.4028234663852886e+38), )
paddle.full_like(Tensor([2, 4],"float32"), float(-inf), )
paddle.full_like(Tensor([2, 4],"float32"), float(0.0), )
paddle.full_like(Tensor([2, 4],"float32"), float(3.4028234663852886e+38), )
paddle.full_like(Tensor([2, 4],"float32"), float(inf), )
paddle.full_like(Tensor([219, 232],"float16"), float(0.0), None, None, )
paddle.full_like(Tensor([219, 232],"float32"), float(0.0), None, None, )
paddle.full_like(Tensor([219, 232],"float32"), float(0.0), VarType(bfloat16), None, )
paddle.full_like(Tensor([219, 232],"int32"), float(0.0), Dtype(int16), None, )
paddle.full_like(Tensor([219, 232],"int32"), float(0.0), None, None, )
paddle.full_like(Tensor([219, 232],"int32"), float(0.0), VarType(float32), None, )
paddle.full_like(Tensor([219, 232],"int32"), float(1.0), None, None, )
paddle.full_like(Tensor([219, 232],"int32"), float(1e-10), None, None, )
paddle.full_like(Tensor([219, 232],"int32"), float(1e-100), None, None, )
paddle.full_like(Tensor([2],"float64"), float(0.9999998807907104), )
paddle.full_like(Tensor([2],"float64"), float(1.1754943508222875e-38), )
paddle.full_like(Tensor([3, 40],"float32"), float(-1.0), )
paddle.full_like(Tensor([3, 40],"float32"), float(1.0), )
paddle.full_like(Tensor([4, 1, 6],"float64"), fill_value=int(6), )
paddle.full_like(Tensor([4, 1],"float32"), fill_value=int(6), )
paddle.full_like(Tensor([4, 1],"float64"), fill_value=int(41), )
paddle.full_like(Tensor([4, 1],"float64"), fill_value=int(6), )
paddle.full_like(Tensor([4, 5, 2],"float32"), int(0), )
paddle.full_like(Tensor([4, 5, 2],"float64"), int(0), )
paddle.full_like(Tensor([4, 7, 1],"float64"), fill_value=int(5), )
paddle.full_like(Tensor([4],"float64"), float(0.9999998807907104), )
paddle.full_like(Tensor([4],"float64"), float(1.1754943508222875e-38), )
paddle.full_like(Tensor([5, 1, 4],"float64"), fill_value=int(2), )
paddle.full_like(Tensor([5, 1],"float64"), fill_value=int(11), )
paddle.full_like(Tensor([5, 3],"float64"), float(0.9999998807907104), )
paddle.full_like(Tensor([5, 3],"float64"), float(1.1754943508222875e-38), )
paddle.full_like(Tensor([7, 1],"float64"), fill_value=int(23), )
paddle.full_like(Tensor([],"float32"), float(-3.4028234663852886e+38), )
paddle.full_like(Tensor([],"float32"), float(-inf), )
paddle.full_like(Tensor([],"float32"), float(0.0), )
paddle.full_like(Tensor([],"float32"), float(0.5), )
paddle.full_like(Tensor([],"float32"), float(0.9999998807907104), )
paddle.full_like(Tensor([],"float32"), float(1.1754943508222875e-38), )
paddle.full_like(Tensor([],"float32"), float(3.4028234663852886e+38), )
paddle.full_like(Tensor([],"float32"), float(inf), )
paddle.full_like(Tensor([],"float32"), int(0), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.gcd(Tensor([6],"int32"), Tensor([1],"int32"), )
paddle.gcd(Tensor([],"int64"), Tensor([],"int64"), )
paddle.grad(Tensor([1, 1, 1, 1],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.grad(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.grad(Tensor([1, 1, 1],"float16"), Tensor([1, 1, 1],"float16"), )
paddle.grad(Tensor([1, 1, 1],"float32"), Tensor([1, 1, 1],"float32"), )
paddle.grad(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.grad(Tensor([1, 1, 1],"int32"), Tensor([1, 1, 1],"int32"), )
paddle.grad(Tensor([1, 1, 1],"int64"), Tensor([1, 1, 1],"int64"), )
paddle.grad(Tensor([1, 1],"float16"), Tensor([1, 1],"float16"), )
paddle.grad(Tensor([1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.grad(Tensor([1, 1],"float32"), Tensor([2, 3],"float32"), )
paddle.grad(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.grad(Tensor([1, 1],"float64"), Tensor([4, 5],"float64"), )
paddle.grad(Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), )
paddle.grad(Tensor([1, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.grad(Tensor([1, 3, 128],"float16"), Tensor([1, 3, 64],"float16"), )
paddle.grad(Tensor([1, 3, 128],"float32"), Tensor([1, 3, 64],"float32"), )
paddle.grad(Tensor([1, 3, 1],"float64"), Tensor([1, 3, 1],"float64"), )
paddle.grad(Tensor([1, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.grad(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.grad(Tensor([10, 10, 10, 10],"float32"), Tensor([1, 10, 1],"float32"), Tensor([10, 10, 10, 10],"float32"), )
paddle.grad(Tensor([10, 10, 10, 10],"float32"), Tensor([10, 1, 10, 1],"float32"), Tensor([10, 10, 10, 10],"float32"), )
paddle.grad(Tensor([10, 10],"float32"), Tensor([1, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.grad(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.grad(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([10, 10],"float32"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.grad(Tensor([10, 10],"float32"), list(Tensor([10, 1, 10],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([10, 10],"float64"), Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.grad(Tensor([10, 12],"float16"), list(Tensor([10, 12],"float16"),), )
paddle.grad(Tensor([10, 12],"float32"), list(Tensor([10, 12],"float32"),), )
paddle.grad(Tensor([10, 20],"float16"), list(Tensor([10, 20],"float16"),Tensor([20],"float16"),Tensor([20],"float16"),), )
paddle.grad(Tensor([10, 20],"float16"), list(Tensor([10, 20],"float16"),Tensor([20],"float32"),Tensor([20],"float32"),), )
paddle.grad(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), )
paddle.grad(Tensor([100, 200, 100],"float64"), list(Tensor([100, 200, 100],"float64"),), create_graph=bool(True), )
paddle.grad(Tensor([100],"float32"), list(Tensor([100],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([12, 10],"float32"), list(Tensor([2, 60],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([12, 2, 5],"float64"), Tensor([12, 2, 5],"float64"), )
paddle.grad(Tensor([12, 2],"float64"), Tensor([12, 2],"float64"), )
paddle.grad(Tensor([120],"float16"), list(Tensor([10, 12],"float16"),), )
paddle.grad(Tensor([120],"float32"), list(Tensor([10, 12],"float32"),), )
paddle.grad(Tensor([128, 256],"float32"), list(Tensor([128, 256],"float32"),Tensor([128, 256],"float32"),), )
paddle.grad(Tensor([16, 256],"complex128"), list(Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),), )
paddle.grad(Tensor([16, 256],"complex64"), list(Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),), )
paddle.grad(Tensor([16, 256],"float16"), list(Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),), )
paddle.grad(Tensor([16, 256],"float32"), list(Tensor([16, 256],"float32"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),), )
paddle.grad(Tensor([16, 256],"float32"), list(Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),Tensor([16, 256],"float32"),), )
paddle.grad(Tensor([1],"float16"), Tensor([1],"float16"), )
paddle.grad(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.grad(Tensor([1],"float32"), Tensor([1],"float32"), create_graph=bool(True), )
paddle.grad(Tensor([1],"float32"), list(Tensor([1],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(Tensor([1],"float32"), list(Tensor([20, 10, 20],"float32"),), )
paddle.grad(Tensor([1],"float32"), list(Tensor([30, 10],"float32"),), )
paddle.grad(Tensor([1],"float32"), list(Tensor([8, 5, 10],"float32"),), )
paddle.grad(Tensor([1],"float32"), tuple(Tensor([1],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([1],"float32"), tuple(Tensor([1],"float32"),), allow_unused=bool(True), )
paddle.grad(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.grad(Tensor([1],"float64"), list(Tensor([1],"float64"),), create_graph=bool(True), )
paddle.grad(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.grad(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.grad(Tensor([2, 2, 12, 12, 12],"float16"), Tensor([2, 2, 6, 6, 6],"float16"), )
paddle.grad(Tensor([2, 2, 12, 12, 12],"float32"), Tensor([2, 2, 6, 6, 6],"float32"), )
paddle.grad(Tensor([2, 2, 12, 12],"float16"), Tensor([2, 2, 6, 6],"float16"), )
paddle.grad(Tensor([2, 2, 12, 12],"float32"), Tensor([2, 2, 6, 6],"float32"), )
paddle.grad(Tensor([2, 2, 1],"complex64"), Tensor([2, 3, 1],"complex64"), Tensor([2, 2, 1],"complex64"), )
paddle.grad(Tensor([2, 2],"float16"), Tensor([2, 2],"float16"), )
paddle.grad(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.grad(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.grad(Tensor([2, 2],"int32"), Tensor([2, 2],"int32"), )
paddle.grad(Tensor([2, 2],"int64"), Tensor([2, 2],bool), )
paddle.grad(Tensor([2, 2],"int64"), Tensor([2, 2],"int64"), )
paddle.grad(Tensor([2, 2],uint8), Tensor([2, 2],uint8), )
paddle.grad(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.grad(Tensor([2, 3, 3, 3, 3],"float16"), Tensor([2, 3, 4, 4, 4],"float16"), )
paddle.grad(Tensor([2, 3, 3, 3, 3],"float16"), Tensor([2, 4, 4, 4, 3],"float16"), )
paddle.grad(Tensor([2, 3, 3, 3, 3],"float32"), Tensor([2, 3, 4, 4, 4],"float32"), )
paddle.grad(Tensor([2, 3, 3, 3, 3],"float32"), Tensor([2, 4, 4, 4, 3],"float32"), )
paddle.grad(Tensor([2, 3, 3, 3],"float16"), Tensor([2, 3, 5, 5],"float16"), )
paddle.grad(Tensor([2, 3, 3, 3],"float32"), Tensor([2, 3, 5, 5],"float32"), )
paddle.grad(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 3, 4],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 3, 4],"float32"), list(Tensor([2, 3, 3, 4],"float32"),Tensor([2, 3, 1, 1],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 3, 4],"float32"), list(Tensor([2, 3, 3, 4],"float32"),Tensor([2, 3, 1, 4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 3, 4],"float32"), list(Tensor([2, 3, 3, 4],"float32"),Tensor([3, 1, 1],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 3, 4],"float32"), list(Tensor([2, 3, 3, 4],"float32"),Tensor([3, 1, 4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"float32"), Tensor([1, 3, 1, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 1, 4, 1],"float32"), Tensor([2, 3, 4, 5],"float32"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"float64"), Tensor([1, 3, 1, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 1, 4, 1],"float64"), Tensor([2, 3, 4, 5],"float64"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"int32"), Tensor([1, 3, 1, 5],"int32"), Tensor([2, 3, 4, 5],"int32"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"int32"), Tensor([2, 1, 4, 1],"int32"), Tensor([2, 3, 4, 5],"int32"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"int64"), Tensor([1, 3, 1, 5],"int64"), Tensor([2, 3, 4, 5],"int64"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4, 5],"int64"), Tensor([2, 1, 4, 1],"int64"), Tensor([2, 3, 4, 5],"int64"), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.grad(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 4],"float32"), list(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5, 4],"float16"), list(Tensor([2, 1, 5, 2],"float16"),Tensor([1, 3, 2, 4],"float16"),), Tensor([2, 3, 5, 4],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5, 4],"float32"), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), Tensor([2, 3, 5, 4],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5, 4],"float64"), list(Tensor([2, 1, 5, 2],"float64"),Tensor([1, 3, 2, 4],"float64"),), Tensor([2, 3, 5, 4],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float16"), list(Tensor([2, 3, 4],"float16"),Tensor([2, 4, 5],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float16"), list(Tensor([2, 3, 4],"float16"),Tensor([2, 5, 4],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float16"), list(Tensor([2, 4, 3],"float16"),Tensor([2, 4, 5],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float16"), list(Tensor([2, 4, 3],"float16"),Tensor([2, 5, 4],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float32"), list(Tensor([2, 3, 4],"float32"),Tensor([2, 4, 5],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float32"), list(Tensor([2, 3, 4],"float32"),Tensor([2, 5, 4],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float32"), list(Tensor([2, 4, 3],"float32"),Tensor([2, 4, 5],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float32"), list(Tensor([2, 4, 3],"float32"),Tensor([2, 5, 4],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float64"), list(Tensor([2, 3, 4],"float64"),Tensor([2, 4, 5],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float64"), list(Tensor([2, 3, 4],"float64"),Tensor([2, 5, 4],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float64"), list(Tensor([2, 4, 3],"float64"),Tensor([2, 4, 5],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3, 5],"float64"), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3],"float16"), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), Tensor([2, 3],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.grad(Tensor([2, 3],"float32"), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), Tensor([2, 3],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.grad(Tensor([2, 3],"float64"), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), Tensor([2, 3],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2, 3],"int64"), Tensor([2, 3],"int64"), )
paddle.grad(Tensor([2, 4, 5, 3],"float32"), list(Tensor([2, 3, 4, 5],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2],"float16"), Tensor([2],"float16"), )
paddle.grad(Tensor([2],"float16"), list(Tensor([2, 3],"float16"),Tensor([3],"float16"),), Tensor([2],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2],"float32"), Tensor([2, 3],"float32"), )
paddle.grad(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.grad(Tensor([2],"float32"), list(Tensor([2, 3],"float32"),Tensor([3],"float32"),), Tensor([2],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2],"float32"), list(Tensor([2],"float32"),Tensor([2],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(Tensor([2],"float32"), list(Tensor([3, 2],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(Tensor([2],"float32"), tuple(Tensor([2],"float32"),Tensor([2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([2],"float32"), tuple(Tensor([3, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([2],"float32"), tuple(Tensor([3, 2],"float32"),), Tensor([2],"float32"), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([2],"float32"), tuple(Tensor([3, 2],"float32"),), tuple(Tensor([2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([2],"float64"), Tensor([2, 3, 4],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([2],"float64"), Tensor([2, 3],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.grad(Tensor([2],"float64"), list(Tensor([2, 3],"float64"),Tensor([3],"float64"),), Tensor([2],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([2],"int32"), Tensor([2],"int32"), )
paddle.grad(Tensor([2],"int64"), Tensor([2],bool), )
paddle.grad(Tensor([2],"int64"), Tensor([2],"int64"), )
paddle.grad(Tensor([2],uint8), Tensor([2],uint8), )
paddle.grad(Tensor([3, 1, 1],"float32"), Tensor([3, 2, 5],"float32"), Tensor([3, 1, 1],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3, 1, 1],"float64"), Tensor([3, 1, 1],"float64"), )
paddle.grad(Tensor([3, 10, 4],"float32"), list(Tensor([3, 4, 10],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3, 1],"float64"), Tensor([3, 1],"float64"), )
paddle.grad(Tensor([3, 2, 1],"float64"), Tensor([3, 2, 1],"float64"), )
paddle.grad(Tensor([3, 20],"float32"), list(Tensor([10, 20],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(Tensor([3, 20],"float64"), list(Tensor([10, 20],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.grad(Tensor([3, 2],"int64"), Tensor([3, 2],"int64"), )
paddle.grad(Tensor([3, 3, 30],"float32"), list(Tensor([3, 88, 30],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(Tensor([3, 3],"float32"), list(Tensor([3, 2],"float32"),Tensor([2, 3],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(Tensor([3, 3],"float32"), tuple(Tensor([3, 2],"float32"),Tensor([2, 3],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([3, 3],"float32"), tuple(Tensor([3, 2],"float32"),Tensor([2, 3],"float32"),), Tensor([3, 3],"float32"), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([3, 3],"float32"), tuple(Tensor([3, 2],"float32"),Tensor([2, 3],"float32"),), tuple(Tensor([3, 3],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([3, 3],"int64"), Tensor([3, 3],"int64"), )
paddle.grad(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.grad(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.grad(Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([3, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.grad(Tensor([3, 5],"int64"), Tensor([3, 5],"int64"), )
paddle.grad(Tensor([3, 88, 10],"float32"), list(Tensor([10, 88, 10],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float16"), list(Tensor([2],"float16"),Tensor([2, 3],"float16"),), Tensor([3],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float16"), list(Tensor([2],"float16"),Tensor([3, 2],"float16"),), Tensor([3],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float32"), list(Tensor([100],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float32"), list(Tensor([2],"float32"),Tensor([2, 3],"float32"),), Tensor([3],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float32"), list(Tensor([2],"float32"),Tensor([3, 2],"float32"),), Tensor([3],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float64"), Tensor([3],"float64"), )
paddle.grad(Tensor([3],"float64"), list(Tensor([2],"float64"),Tensor([2, 3],"float64"),), Tensor([3],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3],"float64"), list(Tensor([2],"float64"),Tensor([3, 2],"float64"),), Tensor([3],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.grad(Tensor([4, 1, 2, 1],"float32"), Tensor([4, 3, 2, 5],"float32"), Tensor([4, 1, 2, 1],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([4, 1, 2],"float32"), Tensor([4, 3, 2],"float32"), Tensor([4, 1, 2],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), create_graph=bool(True), )
paddle.grad(Tensor([4, 2, 4],"int64"), Tensor([4, 2, 4],"int64"), )
paddle.grad(Tensor([4, 2, 5],"float64"), Tensor([4, 2, 5],"float64"), )
paddle.grad(Tensor([4, 2],"float16"), Tensor([4, 2],"float16"), )
paddle.grad(Tensor([4, 2],"float32"), Tensor([4, 2],"float32"), )
paddle.grad(Tensor([4, 2],"float32"), Tensor([4, 3, 2, 5],"float32"), Tensor([4, 2],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([4, 2],"float32"), Tensor([4, 3, 2],"float32"), Tensor([4, 2],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([4, 2],"float64"), Tensor([4, 2],"float64"), )
paddle.grad(Tensor([4, 2],"int32"), Tensor([4, 2],"int32"), )
paddle.grad(Tensor([4, 2],"int64"), Tensor([4, 2],bool), )
paddle.grad(Tensor([4, 2],"int64"), Tensor([4, 2],"int64"), )
paddle.grad(Tensor([4, 2],uint8), Tensor([4, 2],uint8), )
paddle.grad(Tensor([4, 3, 4],"int64"), Tensor([4, 3, 4],"int64"), )
paddle.grad(Tensor([4, 3],"int64"), Tensor([4, 3],"int64"), )
paddle.grad(Tensor([4, 4, 2],"int64"), Tensor([4, 4, 2],"int64"), )
paddle.grad(Tensor([4, 4, 3],"int64"), Tensor([4, 4, 3],"int64"), )
paddle.grad(Tensor([4, 4, 4],"int64"), Tensor([4, 4, 4],"int64"), )
paddle.grad(Tensor([4, 4],"int64"), Tensor([4, 4],"int64"), )
paddle.grad(Tensor([4, 6, 5],"float64"), Tensor([4, 6, 5],"float64"), )
paddle.grad(Tensor([4, 6],"float64"), Tensor([4, 6],"float64"), )
paddle.grad(Tensor([4, 8, 16, 32],"float32"), Tensor([4, 8, 16, 32],"float32"), )
paddle.grad(Tensor([4, 8, 16, 32],"float32"), list(Tensor([4, 8, 16, 32],"float32"),Tensor([16, 32],"float32"),), )
paddle.grad(Tensor([4096, 4096],"float32"), list(Tensor([4096, 4096],"float32"),Tensor([4096, 4096],"float32"),), )
paddle.grad(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.grad(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.grad(Tensor([4],"float64"), Tensor([4, 5],"float64"), )
paddle.grad(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.grad(Tensor([4],"int32"), Tensor([4],"int32"), )
paddle.grad(Tensor([4],"int64"), Tensor([4],bool), )
paddle.grad(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.grad(Tensor([4],uint8), Tensor([4],uint8), )
paddle.grad(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), )
paddle.grad(Tensor([5, 3],"int64"), Tensor([5, 3],"int64"), )
paddle.grad(Tensor([5, 5],"float64"), list(Tensor([5, 5],"float64"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([5],"float32"), Tensor([5, 2],"float32"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([5],"float32"), tuple(Tensor([5, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([5],"float32"), tuple(Tensor([5, 2],"float32"),Tensor([5, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.grad(Tensor([5],"int64"), Tensor([5],"int64"), )
paddle.grad(Tensor([6, 4, 5, 3, 2, 1],"float32"), list(Tensor([2, 3, 4, 5, 6, 1],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([6, 4, 5, 3, 2],"float32"), list(Tensor([2, 3, 4, 5, 6],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([6],"float64"), Tensor([6],"float64"), )
paddle.grad(Tensor([],"float16"), Tensor([],"float16"), )
paddle.grad(Tensor([],"float16"), list(Tensor([2],"float16"),Tensor([2],"float16"),), Tensor([],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([],"float32"), Tensor([10, 10],"float32"), Tensor([],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([],"float32"), Tensor([2, 1, 2, 3],"float32"), )
paddle.grad(Tensor([],"float32"), Tensor([2, 2],"float32"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.grad(Tensor([],"float32"), Tensor([2, 3],"float32"), )
paddle.grad(Tensor([],"float32"), Tensor([4],"float32"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), Tensor([8, 8, 16, 16],"float32"), )
paddle.grad(Tensor([],"float32"), Tensor([],"float32"), )
paddle.grad(Tensor([],"float32"), Tensor([],"float32"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), list(Tensor([1],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), list(Tensor([2, 3, 4, 5],"float32"),), )
paddle.grad(Tensor([],"float32"), list(Tensor([2],"float32"),Tensor([2],"float32"),), Tensor([],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([],"float32"), list(Tensor([3, 2],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(Tensor([],"float32"), tuple(Tensor([2, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), tuple(Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), tuple(Tensor([3, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), tuple(Tensor([3, 2],"float32"),), Tensor([],"float32"), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float32"), tuple(Tensor([3, 2],"float32"),), tuple(Tensor([],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float64"), Tensor([2, 3, 4],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float64"), Tensor([2, 3],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float64"), Tensor([2],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float64"), Tensor([4],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float64"), Tensor([6],"float64"), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"float64"), Tensor([],"float64"), )
paddle.grad(Tensor([],"float64"), list(Tensor([100, 200, 99],"float64"),), create_graph=bool(True), )
paddle.grad(Tensor([],"float64"), list(Tensor([2],"float64"),Tensor([2],"float64"),), Tensor([],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(Tensor([],"float64"), tuple(Tensor([2, 2],"float64"),Tensor([2, 2],"float64"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(Tensor([],"int32"), Tensor([],"int32"), )
paddle.grad(Tensor([],"int64"), Tensor([],bool), )
paddle.grad(Tensor([],"int64"), Tensor([],"int64"), )
paddle.grad(Tensor([],uint8), Tensor([],uint8), )
paddle.grad(list(Tensor([1, 1, 2, 4, 10],"float16"),), list(Tensor([1, 3, 2, 4, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([1, 1, 2, 4, 10],"float64"),), list(Tensor([1, 3, 2, 4, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([1, 2],"float64"),Tensor([1, 2],"float64"),), list(Tensor([],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([1, 3, 2, 6],"float64"),), list(Tensor([3, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([1, 5, 5],"float64"),), list(Tensor([5, 5, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 1, 10],"float32"),), list(Tensor([10, 1, 10],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([10, 10, 10],"float16"),), list(Tensor([10, 10, 10],"float16"),Tensor([10, 1, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10, 10],"float32"),), list(Tensor([10, 10, 10],"float32"),Tensor([5, 5, 5],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10, 10],"float64"),), list(Tensor([10, 10, 10],"float64"),Tensor([10, 1, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10, 10],"float64"),), list(Tensor([10, 10, 10],"float64"),Tensor([5, 5, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10, 10],"float64"),), list(Tensor([10, 20, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10, 20],"float64"),), list(Tensor([10, 10, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],bfloat16),), list(Tensor([10, 10],bfloat16),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],bfloat16),), list(Tensor([10, 10],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float16"),), list(Tensor([10, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float16"),), list(Tensor([10, 10],"float16"),Tensor([2, 10, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float16"),), list(Tensor([10, 10],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float32"),), Tensor([10, 10],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([10, 10],"float32"),), list(Tensor([10, 10],bfloat16),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float32"),), list(Tensor([10, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float32"),), list(Tensor([10, 10],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float32"),), list(Tensor([4, 25],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float64"),), list(Tensor([10, 10],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float64"),), list(Tensor([10, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 10],"float64"),), list(Tensor([10, 10],"float64"),Tensor([2, 10, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 12],"float64"),), list(Tensor([10, 12],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 2, 3, 2],"float32"),), list(Tensor([10, 2, 6],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 2, 5],"float32"),), list(Tensor([10, 2, 5],"float32"),), None, create_graph=bool(True), allow_unused=bool(False), )
paddle.grad(list(Tensor([10, 3, 5],"float64"),), list(Tensor([10, 10, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 3],"float16"),), list(Tensor([10, 20],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 3],"float64"),), list(Tensor([10, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 50],"float16"),), list(Tensor([10, 50],"float16"),Tensor([10, 50],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([10, 50],"float32"),), list(Tensor([10, 50],"float32"),Tensor([10, 50],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 1, 2, 2],"float32"),), list(Tensor([2],"float32"),Tensor([2],"float32"),), )
paddle.grad(list(Tensor([100, 1, 2],"float32"),), list(Tensor([2],"float32"),Tensor([2],"float32"),), )
paddle.grad(list(Tensor([100, 10],bfloat16),), list(Tensor([100, 10],bfloat16),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 10],"float16"),), list(Tensor([100, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 10],"float64"),), list(Tensor([100, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 1],"float32"),), list(Tensor([100, 1],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 1],"float32"),), list(Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.grad(list(Tensor([100, 1],"float32"),), list(Tensor([],"float32"),Tensor([],"float32"),), )
paddle.grad(list(Tensor([100, 1],"float64"),), list(Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.grad(list(Tensor([100, 2, 1],"float32"),), list(Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.grad(list(Tensor([100, 2, 3, 1],"float32"),), list(Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.grad(list(Tensor([100, 2, 3],"float32"),), list(Tensor([],"float32"),Tensor([],"float32"),), )
paddle.grad(list(Tensor([100, 200],"float64"),Tensor([100, 200],"float64"),), list(Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 2],"float32"),), list(Tensor([2],"float32"),Tensor([2],"float32"),), )
paddle.grad(list(Tensor([100, 300],"float16"),Tensor([100, 300],"float16"),), list(Tensor([100],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100, 300],"float64"),Tensor([100, 300],"float64"),), list(Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100000, 2, 3],"float32"),), list(Tensor([2, 3],"float32"),), )
paddle.grad(list(Tensor([100000, 2],"float32"),), list(Tensor([2],"float32"),), )
paddle.grad(list(Tensor([100000, 4],"complex128"),), list(Tensor([4],"complex64"),Tensor([4],"float64"),), )
paddle.grad(list(Tensor([100000, 4],"float64"),), list(Tensor([4],"float64"),Tensor([4],"float64"),), )
paddle.grad(list(Tensor([100],"float16"),), list(Tensor([100],"float16"),Tensor([100],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100],"float32"),), list(Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100],"float32"),), list(Tensor([],"float32"),Tensor([],"float32"),), )
paddle.grad(list(Tensor([100],"float64"),), list(Tensor([10, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([100],"float64"),), list(Tensor([100],"float64"),Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([11, 17, 8],"float16"),), list(Tensor([11, 17, 8],"float16"),), list(Tensor([11, 17, 8],"float16"),), )
paddle.grad(list(Tensor([12, 10],bfloat16),), list(Tensor([2, 60],bfloat16),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([12, 10],"float16"),), list(Tensor([2, 60],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([12, 10],"float32"),), list(Tensor([2, 60],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([13, 17],"float32"),), list(Tensor([13, 17],"float32"),Tensor([13, 17],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([13, 17],"float64"),), list(Tensor([13, 17],"float64"),Tensor([13, 17],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 16, 16, 8],"float16"),), list(Tensor([16, 16, 16, 8],"float16"),), list(Tensor([16, 16, 16, 8],"float16"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 16, 16, 8],"float16"),), list(Tensor([16, 16, 16, 8],"float16"),Tensor([16],"float32"),Tensor([16],"float32"),), list(Tensor([16, 16, 16, 8],"float16"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 16, 16, 8],"float32"),), list(Tensor([16, 16, 16, 8],"float32"),), list(Tensor([16, 16, 16, 8],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 16, 16, 8],"float32"),), list(Tensor([16, 16, 16, 8],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),), list(Tensor([16, 16, 16, 8],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 16, 16, 8],"float64"),), list(Tensor([16, 16, 16, 8],"float64"),), list(Tensor([16, 16, 16, 8],"float64"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 16, 16, 8],"float64"),), list(Tensor([16, 16, 16, 8],"float64"),Tensor([16],"float64"),Tensor([16],"float64"),), list(Tensor([16, 16, 16, 8],"float64"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 24, 16, 8],"float32"),), list(Tensor([16, 24, 16, 8],"float32"),), list(Tensor([16, 24, 16, 8],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 24, 16, 8],"float32"),), list(Tensor([16, 24, 16, 8],"float32"),Tensor([24],"float32"),Tensor([24],"float32"),), list(Tensor([16, 24, 16, 8],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([16, 6],"float64"),), list(Tensor([16, 100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([1],"float32"),), list(Tensor([2, 1],"float32"),Tensor([2],"float32"),), list(Tensor([1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([1],"float32"),), list(Tensor([3],"float32"),Tensor([3, 1],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([1],"float32"),), list(Tensor([],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([1],"float32"),), tuple(Tensor([1],"float32"),), allow_unused=bool(True), )
paddle.grad(list(Tensor([1],"float64"),), list(Tensor([],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 1, 2, 4],"float16"),), list(Tensor([2, 1, 2, 4, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 1, 2, 4],"float64"),), list(Tensor([2, 1, 2, 4, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 1, 5, 2],"float16"),Tensor([1, 3, 2, 4],"float16"),), list(Tensor([2, 1, 5, 2],"float16"),Tensor([1, 3, 2, 4],"float16"),Tensor([2, 3, 5, 4],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),Tensor([2, 3, 5, 4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),Tensor([2, 3, 5, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),Tensor([2, 3, 5, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),Tensor([2, 3, 5, 4],"float32"),Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),Tensor([2, 3, 5, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),Tensor([2, 3, 5, 4],"float32"),Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 1, 5, 2],"float64"),Tensor([1, 3, 2, 4],"float64"),), list(Tensor([2, 1, 5, 2],"float64"),Tensor([1, 3, 2, 4],"float64"),Tensor([2, 3, 5, 4],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 100, 4, 5],"float32"),), list(Tensor([2, 100, 4, 5],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 100, 4, 5],"float64"),), list(Tensor([2, 100, 4, 5],"float64"),Tensor([100],"float64"),Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 100, 4],"float32"),), list(Tensor([2, 100, 4],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 100],"float32"),), list(Tensor([2, 100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 100],"float64"),), list(Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 10],"float16"),), list(Tensor([10, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 10],"float64"),), list(Tensor([10, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 1],"float32"),), list(Tensor([1],"float32"),Tensor([2],"float32"),), list(Tensor([2, 1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float16"),), list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),), Tensor([2, 2, 2],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float16"),), list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),), list(Tensor([2, 2, 2],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float32"),), list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),), Tensor([2, 2, 2],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float32"),), list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),), list(Tensor([2, 2, 2],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),), Tensor([2, 2, 2],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),), list(Tensor([2, 2, 2],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),), Tensor([2, 2, 2],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),), list(Tensor([2, 2, 2],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),), list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),Tensor([2, 2, 2],"float16"),), list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),Tensor([2, 2, 2],"float16"),), list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),Tensor([2, 2, 2],"float16"),Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),Tensor([2, 2, 2],"float16"),), list(Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),Tensor([2, 2, 2],"float16"),Tensor([2, 2, 3],"float16"),Tensor([2, 3, 2],"float16"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),), list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),Tensor([2, 2, 2],"float32"),), list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),Tensor([2, 2, 2],"float32"),), list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),Tensor([2, 2, 2],"float32"),Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),Tensor([2, 2, 2],"float32"),), list(Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),Tensor([2, 2, 2],"float32"),Tensor([2, 2, 3],"float32"),Tensor([2, 3, 2],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),Tensor([2, 2, 3],"float64"),Tensor([1, 3, 2],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),), list(Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),Tensor([2, 2, 2],"float64"),Tensor([2, 2, 3],"float64"),Tensor([2, 3, 2],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 2],"float32"),), list(Tensor([2, 2],"float32"),), )
paddle.grad(list(Tensor([2, 3, 2, 6],"float64"),), list(Tensor([3, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 20],"float32"),), list(Tensor([6, 20],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 20],"float64"),), list(Tensor([2, 3, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 4, 1],"float64"),), list(Tensor([2, 3, 4, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 4, 5],"float32"),), list(Tensor([2, 3, 4, 5],"float32"),Tensor([2, 3, 4, 5],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 4],"float16"),), list(Tensor([2, 3, 4, 5],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 4],"float16"),Tensor([2, 4, 5],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([2, 4, 5],"float16"),Tensor([2, 3, 5],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float16"),Tensor([2, 5, 4],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([2, 5, 4],"float16"),Tensor([2, 3, 5],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),Tensor([2, 3],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),Tensor([2, 3],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),Tensor([2, 3],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),Tensor([2, 3],"float16"),Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),Tensor([2, 3],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),Tensor([2, 3],"float16"),Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float32"),Tensor([2, 4, 5],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([2, 4, 5],"float32"),Tensor([2, 3, 5],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float32"),Tensor([2, 5, 4],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([2, 5, 4],"float32"),Tensor([2, 3, 5],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),Tensor([2, 3],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),Tensor([2, 3],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),Tensor([2, 3],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),Tensor([2, 3],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float64"),), list(Tensor([2, 3, 4, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 3, 4],"float64"),Tensor([2, 4, 5],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([2, 4, 5],"float64"),Tensor([2, 3, 5],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float64"),Tensor([2, 5, 4],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),Tensor([2, 3],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),Tensor([2, 3],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),Tensor([2, 3],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),Tensor([2, 3],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5, 4],"float16"),), list(Tensor([2, 1, 5, 2],"float16"),Tensor([1, 3, 2, 4],"float16"),), Tensor([2, 3, 5, 4],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), Tensor([2, 3, 5, 4],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5, 4],"float32"),), list(Tensor([2, 1, 5, 2],"float32"),Tensor([1, 3, 2, 4],"float32"),), list(Tensor([2, 3, 5, 4],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5, 4],"float64"),), list(Tensor([2, 1, 5, 2],"float64"),Tensor([1, 3, 2, 4],"float64"),), Tensor([2, 3, 5, 4],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([2, 4, 5],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([2, 5, 4],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float16"),), list(Tensor([2, 4, 3],"float16"),Tensor([2, 4, 5],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float16"),), list(Tensor([2, 4, 3],"float16"),Tensor([2, 5, 4],"float16"),), Tensor([2, 3, 5],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([2, 4, 5],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([2, 5, 4],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float32"),), list(Tensor([2, 4, 3],"float32"),Tensor([2, 4, 5],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float32"),), list(Tensor([2, 4, 3],"float32"),Tensor([2, 5, 4],"float32"),), Tensor([2, 3, 5],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([2, 4, 5],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([2, 5, 4],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 4, 5],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), Tensor([2, 3, 5],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), list(Tensor([2, 3, 5],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), Tensor([2, 3],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float16"),), list(Tensor([2, 3, 4],"float16"),Tensor([4],"float16"),), list(Tensor([2, 3],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float16"),Tensor([3],"float16"),), list(Tensor([2, 3],"float16"),Tensor([3],"float16"),Tensor([2],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), Tensor([2, 3],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float32"),), list(Tensor([2, 3, 4],"float32"),Tensor([4],"float32"),), list(Tensor([2, 3],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float32"),Tensor([3],"float32"),), list(Tensor([2, 3],"float32"),Tensor([3],"float32"),Tensor([2],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), Tensor([2, 3],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float64"),), list(Tensor([2, 3, 4],"float64"),Tensor([4],"float64"),), list(Tensor([2, 3],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 3],"float64"),Tensor([3],"float64"),), list(Tensor([2, 3],"float64"),Tensor([3],"float64"),Tensor([2],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float16"),Tensor([2, 4, 5],"float16"),), list(Tensor([2, 4, 3],"float16"),Tensor([2, 4, 5],"float16"),Tensor([2, 3, 5],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float16"),Tensor([2, 5, 4],"float16"),), list(Tensor([2, 4, 3],"float16"),Tensor([2, 5, 4],"float16"),Tensor([2, 3, 5],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float32"),Tensor([2, 4, 5],"float32"),), list(Tensor([2, 4, 3],"float32"),Tensor([2, 4, 5],"float32"),Tensor([2, 3, 5],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float32"),Tensor([2, 5, 4],"float32"),), list(Tensor([2, 4, 3],"float32"),Tensor([2, 5, 4],"float32"),Tensor([2, 3, 5],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float64"),Tensor([2, 4, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 4, 5],"float64"),Tensor([2, 3, 5],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), create_graph=bool(False), retain_graph=bool(False), )
paddle.grad(list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),), list(Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),Tensor([2, 3, 5],"float64"),Tensor([2, 4, 3],"float64"),Tensor([2, 5, 4],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(list(Tensor([2, 4, 5, 6],"float64"),), list(Tensor([4, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 4, 5],bfloat16),), list(Tensor([2, 3, 4, 5],bfloat16),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 4, 5],"float64"),), list(Tensor([2, 3, 4, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 5, 20],"float16"),), list(Tensor([5, 20],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 5, 20],"float64"),), list(Tensor([5, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 6, 6, 3],"float32"),), list(Tensor([2, 6, 6, 3],"float32"),Tensor([108],"float32"),Tensor([108],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 6, 6, 3],"float64"),), list(Tensor([2, 6, 6, 3],"float64"),Tensor([108],"float64"),Tensor([108],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2, 60],"float32"),), list(Tensor([2, 60],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([20, 2, 4],"float64"),), list(Tensor([20, 2, 4],"float64"),Tensor([20, 2, 4],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([20, 5, 2],"float16"),), list(Tensor([2, 3, 4, 1, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([20, 5, 2],"float64"),), list(Tensor([2, 3, 4, 1, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([20],"float16"),), list(Tensor([5, 20],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([20],"float64"),), list(Tensor([5, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2],"float16"),), list(Tensor([10, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2],"float16"),), list(Tensor([2, 3],"float16"),Tensor([3],"float16"),), Tensor([2],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float16"),), list(Tensor([5, 2, 3, 1, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2],"float16"),Tensor([2, 3],"float16"),), list(Tensor([2],"float16"),Tensor([2, 3],"float16"),Tensor([3],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float16"),Tensor([2],"float16"),), list(Tensor([2],"float16"),Tensor([2],"float16"),Tensor([],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float16"),Tensor([3, 2],"float16"),), list(Tensor([2],"float16"),Tensor([3, 2],"float16"),Tensor([3],"float16"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float32"),), list(Tensor([1],"float32"),), list(Tensor([2],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([2],"float32"),), list(Tensor([2, 1],"float32"),), list(Tensor([2],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([2],"float32"),), list(Tensor([2, 3],"float32"),Tensor([3],"float32"),), Tensor([2],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float32"),Tensor([2, 3],"float32"),), list(Tensor([2],"float32"),Tensor([2, 3],"float32"),Tensor([3],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float32"),Tensor([2],"float32"),), list(Tensor([2],"float32"),Tensor([2],"float32"),Tensor([],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float32"),Tensor([3, 2],"float32"),), list(Tensor([2],"float32"),Tensor([3, 2],"float32"),Tensor([3],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float64"),), list(Tensor([10, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2],"float64"),), list(Tensor([2, 3],"float64"),Tensor([3],"float64"),), Tensor([2],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float64"),), list(Tensor([5, 2, 3, 1, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([2],"float64"),Tensor([2, 3],"float64"),), list(Tensor([2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float64"),Tensor([2],"float64"),), list(Tensor([2],"float64"),Tensor([2],"float64"),Tensor([],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([2],"float64"),Tensor([3, 2],"float64"),), list(Tensor([2],"float64"),Tensor([3, 2],"float64"),Tensor([3],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([3, 1, 10],"float16"),), list(Tensor([3, 4, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 1],"float32"),), list(Tensor([3],"float32"),Tensor([1],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), list(Tensor([1],"float32"),), list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), list(Tensor([3, 1],"float32"),), list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), list(Tensor([3],"float32"),Tensor([3, 1],"float32"),Tensor([1],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([3, 2, 2, 1, 10],"float16"),), list(Tensor([3, 2, 2, 1, 10],"float16"),Tensor([100],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 2, 2, 1, 10],"float64"),), list(Tensor([3, 2, 2, 1, 10],"float64"),Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 2, 5, 6],"float64"),), list(Tensor([3, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 20, 1],"float32"),), list(Tensor([3, 20, 3],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 20],"float32"),), list(Tensor([3, 20, 3],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 20],"float64"),), list(Tensor([10, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 3],"float16"),), list(Tensor([3, 3],"float16"),Tensor([2, 3],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([2, 3],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([3, 4, 2, 6],"float64"),), list(Tensor([3, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 4, 5, 3],bfloat16),), list(Tensor([3, 4, 5, 6],bfloat16),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 4, 5, 3],"float16"),), list(Tensor([3, 4, 5, 6],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 4, 5, 3],"float64"),), list(Tensor([3, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 4, 5, 6],"float64"),), list(Tensor([3, 4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 40],"float64"),), list(Tensor([3, 40],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 4],"float64"),), list(Tensor([2, 3, 4, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 50],"float16"),), list(Tensor([3, 50],"float16"),Tensor([2, 50],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3, 50],"float32"),), list(Tensor([3, 50],"float32"),Tensor([2, 50],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([3],"float16"),), list(Tensor([2],"float16"),Tensor([2, 3],"float16"),), Tensor([3],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([3],"float16"),), list(Tensor([2],"float16"),Tensor([3, 2],"float16"),), Tensor([3],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([3],"float32"),), list(Tensor([1],"float32"),Tensor([3],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([3],"float32"),), list(Tensor([2],"float32"),Tensor([2, 3],"float32"),), Tensor([3],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([3],"float32"),), list(Tensor([2],"float32"),Tensor([3, 2],"float32"),), Tensor([3],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([3],"float32"),), list(Tensor([3, 1],"float32"),Tensor([1],"float32"),), list(Tensor([3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3],"float32"),), list(Tensor([3],"float32"),Tensor([1],"float32"),), list(Tensor([3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3],"float32"),Tensor([3],"float32"),), list(Tensor([1],"float32"),Tensor([3],"float32"),Tensor([3],"float32"),), retain_graph=bool(False), create_graph=bool(False), )
paddle.grad(list(Tensor([3],"float32"),Tensor([3],"float32"),), list(Tensor([3],"float32"),), list(Tensor([3],"float32"),Tensor([3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3],"float32"),Tensor([3],"float32"),), list(Tensor([3],"float32"),Tensor([3],"float32"),), list(Tensor([3],"float32"),Tensor([3],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([3],"float64"),), list(Tensor([2],"float64"),Tensor([2, 3],"float64"),), Tensor([3],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([3],"float64"),), list(Tensor([2],"float64"),Tensor([3, 2],"float64"),), Tensor([3],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([4, 100, 16],"float32"),), list(Tensor([4, 100, 16],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 100, 4, 4],"float16"),), list(Tensor([4, 100, 4, 4],"float16"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 100, 4, 4],"float32"),), list(Tensor([4, 100, 4, 4],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 100],"float32"),), list(Tensor([4, 100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 2, 6],"float16"),Tensor([4, 1, 6],"float16"),Tensor([4, 2, 6],"float16"),), list(Tensor([4, 5, 6],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 2, 6],"float64"),Tensor([4, 1, 6],"float64"),Tensor([4, 2, 6],"float64"),), list(Tensor([4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 20],"float64"),), list(Tensor([10, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 256],"float32"),), list(Tensor([4, 256],"float32"),), list(Tensor([4, 256],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 256],"float32"),), list(Tensor([4, 256],"float32"),Tensor([256],"float32"),Tensor([256],"float32"),), list(Tensor([4, 256],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 5, 2],"float16"),Tensor([4, 5, 2],"float16"),Tensor([4, 5, 2],"float16"),), list(Tensor([4, 5, 6],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 5, 2],"float64"),Tensor([4, 5, 1],"float64"),Tensor([4, 5, 3],"float64"),), list(Tensor([4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 5, 2],"float64"),Tensor([4, 5, 2],"float64"),Tensor([4, 5, 2],"float64"),), list(Tensor([4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 5],"float64"),), list(Tensor([4, 5, 6],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 6, 7, 16],"float64"),), list(Tensor([1, 1, 7, 16],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 8, 16, 32],"float32"),), list(Tensor([4, 8, 16, 32],"float32"),), list(Tensor([4, 8, 16, 32],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 8, 16, 32],"float32"),), list(Tensor([4, 8, 16, 32],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),), list(Tensor([4, 8, 16, 32],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 8, 32],"float32"),), list(Tensor([4, 8, 32],"float32"),), list(Tensor([4, 8, 32],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([4, 8, 32],"float32"),), list(Tensor([4, 8, 32],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),), list(Tensor([4, 8, 32],"float32"),), allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 1, 20],"float32"),), list(Tensor([5, 20],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 2, 10],"float32"),), list(Tensor([5, 20],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 5, 1],"float16"),), list(Tensor([5, 5, 5],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 5, 1],"float64"),), list(Tensor([5, 5, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 5, 5],"float32"),), list(Tensor([5, 25],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 5],"float64"),), tuple(Tensor([5, 5],"float64"),), allow_unused=bool(True), )
paddle.grad(list(Tensor([5, 6, 1],"float16"),), list(Tensor([5, 6, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6, 1],"float32"),), list(Tensor([5, 6, 10],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6, 1],"float32"),), list(Tensor([5, 6, 7],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6, 2],"float16"),), list(Tensor([5, 6, 2, 3, 4, 2],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6, 2],"float64"),), list(Tensor([5, 6, 2, 3, 4, 2],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6],"complex128"),Tensor([5, 6],"complex128"),Tensor([5, 6],"complex128"),Tensor([5, 6],"complex128"),Tensor([5, 6],"complex128"),Tensor([5, 6],"complex128"),Tensor([5, 6],"complex128"),), list(Tensor([5, 6, 7],"complex128"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6],"complex64"),Tensor([5, 6],"complex64"),Tensor([5, 6],"complex64"),Tensor([5, 6],"complex64"),Tensor([5, 6],"complex64"),Tensor([5, 6],"complex64"),Tensor([5, 6],"complex64"),), list(Tensor([5, 6, 7],"complex64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6],"float16"),Tensor([5, 6],"float16"),Tensor([5, 6],"float16"),Tensor([5, 6],"float16"),Tensor([5, 6],"float16"),Tensor([5, 6],"float16"),Tensor([5, 6],"float16"),), list(Tensor([5, 6, 7],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6],"float64"),), list(Tensor([5, 6, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 6],"float64"),Tensor([5, 6],"float64"),Tensor([5, 6],"float64"),Tensor([5, 6],"float64"),Tensor([5, 6],"float64"),Tensor([5, 6],"float64"),Tensor([5, 6],"float64"),), list(Tensor([5, 6, 7],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 7],"complex128"),Tensor([5, 7],"complex128"),Tensor([5, 7],"complex128"),Tensor([5, 7],"complex128"),Tensor([5, 7],"complex128"),Tensor([5, 7],"complex128"),), list(Tensor([5, 6, 7],"complex128"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 7],"complex64"),Tensor([5, 7],"complex64"),Tensor([5, 7],"complex64"),Tensor([5, 7],"complex64"),Tensor([5, 7],"complex64"),Tensor([5, 7],"complex64"),), list(Tensor([5, 6, 7],"complex64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 7],"float16"),Tensor([5, 7],"float16"),Tensor([5, 7],"float16"),Tensor([5, 7],"float16"),Tensor([5, 7],"float16"),Tensor([5, 7],"float16"),), list(Tensor([5, 6, 7],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5, 7],"float64"),Tensor([5, 7],"float64"),Tensor([5, 7],"float64"),Tensor([5, 7],"float64"),Tensor([5, 7],"float64"),Tensor([5, 7],"float64"),), list(Tensor([5, 6, 7],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([5],"float64"),), list(Tensor([5, 6, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([6, 10],"float16"),), list(Tensor([5, 6, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([6, 10],"float64"),), list(Tensor([5, 6, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([6, 7],"complex128"),Tensor([6, 7],"complex128"),Tensor([6, 7],"complex128"),Tensor([6, 7],"complex128"),Tensor([6, 7],"complex128"),), list(Tensor([5, 6, 7],"complex128"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([6, 7],"complex64"),Tensor([6, 7],"complex64"),Tensor([6, 7],"complex64"),Tensor([6, 7],"complex64"),Tensor([6, 7],"complex64"),), list(Tensor([5, 6, 7],"complex64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([6, 7],"float16"),Tensor([6, 7],"float16"),Tensor([6, 7],"float16"),Tensor([6, 7],"float16"),Tensor([6, 7],"float16"),), list(Tensor([5, 6, 7],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([6, 7],"float64"),Tensor([6, 7],"float64"),Tensor([6, 7],"float64"),Tensor([6, 7],"float64"),Tensor([6, 7],"float64"),), list(Tensor([5, 6, 7],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([60, 2],"float16"),), list(Tensor([60, 2],"float16"),Tensor([60, 2],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([60, 2],"float64"),), list(Tensor([60, 2],"float64"),Tensor([60, 2],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([64, 20],"float64"),), list(Tensor([64, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([8, 128],"float64"),), list(Tensor([8, 128],"float64"),Tensor([8, 128],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([8, 2, 2, 1, 10],"float64"),), list(Tensor([8, 2, 2, 1, 10],"float64"),Tensor([10, 5, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([8, 64],"float64"),), list(Tensor([8, 64],"float64"),Tensor([8, 64],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float16"),), list(Tensor([10, 10],"float16"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float16"),), list(Tensor([2],"float16"),Tensor([2],"float16"),), Tensor([],"float16"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([],"float32"),), list(Tensor([100, 1, 1],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float32"),), list(Tensor([2],"float32"),Tensor([2],"float32"),), )
paddle.grad(list(Tensor([],"float32"),), list(Tensor([2],"float32"),Tensor([2],"float32"),), Tensor([],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([],"float32"),), list(Tensor([3],"float32"),), list(Tensor([1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([],"float32"),), list(Tensor([3],"float32"),Tensor([3],"float32"),), list(Tensor([1],"float32"),), retain_graph=bool(True), create_graph=bool(True), )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([10, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([100, 1, 1],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([100],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([2, 3, 4, 5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([2],"float64"),Tensor([2],"float64"),), Tensor([],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([5, 20],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([5],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([6, 2, 10],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([],"float32"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(list(Tensor([],"float64"),), list(Tensor([],"float64"),), None, allow_unused=bool(True), no_grad_vars=None, )
paddle.grad(outputs=Tensor([1, 4],"float32"), inputs=list(Tensor([1, 4],"float32"),), grad_outputs=list(Tensor([1, 4],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([1],"float32"), inputs=Tensor([1, 1000],"float32"), )
paddle.grad(outputs=Tensor([2, 1, 1, 2],"float64"), inputs=list(Tensor([2, 3, 3, 2],"float64"),Tensor([2, 2, 1, 1],"float64"),), grad_outputs=list(Tensor([2, 1, 1, 2],"float64"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([2, 2, 2, 2],"float64"), inputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),), grad_outputs=list(Tensor([2, 2, 2, 2],"float64"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([2, 2, 2],"float32"), inputs=list(Tensor([4, 5, 6],"float32"),), grad_outputs=list(Tensor([2, 2, 2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([2, 2, 3, 3],"float64"), inputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),), grad_outputs=list(Tensor([2, 2, 3, 3],"float64"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([2, 2, 3, 3],"float64"), inputs=list(Tensor([2, 4, 3, 3],"float64"),Tensor([4, 2, 1, 1],"float64"),), grad_outputs=list(Tensor([2, 2, 3, 3],"float64"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([2, 3, 32, 32],"float32"), inputs=Tensor([2, 6, 32, 32],"float32"), grad_outputs=Tensor([2, 3, 32, 32],"float32"), create_graph=bool(True), retain_graph=bool(True), only_inputs=bool(True), )
paddle.grad(outputs=Tensor([2, 3, 3],"float64"), inputs=list(Tensor([2, 3, 3],"float64"),), grad_outputs=Tensor([2, 3, 3],"float64"), )
paddle.grad(outputs=Tensor([2, 3, 4],"float64"), inputs=list(Tensor([2, 3, 4],"float32"),), grad_outputs=list(Tensor([2, 3, 4],"float64"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([2, 3],"float32"), inputs=list(Tensor([2, 3],"float32"),), grad_outputs=list(Tensor([2, 3],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([3, 2, 2],"float32"), inputs=list(Tensor([3, 2, 2],"float32"),), grad_outputs=list(Tensor([3, 2, 2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([3, 2, 4],"float32"), inputs=list(Tensor([2, 3, 4],"float32"),), grad_outputs=list(Tensor([3, 2, 4],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([3, 4, 5],"float32"), inputs=list(Tensor([3, 4, 5],"float32"),), grad_outputs=list(Tensor([3, 4, 5],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=Tensor([4, 8],"float32"), inputs=Tensor([4, 8],"float32"), grad_outputs=Tensor([4, 8],"float32"), create_graph=bool(False), )
paddle.grad(outputs=Tensor([4, 8],"float32"), inputs=Tensor([4, 8],"float32"), grad_outputs=Tensor([4, 8],"float32"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(outputs=Tensor([4, 8],"float64"), inputs=Tensor([4, 8],"float64"), grad_outputs=Tensor([4, 8],"float64"), create_graph=bool(False), )
paddle.grad(outputs=Tensor([4, 8],"float64"), inputs=Tensor([4, 8],"float64"), grad_outputs=Tensor([4, 8],"float64"), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(outputs=Tensor([],"float32"), inputs=Tensor([1, 1],"float32"), create_graph=bool(False), )
paddle.grad(outputs=list(Tensor([1, 4],"float32"),), inputs=list(Tensor([1, 4],"float32"),Tensor([1, 4],"float32"),), grad_outputs=list(Tensor([1, 4],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([1, 4],"float32"),), inputs=list(Tensor([1, 4],"float32"),Tensor([1, 4],"float32"),), grad_outputs=list(Tensor([1, 4],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([1, 4],"float32"),), inputs=list(Tensor([1, 4],"float32"),Tensor([1, 4],"float32"),Tensor([1, 4],"float32"),), grad_outputs=list(Tensor([1, 4],"float32"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([10, 10],"float64"),), inputs=list(Tensor([10, 10],"float64"),Tensor([10, 10],"float64"),), grad_outputs=list(Tensor([10, 10],"float64"),), )
paddle.grad(outputs=list(Tensor([10, 2, 5],"float32"),), inputs=list(Tensor([10, 2, 5],"float32"),), )
paddle.grad(outputs=list(Tensor([100, 1],"float64"),), inputs=list(Tensor([100, 1],"float64"),), grad_outputs=list(Tensor([100, 1],"float64"),), )
paddle.grad(outputs=list(Tensor([10],"complex128"),Tensor([10, 10],"complex128"),), inputs=list(Tensor([10, 10],"complex128"),), grad_outputs=list(Tensor([10],"complex128"),Tensor([10, 10],"complex128"),), )
paddle.grad(outputs=list(Tensor([10],"complex64"),Tensor([10, 10],"complex64"),), inputs=list(Tensor([10, 10],"complex64"),), grad_outputs=list(Tensor([10],"complex64"),Tensor([10, 10],"complex64"),), )
paddle.grad(outputs=list(Tensor([16, 21],"float64"),), inputs=list(Tensor([16, 21],"float64"),Tensor([1, 2],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([16, 21],"float64"),), inputs=list(Tensor([16, 21],"float64"),Tensor([1],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([16, 21],"float64"),), inputs=list(Tensor([16, 21],"float64"),Tensor([2, 1],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([16, 21],"float64"),), inputs=list(Tensor([16, 21],"float64"),Tensor([2],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([16, 21],"float64"),), inputs=list(Tensor([16, 21],"float64"),Tensor([4],"float64"),), create_graph=bool(False), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([1],"float32"),), inputs=list(Tensor([1],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([2, 2, 2],"float32"),), inputs=list(Tensor([4, 5, 6],"float32"),Tensor([2, 2, 2],"float32"),Tensor([4, 5, 6],"float32"),), grad_outputs=list(Tensor([2, 2, 2],"float32"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),), inputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),Tensor([2, 2, 2, 2],"float64"),), grad_outputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),), inputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),Tensor([2, 2, 3, 3],"float64"),), grad_outputs=list(Tensor([2, 2, 3, 3],"float64"),Tensor([2, 2, 1, 1],"float64"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3, 3, 2],"float64"),Tensor([2, 2, 1, 1],"float64"),), inputs=list(Tensor([2, 3, 3, 2],"float64"),Tensor([2, 2, 1, 1],"float64"),Tensor([2, 1, 1, 2],"float64"),), grad_outputs=list(Tensor([2, 3, 3, 2],"float64"),Tensor([2, 2, 1, 1],"float64"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3, 4, 5],"complex128"),), inputs=list(Tensor([2, 3, 4, 5],"complex128"),), grad_outputs=list(Tensor([2, 3, 4, 5],"complex128"),), )
paddle.grad(outputs=list(Tensor([2, 3, 4, 5],"complex64"),), inputs=list(Tensor([2, 3, 4, 5],"complex64"),), grad_outputs=list(Tensor([2, 3, 4, 5],"complex64"),), )
paddle.grad(outputs=list(Tensor([2, 3, 4, 5],"float16"),), inputs=list(Tensor([2, 3, 4, 5],"float16"),), grad_outputs=list(Tensor([2, 3, 4, 5],"float16"),), )
paddle.grad(outputs=list(Tensor([2, 3, 4, 5],"float32"),), inputs=list(Tensor([2, 3, 4, 5],"float32"),), grad_outputs=list(Tensor([2, 3, 4, 5],"float32"),), )
paddle.grad(outputs=list(Tensor([2, 3, 4],"float32"),), inputs=list(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float64"),), grad_outputs=list(Tensor([2, 3, 4],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3, 4],"float32"),), inputs=list(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float64"),), grad_outputs=list(Tensor([2, 3, 4],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3, 4],"float32"),), inputs=list(Tensor([2, 3, 4],"float32"),Tensor([3, 2, 4],"float32"),), grad_outputs=list(Tensor([2, 3, 4],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3, 4],"float32"),), inputs=list(Tensor([2, 3, 4],"float32"),Tensor([3, 2, 4],"float32"),), grad_outputs=list(Tensor([2, 3, 4],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3, 4],"float64"),), inputs=list(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float64"),Tensor([2, 3, 4],"float32"),), grad_outputs=list(Tensor([2, 3, 4],"float64"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3],"float32"),), inputs=list(Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), grad_outputs=list(Tensor([2, 3],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3],"float32"),), inputs=list(Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), grad_outputs=list(Tensor([2, 3],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 3],"float32"),), inputs=list(Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), grad_outputs=list(Tensor([2, 3],"float32"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2, 4, 3, 3],"float64"),Tensor([4, 2, 1, 1],"float64"),), inputs=list(Tensor([2, 4, 3, 3],"float64"),Tensor([4, 2, 1, 1],"float64"),Tensor([2, 2, 3, 3],"float64"),), grad_outputs=list(Tensor([2, 4, 3, 3],"float64"),Tensor([4, 2, 1, 1],"float64"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([2048, 1024],"float16"),), inputs=list(Tensor([2048, 1024],"float16"),), grad_outputs=list(Tensor([2048, 1024],"float16"),), )
paddle.grad(outputs=list(Tensor([2048, 1024],"float32"),), inputs=list(Tensor([2048, 1024],"float32"),), grad_outputs=list(Tensor([2048, 1024],"float32"),), )
paddle.grad(outputs=list(Tensor([2048, 1024],"float64"),), inputs=list(Tensor([2048, 1024],"float64"),), grad_outputs=list(Tensor([2048, 1024],"float64"),), )
paddle.grad(outputs=list(Tensor([3, 2, 2],"float32"),), inputs=list(Tensor([3, 2, 2],"float32"),Tensor([3, 2, 2],"float32"),), grad_outputs=list(Tensor([3, 2, 2],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([3, 2, 2],"float32"),), inputs=list(Tensor([3, 2, 2],"float32"),Tensor([3, 2, 2],"float32"),), grad_outputs=list(Tensor([3, 2, 2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([3, 2, 2],"float32"),), inputs=list(Tensor([3, 2, 2],"float32"),Tensor([3, 2, 2],"float32"),Tensor([3, 2, 2],"float32"),), grad_outputs=list(Tensor([3, 2, 2],"float32"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([3, 2, 4],"float32"),), inputs=list(Tensor([2, 3, 4],"float32"),Tensor([3, 2, 4],"float32"),Tensor([2, 3, 4],"float32"),), grad_outputs=list(Tensor([3, 2, 4],"float32"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([3, 4, 5],"float32"),), inputs=list(Tensor([3, 4, 5],"float32"),Tensor([3, 4, 5],"float32"),), grad_outputs=list(Tensor([3, 4, 5],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([3, 4, 5],"float32"),), inputs=list(Tensor([3, 4, 5],"float32"),Tensor([3, 4, 5],"float32"),), grad_outputs=list(Tensor([3, 4, 5],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([3, 4, 5],"float32"),), inputs=list(Tensor([3, 4, 5],"float32"),Tensor([3, 4, 5],"float32"),Tensor([3, 4, 5],"float32"),), grad_outputs=list(Tensor([3, 4, 5],"float32"),), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([4, 5, 6],"float32"),), inputs=list(Tensor([4, 5, 6],"float32"),Tensor([2, 2, 2],"float32"),), grad_outputs=list(Tensor([4, 5, 6],"float32"),), create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([4, 5, 6],"float32"),), inputs=list(Tensor([4, 5, 6],"float32"),Tensor([2, 2, 2],"float32"),), grad_outputs=list(Tensor([4, 5, 6],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([4, 8],"float32"),), inputs=list(Tensor([4, 8],"float32"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([4, 8],"float64"),), inputs=list(Tensor([4, 8],"float64"),), create_graph=bool(True), retain_graph=bool(True), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=None, create_graph=bool(False), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=bool(True), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=bool(True), create_graph=bool(True), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=None, create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=None, create_graph=bool(True), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=bool(True), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([5, 10],"float32"),Tensor([5, 10],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=bool(True), create_graph=bool(True), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([50],"float32"),Tensor([50],"float32"),), inputs=list(Tensor([50],"float32"),), grad_outputs=list(Tensor([50],"float32"),Tensor([50],"float32"),), no_grad_vars=None, retain_graph=bool(True), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([50],"float32"),Tensor([50],"float32"),), inputs=list(Tensor([50],"float32"),), grad_outputs=list(Tensor([50],"float32"),Tensor([50],"float32"),), no_grad_vars=None, retain_graph=bool(True), create_graph=bool(True), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=None, retain_graph=None, create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(outputs=list(Tensor([],"float32"),), inputs=list(Tensor([5, 10],"float32"),), grad_outputs=None, no_grad_vars=list(Tensor([5, 10],"float32"),), retain_graph=None, create_graph=bool(True), allow_unused=bool(False), )
paddle.grad(tuple(Tensor([2, 3, 3, 4],"float32"),), tuple(Tensor([2, 3, 1, 4],"float32"),Tensor([2, 1, 3, 4],"float32"),), tuple(Tensor([2, 3, 3, 4],"float32"),), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([2, 3, 3, 4],"float32"),), tuple(Tensor([2, 3, 1, 4],"float32"),Tensor([3, 3, 4],"float32"),), tuple(Tensor([2, 3, 3, 4],"float32"),), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([2, 3, 3, 4],"float32"),), tuple(Tensor([2, 3, 3, 4],"float32"),Tensor([2, 1, 3, 4],"float32"),), tuple(Tensor([2, 3, 3, 4],"float32"),), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([2, 3, 4],"float32"),), tuple(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),), tuple(Tensor([2, 3, 4],"float32"),), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),), Tensor([2],"float32"), tuple(Tensor([3, 2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),), Tensor([],"float32"), tuple(Tensor([3, 2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([2, 3],"float32"),), Tensor([3, 3],"float32"), tuple(Tensor([3, 2],"float32"),Tensor([2, 3],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), list(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), list(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), tuple(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), list(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), list(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), create_graph=bool(False), allow_unused=bool(False), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), tuple(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), None, create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), tuple(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), list(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.grad(tuple(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), tuple(Tensor([3, 2],"float32"),Tensor([3, 2],"float32"),), tuple(Tensor([3, 2],"float32"),Tensor([3, 3],"float32"),), create_graph=bool(True), allow_unused=bool(True), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([13, 17],"float64"), Tensor([13, 17],"float64"), )
paddle.heaviside(Tensor([13, 17],"int32"), Tensor([13, 17],"int32"), )
paddle.heaviside(Tensor([13, 17],"int64"), Tensor([13, 17],"int64"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.heaviside(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.heaviside(Tensor([],"float32"), Tensor([],"float32"), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=int(5), weights=Tensor([4, 2],"float64"), ranges=list(float(1.0),float(10.0),float(1.0),float(100.0),), density=bool(True), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list(int(3),int(4),), weights=None, ranges=None, density=bool(False), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list(int(3),int(4),), weights=None, ranges=None, density=bool(True), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list(int(3),int(4),), weights=None, ranges=list(float(1.0),float(10.0),float(1.0),float(100.0),), density=bool(False), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list(int(3),int(4),), weights=None, ranges=list(float(1.0),float(10.0),float(1.0),float(100.0),), density=bool(True), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list(int(3),int(4),), weights=Tensor([4, 2],"float64"), ranges=None, density=bool(True), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list(int(3),int(4),), weights=Tensor([4, 2],"float64"), ranges=list(float(1.0),float(10.0),float(1.0),float(100.0),), density=bool(True), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=bool(True), )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list(int(1),int(2),int(3),int(4),), weights=Tensor([4, 2],"float64"), ranges=None, density=bool(False), )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list(int(1),int(2),int(3),int(4),), weights=Tensor([4, 2],"float64"), ranges=None, density=bool(True), )
paddle.histogramdd(Tensor([4, 2],"float32"), bins=list(int(2),int(2),), weights=None, ranges=list(float(0.0),float(1.0),float(0.0),float(1.0),), density=bool(True), )
paddle.histogramdd(Tensor([4, 2],"float64"), bins=list(int(2),int(2),), weights=None, ranges=list(float(0.0),float(1.0),float(0.0),float(1.0),), density=bool(True), )
paddle.histogramdd(Tensor([4, 2],"float64"), bins=list(int(3),int(3),), weights=Tensor([4],"float64"), ranges=None, density=bool(False), )
paddle.hsplit(Tensor([4, 6, 3],"int64"), int(2), )
paddle.hsplit(Tensor([4, 6, 3],"int64"), int(3), )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list(int(-1),), )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list(int(-1),int(1),int(3),), )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list(int(2),int(4),), )
paddle.hsplit(Tensor([4, 6, 3],"int64"), tuple(int(2),int(1),int(3),), )
paddle.hsplit(Tensor([4, 6],"int64"), int(2), )
paddle.hsplit(Tensor([4, 6],"int64"), int(3), )
paddle.hsplit(Tensor([4, 6],"int64"), list(int(-1),), )
paddle.hsplit(Tensor([4, 6],"int64"), list(int(-1),int(1),int(3),), )
paddle.hsplit(Tensor([4, 6],"int64"), list(int(2),int(4),), )
paddle.hsplit(Tensor([4, 6],"int64"), tuple(int(2),int(1),int(3),), )
paddle.hsplit(Tensor([6],bool), int(3), )
paddle.hsplit(Tensor([6],"float16"), int(3), )
paddle.hsplit(Tensor([6],"float32"), int(3), )
paddle.hsplit(Tensor([6],"float64"), int(3), )
paddle.hsplit(Tensor([6],"int32"), int(3), )
paddle.hsplit(Tensor([6],"int64"), int(2), )
paddle.hsplit(Tensor([6],"int64"), int(3), )
paddle.hsplit(Tensor([6],"int64"), list(int(-1),), )
paddle.hsplit(Tensor([6],"int64"), list(int(-1),int(1),int(3),), )
paddle.hsplit(Tensor([6],"int64"), list(int(2),int(4),), )
paddle.hsplit(Tensor([6],"int64"), tuple(int(2),int(1),int(3),), )
paddle.hsplit(Tensor([6],uint8), int(3), )
paddle.hstack(list(Tensor([1, 1, 1, 1],"float64"),), )
paddle.hstack(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), )
paddle.hstack(list(Tensor([1, 1, 1],"float64"),), )
paddle.hstack(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), )
paddle.hstack(list(Tensor([1, 1],"float64"),), )
paddle.hstack(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), )
paddle.hstack(list(Tensor([1],"float64"),), )
paddle.hstack(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.hstack(list(Tensor([3, 2],"float64"),), )
paddle.hstack(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), )
paddle.hstack(list(Tensor([3, 4, 2, 5],"float64"),), )
paddle.hstack(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), )
paddle.hstack(list(Tensor([3, 4, 2],"float64"),), )
paddle.hstack(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), )
paddle.hstack(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), )
paddle.hstack(list(Tensor([],"float16"),), )
paddle.hstack(list(Tensor([],"float32"),), )
paddle.hstack(list(Tensor([],"float64"),), )
paddle.hstack(list(Tensor([],"float64"),Tensor([2],"float64"),), )
paddle.hstack(list(Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),), )
paddle.hstack(list(Tensor([],"int32"),), )
paddle.hstack(list(Tensor([],"int64"),), )
paddle.hypot(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.i0(Tensor([10, 20, 1],"float32"), )
paddle.i0(Tensor([4],"float32"), )
paddle.i0(Tensor([4],"float64"), )
paddle.i0(Tensor([6],"float64"), )
paddle.i0(Tensor([9],"float32"), )
paddle.i0(Tensor([9],"float64"), )
paddle.i0(Tensor([],"float32"), )
paddle.i0e(Tensor([4],"float32"), )
paddle.i0e(Tensor([4],"float64"), )
paddle.i0e(Tensor([6],"float64"), )
paddle.i0e(Tensor([9],"float32"), )
paddle.i0e(Tensor([9],"float64"), )
paddle.i0e(Tensor([],"float32"), )
paddle.i1(Tensor([6],"float64"), )
paddle.i1(Tensor([9],"float32"), )
paddle.i1(Tensor([9],"float64"), )
paddle.i1(Tensor([],"float32"), )
paddle.i1e(Tensor([6],"float64"), )
paddle.i1e(Tensor([9],"float32"), )
paddle.i1e(Tensor([9],"float64"), )
paddle.i1e(Tensor([],"float32"), )
paddle.imag(Tensor([10, 10, 10, 20],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex64"), )
paddle.imag(Tensor([],"complex64"), )
paddle.index_fill(Tensor([20, 40],"float32"), Tensor([2],"int64"), int(1), int(-1), )
paddle.index_select(Tensor([10, 10],"float32"), Tensor([4],"int32"), int(1), )
paddle.index_select(Tensor([10, 3],"float32"), Tensor([3],"int64"), )
paddle.index_select(Tensor([10, 4],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([100, 100, 25],"float32"), Tensor([20],"int32"), int(2), )
paddle.index_select(Tensor([100, 100, 5],"float32"), Tensor([20],"int32"), int(1), )
paddle.index_select(Tensor([100, 5],"float32"), Tensor([20],"int32"), int(0), )
paddle.index_select(Tensor([100, 5],"float64"), Tensor([20],"int64"), int(0), )
paddle.index_select(Tensor([10],"float32"), Tensor([4],"int32"), int(0), )
paddle.inner(Tensor([2, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.inner(Tensor([20, 10],"float32"), Tensor([],"float32"), )
paddle.inner(Tensor([20, 50],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([20, 50],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([],"float32"), Tensor([],"float32"), )
paddle.is_complex(Tensor([0, 0],"float32"), )
paddle.is_complex(Tensor([1, 14, 5, 14],"complex128"), )
paddle.is_complex(Tensor([1, 2, 2],"float32"), )
paddle.is_complex(Tensor([1, 2],"float32"), )
paddle.is_complex(Tensor([10, 10, 20],"float32"), )
paddle.is_complex(Tensor([100],"float32"), )
paddle.is_complex(Tensor([10],"int64"), )
paddle.is_complex(Tensor([12, 20, 2],"float16"), )
paddle.is_complex(Tensor([12, 20, 2],"float32"), )
paddle.is_complex(Tensor([12, 20, 2],"float64"), )
paddle.is_complex(Tensor([16, 16],"float32"), )
paddle.is_complex(Tensor([1],"float32"), )
paddle.is_complex(Tensor([2, 2, 2],"float32"), )
paddle.is_complex(Tensor([2, 2],"float32"), )
paddle.is_complex(Tensor([2, 3, 4, 5],bfloat16), )
paddle.is_complex(Tensor([2, 3, 4, 5],"float64"), )
paddle.is_complex(Tensor([2, 3, 4],"float32"), )
paddle.is_complex(Tensor([2, 3, 4],"float64"), )
paddle.is_complex(Tensor([2, 3],"complex128"), )
paddle.is_complex(Tensor([2, 3],"complex64"), )
paddle.is_complex(Tensor([2, 3],"float32"), )
paddle.is_complex(Tensor([2, 3],"float64"), )
paddle.is_complex(Tensor([2, 4],"complex128"), )
paddle.is_complex(Tensor([2, 4],"complex64"), )
paddle.is_complex(Tensor([2, 6144],"float32"), )
paddle.is_complex(Tensor([24],"float32"), )
paddle.is_complex(Tensor([2],"float32"), )
paddle.is_complex(Tensor([2],"float64"), )
paddle.is_complex(Tensor([3, 20, 3],"float32"), )
paddle.is_complex(Tensor([3, 3],"float32"), )
paddle.is_complex(Tensor([3, 3],"float64"), )
paddle.is_complex(Tensor([3, 4],"float32"), )
paddle.is_complex(Tensor([3, 4],"float64"), )
paddle.is_complex(Tensor([3],"float32"), )
paddle.is_complex(Tensor([4, 4],"float32"), )
paddle.is_complex(Tensor([4, 4],"float64"), )
paddle.is_complex(Tensor([4, 6],"float32"), )
paddle.is_complex(Tensor([4],"float32"), )
paddle.is_complex(Tensor([4],"float64"), )
paddle.is_complex(Tensor([5, 5],"float32"), )
paddle.is_complex(Tensor([5, 5],"float64"), )
paddle.is_complex(Tensor([5, 6],"float32"), )
paddle.is_complex(Tensor([5, 6],"float64"), )
paddle.is_complex(Tensor([50, 50, 20],"float64"), )
paddle.is_complex(Tensor([5],"float32"), )
paddle.is_complex(Tensor([5],"float64"), )
paddle.is_complex(Tensor([6, 4],"float32"), )
paddle.is_complex(Tensor([],"complex64"), )
paddle.is_complex(Tensor([],"float32"), )
paddle.is_complex(Tensor([],"float64"), )
paddle.is_floating_point(Tensor([1, 3, 32, 26],"float32"), )
paddle.is_floating_point(Tensor([1, 3, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([10, 10],"float32"), )
paddle.is_floating_point(Tensor([100, 100],"float32"), )
paddle.is_floating_point(Tensor([1000, 1000],"float16"), )
paddle.is_floating_point(Tensor([1000, 1000],"float32"), )
paddle.is_floating_point(Tensor([1000, 10],"float16"), )
paddle.is_floating_point(Tensor([1000, 10],"float32"), )
paddle.is_floating_point(Tensor([1000],"float16"), )
paddle.is_floating_point(Tensor([1000],"float32"), )
paddle.is_floating_point(Tensor([100],"float32"), )
paddle.is_floating_point(Tensor([1024, 1024],"float32"), )
paddle.is_floating_point(Tensor([1024, 10],"float32"), )
paddle.is_floating_point(Tensor([1024, 256, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 256, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([1024, 2],"float32"), )
paddle.is_floating_point(Tensor([1024, 4096],"float32"), )
paddle.is_floating_point(Tensor([1024, 512, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 512, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([1024],"float32"), )
paddle.is_floating_point(Tensor([102],"float16"), )
paddle.is_floating_point(Tensor([102],"float32"), )
paddle.is_floating_point(Tensor([10],"float16"), )
paddle.is_floating_point(Tensor([10],"float32"), )
paddle.is_floating_point(Tensor([120, 84],"float32"), )
paddle.is_floating_point(Tensor([120],"float32"), )
paddle.is_floating_point(Tensor([128, 128, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([128, 128, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([128, 256, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([128, 256, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([128, 256],"float16"), )
paddle.is_floating_point(Tensor([128, 256],"float32"), )
paddle.is_floating_point(Tensor([128, 512, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([128, 512, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([128],"float32"), )
paddle.is_floating_point(Tensor([16, 6, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([16],"float32"), )
paddle.is_floating_point(Tensor([192, 64, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([192],"float32"), )
paddle.is_floating_point(Tensor([1],"float16"), )
paddle.is_floating_point(Tensor([1],"float32"), )
paddle.is_floating_point(Tensor([2, 2],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 4, 4],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([2, 4],"float16"), )
paddle.is_floating_point(Tensor([2, 4],"float32"), )
paddle.is_floating_point(Tensor([20, 1, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([2048, 1024, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([2048, 1024, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([2048, 102],"float16"), )
paddle.is_floating_point(Tensor([2048, 102],"float32"), )
paddle.is_floating_point(Tensor([2048, 512, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([2048, 512, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([2048],"float32"), )
paddle.is_floating_point(Tensor([20],"float32"), )
paddle.is_floating_point(Tensor([256, 1024, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 1024, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 10],"float32"), )
paddle.is_floating_point(Tensor([256, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 256, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([256, 256, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 256],"float16"), )
paddle.is_floating_point(Tensor([256, 256],"float32"), )
paddle.is_floating_point(Tensor([256, 384, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 512, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 512, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 64, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 64, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([256],"float16"), )
paddle.is_floating_point(Tensor([256],"float32"), )
paddle.is_floating_point(Tensor([2],"float32"), )
paddle.is_floating_point(Tensor([3, 16, 64, 1024],"float32"), )
paddle.is_floating_point(Tensor([3, 16, 64],"float32"), )
paddle.is_floating_point(Tensor([3, 28, 28],"float32"), )
paddle.is_floating_point(Tensor([3, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([384, 192, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([384],"float32"), )
paddle.is_floating_point(Tensor([4, 2, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([4, 6],"float16"), )
paddle.is_floating_point(Tensor([4, 6],"float32"), )
paddle.is_floating_point(Tensor([400, 120],"float32"), )
paddle.is_floating_point(Tensor([4096, 1024],"float32"), )
paddle.is_floating_point(Tensor([4096, 2],"float32"), )
paddle.is_floating_point(Tensor([4096, 4096],"float32"), )
paddle.is_floating_point(Tensor([4096],"float32"), )
paddle.is_floating_point(Tensor([4],"float16"), )
paddle.is_floating_point(Tensor([4],"float32"), )
paddle.is_floating_point(Tensor([5, 5],"float32"), )
paddle.is_floating_point(Tensor([50, 20, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([50],"float32"), )
paddle.is_floating_point(Tensor([512, 1024, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 1024, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 128, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 128, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 2048, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 2048, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 256, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 256, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 512, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([512, 512, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([512],"float32"), )
paddle.is_floating_point(Tensor([5],"float32"), )
paddle.is_floating_point(Tensor([6, 1, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([64, 1, 11, 11],"float32"), )
paddle.is_floating_point(Tensor([64, 256, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([64, 256, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([64, 3, 7, 7],"float16"), )
paddle.is_floating_point(Tensor([64, 3, 7, 7],"float32"), )
paddle.is_floating_point(Tensor([64, 64, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([64, 64, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([64, 64, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([64, 64, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([64],"float32"), )
paddle.is_floating_point(Tensor([6],"float32"), )
paddle.is_floating_point(Tensor([8, 4, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([8, 8],"float32"), )
paddle.is_floating_point(Tensor([800, 10],"float32"), )
paddle.is_floating_point(Tensor([84, 10],"float32"), )
paddle.is_floating_point(Tensor([84],"float32"), )
paddle.is_floating_point(Tensor([8],"float32"), )
paddle.is_floating_point(Tensor([96, 4],"float32"), )
paddle.is_floating_point(Tensor([],"float32"), )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), rtol=float(1e-05), atol=float(1e-08), )
paddle.isclose(Tensor([],"float32"), Tensor([],"float32"), )
paddle.isfinite(Tensor([11, 17, 10],"int32"), )
paddle.isfinite(Tensor([11, 17],"float32"), )
paddle.isfinite(Tensor([132],"int64"), )
paddle.isfinite(Tensor([2, 3, 4, 5],"float64"), )
paddle.isfinite(Tensor([2, 3],"float32"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([],"float32"), )
paddle.isinf(Tensor([10, 12],"float32"), )
paddle.isinf(Tensor([10, 12],"float64"), )
paddle.isinf(Tensor([11, 17, 10],"int16"), )
paddle.isinf(Tensor([11, 17, 10],"int32"), )
paddle.isinf(Tensor([11, 17],"float32"), )
paddle.isinf(Tensor([132],"int64"), )
paddle.isinf(Tensor([132],uint8), )
paddle.isinf(Tensor([2, 2],"float64"), )
paddle.isinf(Tensor([2, 3, 4, 5],"float64"), )
paddle.isinf(Tensor([2, 3, 4, 5],"int8"), )
paddle.isinf(Tensor([3],"float32"), )
paddle.isinf(Tensor([3],"float64"), )
paddle.isinf(Tensor([4, 5, 2],"float32"), )
paddle.isinf(Tensor([4, 5, 2],"float64"), )
paddle.isinf(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([],"float32"), )
paddle.isinf(Tensor([],"float64"), )
paddle.isnan(Tensor([11, 17, 10],"int32"), )
paddle.isnan(Tensor([11, 17],"float32"), )
paddle.isnan(Tensor([12],"float16"), )
paddle.isnan(Tensor([12],"float32"), )
paddle.isnan(Tensor([12],"float64"), )
paddle.isnan(Tensor([132],"int64"), )
paddle.isnan(Tensor([2, 100],"float32"), )
paddle.isnan(Tensor([2, 3, 4, 5],"float32"), )
paddle.isnan(Tensor([2, 3, 4, 5],"float64"), )
paddle.isnan(Tensor([2, 3],"float32"), )
paddle.isnan(Tensor([2, 4, 2],"float32"), )
paddle.isnan(Tensor([2, 4, 2],"float64"), )
paddle.isnan(Tensor([2, 4],"float32"), )
paddle.isnan(Tensor([20],"float32"), )
paddle.isnan(Tensor([20],"float64"), )
paddle.isnan(Tensor([24],"float32"), )
paddle.isnan(Tensor([24],"float64"), )
paddle.isnan(Tensor([24],"int32"), )
paddle.isnan(Tensor([24],"int64"), )
paddle.isnan(Tensor([3, 10],"float32"), )
paddle.isnan(Tensor([3, 4, 2],"float32"), )
paddle.isnan(Tensor([3, 4, 2],"float64"), )
paddle.isnan(Tensor([3, 4, 2],"int32"), )
paddle.isnan(Tensor([3, 4, 2],"int64"), )
paddle.isnan(Tensor([3, 4],"float16"), )
paddle.isnan(Tensor([3, 4],"float32"), )
paddle.isnan(Tensor([3, 4],"float64"), )
paddle.isnan(Tensor([40],"float32"), )
paddle.isnan(Tensor([40],"float64"), )
paddle.isnan(Tensor([40],"int32"), )
paddle.isnan(Tensor([40],"int64"), )
paddle.isnan(Tensor([5, 4],"float32"), )
paddle.isnan(Tensor([5, 4],"float64"), )
paddle.isnan(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([],"float32"), )
paddle.isnan(Tensor([],"float64"), )
paddle.isneginf(Tensor([11, 17, 10],"int16"), )
paddle.isneginf(Tensor([11, 17, 10],"int32"), )
paddle.isneginf(Tensor([11, 17],"float32"), )
paddle.isneginf(Tensor([132],"int64"), )
paddle.isneginf(Tensor([132],uint8), )
paddle.isneginf(Tensor([2, 3, 4, 5],"float64"), )
paddle.isneginf(Tensor([2, 3, 4, 5],"int8"), )
paddle.isneginf(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isposinf(Tensor([11, 17, 10],"int16"), )
paddle.isposinf(Tensor([11, 17, 10],"int32"), )
paddle.isposinf(Tensor([11, 17],"float32"), )
paddle.isposinf(Tensor([132],"int64"), )
paddle.isposinf(Tensor([132],uint8), )
paddle.isposinf(Tensor([2, 3, 4, 5],"float64"), )
paddle.isposinf(Tensor([2, 3, 4, 5],"int8"), )
paddle.isposinf(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 2, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 3],"float32"), )
paddle.kron(Tensor([2, 2],"float32"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"float64"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.kron(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.kron(Tensor([],"float32"), Tensor([],"float32"), )
paddle.lcm(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.lcm(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.lcm(Tensor([6],"int32"), Tensor([1],"int32"), )
paddle.lcm(Tensor([],"int64"), Tensor([],"int64"), )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), float(0.36), )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 8],"float32"), float(0.3), )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), float(1.0), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), float(1.1), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), float(0.3), )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), float(1.1), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), float(0.5), )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), float(2.1), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), float(1.2), )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), float(2.1), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([64, 64],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([],"float32"), Tensor([64, 64],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.lerp(Tensor([],"float32"), Tensor([],"float32"), float(0.5), )
paddle.lgamma(Tensor([1, 1],"float32"), )
paddle.lgamma(Tensor([1, 2, 2],"float32"), )
paddle.lgamma(Tensor([1, 2],"float32"), )
paddle.lgamma(Tensor([1, 4],"float32"), )
paddle.lgamma(Tensor([10, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([10, 10, 10],"float64"), )
paddle.lgamma(Tensor([10, 1],"float32"), )
paddle.lgamma(Tensor([10, 1],"float64"), )
paddle.lgamma(Tensor([10, 20, 1],"float32"), )
paddle.lgamma(Tensor([10, 20, 2],"float32"), )
paddle.lgamma(Tensor([10, 20, 2],"float64"), )
paddle.lgamma(Tensor([100, 100],"float64"), )
paddle.lgamma(Tensor([1],"float32"), )
paddle.lgamma(Tensor([2, 2],"float64"), )
paddle.lgamma(Tensor([2, 5, 2],"float64"), )
paddle.lgamma(Tensor([2, 5],"float64"), )
paddle.lgamma(Tensor([2],"float32"), )
paddle.lgamma(Tensor([2],"float64"), )
paddle.lgamma(Tensor([3],"float32"), )
paddle.lgamma(Tensor([3],"float64"), )
paddle.lgamma(Tensor([7, 3],"float32"), )
paddle.lgamma(Tensor([89],"float64"), )
paddle.lgamma(Tensor([9, 1, 1],"float64"), )
paddle.lgamma(Tensor([],"float32"), )
paddle.lgamma(Tensor([],"float64"), )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=bool(True), )
paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([20, 20],"float64"), upper=bool(True), )
paddle.linalg.cond(Tensor([0, 10, 8],"float64"), None, )
paddle.linalg.cond(Tensor([0, 10, 8],"float64"), int(-2), )
paddle.linalg.cond(Tensor([0, 10, 8],"float64"), int(2), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), None, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), float(-inf), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), float(inf), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), int(-1), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), int(-2), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), int(1), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), int(2), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), str(fro), )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), str(nuc), )
paddle.linalg.cond(Tensor([0, 7, 11],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7, 11],"float32"), int(-2), )
paddle.linalg.cond(Tensor([0, 7, 11],"float32"), int(2), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), float(-inf), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), float(inf), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), int(-1), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), int(-2), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), int(1), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), int(2), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), str(fro), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), str(nuc), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), None, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), float(-inf), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), float(inf), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), int(-1), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), int(-2), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), int(1), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), int(2), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), str(fro), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), str(nuc), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), float(-inf), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), float(inf), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), int(-1), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), int(-2), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), int(1), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), int(2), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), str(fro), )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), str(nuc), )
paddle.linalg.cond(Tensor([2, 4, 4],"float32"), p=str(fro), )
paddle.linalg.cond(Tensor([3, 3],"float32"), )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=float(inf), )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=int(-1), )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=int(1), )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=int(2), )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=str(fro), )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=str(nuc), )
paddle.linalg.cond(Tensor([3, 5, 4, 1],"float32"), None, )
paddle.linalg.cond(Tensor([3, 5, 4, 1],"float32"), int(-2), )
paddle.linalg.cond(Tensor([3, 5, 4, 1],"float32"), int(2), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), None, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), float(-inf), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), float(inf), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), int(-1), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), int(-2), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), int(1), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), int(2), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), str(fro), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), str(nuc), )
paddle.linalg.cond(Tensor([4, 2, 10],"float32"), None, )
paddle.linalg.cond(Tensor([4, 2, 10],"float32"), int(-2), )
paddle.linalg.cond(Tensor([4, 2, 10],"float32"), int(2), )
paddle.linalg.cond(Tensor([5, 0, 4, 3],"float32"), None, )
paddle.linalg.cond(Tensor([5, 0, 4, 3],"float32"), int(-2), )
paddle.linalg.cond(Tensor([5, 0, 4, 3],"float32"), int(2), )
paddle.linalg.cond(Tensor([5, 5],"float32"), None, )
paddle.linalg.cond(Tensor([5, 5],"float32"), float(-inf), )
paddle.linalg.cond(Tensor([5, 5],"float32"), float(inf), )
paddle.linalg.cond(Tensor([5, 5],"float32"), int(-1), )
paddle.linalg.cond(Tensor([5, 5],"float32"), int(-2), )
paddle.linalg.cond(Tensor([5, 5],"float32"), int(1), )
paddle.linalg.cond(Tensor([5, 5],"float32"), int(2), )
paddle.linalg.cond(Tensor([5, 5],"float32"), str(fro), )
paddle.linalg.cond(Tensor([5, 5],"float32"), str(nuc), )
paddle.linalg.cond(Tensor([9, 7],"float64"), None, )
paddle.linalg.cond(Tensor([9, 7],"float64"), int(-2), )
paddle.linalg.cond(Tensor([9, 7],"float64"), int(2), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=bool(False), ddof=bool(True), fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=bool(True), ddof=bool(False), fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([12],"float32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=bool(False), ddof=bool(True), fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=bool(True), ddof=bool(False), fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=bool(True), ddof=bool(True), fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([3, 4],"float32"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([3, 3, 3],"float32"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.det(Tensor([3, 3],"float32"), )
paddle.linalg.eigvals(Tensor([128, 128],"complex128"), name=str(large_x), )
paddle.linalg.eigvals(Tensor([128, 128],"complex64"), name=str(large_x), )
paddle.linalg.eigvals(Tensor([128, 128],"float32"), name=str(large_x), )
paddle.linalg.eigvals(Tensor([128, 128],"float64"), name=str(large_x), )
paddle.linalg.eigvals(Tensor([6, 6],"complex128"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 6],"complex64"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 6],"float32"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 6],"float64"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 9, 2, 2],"complex128"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 9, 2, 2],"complex64"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 9, 2, 2],"float32"), name=str(small_x), )
paddle.linalg.eigvals(Tensor([6, 9, 2, 2],"float64"), name=str(small_x), )
paddle.linalg.eigvalsh(Tensor([0, 0],"float32"), )
paddle.linalg.eigvalsh(Tensor([0, 5, 5],"float32"), )
paddle.linalg.eigvalsh(Tensor([2, 5, 5],"complex64"), )
paddle.linalg.eigvalsh(Tensor([2, 5, 5],"float32"), )
paddle.linalg.eigvalsh(Tensor([32, 32],"float32"), )
paddle.linalg.eigvalsh(Tensor([5, 5],"complex64"), )
paddle.linalg.eigvalsh(Tensor([5, 5],"float32"), )
paddle.linalg.inv(Tensor([3, 3],"float32"), )
paddle.linalg.inv(Tensor([3, 3],"float64"), )
paddle.linalg.inv(Tensor([4, 4],"float64"), )
paddle.linalg.inv(Tensor([5, 5],"float64"), )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 8],"float32"), rcond=None, driver=str(gels), )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=float(1e-15), driver=str(gels), )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=float(1e-15), driver=str(gels), )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=float(1e-15), driver=str(gelss), )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 50],"float64"), rcond=float(1e-15), driver=str(gelsd), )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver=str(gels), )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 3],"float64"), rcond=float(1e-07), driver=str(gelsd), )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 8],"float64"), rcond=float(1e-15), driver=str(gels), )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 3],"float64"), rcond=float(1e-15), driver=str(gelsd), )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), rcond=None, driver=str(gelss), )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 300],"float64"), rcond=float(1e-15), driver=str(gelss), )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 10],"float32"), rcond=float(1e-15), driver=str(gelsy), )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 5],"float32"), rcond=float(1e-15), driver=str(gels), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=int(-2), axis=list(int(1),int(2),), keepdim=bool(False), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=int(-2), axis=list(int(1),int(2),), keepdim=bool(True), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=str(fro), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=str(fro), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=str(nuc), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=str(nuc), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.matrix_power(Tensor([0, 0],"float32"), int(2), )
paddle.linalg.matrix_power(Tensor([2, 3, 0, 0],"float32"), int(2), )
paddle.linalg.matrix_power(Tensor([4, 4],"float64"), int(-2), )
paddle.linalg.matrix_rank(Tensor([1, 10],"float32"), None, bool(False), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), hermitian=bool(True), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=float(0.1), )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, bool(True), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), bool(True), )
paddle.linalg.matrix_rank(Tensor([3, 3],"float32"), float(0.1), bool(True), )
paddle.linalg.matrix_rank(Tensor([3, 3],"float64"), None, bool(False), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, bool(False), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), bool(False), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5],"float32"), tol=float(0.1), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=bool(False), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), float(0.1), hermitian=bool(False), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([1, 4],"float64"), bool(False), )
paddle.linalg.multi_dot(list(Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 3],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([2, 4],"float64"),Tensor([4, 3],"float64"),Tensor([3],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([2, 8],"float16"),Tensor([8, 4],"float16"),), )
paddle.linalg.multi_dot(list(Tensor([2, 8],"float32"),Tensor([8, 4],"float32"),), )
paddle.linalg.multi_dot(list(Tensor([2, 8],"float64"),Tensor([8, 4],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([3, 4],"float64"),Tensor([4, 3],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 2],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([3, 6],"float64"),Tensor([6],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([4],"float32"),Tensor([4, 5],"float32"),Tensor([5],"float32"),), )
paddle.linalg.multi_dot(list(Tensor([4],"float64"),Tensor([4, 3],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 3],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([4],"float64"),Tensor([4],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([6],"float64"),Tensor([6, 4],"float64"),Tensor([4],"float64"),), )
paddle.linalg.multi_dot(list(Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),), )
paddle.linalg.norm(Tensor([1, 2],"float32"), float(2.0), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=float(1.0), axis=int(-1), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=float(1.5), axis=int(-1), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=float(2.0), axis=int(-1), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=float(2.5), axis=int(-1), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=float(3.0), axis=int(-1), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=float(inf), axis=int(-1), )
paddle.linalg.norm(Tensor([10, 10, 20],"float32"), p=int(0), axis=int(-1), )
paddle.linalg.norm(Tensor([100],"float32"), float(2.0), )
paddle.linalg.norm(Tensor([16, 16],"float32"), float(2.0), )
paddle.linalg.norm(Tensor([1],"float32"), float(2.0), )
paddle.linalg.norm(Tensor([2, 3, 4, 5],bfloat16), float(2.0), int(1), bool(False), )
paddle.linalg.norm(Tensor([2, 3, 4, 5],"float64"), float(2.0), int(1), bool(False), )
paddle.linalg.norm(Tensor([2, 3, 4, 5],"float64"), p=str(fro), axis=list(int(1),int(2),), keepdim=bool(False), )
paddle.linalg.norm(Tensor([24],"float32"), )
paddle.linalg.norm(Tensor([24],"float32"), p=int(1), )
paddle.linalg.norm(Tensor([24],"float32"), p=int(1), axis=int(0), )
paddle.linalg.norm(Tensor([24],"float32"), p=str(fro), axis=int(0), )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), float(-inf), int(2), bool(True), )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), float(0.0), int(2), bool(True), )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), float(2.0), int(-1), bool(False), )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), float(2.0), int(2), bool(True), )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), float(inf), int(2), bool(True), )
paddle.linalg.norm(Tensor([4, 6],"float32"), )
paddle.linalg.norm(Tensor([4, 6],"float32"), p=float(-inf), axis=list(int(0),int(1),), )
paddle.linalg.norm(Tensor([4, 6],"float32"), p=int(1), axis=list(int(0),int(1),), )
paddle.linalg.norm(Tensor([4, 6],"float32"), p=int(2), axis=list(int(0),int(1),), )
paddle.linalg.norm(Tensor([5, 5, 5],"float32"), p=str(fro), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.norm(Tensor([50, 50, 20],"float64"), p=float(2.0), axis=int(-1), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=None, keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=None, keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=int(0), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=int(0), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=None, keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=None, keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=int(0), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=int(0), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(inf), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=float(inf), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=int(1), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=int(1), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=int(-1), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=int(-1), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([3, 4],"float32"), p=int(2), axis=None, keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([3, 4],"float32"), p=int(2), axis=None, keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(0), axis=None, keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(0), axis=None, keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(0), axis=int(1), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(0), axis=int(1), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(1), axis=int(1), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(1), axis=int(1), keepdim=bool(True), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(2), axis=int(1), keepdim=bool(False), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=int(2), axis=int(1), keepdim=bool(True), )
paddle.linalg.pca_lowrank(Tensor([1, 100, 40],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([1, 100, 40],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([1, 100, 40],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([1, 100, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([1, 100, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([1, 17, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([1, 17, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([1, 4, 100],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([1, 4, 100],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([1, 4, 17],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([1, 4, 17],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([1, 40, 100],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([1, 40, 100],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([1, 40, 100],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([100, 40],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([100, 40],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([100, 40],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([100, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([100, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([17, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([17, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 40],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 40],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 40],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 17, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 17, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 100],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 100],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 17],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 17],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 100],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 100],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 100],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([3, 100, 40],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([3, 100, 40],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([3, 100, 40],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([3, 100, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([3, 100, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([3, 17, 4],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([3, 17, 4],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([3, 4, 100],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([3, 4, 100],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([3, 4, 17],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([3, 4, 17],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([3, 40, 100],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([3, 40, 100],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([3, 40, 100],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([4, 100],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([4, 100],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([4, 17],"float64"), q=int(2), )
paddle.linalg.pca_lowrank(Tensor([4, 17],"float64"), q=int(4), )
paddle.linalg.pca_lowrank(Tensor([40, 100],"float64"), q=int(12), )
paddle.linalg.pca_lowrank(Tensor([40, 100],"float64"), q=int(6), )
paddle.linalg.pca_lowrank(Tensor([40, 100],"float64"), q=int(8), )
paddle.linalg.pca_lowrank(Tensor([5, 5],"float64"), None, center=bool(False), )
paddle.linalg.pinv(Tensor([2, 200, 300],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([3, 4, 5],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([3, 5, 4],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([3, 5, 5],"complex128"), rcond=float(1e-15), hermitian=bool(True), )
paddle.linalg.pinv(Tensor([3, 5, 5],"complex64"), rcond=float(1e-15), hermitian=bool(True), )
paddle.linalg.pinv(Tensor([3, 5, 5],"float32"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([3, 5, 5],"float32"), rcond=float(1e-15), hermitian=bool(True), )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=float(1e-10), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=float(1e-15), hermitian=bool(True), )
paddle.linalg.pinv(Tensor([3, 6, 5, 4],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([4, 5],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([5, 4],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([5, 5],"complex128"), rcond=float(1e-15), hermitian=bool(True), )
paddle.linalg.pinv(Tensor([5, 5],"float64"), rcond=float(1e-15), hermitian=bool(False), )
paddle.linalg.pinv(Tensor([5, 5],"float64"), rcond=float(1e-15), hermitian=bool(True), )
paddle.linalg.solve(Tensor([10, 0, 0],"float32"), Tensor([10, 0, 0],"float32"), left=bool(False), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([6, 10],"float32"), left=bool(False), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([4, 10],"float64"), left=bool(False), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), left=bool(False), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([1, 3],"float64"), left=bool(False), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([3],"float64"), )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([1, 17, 4],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([1, 17, 4],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([1, 4, 17],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([1, 4, 17],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([17, 4],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([17, 4],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 4],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 4],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 17],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 17],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([3, 17, 4],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([3, 17, 4],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([3, 4, 17],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([3, 4, 17],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([4, 17],"float64"), q=int(2), )
paddle.linalg.svd_lowrank(Tensor([4, 17],"float64"), q=int(4), )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=int(12), )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=int(6), )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=int(8), )
paddle.linalg.svd_lowrank(Tensor([5, 5],"float64"), None, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=float(-inf), axis=list(int(0),int(1),int(2),int(3),), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=float(-inf), axis=list(int(0),int(1),int(2),int(3),), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=float(inf), axis=int(2), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=float(inf), axis=int(2), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=int(0), axis=list(int(1),int(3),), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=int(0), axis=list(int(1),int(3),), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 5],"float64"), p=int(1), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 5],"float64"), p=int(1), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=None, keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=None, keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=int(0), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=float(inf), axis=int(0), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=None, keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=None, keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=int(0), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=int(0), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=list(int(0),int(1),int(2),), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(-inf), axis=list(int(0),int(1),int(2),), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(inf), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=float(inf), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=int(-1), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=int(-1), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=list(int(0),int(1),), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=int(2), axis=list(int(0),int(1),), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float32"), p=int(2), axis=None, keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float32"), p=int(2), axis=None, keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(0), axis=None, keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(0), axis=None, keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(0), axis=int(1), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(0), axis=int(1), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(1), axis=int(1), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(1), axis=int(1), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(2), axis=int(1), keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=int(2), axis=int(1), keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([],"complex64"), p=float(inf), axis=None, keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([],"complex64"), p=float(inf), axis=None, keepdim=bool(True), )
paddle.linalg.vector_norm(x=Tensor([],"float64"), p=int(2), axis=None, keepdim=bool(False), )
paddle.linalg.vector_norm(x=Tensor([],"float64"), p=int(2), axis=None, keepdim=bool(True), )
paddle.linspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), dtype=str(float32), )
paddle.linspace(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"int32"), )
paddle.linspace(Tensor([],"float32"), Tensor([],"float32"), int(3), Dtype(float32), )
paddle.linspace(Tensor([],"float64"), Tensor([],"float64"), int(2), Dtype(float64), )
paddle.linspace(Tensor([],"float64"), Tensor([],"float64"), int(3), Dtype(float64), )
paddle.linspace(Tensor([],"float64"), Tensor([],"float64"), int(4), Dtype(float64), )
paddle.linspace(Tensor([],"float64"), Tensor([],"float64"), int(5), Dtype(float64), )
paddle.linspace(Tensor([],"float64"), Tensor([],"float64"), int(6), Dtype(float64), )
paddle.linspace(float(-1.0), float(1.0), float(8000.0), dtype=Dtype(float32), )
paddle.linspace(float(-1.0), float(1.0), int(10), )
paddle.linspace(float(-1.5), float(1.5), int(4), )
paddle.linspace(float(-12.5), float(12.5), int(26), )
paddle.linspace(float(-13.5), float(13.5), int(28), )
paddle.linspace(float(-139.5), float(139.5), int(280), )
paddle.linspace(float(-149.5), float(149.5), int(300), )
paddle.linspace(float(-15.5), float(15.5), int(32), )
paddle.linspace(float(-156.5), float(156.5), int(314), )
paddle.linspace(float(-16.5), float(16.5), int(34), )
paddle.linspace(float(-174.5), float(174.5), int(350), )
paddle.linspace(float(-186.0), float(186.0), int(373), )
paddle.linspace(float(-188.5), float(188.5), int(378), )
paddle.linspace(float(-199.5), float(199.5), int(400), )
paddle.linspace(float(-212.5), float(212.5), int(426), )
paddle.linspace(float(-222.5), float(222.5), int(446), )
paddle.linspace(float(-224.5), float(224.5), int(450), )
paddle.linspace(float(-225.5), float(225.5), int(452), )
paddle.linspace(float(-230.0), float(230.0), int(461), )
paddle.linspace(float(-246.5), float(246.5), int(494), )
paddle.linspace(float(-247.0), float(247.0), int(495), )
paddle.linspace(float(-248.5), float(248.5), int(498), )
paddle.linspace(float(-252.0), float(252.0), int(505), )
paddle.linspace(float(-255.0), float(255.0), int(511), )
paddle.linspace(float(-267.0), float(267.0), int(535), )
paddle.linspace(float(-3.141592653589793), float(3.141592653589793), int(2049), dtype=str(float32), )
paddle.linspace(float(-3.141592653589793), float(3.141592653589793), int(41), dtype=str(float32), )
paddle.linspace(float(-3.141592653589793), float(3.141592653589793), int(513), dtype=str(float32), )
paddle.linspace(float(-3.141592653589793), float(3.141592653589793), int(65), dtype=str(float32), )
paddle.linspace(float(-3.5), float(3.5), int(8), )
paddle.linspace(float(-31.5), float(31.5), int(64), )
paddle.linspace(float(-40.5), float(40.5), int(82), )
paddle.linspace(float(0.0), float(1.0), int(11), name=None, )
paddle.linspace(float(0.14285714285714285), int(1), int(6), dtype=Dtype(float64), )
paddle.linspace(float(0.14285714285714285), int(1), int(6), dtype=str(float64), )
paddle.linspace(float(0.2), float(0.9), int(11), name=None, )
paddle.linspace(float(0.3333333333333333), int(1), int(2), dtype=Dtype(float64), )
paddle.linspace(float(0.3333333333333333), int(1), int(2), dtype=str(float64), )
paddle.linspace(float(0.5), float(1.5), int(11), name=None, )
paddle.linspace(float(0.5), float(25.5), int(26), )
paddle.linspace(float(0.5), float(3.5), int(4), )
paddle.linspace(float(0.5), float(31.5), int(32), )
paddle.linspace(float(0.5), float(7.5), int(8), )
paddle.linspace(float(0.75), float(51.391925438912004), int(42), dtype=str(float32), )
paddle.linspace(float(0.75), float(51.391925438912004), int(66), dtype=str(float32), )
paddle.linspace(float(0.75), float(59.992474637533334), int(42), dtype=str(float32), )
paddle.linspace(float(0.75), float(59.992474637533334), int(66), dtype=str(float32), )
paddle.linspace(int(0), float(12207.0), int(1025), dtype=str(float32), )
paddle.linspace(int(0), float(12207.0), int(257), dtype=str(float32), )
paddle.linspace(int(0), float(22050.0), int(1025), dtype=str(float32), )
paddle.linspace(int(0), float(22050.0), int(257), dtype=str(float32), )
paddle.linspace(int(0), int(10), int(0), dtype=str(float32), )
paddle.linspace(int(0), int(10), int(200), dtype=str(int32), )
paddle.linspace(int(0), int(10), int(5), dtype=VarType(float32), )
paddle.linspace(int(0), int(10), int(5), dtype=str(float32), )
paddle.linspace(int(0), int(10), int(5), dtype=str(int32), )
paddle.linspace(int(20), int(10), int(5), str(float64), )
paddle.log(Tensor([1, 1],"float32"), )
paddle.log(Tensor([1, 2],"float32"), )
paddle.log(Tensor([1, 2],"float64"), )
paddle.log(Tensor([10, 10, 10, 2],"float64"), )
paddle.log(Tensor([10, 1],"float64"), )
paddle.log(Tensor([10, 2, 1],"float32"), )
paddle.log(Tensor([10, 20, 1],"float32"), )
paddle.log(Tensor([10, 20],"float64"), )
paddle.log(Tensor([10, 2],"float32"), )
paddle.log(Tensor([10, 2],"float64"), )
paddle.log(Tensor([100, 200, 100],"float64"), )
paddle.log(Tensor([100, 200, 99],"float64"), )
paddle.log(Tensor([100000, 2, 3],"float32"), )
paddle.log(Tensor([100000, 2],"float32"), )
paddle.log(Tensor([1],"float32"), )
paddle.log(Tensor([1],"float64"), )
paddle.log(Tensor([2, 2, 2],"float32"), )
paddle.log(Tensor([2, 2],"float32"), )
paddle.log(Tensor([2, 2],"float64"), )
paddle.log(Tensor([2, 3],"float32"), )
paddle.log(Tensor([2, 3],"float64"), )
paddle.log(Tensor([2, 5, 2, 3],"float32"), )
paddle.log(Tensor([2, 5, 2],"float32"), )
paddle.log(Tensor([2, 5, 2],"float64"), )
paddle.log(Tensor([2],"float32"), )
paddle.log(Tensor([2],"float64"), )
paddle.log(Tensor([3, 1],"float32"), )
paddle.log(Tensor([3, 1],"float64"), )
paddle.log(Tensor([3, 2, 1],"float32"), )
paddle.log(Tensor([3, 2, 3],"float32"), name=str(Categorical_log_prob), )
paddle.log(Tensor([3, 2],"float32"), name=str(Categorical_log_prob), )
paddle.log(Tensor([3, 3],"float32"), name=str(Categorical_log_prob), )
paddle.log(Tensor([3, 3],"float64"), )
paddle.log(Tensor([3, 3],"float64"), name=str(Categorical_log_prob), )
paddle.log(Tensor([32, 32, 128],"float32"), )
paddle.log(Tensor([32, 32],"float32"), )
paddle.log(Tensor([3],"float32"), )
paddle.log(Tensor([3],"float32"), name=str(Categorical_log_prob), )
paddle.log(Tensor([3],"float64"), )
paddle.log(Tensor([4, 2, 2, 3],"float32"), )
paddle.log(Tensor([4, 2, 2],"float32"), )
paddle.log(Tensor([4],"float64"), )
paddle.log(Tensor([5, 3],"float64"), )
paddle.log(Tensor([5, 5],"float64"), )
paddle.log(Tensor([5, 6],"float32"), )
paddle.log(Tensor([5, 6],"float32"), name=str(Uniform_entropy), )
paddle.log(Tensor([5, 6],"float64"), )
paddle.log(Tensor([5, 6],"float64"), name=str(Uniform_entropy), )
paddle.log(Tensor([8, 4, 100],"float64"), )
paddle.log(Tensor([8, 8],"float16"), )
paddle.log(Tensor([8, 8],"float32"), )
paddle.log(Tensor([89],"float64"), )
paddle.log(Tensor([],"float32"), )
paddle.log(Tensor([],"float32"), name=str(Categorical_log_prob), )
paddle.log(Tensor([],"float32"), name=str(Uniform_entropy), )
paddle.log10(Tensor([1, 40, 1723],"float32"), )
paddle.log10(Tensor([1, 40, 289],"float32"), )
paddle.log10(Tensor([1, 40, 470],"float32"), )
paddle.log10(Tensor([1, 64, 1723],"float32"), )
paddle.log10(Tensor([1, 64, 333],"float32"), )
paddle.log10(Tensor([1, 64, 363],"float32"), )
paddle.log10(Tensor([1, 64, 382],"float32"), )
paddle.log10(Tensor([1, 64, 392],"float32"), )
paddle.log10(Tensor([1, 64, 470],"float32"), )
paddle.log10(Tensor([10, 20, 1],"float32"), )
paddle.log10(Tensor([],"float32"), )
paddle.log1p(Tensor([1, 2, 3, 4],"float32"), )
paddle.log1p(Tensor([1, 2, 3, 4],"float64"), )
paddle.log1p(Tensor([10, 20, 1],"float32"), )
paddle.log1p(Tensor([10, 200, 300],"float32"), )
paddle.log1p(Tensor([10, 20],"float64"), )
paddle.log1p(Tensor([2, 2],"float64"), )
paddle.log1p(Tensor([2, 3, 4],"float32"), )
paddle.log1p(Tensor([2, 3],"float32"), )
paddle.log1p(Tensor([20000],"float32"), )
paddle.log1p(Tensor([2],"float32"), )
paddle.log1p(Tensor([2],"float64"), )
paddle.log1p(Tensor([3],"float32"), )
paddle.log1p(Tensor([3],"float64"), )
paddle.log1p(Tensor([4, 3, 2],"float32"), )
paddle.log1p(Tensor([4, 3, 2],"float64"), )
paddle.log1p(Tensor([50000, 2],"float64"), )
paddle.log1p(Tensor([50000, 5, 5],"float64"), )
paddle.log1p(Tensor([8, 16, 32],"complex128"), )
paddle.log1p(Tensor([8, 16, 32],"complex64"), )
paddle.log1p(Tensor([8, 16, 32],"float16"), )
paddle.log1p(Tensor([8, 16, 32],"float32"), )
paddle.log1p(Tensor([8, 16, 32],"float64"), )
paddle.log1p(Tensor([],"float32"), )
paddle.log2(Tensor([10, 12],"float32"), )
paddle.log2(Tensor([10, 12],"float64"), )
paddle.log2(Tensor([10, 20, 1],"float32"), )
paddle.log2(Tensor([4, 5, 2],"float32"), )
paddle.log2(Tensor([4, 5, 2],"float64"), )
paddle.log2(Tensor([],"float32"), )
paddle.logcumsumexp(Tensor([10, 12],"float16"), dtype=str(float16), axis=None, )
paddle.logcumsumexp(Tensor([10, 12],"float16"), dtype=str(float16), axis=int(1), )
paddle.logcumsumexp(Tensor([10, 12],"float32"), dtype=str(float32), axis=None, )
paddle.logcumsumexp(Tensor([10, 12],"float32"), dtype=str(float32), axis=int(1), )
paddle.logcumsumexp(Tensor([24],"float32"), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), axis=int(-1), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), axis=int(-2), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), axis=int(0), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), dtype=str(float32), )
paddle.logcumsumexp(Tensor([],"float32"), )
paddle.logcumsumexp(Tensor([],"float32"), axis=int(-1), )
paddle.logcumsumexp(Tensor([],"float32"), axis=int(0), )
paddle.logical_and(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_and(Tensor([1000, 784],bool), Tensor([1000, 784],bool), )
paddle.logical_and(Tensor([11, 17, 10],bool), Tensor([11, 17, 10],bool), )
paddle.logical_and(Tensor([11, 17],bool), Tensor([11, 17],bool), )
paddle.logical_and(Tensor([132],bool), Tensor([132],bool), )
paddle.logical_and(Tensor([2, 2],bool), Tensor([2, 2],bool), )
paddle.logical_and(Tensor([2, 3, 4, 5],bool), Tensor([2, 3, 4, 5],bool), )
paddle.logical_and(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],bool), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],bool), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],bool), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],bool), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],bool), Tensor([8, 17, 5, 6, 7],bool), )
paddle.logical_and(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.logical_and(Tensor([],"float32"), Tensor([],"float32"), )
paddle.logical_not(Tensor([1, 4, 2],"int64"), )
paddle.logical_not(Tensor([1, 4],"int64"), )
paddle.logical_not(Tensor([10, 20, 1],"float32"), )
paddle.logical_not(Tensor([100, 1000],bool), )
paddle.logical_not(Tensor([1],bool), )
paddle.logical_not(Tensor([2, 1],"int64"), )
paddle.logical_not(Tensor([2, 2],bool), Tensor([2, 2],bool), )
paddle.logical_not(Tensor([2, 4],bool), )
paddle.logical_not(Tensor([3, 1, 2],"int64"), )
paddle.logical_not(Tensor([3, 1],"int64"), )
paddle.logical_not(Tensor([3, 4, 1],"int64"), )
paddle.logical_not(Tensor([30, 1],bool), )
paddle.logical_not(Tensor([30, 3],bool), )
paddle.logical_not(Tensor([5, 1],"int64"), )
paddle.logical_not(Tensor([8, 4],bool), )
paddle.logical_not(Tensor([],bool), )
paddle.logical_not(Tensor([],"int64"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([1],bool), Tensor([1],bool), )
paddle.logical_or(Tensor([2, 2],bool), Tensor([2, 2],bool), )
paddle.logical_or(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],bool), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],bool), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],bool), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],bool), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([8, 4],bool), Tensor([8, 4],bool), )
paddle.logical_or(Tensor([],bool), Tensor([],bool), )
paddle.logical_or(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.logical_or(Tensor([],"float32"), Tensor([],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([2, 2],bool), Tensor([2, 2],bool), )
paddle.logical_xor(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],bool), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],bool), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],bool), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],bool), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.logical_xor(Tensor([],"float32"), Tensor([],"float32"), )
paddle.logit(Tensor([10, 20, 1],"float32"), float(0.001), )
paddle.logit(Tensor([120],"float32"), float(1e-08), )
paddle.logit(Tensor([],"float32"), )
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype=str(float32), )
paddle.logspace(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"int32"), Tensor([],"float32"), )
paddle.logspace(int(0), int(10), int(200), int(2), dtype=str(int32), )
paddle.logspace(int(0), int(10), int(5), int(2), dtype=str(float32), )
paddle.logspace(int(0), int(10), int(5), int(2), dtype=str(float32), name=str(logspace_res), )
paddle.logspace(int(0), int(10), int(5), int(2), dtype=str(int32), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float16"), list(int(-1),), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), None, bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), None, bool(True), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), int(2), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), list(int(-1),), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), list(int(2),int(-3),), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), tuple(int(0),int(1),int(-1),), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), None, bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list(int(-1),), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list(int(-1),), bool(True), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list(int(0),int(-1),), bool(False), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list(int(0),int(1),int(2),int(3),), bool(False), )
paddle.logsumexp(Tensor([4, 5, 6],"float64"), list(int(-1),), bool(False), )
paddle.logsumexp(Tensor([],"float64"), list(), bool(False), )
paddle.masked_fill(Tensor([30, 3],"float32"), Tensor([30, 1],bool), Tensor([],"float32"), )
paddle.masked_fill(Tensor([30, 3],"float32"), Tensor([30, 3],bool), Tensor([],"float32"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([1, 1],bool), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 2],bool), )
paddle.masked_select(Tensor([10, 10],"float32"), Tensor([10, 10],bool), )
paddle.masked_select(Tensor([2, 2],"float32"), Tensor([2, 2],bool), )
paddle.masked_select(Tensor([3, 4],"float32"), Tensor([3, 1],bool), )
paddle.masked_select(Tensor([3, 4],"float32"), Tensor([],bool), )
paddle.masked_select(Tensor([50, 50],"float64"), Tensor([50, 50],bool), )
paddle.masked_select(Tensor([88, 6, 8],"float32"), Tensor([88, 6, 8],bool), )
paddle.masked_select(Tensor([],"float32"), Tensor([],bool), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 50],"float32"), Tensor([50, 32],"float32"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float16"), Tensor([1, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float32"), Tensor([1, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float16"), Tensor([1, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 16],"float32"), Tensor([1, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 32],"float32"), Tensor([1, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([18],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([1],"float32"), transpose_x=bool(True), transpose_y=bool(False), )
paddle.matmul(Tensor([1, 2, 50],"complex128"), Tensor([1, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 50],"complex64"), Tensor([1, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([1, 333, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 382, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 392, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([1, 470, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 128],"float32"), Tensor([1, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 16],"float32"), Tensor([1, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 32],"float32"), Tensor([1, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 8],"float32"), Tensor([1, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 8, 64, 16],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([1, 8, 64, 64],"float32"), Tensor([1, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([10, 16],"float32"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 21],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1000, 1000],"float32"), Tensor([1000, 1000],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([10],"float32"), bool(True), bool(True), )
paddle.matmul(Tensor([12, 32],"float16"), Tensor([12, 128],"float16"), transpose_x=bool(True), )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([12, 128],"float32"), transpose_x=bool(True), )
paddle.matmul(Tensor([15, 8],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([15, 8],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([16, 1, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 128],"float32"), Tensor([16, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 32],"float32"), Tensor([16, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([16, 12],"float32"), Tensor([12, 10],"float32"), )
paddle.matmul(Tensor([16, 12],"float64"), Tensor([12, 10],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([16, 16, 12],"float32"), Tensor([16, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 5, 5],"float32"), Tensor([16, 16, 5, 5],"float32"), bool(False), bool(True), None, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([16, 784],"float32"), Tensor([784, 784],"float32"), )
paddle.matmul(Tensor([17, 17],"float64"), Tensor([17, 16],"float64"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([1, 4],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([2, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 1, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 100],"float32"), Tensor([100, 2],"float32"), )
paddle.matmul(Tensor([2, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([2, 1],"float32"), Tensor([1],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 3, 2],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([2, 3, 2],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([1, 3, 2],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([2, 3, 2],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 24],"float32"), Tensor([24, 24],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 4, 5],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 5, 4],"float16"), bool(False), bool(True), )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([4],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 4, 5],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 5, 4],"float32"), bool(False), bool(True), )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([4],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 4, 5],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 5, 4],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([4],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([2, 32, 1, 33],"float16"), Tensor([2, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 3],"float16"), Tensor([3],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), bool(True), bool(False), )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([3, 5],"float32"), )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([3],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 3],"float64"), Tensor([3],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 5],"float16"), bool(True), bool(False), )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 5, 4],"float16"), bool(True), bool(True), )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 4, 5],"float32"), bool(True), bool(False), )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 5, 4],"float32"), bool(True), bool(True), )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 4, 5],"float64"), bool(True), bool(False), )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 5, 4],"float64"), bool(True), bool(True), )
paddle.matmul(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 8],"float32"), Tensor([24, 8],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 3],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2],"float16"), Tensor([2],"float16"), bool(False), bool(False), )
paddle.matmul(Tensor([2],"float16"), Tensor([3, 2],"float16"), bool(False), bool(True), )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 3],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2],"float32"), Tensor([2],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([2],"float32"), Tensor([3, 2],"float32"), bool(False), bool(True), )
paddle.matmul(Tensor([2],"float64"), Tensor([2, 3],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2],"float64"), Tensor([2],"float64"), bool(False), bool(False), )
paddle.matmul(Tensor([2],"float64"), Tensor([3, 2],"float64"), bool(False), bool(True), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 16, 64, 32],"float16"), transpose_y=bool(True), )
paddle.matmul(Tensor([3, 16, 64, 64],"float16"), Tensor([3, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 1],"float32"), Tensor([1],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([3, 2, 2],"float32"), Tensor([1, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 2],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([3, 1],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 100, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 17, 4],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 8],"float64"), )
paddle.matmul(Tensor([30, 8],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([30, 8],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([32, 16, 5, 5],"float32"), Tensor([32, 16, 5, 5],"float32"), bool(False), bool(True), None, )
paddle.matmul(Tensor([32, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([32, 8, 4, 4],"float32"), Tensor([32, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([3],"float32"), Tensor([3],"float32"), bool(False), bool(False), )
paddle.matmul(Tensor([4, 1, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([4, 10, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([100, 4],"float64"), )
paddle.matmul(Tensor([4, 10],"float32"), Tensor([10, 3],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 88],"float32"), Tensor([4, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([16, 20],"float32"), )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([32, 16],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([128, 16],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([16, 16],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([32, 16],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([48, 16],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([96, 16],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([17, 4],"float64"), )
paddle.matmul(Tensor([4, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([4, 22],"float32"), Tensor([22, 20],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([10, 1000],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([10, 1000],"float64"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.matmul(Tensor([4, 32],"float32"), Tensor([32, 32],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([32, 32],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([32, 8],"float64"), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([96, 32],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 34],"float32"), Tensor([34, 26],"float32"), )
paddle.matmul(Tensor([4, 3],"float32"), Tensor([3, 2],"float32"), )
paddle.matmul(Tensor([4, 4],"float64"), Tensor([4, 4],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 5, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([4, 8],"float64"), Tensor([128, 8],"float64"), transpose_y=bool(True), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 21],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 118],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 73],"float32"), )
paddle.matmul(Tensor([40, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 289],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 470],"float32"), )
paddle.matmul(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.matmul(Tensor([5, 10],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([5, 3],"float32"), Tensor([3, 4],"float32"), )
paddle.matmul(Tensor([5, 5],"float32"), Tensor([5, 5],"float32"), )
paddle.matmul(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.matmul(Tensor([58, 2, 140, 140],"float32"), Tensor([58, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([6, 3, 1, 20],"float32"), Tensor([20, 32],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 91],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 98],"float32"), )
paddle.matmul(Tensor([64, 16, 5, 5],"float32"), Tensor([64, 16, 5, 5],"float32"), bool(False), bool(True), None, )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 333],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 363],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 382],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 392],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 470],"float32"), )
paddle.matmul(Tensor([64, 96],"float32"), Tensor([96, 32],"float32"), )
paddle.matmul(Tensor([8, 1, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([8, 128, 256],"float32"), Tensor([768, 256],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([8, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 128],"float32"), Tensor([8, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 16],"float32"), Tensor([8, 16, 128, 16],"float32"), transpose_y=bool(True), )
paddle.matmul(Tensor([8, 16, 12],"float32"), Tensor([8, 12, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 12],"float64"), Tensor([8, 12, 10],"float64"), )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([10, 16],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([10000, 512],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([2, 32, 1, 128],"float16"), y=Tensor([2, 32, 33, 128],"float16"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([3, 2, 2, 5],"float64"), y=Tensor([5],"float64"), transpose_x=bool(False), transpose_y=bool(True), )
paddle.matmul(x=Tensor([32, 8, 4, 64],"float32"), y=Tensor([32, 8, 4, 64],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([20, 40],"float32"), )
paddle.matmul(x=Tensor([4, 3],"float64"), y=Tensor([3],"float64"), transpose_x=bool(False), transpose_y=bool(True), )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([58, 2, 140, 1],"float32"), y=Tensor([58, 2, 140, 1],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([8, 16, 1, 64],"float32"), y=Tensor([8, 16, 129, 64],"float32"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float16"), y=Tensor([8, 16, 128, 64],"float16"), transpose_y=bool(True), )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float32"), y=Tensor([8, 16, 128, 64],"float32"), transpose_y=bool(True), )
paddle.maximum(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 40, 1723],"float32"), Tensor([1, 40, 1723],"float32"), )
paddle.maximum(Tensor([1, 40, 289],"float32"), Tensor([1, 40, 289],"float32"), )
paddle.maximum(Tensor([1, 40, 470],"float32"), Tensor([1, 40, 470],"float32"), )
paddle.maximum(Tensor([1, 64, 1723],"float32"), Tensor([1, 64, 1723],"float32"), )
paddle.maximum(Tensor([1, 64, 333],"float32"), Tensor([1, 64, 333],"float32"), )
paddle.maximum(Tensor([1, 64, 363],"float32"), Tensor([1, 64, 363],"float32"), )
paddle.maximum(Tensor([1, 64, 382],"float32"), Tensor([1, 64, 382],"float32"), )
paddle.maximum(Tensor([1, 64, 392],"float32"), Tensor([1, 64, 392],"float32"), )
paddle.maximum(Tensor([1, 64, 470],"float32"), Tensor([1, 64, 470],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([10, 200, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.maximum(Tensor([10, 200, 300],"int32"), Tensor([10, 200, 300],"int32"), )
paddle.maximum(Tensor([10, 200, 300],"int64"), Tensor([10, 200, 300],"int64"), )
paddle.maximum(Tensor([1025],"float32"), Tensor([1025],"float32"), )
paddle.maximum(Tensor([2, 10, 5],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.maximum(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.maximum(Tensor([257],"float32"), Tensor([257],"float32"), )
paddle.maximum(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.maximum(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.maximum(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.maximum(Tensor([4, 20, 20],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([],"float16"), Tensor([],"float16"), )
paddle.maximum(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.maximum(Tensor([],"float32"), Tensor([],"float32"), )
paddle.maximum(x=Tensor([1],"float32"), y=Tensor([],"float32"), )
paddle.maximum(x=Tensor([],"float32"), y=Tensor([],"float32"), )
paddle.mean(Tensor([1, 1, 100],"float32"), )
paddle.mean(Tensor([1, 1, 16, 16],"float32"), )
paddle.mean(Tensor([1, 1, 16, 16],"float64"), )
paddle.mean(Tensor([1, 1, 16, 8, 4],"float32"), )
paddle.mean(Tensor([1, 1, 17, 9, 5],"float16"), )
paddle.mean(Tensor([1, 1, 17, 9, 5],"float32"), )
paddle.mean(Tensor([1, 1, 2, 4, 10],"float16"), )
paddle.mean(Tensor([1, 1, 2, 4, 10],"float64"), )
paddle.mean(Tensor([1, 1, 2, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 4, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 1, 4, 4],"float32"), )
paddle.mean(Tensor([1, 1, 5],"float32"), )
paddle.mean(Tensor([1, 1, 64, 32],"float16"), )
paddle.mean(Tensor([1, 1, 64, 32],"float64"), )
paddle.mean(Tensor([1, 1, 65, 129],"float16"), )
paddle.mean(Tensor([1, 1, 65, 129],"float64"), )
paddle.mean(Tensor([1, 1, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 1, 8, 16],"float32"), )
paddle.mean(Tensor([1, 1, 8, 32],"float16"), )
paddle.mean(Tensor([1, 1, 8, 32],"float64"), )
paddle.mean(Tensor([1, 1, 8, 8, 4],"float32"), )
paddle.mean(Tensor([1, 100, 1],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100],"float64"), )
paddle.mean(Tensor([1, 120],"float64"), )
paddle.mean(Tensor([1, 1],"float32"), )
paddle.mean(Tensor([1, 1],"float32"), name=None, )
paddle.mean(Tensor([1, 1],"float64"), )
paddle.mean(Tensor([1, 2, 2, 2, 2, 100],"float16"), )
paddle.mean(Tensor([1, 2, 2, 2, 2, 100],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 5, 6],"float16"), )
paddle.mean(Tensor([1, 2, 3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([1, 2, 6, 6],"float32"), )
paddle.mean(Tensor([1, 200, 3],"float16"), )
paddle.mean(Tensor([1, 200, 3],"float64"), )
paddle.mean(Tensor([1, 28, 28],"float32"), axis=tuple(int(-3),int(-2),int(-1),), keepdim=bool(True), )
paddle.mean(Tensor([1, 2],"float64"), )
paddle.mean(Tensor([1, 3, 100],"float16"), )
paddle.mean(Tensor([1, 3, 100],"float64"), )
paddle.mean(Tensor([1, 3, 2, 6],"float64"), )
paddle.mean(Tensor([1, 3, 256, 256],"float32"), )
paddle.mean(Tensor([1, 3, 3, 5],"float32"), )
paddle.mean(Tensor([1, 3, 32, 32],"float32"), )
paddle.mean(Tensor([1, 3, 50],"float16"), )
paddle.mean(Tensor([1, 3, 50],"float64"), )
paddle.mean(Tensor([1, 3, 7, 9, 11],"float64"), )
paddle.mean(Tensor([1, 3, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 4, 32, 32],"float16"), )
paddle.mean(Tensor([1, 4, 4, 8],"float64"), )
paddle.mean(Tensor([1, 4],"float16"), )
paddle.mean(Tensor([1, 5, 2],"float64"), )
paddle.mean(Tensor([1, 5, 5],"float64"), )
paddle.mean(Tensor([1, 50, 3],"float64"), )
paddle.mean(Tensor([1, 64, 64, 64],"float32"), )
paddle.mean(Tensor([1, 8, 2],"float64"), )
paddle.mean(Tensor([1, 8, 4, 3],"float64"), )
paddle.mean(Tensor([1, 8, 4, 4],"float64"), )
paddle.mean(Tensor([1, 8, 5, 5],"float64"), )
paddle.mean(Tensor([1, 8, 6, 6],"float64"), )
paddle.mean(Tensor([1, 8, 8],"float32"), )
paddle.mean(Tensor([1, 8, 8],"float32"), axis=tuple(int(-3),int(-2),int(-1),), keepdim=bool(True), )
paddle.mean(Tensor([10, 10, 10],"float16"), )
paddle.mean(Tensor([10, 10, 10],"float32"), )
paddle.mean(Tensor([10, 10, 10],"float64"), )
paddle.mean(Tensor([10, 10, 20],"float64"), )
paddle.mean(Tensor([10, 10, 5],"float64"), name=None, )
paddle.mean(Tensor([10, 10],"complex128"), )
paddle.mean(Tensor([10, 10],"complex64"), )
paddle.mean(Tensor([10, 10],"float16"), )
paddle.mean(Tensor([10, 10],"float32"), )
paddle.mean(Tensor([10, 10],"float32"), name=None, )
paddle.mean(Tensor([10, 10],"float64"), )
paddle.mean(Tensor([10, 12],"float16"), )
paddle.mean(Tensor([10, 12],"float32"), )
paddle.mean(Tensor([10, 12],"float64"), )
paddle.mean(Tensor([10, 16, 4, 4],"float32"), )
paddle.mean(Tensor([10, 16],"float32"), )
paddle.mean(Tensor([10, 1],"float32"), )
paddle.mean(Tensor([10, 2, 3, 2],"float32"), )
paddle.mean(Tensor([10, 2, 30, 30],"float32"), )
paddle.mean(Tensor([10, 2, 4, 1],"float64"), )
paddle.mean(Tensor([10, 2, 4],"float64"), )
paddle.mean(Tensor([10, 2, 5],"float32"), )
paddle.mean(Tensor([10, 20],"float64"), )
paddle.mean(Tensor([10, 2],bfloat16), )
paddle.mean(Tensor([10, 2],"float16"), )
paddle.mean(Tensor([10, 2],"float32"), )
paddle.mean(Tensor([10, 2],"float32"), name=None, )
paddle.mean(Tensor([10, 2],"float64"), )
paddle.mean(Tensor([10, 3, 10],"float64"), )
paddle.mean(Tensor([10, 3, 32, 32],"float32"), )
paddle.mean(Tensor([10, 3, 3],"float64"), )
paddle.mean(Tensor([10, 3, 5],"float64"), )
paddle.mean(Tensor([10, 3, 6],"float64"), )
paddle.mean(Tensor([10, 3],"float16"), )
paddle.mean(Tensor([10, 3],"float64"), )
paddle.mean(Tensor([10, 5, 12],"float64"), )
paddle.mean(Tensor([10, 50],"float16"), )
paddle.mean(Tensor([10, 50],"float32"), )
paddle.mean(Tensor([10, 5],"float32"), )
paddle.mean(Tensor([10, 6, 3],"float64"), )
paddle.mean(Tensor([10, 64],"complex128"), )
paddle.mean(Tensor([10, 64],"complex64"), )
paddle.mean(Tensor([10, 64],"float16"), )
paddle.mean(Tensor([10, 64],"float64"), )
paddle.mean(Tensor([10, 8, 5],"float64"), )
paddle.mean(Tensor([100, 1, 1],"float64"), )
paddle.mean(Tensor([100, 100],"float16"), )
paddle.mean(Tensor([100, 100],"float32"), )
paddle.mean(Tensor([100, 10],"float16"), )
paddle.mean(Tensor([100, 10],"float32"), )
paddle.mean(Tensor([100, 10],"float64"), )
paddle.mean(Tensor([100, 1],"float16"), )
paddle.mean(Tensor([100, 1],"float32"), )
paddle.mean(Tensor([100, 1],"float64"), )
paddle.mean(Tensor([100, 200],"float32"), )
paddle.mean(Tensor([100, 200],"float64"), )
paddle.mean(Tensor([100, 20],"float64"), )
paddle.mean(Tensor([100, 300],"complex128"), )
paddle.mean(Tensor([100, 300],"complex64"), )
paddle.mean(Tensor([100, 300],"float16"), )
paddle.mean(Tensor([100, 300],"float64"), )
paddle.mean(Tensor([100],"float16"), )
paddle.mean(Tensor([100],"float64"), )
paddle.mean(Tensor([101, 3],"float16"), )
paddle.mean(Tensor([101, 3],"float64"), )
paddle.mean(Tensor([10],"float32"), name=None, )
paddle.mean(Tensor([10],"float64"), )
paddle.mean(Tensor([11, 11],"float64"), )
paddle.mean(Tensor([12, 1, 10, 1],"float64"), )
paddle.mean(Tensor([12, 10],"complex128"), )
paddle.mean(Tensor([12, 10],"complex64"), )
paddle.mean(Tensor([12, 10],"float16"), )
paddle.mean(Tensor([12, 10],"float32"), )
paddle.mean(Tensor([12, 10],"float64"), )
paddle.mean(Tensor([12, 14],"complex128"), )
paddle.mean(Tensor([12, 14],"complex64"), )
paddle.mean(Tensor([12, 14],"float16"), )
paddle.mean(Tensor([12, 18],"complex128"), )
paddle.mean(Tensor([12, 26],"float64"), )
paddle.mean(Tensor([12, 5, 2],"float64"), )
paddle.mean(Tensor([12, 5, 4],"float64"), )
paddle.mean(Tensor([12, 8, 2],"float64"), )
paddle.mean(Tensor([12, 8, 4],"float64"), )
paddle.mean(Tensor([12, 8, 8],"float32"), )
paddle.mean(Tensor([12, 8],"float64"), )
paddle.mean(Tensor([120, 84],"float32"), axis=int(0), )
paddle.mean(Tensor([120],"float64"), )
paddle.mean(Tensor([124, 240],"float32"), )
paddle.mean(Tensor([1242, 1],"float32"), )
paddle.mean(Tensor([128, 10],"float32"), )
paddle.mean(Tensor([128, 1],"float32"), )
paddle.mean(Tensor([13, 17],"float64"), )
paddle.mean(Tensor([14, 170],"float64"), )
paddle.mean(Tensor([14, 45],"float64"), )
paddle.mean(Tensor([15, 10, 10],"float64"), )
paddle.mean(Tensor([15, 15],"float64"), )
paddle.mean(Tensor([15, 20, 5, 5],"float32"), )
paddle.mean(Tensor([15, 20],"float64"), )
paddle.mean(Tensor([15, 3, 3],"float64"), )
paddle.mean(Tensor([15, 5],"float64"), )
paddle.mean(Tensor([16, 1, 20],"float32"), )
paddle.mean(Tensor([16, 150],"float32"), axis=int(1), )
paddle.mean(Tensor([16, 15],"float64"), )
paddle.mean(Tensor([16, 20],"float32"), )
paddle.mean(Tensor([16, 256],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.mean(Tensor([16, 256],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.mean(Tensor([16, 3],"float32"), )
paddle.mean(Tensor([16, 6],"float64"), )
paddle.mean(Tensor([16],"float32"), )
paddle.mean(Tensor([17, 5, 7, 2],"float32"), )
paddle.mean(Tensor([1],"float32"), )
paddle.mean(Tensor([1],"float32"), name=None, )
paddle.mean(Tensor([1],"float64"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float16"), )
paddle.mean(Tensor([2, 1, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 2],"float16"), )
paddle.mean(Tensor([2, 1, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 1, 3],"float16"), )
paddle.mean(Tensor([2, 1, 1, 3],"float32"), )
paddle.mean(Tensor([2, 1, 1, 3],"float64"), )
paddle.mean(Tensor([2, 1, 2, 3],"float32"), )
paddle.mean(Tensor([2, 1, 2, 4],"float16"), )
paddle.mean(Tensor([2, 1, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 8, 8],"float32"), axis=tuple(int(-3),int(-2),int(-1),), keepdim=bool(True), )
paddle.mean(Tensor([2, 10, 10],"float32"), )
paddle.mean(Tensor([2, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([2, 10, 10],"float64"), )
paddle.mean(Tensor([2, 10, 12],"float64"), )
paddle.mean(Tensor([2, 10, 4],"float32"), )
paddle.mean(Tensor([2, 10, 5],"float64"), )
paddle.mean(Tensor([2, 100, 3, 4],"float64"), )
paddle.mean(Tensor([2, 100, 4, 5],"float32"), )
paddle.mean(Tensor([2, 100, 4, 5],"float64"), )
paddle.mean(Tensor([2, 100, 4],"float32"), )
paddle.mean(Tensor([2, 100],"float32"), )
paddle.mean(Tensor([2, 100],"float64"), )
paddle.mean(Tensor([2, 10],"float16"), )
paddle.mean(Tensor([2, 10],"float64"), )
paddle.mean(Tensor([2, 12, 10],"float64"), )
paddle.mean(Tensor([2, 12, 12],"float64"), )
paddle.mean(Tensor([2, 12, 16],"float64"), )
paddle.mean(Tensor([2, 12, 9, 6, 6],"complex128"), )
paddle.mean(Tensor([2, 12, 9, 6, 6],"complex64"), )
paddle.mean(Tensor([2, 12, 9, 6, 6],"float16"), )
paddle.mean(Tensor([2, 12, 9, 6, 6],"float64"), )
paddle.mean(Tensor([2, 12],"float32"), )
paddle.mean(Tensor([2, 1],"float16"), )
paddle.mean(Tensor([2, 1],"float32"), )
paddle.mean(Tensor([2, 1],"float32"), name=None, )
paddle.mean(Tensor([2, 1],"float64"), )
paddle.mean(Tensor([2, 2, 10],"float32"), )
paddle.mean(Tensor([2, 2, 2],"float32"), )
paddle.mean(Tensor([2, 2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 2, 32, 8],"float64"), )
paddle.mean(Tensor([2, 2, 3],"float32"), )
paddle.mean(Tensor([2, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 60, 30],"float64"), )
paddle.mean(Tensor([2, 20, 20, 3],"float16"), )
paddle.mean(Tensor([2, 20, 25],"float32"), )
paddle.mean(Tensor([2, 2],"float16"), )
paddle.mean(Tensor([2, 2],"float32"), )
paddle.mean(Tensor([2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 1, 1],"float16"), )
paddle.mean(Tensor([2, 3, 1, 1],"float32"), )
paddle.mean(Tensor([2, 3, 1, 1],"float64"), )
paddle.mean(Tensor([2, 3, 10, 14, 18],"float32"), )
paddle.mean(Tensor([2, 3, 10, 5],"complex128"), )
paddle.mean(Tensor([2, 3, 10, 5],"complex64"), )
paddle.mean(Tensor([2, 3, 10, 5],"float64"), )
paddle.mean(Tensor([2, 3, 12, 12, 12],"float16"), )
paddle.mean(Tensor([2, 3, 12, 12, 12],"float32"), )
paddle.mean(Tensor([2, 3, 12, 3, 2],"complex128"), )
paddle.mean(Tensor([2, 3, 12, 3, 2],"complex64"), )
paddle.mean(Tensor([2, 3, 12, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 13, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 13, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 13, 10, 7],"float16"), )
paddle.mean(Tensor([2, 3, 13, 10, 7],"float64"), )
paddle.mean(Tensor([2, 3, 16, 16, 8],"float32"), )
paddle.mean(Tensor([2, 3, 16, 4, 10],"float32"), )
paddle.mean(Tensor([2, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 2, 6],"float64"), )
paddle.mean(Tensor([2, 3, 20],"float32"), )
paddle.mean(Tensor([2, 3, 20],"float64"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 30, 20, 25],"float32"), )
paddle.mean(Tensor([2, 3, 32, 32],"float32"), )
paddle.mean(Tensor([2, 3, 32, 64],"float64"), )
paddle.mean(Tensor([2, 3, 4, 1],"float64"), )
paddle.mean(Tensor([2, 3, 4, 3],"float64"), )
paddle.mean(Tensor([2, 3, 4, 5, 2],"float64"), )
paddle.mean(Tensor([2, 3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([2, 3, 4, 50],"float64"), )
paddle.mean(Tensor([2, 3, 4, 5],"float16"), )
paddle.mean(Tensor([2, 3, 4, 5],"float64"), )
paddle.mean(Tensor([2, 3, 4],"float16"), )
paddle.mean(Tensor([2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 5, 5],"float16"), )
paddle.mean(Tensor([2, 3, 5, 5],"float32"), )
paddle.mean(Tensor([2, 3, 5, 5],"float64"), )
paddle.mean(Tensor([2, 3, 5, 7, 9],"float32"), )
paddle.mean(Tensor([2, 3, 5, 7, 9],"float64"), )
paddle.mean(Tensor([2, 3, 7, 10, 13],"float32"), )
paddle.mean(Tensor([2, 3, 7, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 7, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 7, 10, 7],"float16"), )
paddle.mean(Tensor([2, 3, 7, 10, 7],"float64"), )
paddle.mean(Tensor([2, 3, 7, 7],"float16"), )
paddle.mean(Tensor([2, 3, 7, 7],"float32"), )
paddle.mean(Tensor([2, 3, 7, 7],"float64"), )
paddle.mean(Tensor([2, 3, 8, 5],"float64"), )
paddle.mean(Tensor([2, 3, 9, 6, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 9, 6, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 9, 6, 7],"float16"), )
paddle.mean(Tensor([2, 3, 9, 6, 7],"float64"), )
paddle.mean(Tensor([2, 3],"float64"), )
paddle.mean(Tensor([2, 4, 14, 16],"float64"), )
paddle.mean(Tensor([2, 4, 2, 3, 10],"complex128"), )
paddle.mean(Tensor([2, 4, 2, 3, 10],"complex64"), )
paddle.mean(Tensor([2, 4, 2, 3, 10],"float64"), )
paddle.mean(Tensor([2, 4, 4, 4],"float32"), )
paddle.mean(Tensor([2, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 4, 9],"float64"), )
paddle.mean(Tensor([2, 4, 4],"float16"), )
paddle.mean(Tensor([2, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 5, 6],"float64"), )
paddle.mean(Tensor([2, 4, 5],"float16"), )
paddle.mean(Tensor([2, 4, 5],"float32"), )
paddle.mean(Tensor([2, 4, 5],"float64"), )
paddle.mean(Tensor([2, 4, 64],"complex128"), )
paddle.mean(Tensor([2, 4, 64],"complex64"), )
paddle.mean(Tensor([2, 4, 64],"float32"), )
paddle.mean(Tensor([2, 4, 64],"float64"), )
paddle.mean(Tensor([2, 40, 5, 5],"float32"), )
paddle.mean(Tensor([2, 4],"float16"), )
paddle.mean(Tensor([2, 4],"float32"), )
paddle.mean(Tensor([2, 4],"float64"), )
paddle.mean(Tensor([2, 5, 12],"float16"), )
paddle.mean(Tensor([2, 5, 12],"float32"), )
paddle.mean(Tensor([2, 5, 12],"float64"), )
paddle.mean(Tensor([2, 5, 20],"float16"), )
paddle.mean(Tensor([2, 5, 20],"float64"), )
paddle.mean(Tensor([2, 5, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 1, 1, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 3],"float64"), )
paddle.mean(Tensor([2, 5, 3, 4, 2],"float16"), )
paddle.mean(Tensor([2, 5, 3, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 5, 3],"float16"), )
paddle.mean(Tensor([2, 5, 5, 3],"float32"), )
paddle.mean(Tensor([2, 5, 5, 3],"float64"), )
paddle.mean(Tensor([2, 5, 5, 5, 6],"float32"), )
paddle.mean(Tensor([2, 5, 6, 7, 6],"complex128"), )
paddle.mean(Tensor([2, 5, 6, 7, 6],"complex64"), )
paddle.mean(Tensor([2, 5, 6, 7, 6],"float16"), )
paddle.mean(Tensor([2, 5, 6, 7, 6],"float64"), )
paddle.mean(Tensor([2, 5],"float32"), )
paddle.mean(Tensor([2, 5],"float64"), )
paddle.mean(Tensor([2, 6, 3, 3],"float64"), )
paddle.mean(Tensor([2, 6, 4, 4],"float64"), )
paddle.mean(Tensor([2, 6, 5, 5],"float32"), )
paddle.mean(Tensor([2, 6, 6, 3],"float32"), )
paddle.mean(Tensor([2, 6, 6, 3],"float64"), )
paddle.mean(Tensor([2, 6, 6, 4, 6],"float32"), )
paddle.mean(Tensor([2, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 6, 7, 7, 7],"float32"), )
paddle.mean(Tensor([2, 6, 7, 7],"float64"), )
paddle.mean(Tensor([2, 6],"float64"), )
paddle.mean(Tensor([2, 7, 7, 3],"float16"), )
paddle.mean(Tensor([2, 7, 7, 3],"float32"), )
paddle.mean(Tensor([2, 7, 7, 3],"float64"), )
paddle.mean(Tensor([2, 7, 7, 7, 6],"float32"), )
paddle.mean(Tensor([2, 8, 2048],"float32"), axis=int(1), )
paddle.mean(Tensor([2, 8, 2],"float64"), )
paddle.mean(Tensor([2, 8, 4, 4],"float32"), )
paddle.mean(Tensor([2, 80],"float64"), )
paddle.mean(Tensor([2, 9, 4, 4],"float16"), )
paddle.mean(Tensor([2, 9, 4, 4],"float64"), )
paddle.mean(Tensor([2, 9, 9, 9, 6],"float32"), )
paddle.mean(Tensor([20, 10],"float64"), )
paddle.mean(Tensor([20, 1],"float64"), )
paddle.mean(Tensor([20, 2, 2],"float64"), )
paddle.mean(Tensor([20, 2, 4],"float64"), )
paddle.mean(Tensor([20, 2, 5, 7, 3],"float32"), )
paddle.mean(Tensor([20, 3, 3],"float64"), )
paddle.mean(Tensor([20, 30],"float16"), )
paddle.mean(Tensor([20, 30],"float32"), )
paddle.mean(Tensor([20, 30],"float64"), )
paddle.mean(Tensor([20, 5, 2],"float16"), )
paddle.mean(Tensor([20, 5, 2],"float64"), )
paddle.mean(Tensor([20, 5, 7, 2],"float32"), )
paddle.mean(Tensor([20],"float16"), )
paddle.mean(Tensor([20],"float64"), )
paddle.mean(Tensor([22, 14],"float64"), )
paddle.mean(Tensor([25, 2, 5, 6, 3],"float32"), )
paddle.mean(Tensor([25, 5, 6, 2],"float32"), )
paddle.mean(Tensor([2],"float16"), )
paddle.mean(Tensor([2],"float32"), )
paddle.mean(Tensor([2],"float64"), )
paddle.mean(Tensor([3, 1, 10],"float16"), )
paddle.mean(Tensor([3, 10, 10],"float16"), )
paddle.mean(Tensor([3, 10, 10],"float64"), )
paddle.mean(Tensor([3, 10, 12],"float64"), )
paddle.mean(Tensor([3, 10, 5, 5],"float64"), )
paddle.mean(Tensor([3, 10, 8],"complex128"), )
paddle.mean(Tensor([3, 10, 8],"complex64"), )
paddle.mean(Tensor([3, 10, 8],"float64"), )
paddle.mean(Tensor([3, 15, 15],"float64"), )
paddle.mean(Tensor([3, 16, 15],"float64"), )
paddle.mean(Tensor([3, 2, 1, 4],"float64"), )
paddle.mean(Tensor([3, 2, 12, 12],"float64"), )
paddle.mean(Tensor([3, 2, 12, 4, 4],"float32"), )
paddle.mean(Tensor([3, 2, 2, 1, 10],"float16"), )
paddle.mean(Tensor([3, 2, 2, 1, 10],"float64"), )
paddle.mean(Tensor([3, 2, 2, 4, 5, 2],"float16"), )
paddle.mean(Tensor([3, 2, 2, 4, 5, 2],"float64"), )
paddle.mean(Tensor([3, 2, 2, 4],"float64"), )
paddle.mean(Tensor([3, 2, 32, 16, 8],"float16"), )
paddle.mean(Tensor([3, 2, 32, 16, 8],"float32"), )
paddle.mean(Tensor([3, 2, 33, 19, 7],"float32"), )
paddle.mean(Tensor([3, 2, 5, 10],"float16"), )
paddle.mean(Tensor([3, 2, 5, 10],"float64"), )
paddle.mean(Tensor([3, 2, 5, 6],"float64"), )
paddle.mean(Tensor([3, 2, 64, 32],"float64"), )
paddle.mean(Tensor([3, 2, 66, 40],"float64"), )
paddle.mean(Tensor([3, 2, 6],"float64"), )
paddle.mean(Tensor([3, 2, 7, 7],"float64"), )
paddle.mean(Tensor([3, 2, 8, 66, 40],"float64"), )
paddle.mean(Tensor([3, 20, 1],"float16"), )
paddle.mean(Tensor([3, 20, 1],"float32"), )
paddle.mean(Tensor([3, 20],"float16"), )
paddle.mean(Tensor([3, 20],"float32"), )
paddle.mean(Tensor([3, 20],"float64"), )
paddle.mean(Tensor([3, 2],"float64"), )
paddle.mean(Tensor([3, 3, 10, 10],"float32"), )
paddle.mean(Tensor([3, 3, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 3, 10, 8],"float16"), )
paddle.mean(Tensor([3, 3, 10, 8],"float64"), )
paddle.mean(Tensor([3, 3, 11, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 11, 11],"float32"), )
paddle.mean(Tensor([3, 3, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 11],"float64"), )
paddle.mean(Tensor([3, 3, 12, 12],"float16"), )
paddle.mean(Tensor([3, 3, 12, 12],"float64"), )
paddle.mean(Tensor([3, 3, 2, 4],"float16"), )
paddle.mean(Tensor([3, 3, 2, 4],"float32"), )
paddle.mean(Tensor([3, 3, 2, 4],"float64"), )
paddle.mean(Tensor([3, 3, 20],"float64"), )
paddle.mean(Tensor([3, 3, 3, 3],"float64"), )
paddle.mean(Tensor([3, 3, 3, 6],"float64"), )
paddle.mean(Tensor([3, 3, 3],"float64"), )
paddle.mean(Tensor([3, 3, 6, 4],"float16"), )
paddle.mean(Tensor([3, 3, 6, 4],"float64"), )
paddle.mean(Tensor([3, 3, 8, 12],"float64"), )
paddle.mean(Tensor([3, 30],"float64"), )
paddle.mean(Tensor([3, 3],"float16"), )
paddle.mean(Tensor([3, 3],"float32"), )
paddle.mean(Tensor([3, 3],"float64"), )
paddle.mean(Tensor([3, 4, 10],"float64"), )
paddle.mean(Tensor([3, 4, 2, 6],"float64"), )
paddle.mean(Tensor([3, 4, 5, 3],"float16"), )
paddle.mean(Tensor([3, 4, 5, 3],"float32"), )
paddle.mean(Tensor([3, 4, 5, 3],"float64"), )
paddle.mean(Tensor([3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([3, 4, 5],"float64"), )
paddle.mean(Tensor([3, 4, 64, 64],"float32"), )
paddle.mean(Tensor([3, 40],"float16"), )
paddle.mean(Tensor([3, 40],"float32"), )
paddle.mean(Tensor([3, 40],"float64"), )
paddle.mean(Tensor([3, 4],"float64"), )
paddle.mean(Tensor([3, 5, 2],"float64"), )
paddle.mean(Tensor([3, 5, 47],"float64"), )
paddle.mean(Tensor([3, 50],"float16"), )
paddle.mean(Tensor([3, 50],"float32"), )
paddle.mean(Tensor([3, 6, 2, 2],"float64"), )
paddle.mean(Tensor([3, 6],"float64"), )
paddle.mean(Tensor([3, 7],"float64"), )
paddle.mean(Tensor([30, 10, 64],"float32"), )
paddle.mean(Tensor([30, 15],"float32"), )
paddle.mean(Tensor([30, 1],"float64"), )
paddle.mean(Tensor([30],"float64"), )
paddle.mean(Tensor([32, 1],"float32"), )
paddle.mean(Tensor([32, 1],"float64"), )
paddle.mean(Tensor([32, 32],"float32"), )
paddle.mean(Tensor([32, 32],"float64"), )
paddle.mean(Tensor([32],"float32"), )
paddle.mean(Tensor([32],"float64"), )
paddle.mean(Tensor([36, 16],"float64"), )
paddle.mean(Tensor([3],"float32"), )
paddle.mean(Tensor([3],"float64"), )
paddle.mean(Tensor([4, 1, 1, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 2, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 2, 2],"float32"), )
paddle.mean(Tensor([4, 1, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 2],"float64"), )
paddle.mean(Tensor([4, 1, 6],"float16"), )
paddle.mean(Tensor([4, 1, 6],"float64"), )
paddle.mean(Tensor([4, 10, 10, 10],"float16"), )
paddle.mean(Tensor([4, 10, 64],"float64"), )
paddle.mean(Tensor([4, 100, 16],"float32"), )
paddle.mean(Tensor([4, 100, 4, 4],"float16"), )
paddle.mean(Tensor([4, 100, 4, 4],"float32"), )
paddle.mean(Tensor([4, 100],"float32"), )
paddle.mean(Tensor([4, 10],"float32"), )
paddle.mean(Tensor([4, 10],"float32"), axis=int(-1), )
paddle.mean(Tensor([4, 12, 4],"float64"), )
paddle.mean(Tensor([4, 16],"float32"), )
paddle.mean(Tensor([4, 1],"float64"), )
paddle.mean(Tensor([4, 2, 6],"float16"), )
paddle.mean(Tensor([4, 2, 6],"float64"), )
paddle.mean(Tensor([4, 20],"float64"), )
paddle.mean(Tensor([4, 3, 1],"float16"), )
paddle.mean(Tensor([4, 3, 1],"float64"), )
paddle.mean(Tensor([4, 3, 2, 1],"float64"), )
paddle.mean(Tensor([4, 3, 2],"float32"), )
paddle.mean(Tensor([4, 3, 2],"float64"), )
paddle.mean(Tensor([4, 3, 2],"float64"), name=None, )
paddle.mean(Tensor([4, 3],"float32"), )
paddle.mean(Tensor([4, 3],"float32"), axis=list(int(0),), )
paddle.mean(Tensor([4, 3],"float64"), axis=list(int(0),), )
paddle.mean(Tensor([4, 4, 2, 2],"float16"), )
paddle.mean(Tensor([4, 4, 2, 2],"float32"), )
paddle.mean(Tensor([4, 4, 6, 3],"float16"), )
paddle.mean(Tensor([4, 4, 6, 3],"float64"), )
paddle.mean(Tensor([4, 4],"float32"), )
paddle.mean(Tensor([4, 5, 1],"float64"), )
paddle.mean(Tensor([4, 5, 2],"float16"), )
paddle.mean(Tensor([4, 5, 2],"float64"), )
paddle.mean(Tensor([4, 5, 3],"float64"), )
paddle.mean(Tensor([4, 5],"float32"), )
paddle.mean(Tensor([4, 5],"float64"), )
paddle.mean(Tensor([4, 6, 4, 4],"float32"), )
paddle.mean(Tensor([4, 6, 7, 16],"float64"), )
paddle.mean(Tensor([4, 64],"float32"), axis=int(-1), )
paddle.mean(Tensor([4, 8, 16, 1],"float64"), )
paddle.mean(Tensor([4, 8, 16],"float64"), )
paddle.mean(Tensor([4, 8, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 7, 13, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 7, 13, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 7, 13, 4],"float16"), )
paddle.mean(Tensor([4, 9, 7, 13, 4],"float64"), )
paddle.mean(Tensor([4, 9, 7, 5, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 7, 5, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 7, 5, 4],"float16"), )
paddle.mean(Tensor([4, 9, 7, 5, 4],"float64"), )
paddle.mean(Tensor([4, 9, 7, 7],"float64"), )
paddle.mean(Tensor([400, 120],"float32"), axis=int(0), )
paddle.mean(Tensor([40],"float64"), )
paddle.mean(Tensor([47, 5, 3],"float64"), )
paddle.mean(Tensor([4],"float32"), )
paddle.mean(Tensor([5, 1, 10],"float64"), )
paddle.mean(Tensor([5, 1, 1],"float64"), )
paddle.mean(Tensor([5, 1, 20],"float32"), )
paddle.mean(Tensor([5, 10, 6],"float64"), )
paddle.mean(Tensor([5, 10],"float32"), )
paddle.mean(Tensor([5, 15],"complex128"), )
paddle.mean(Tensor([5, 15],"complex64"), )
paddle.mean(Tensor([5, 15],"float64"), )
paddle.mean(Tensor([5, 170],"float64"), )
paddle.mean(Tensor([5, 1],"complex128"), )
paddle.mean(Tensor([5, 1],"complex64"), )
paddle.mean(Tensor([5, 1],"float16"), )
paddle.mean(Tensor([5, 1],"float32"), )
paddle.mean(Tensor([5, 1],"float64"), )
paddle.mean(Tensor([5, 2, 10, 2],"complex128"), )
paddle.mean(Tensor([5, 2, 10, 2],"complex64"), )
paddle.mean(Tensor([5, 2, 10, 2],"float64"), )
paddle.mean(Tensor([5, 2, 10],"float32"), )
paddle.mean(Tensor([5, 20],"float64"), )
paddle.mean(Tensor([5, 2],"float32"), )
paddle.mean(Tensor([5, 2],"float64"), axis=int(1), )
paddle.mean(Tensor([5, 3, 2, 1, 4],"float64"), )
paddle.mean(Tensor([5, 3],"float32"), )
paddle.mean(Tensor([5, 40],"complex128"), )
paddle.mean(Tensor([5, 40],"complex64"), )
paddle.mean(Tensor([5, 40],"float64"), )
paddle.mean(Tensor([5, 4],"float32"), )
paddle.mean(Tensor([5, 5, 1],"float16"), )
paddle.mean(Tensor([5, 5, 1],"float64"), )
paddle.mean(Tensor([5, 5, 5],"float32"), )
paddle.mean(Tensor([5, 5, 5],"float64"), )
paddle.mean(Tensor([5, 5],"float16"), )
paddle.mean(Tensor([5, 5],"float32"), )
paddle.mean(Tensor([5, 5],"float64"), )
paddle.mean(Tensor([5, 5],"float64"), name=None, )
paddle.mean(Tensor([5, 6, 1],"float32"), )
paddle.mean(Tensor([5, 6, 2],"float16"), )
paddle.mean(Tensor([5, 6, 2],"float64"), )
paddle.mean(Tensor([5, 6, 4, 4],"float32"), )
paddle.mean(Tensor([5, 6],"complex128"), )
paddle.mean(Tensor([5, 6],"complex64"), )
paddle.mean(Tensor([5, 6],"float16"), )
paddle.mean(Tensor([5, 6],"float64"), )
paddle.mean(Tensor([5, 7],"complex128"), )
paddle.mean(Tensor([5, 7],"complex64"), )
paddle.mean(Tensor([5, 7],"float16"), )
paddle.mean(Tensor([5, 7],"float64"), )
paddle.mean(Tensor([50, 7],"float64"), )
paddle.mean(Tensor([512, 1],"float32"), )
paddle.mean(Tensor([58, 1],"float32"), )
paddle.mean(Tensor([58],"float16"), )
paddle.mean(Tensor([58],"float64"), )
paddle.mean(Tensor([5],"float64"), )
paddle.mean(Tensor([5],"float64"), name=None, )
paddle.mean(Tensor([6, 10, 12],"complex128"), )
paddle.mean(Tensor([6, 10, 12],"complex64"), )
paddle.mean(Tensor([6, 10, 12],"float64"), )
paddle.mean(Tensor([6, 10],"float16"), )
paddle.mean(Tensor([6, 10],"float64"), )
paddle.mean(Tensor([6, 2, 60, 10],"float64"), )
paddle.mean(Tensor([6, 3, 2, 2],"float64"), )
paddle.mean(Tensor([6, 3],"float32"), axis=list(int(0),), )
paddle.mean(Tensor([6, 3],"float64"), )
paddle.mean(Tensor([6, 4, 2, 2],"float16"), )
paddle.mean(Tensor([6, 4, 2, 2],"float64"), )
paddle.mean(Tensor([6, 4, 2, 3],"float16"), )
paddle.mean(Tensor([6, 4, 2, 3],"float64"), )
paddle.mean(Tensor([6, 4, 4, 4],"float16"), )
paddle.mean(Tensor([6, 4, 4, 4],"float64"), )
paddle.mean(Tensor([6, 5, 5, 4],"float64"), )
paddle.mean(Tensor([6, 5],"float64"), )
paddle.mean(Tensor([6, 7],"complex128"), )
paddle.mean(Tensor([6, 7],"complex64"), )
paddle.mean(Tensor([6, 7],"float16"), )
paddle.mean(Tensor([6, 7],"float64"), )
paddle.mean(Tensor([6, 9],"float32"), axis=int(1), )
paddle.mean(Tensor([60, 2],"float16"), )
paddle.mean(Tensor([60, 2],"float64"), )
paddle.mean(Tensor([64, 1],"float16"), )
paddle.mean(Tensor([64, 1],"float32"), )
paddle.mean(Tensor([64, 20],"float64"), )
paddle.mean(Tensor([64],"float64"), )
paddle.mean(Tensor([7, 15],"float16"), )
paddle.mean(Tensor([7, 15],"float64"), )
paddle.mean(Tensor([7, 20],"float32"), )
paddle.mean(Tensor([8, 128],"float64"), )
paddle.mean(Tensor([8, 16, 64],"float32"), )
paddle.mean(Tensor([8, 16, 7, 7],"float32"), )
paddle.mean(Tensor([8, 2, 2, 1, 10],"float64"), )
paddle.mean(Tensor([8, 3, 2, 3],"float64"), )
paddle.mean(Tensor([8, 3, 5, 4],"float64"), )
paddle.mean(Tensor([8, 4, 4],"float32"), )
paddle.mean(Tensor([8, 4, 4],"float64"), )
paddle.mean(Tensor([8, 5],"float64"), )
paddle.mean(Tensor([8, 64],"float64"), )
paddle.mean(Tensor([8, 8, 16, 16],"float32"), )
paddle.mean(Tensor([80, 2],"float64"), )
paddle.mean(Tensor([84, 10],"float32"), axis=int(0), )
paddle.mean(Tensor([8],"float64"), )
paddle.mean(Tensor([9, 20],"float16"), )
paddle.mean(Tensor([9, 20],"float32"), )
paddle.mean(Tensor([9, 20],"float64"), )
paddle.mean(Tensor([],"float16"), )
paddle.mean(Tensor([],"float32"), )
paddle.mean(Tensor([],"float64"), )
paddle.mean(x=Tensor([1, 1],"float32"), )
paddle.mean(x=Tensor([2, 102],"float16"), )
paddle.mean(x=Tensor([2, 102],"float32"), )
paddle.mean(x=Tensor([4, 1],"float32"), )
paddle.mean(x=Tensor([8, 1],"float16"), )
paddle.mean(x=Tensor([8, 1],"float32"), )
paddle.mean(x=Tensor([],"float32"), )
paddle.minimum(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.minimum(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.minimum(Tensor([1025],"float32"), Tensor([1025],"float32"), )
paddle.minimum(Tensor([2, 10, 5],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.minimum(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.minimum(Tensor([257],"float32"), Tensor([257],"float32"), )
paddle.minimum(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.minimum(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.minimum(Tensor([4, 20, 20],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.minimum(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.minimum(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.minimum(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.minimum(Tensor([],"float16"), Tensor([],"float16"), )
paddle.minimum(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.minimum(Tensor([],"float32"), Tensor([],"float32"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([10, 1],"float64"), )
paddle.mm(Tensor([1, 12],"float32"), Tensor([12, 1],"float32"), )
paddle.mm(Tensor([10, 20],"float64"), Tensor([20, 10],"float64"), )
paddle.mm(Tensor([16, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.mm(Tensor([20, 10],"float64"), Tensor([10, 20],"float64"), )
paddle.mm(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.mm(Tensor([3, 4],"float32"), Tensor([4, 3],"float32"), )
paddle.mm(Tensor([4, 5],"float32"), Tensor([5, 4],"float32"), )
paddle.mm(Tensor([4, 5],"float64"), Tensor([5, 4],"float64"), )
paddle.mm(Tensor([5, 4],"float32"), Tensor([4, 5],"float32"), )
paddle.mm(Tensor([5, 4],"float64"), Tensor([4, 5],"float64"), )
paddle.moveaxis(Tensor([2, 3, 4, 5, 7],"float64"), list(int(0),int(4),int(3),int(2),), list(int(1),int(3),int(2),int(0),), )
paddle.moveaxis(Tensor([4, 7, 6],"float64"), list(int(0),int(2),), list(int(1),int(2),), )
paddle.moveaxis(Tensor([4, 7, 6],"float64"), list(int(1),int(2),), list(int(1),int(2),), )
paddle.moveaxis(Tensor([5, 3, 4],"float64"), list(int(1),int(2),), list(int(1),int(2),), )
paddle.moveaxis(Tensor([],"float32"), list(), list(), )
paddle.multigammaln(Tensor([10, 20],"float32"), int(2), )
paddle.multigammaln(Tensor([10, 20],"float64"), int(2), )
paddle.multinomial(Tensor([1000],"float64"), num_samples=int(100), replacement=bool(False), )
paddle.multinomial(Tensor([1024, 10000],"float32"), int(1), replacement=bool(False), )
paddle.multinomial(Tensor([1024, 10000],"float32"), int(20000), replacement=bool(True), )
paddle.multinomial(Tensor([1024, 10000],"float32"), int(5000), replacement=bool(False), )
paddle.multinomial(Tensor([3, 4],"float64"), num_samples=int(100000), replacement=bool(True), )
paddle.multinomial(Tensor([4],"float32"), num_samples=int(10), replacement=bool(True), )
paddle.multinomial(Tensor([4],"float64"), num_samples=int(100000), replacement=bool(True), )
paddle.mv(Tensor([1, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([5, 100],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([64, 32],"float64"), Tensor([32],"float64"), )
paddle.nan_to_num(Tensor([2, 3],"float32"), )
paddle.nan_to_num(Tensor([2, 3],"float32"), float(1.0), None, None, )
paddle.nan_to_num(Tensor([2, 3],"float32"), float(1.0), None, float(-10.0), )
paddle.nan_to_num(Tensor([2, 3],"float32"), float(1.0), float(100.0), float(-10.0), )
paddle.nan_to_num(Tensor([2, 3],"float32"), float(1.0), float(2.0), None, )
paddle.nan_to_num(Tensor([2, 4],"float32"), )
paddle.nan_to_num(Tensor([],"float32"), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), None, bool(False), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), None, bool(True), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), int(-1), bool(False), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), int(2), bool(True), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), list(), bool(False), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), list(int(0),int(1),int(2),int(3),), bool(False), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), list(int(0),int(2),), bool(False), )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), tuple(int(0),int(2),), bool(False), )
paddle.nanmean(Tensor([2, 3],"float32"), None, bool(False), )
paddle.nanmean(Tensor([2, 3],"float32"), None, bool(True), )
paddle.nanmean(Tensor([2, 3],"float32"), int(-1), bool(False), )
paddle.nanmean(Tensor([2, 3],"float32"), int(0), bool(True), )
paddle.nanmean(Tensor([2, 3],"float32"), int(1), bool(False), )
paddle.nanmean(Tensor([2, 3],"float32"), tuple(int(0),int(1),), bool(False), )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(higher), )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(lower), )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(midpoint), )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(nearest), )
paddle.nanquantile(Tensor([2, 3],"float32"), list(float(0.3),float(0.7),), int(1), )
paddle.nanquantile(Tensor([2, 3],"float64"), q=float(0.35), axis=int(0), )
paddle.nanquantile(Tensor([3],"float32"), float(0.5), int(0), )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=float(0.1), axis=list(int(1),int(2),), keepdim=bool(True), )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=float(0.35), )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=float(0.35), axis=int(2), keepdim=bool(True), )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=float(0.5), axis=int(2), )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=float(0.75), axis=list(int(0),int(2),), )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=int(0), axis=int(1), )
paddle.nanquantile(Tensor([4, 7],"float32"), q=float(0.5), axis=int(1), )
paddle.nanquantile(Tensor([4, 7],"float64"), q=float(0.5), axis=int(1), )
paddle.nanquantile(Tensor([8],"float32"), list(float(0.55),float(0.7),), int(0), )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=bool(True), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list(), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list(int(-1),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list(int(0),int(1),int(2),int(3),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list(int(0),int(2),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list(int(2),), keepdim=bool(True), name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=tuple(int(0),int(2),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=None, keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=None, keepdim=bool(True), name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=list(int(-1),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=list(int(0),), keepdim=bool(True), name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=list(int(1),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=tuple(int(0),int(1),), keepdim=bool(False), name=None, )
paddle.nansum(Tensor([2, 4],"float32"), )
paddle.neg(Tensor([10, 20, 1],"float32"), )
paddle.neg(Tensor([32, 8],"float32"), )
paddle.neg(Tensor([32, 8],"float64"), )
paddle.neg(Tensor([32, 8],"int16"), )
paddle.neg(Tensor([32, 8],"int32"), )
paddle.neg(Tensor([32, 8],"int64"), )
paddle.neg(Tensor([32, 8],"int8"), )
paddle.neg(Tensor([8, 16, 32],"float32"), )
paddle.neg(Tensor([],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.nextafter(Tensor([],"float32"), Tensor([],"float32"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 32],"float32"), int(16), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 32],"float32"), int(16), None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 32],"float32"), output_size=int(16), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 2],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 120, 5, 5],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1280, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 144, 5, 5],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 16, 20, 20],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 7],"float32"), output_size=tuple(int(1),int(1),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 240, 5, 5],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 256, 56, 56],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 288, 3, 3],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 2],"float32"), output_size=tuple(int(7),int(7),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 28, 28],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 3],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 3],"float32"), output_size=tuple(int(1),int(1),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 576, 3, 3],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 5, 5],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 2048, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 12, 12],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 13, 13],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 6, 6],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 28, 28],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 144, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 16, 56, 56],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1664, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1920, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 5, 5],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float16"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float32"), output_size=tuple(int(1),int(1),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2208, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 240, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2688, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 288, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), list(int(2),int(5),), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=int(5), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(None,int(3),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(int(2),int(5),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(int(3),int(3),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(int(3),int(3),), data_format=str(NHWC), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 480, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=tuple(int(1),int(1),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=tuple(int(7),int(7),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 576, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 72, 28, 28],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 960, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 7, 7],"float32"), output_size=tuple(int(1),int(1),), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 14, 14],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 7],"float16"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 7],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 56, 56],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 28, 28],"float32"), output_size=int(1), data_format=str(NCHW), name=None, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=int(5), )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list(None,int(3),), )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list(int(2),int(5),), )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list(int(3),int(3),), )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list(int(3),int(3),), data_format=str(NHWC), )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), list(int(2),int(3),int(5),), )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=int(5), data_format=str(NCDHW), name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(None,int(3),None,), data_format=str(NCDHW), name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(2),int(3),int(5),), data_format=str(NCDHW), name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(3),int(3),int(3),), data_format=str(NCDHW), name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(3),int(3),int(3),), data_format=str(NDHWC), name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=int(5), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(None,int(3),None,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(2),int(3),int(5),), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(3),int(3),int(3),), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(3),int(3),int(3),), data_format=str(NDHWC), )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float32"), int(16), bool(False), None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float32"), output_size=int(16), )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=int(5), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(None,int(3),), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(int(2),int(5),), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list(int(3),int(3),), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=int(5), )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list(None,int(3),), )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list(int(2),int(5),), )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), return_mask=bool(False), output_size=list(int(3),int(3),), )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=int(5), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(None,int(3),None,), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(2),int(3),int(5),), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(3),int(3),int(3),), return_mask=bool(False), name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=int(5), )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(None,int(3),None,), )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(2),int(3),int(5),), )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list(int(3),int(3),int(3),), )
paddle.nn.functional.affine_grid(Tensor([2, 2, 3],"float32"), out_shape=list(int(2),int(3),int(244),int(244),), )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=bool(True), )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list(int(20),int(1),int(7),int(7),), align_corners=bool(True), )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list(int(20),int(2),int(5),int(7),), align_corners=bool(False), )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list(int(20),int(2),int(5),int(7),), align_corners=bool(True), )
paddle.nn.functional.alpha_dropout(Tensor([],"float32"), )
paddle.nn.functional.celu(Tensor([],"float32"), )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), int(3), str(NHWC), )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), int(3), str(NHWC), None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), int(3), str(NCHW), )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), int(3), str(NCHW), None, )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(3), data_format=str(NLC), )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=int(2), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NLC), )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list(int(1),int(2),), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NLC), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list(int(1),int(2),), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(2), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), stride=list(int(1),), dilation=list(int(2),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), stride=list(int(2),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=int(2), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list(int(1),), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list(int(1),int(2),), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=str(same), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=int(0), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NLC), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(2), padding=int(0), stride=list(int(3),), dilation=list(int(1),), groups=int(1), data_format=str(NLC), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=int(18), output_padding=int(0), padding=int(0), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NLC), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=int(0), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(3), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(2), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=int(3), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=int(0), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=int(0), stride=list(int(2),), dilation=list(int(2),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=list(int(1),int(2),), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=list(int(2),), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=int(0), padding=str(valid), stride=list(int(1),), dilation=list(int(1),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list(int(36),), output_padding=int(0), padding=int(0), stride=list(int(2),), dilation=list(int(2),), groups=int(1), data_format=str(NCL), )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=int(1), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=int(1), output_padding=int(0), stride=list(int(2),int(2),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=int(1), output_padding=int(0), stride=list(int(2),int(2),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=int(1), output_padding=int(0), stride=list(int(2),int(2),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=int(1), output_padding=int(0), stride=list(int(2),int(2),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=int(1), padding=list(int(1),int(0),int(0),int(1),), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=int(1), padding=str(SAME), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=int(1), padding=str(VALID), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=int(1), padding=list(int(1),int(1),), data_format=str(NHWC), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=int(1), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NHWC), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list(list(int(0),int(0),),list(int(1),int(1),),list(int(2),int(2),),list(int(0),int(0),),), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NHWC), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=str(valid), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(3), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=int(2), output_padding=list(int(1),int(1),), stride=list(int(2),int(2),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=str(valid), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(2), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(int(2),int(3),), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(2),), dilation=list(int(2),int(2),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(2),), dilation=list(int(2),int(2),), groups=int(1), output_size=list(int(20),int(36),), data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(2),int(2),), dilation=list(int(2),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list(int(1),int(2),int(2),int(1),), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list(list(int(0),int(0),),list(int(0),int(0),),list(int(1),int(2),),list(int(2),int(1),),), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=str(same), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=str(valid), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=int(1), output_padding=int(0), stride=list(int(2),int(2),), dilation=list(int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCHW), )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list(list(int(0),int(0),),list(int(0),int(0),),list(int(1),int(1),),list(int(2),int(2),),list(int(2),int(2),),), stride=int(1), dilation=int(1), groups=int(1), data_format=str(NCDHW), )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding=str(valid), stride=int(1), dilation=int(1), groups=int(6), data_format=str(NCDHW), )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding=str(same), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NCDHW), )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=int(0), stride=int(1), dilation=int(1), groups=int(1), data_format=str(NDHWC), )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list(int(1),int(1),int(2),int(2),int(3),int(3),), stride=int(1), dilation=int(2), groups=int(1), data_format=str(NDHWC), )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list(int(1),int(2),int(1),), stride=int(1), dilation=int(1), groups=int(1), data_format=str(NDHWC), )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list(int(1),int(2),int(3),int(1),int(2),int(3),), stride=int(2), dilation=int(1), groups=int(1), data_format=str(NDHWC), )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list(list(int(0),int(0),),list(int(1),int(1),),list(int(2),int(2),),list(int(1),int(1),),list(int(0),int(0),),), stride=int(1), dilation=int(1), groups=int(1), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=str(valid), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(3), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=str(valid), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(2), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(int(2),int(3),int(1),), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(2),int(1),), dilation=list(int(2),int(2),int(2),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(2),int(1),), dilation=list(int(2),int(2),int(2),), groups=int(1), output_size=list(int(12),int(19),int(12),), data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(2),int(2),int(2),), dilation=list(int(2),int(1),int(2),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list(int(1),int(2),int(2),int(3),int(2),int(1),), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list(list(int(0),int(0),),list(int(0),int(0),),list(int(2),int(3),),list(int(1),int(2),),list(int(2),int(1),),), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=str(valid), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list(list(int(0),int(0),),list(int(1),int(1),),list(int(2),int(2),),list(int(3),int(3),),list(int(0),int(0),),), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=int(0), stride=int(1), dilation=int(1), groups=int(1), data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list(int(1),int(1),int(2),int(2),int(1),int(1),), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list(int(1),int(2),int(1),), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list(list(int(0),int(0),),list(int(0),int(0),),list(int(1),int(1),),list(int(1),int(1),),list(int(2),int(2),),), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(int(10),int(17),int(10),), padding=str(valid), stride=tuple(int(1),int(2),int(1),), dilation=int(1), groups=int(1), data_format=str(NCDHW), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=int(0), stride=int(1), dilation=int(1), groups=int(1), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding=str(valid), stride=tuple(int(1),int(2),int(1),), dilation=int(1), groups=int(4), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding=str(same), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=int(0), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list(list(int(0),int(0),),list(int(1),int(2),),list(int(1),int(2),),list(int(2),int(1),),list(int(0),int(0),),), stride=int(1), dilation=int(1), groups=int(2), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=str(valid), stride=tuple(int(1),int(2),int(1),), dilation=tuple(int(2),int(1),int(1),), groups=int(2), data_format=str(NDHWC), )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=int(0), output_padding=int(0), stride=list(int(1),int(1),int(1),), dilation=list(int(1),int(1),int(1),), groups=int(1), output_size=None, data_format=str(NCDHW), )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=int(2), eps=float(1e-06), )
paddle.nn.functional.cosine_similarity(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), axis=int(1), eps=float(1e-08), )
paddle.nn.functional.cosine_similarity(Tensor([12, 13],"float32"), Tensor([12, 13],"float32"), axis=int(0), eps=float(1e-06), )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 1],"float32"), Tensor([23, 1, 10],"float32"), axis=int(2), eps=float(1e-06), )
paddle.nn.functional.cosine_similarity(Tensor([32, 128],"float32"), Tensor([32, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.nn.functional.dropout(Tensor([1, 1, 8],"float32"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([1, 1024],"float32"), p=float(0.2), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([1, 10],"float16"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([1, 1280],"float32"), p=float(0.2), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([1, 128],"float32"), float(0.6), )
paddle.nn.functional.dropout(Tensor([1, 2048, 1, 1],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([1, 4, 5],"float32"), p=float(0.5), )
paddle.nn.functional.dropout(Tensor([1, 4096],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float16"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=float(0.5), training=bool(False), )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=float(0.5), training=bool(True), )
paddle.nn.functional.dropout(Tensor([10, 1],"float32"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([12, 4, 16],"float64"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([12, 4, 8],"float64"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([128, 128],"float32"), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([16, 2048, 1, 1],"float32"), p=float(0.5), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.0), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.0), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.0), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.5), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.5), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.5), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.5), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.9), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.9), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.9), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(0.9), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(1.0), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(1.0), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(1.0), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), float(1.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.0), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.0), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.0), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.5), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.5), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.5), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.5), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.9), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.9), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.9), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(0.9), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(1.0), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(1.0), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(1.0), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), float(1.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), p=float(0.4), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.0), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.0), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.0), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.5), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.5), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.5), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.5), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.9), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.9), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.9), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(0.9), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(1.0), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(1.0), training=bool(False), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(1.0), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), float(1.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024, 2, 1],"float16"), float(0.5), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 1024],"float32"), p=float(0.2), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024],"float32"), p=float(0.7), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([2, 10],"float32"), float(0.5), )
paddle.nn.functional.dropout(Tensor([2, 128, 60],"float32"), p=float(0.1), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 1280],"float32"), p=float(0.2), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 12],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 12],"float32"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 2048],"float32"), p=float(0.2), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([2, 4096],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([2, 4096],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 12, 12],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 13, 13],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 7, 9, 3],"float32"), p=float(0.8), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 8, 8],"float32"), float(0.2), )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 2],"float16"), float(0.5), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 2],"float16"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([2, 9216],"float32"), p=float(0.5), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([3, 20],"float32"), p=float(0.1), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([3, 20],"float32"), p=float(0.5), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([3, 32, 32],"float32"), p=float(0.35), )
paddle.nn.functional.dropout(Tensor([3, 32, 32],"float32"), p=float(0.35), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 130],"float32"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 130],"float64"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 508],"float32"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 508],"float64"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([32, 4, 2048],"float32"), p=float(0.1), )
paddle.nn.functional.dropout(Tensor([32, 4, 512],"float32"), p=float(0.1), )
paddle.nn.functional.dropout(Tensor([32, 8, 4, 4],"float32"), p=float(0.1), )
paddle.nn.functional.dropout(Tensor([4, 12, 16],"float64"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([4, 12, 8],"float64"), float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(Tensor([4, 32, 128],"float16"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([4, 32, 256],"float16"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([512, 512],"float32"), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([58, 140, 2],"float32"), p=float(0.1), axis=None, training=bool(False), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([58, 140, 2],"float32"), p=float(0.1), axis=None, training=bool(True), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 140],"float32"), p=float(0.1), training=bool(False), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 140],"float32"), p=float(0.1), training=bool(True), mode=str(downscale_in_infer), )
paddle.nn.functional.dropout(Tensor([6, 4, 5],"float32"), p=float(0.5), )
paddle.nn.functional.dropout(Tensor([8, 1, 1024],"float32"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([8, 128, 1024],"float16"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([8, 128, 1024],"float32"), p=float(0.0), axis=None, training=bool(True), mode=str(upscale_in_train), name=None, )
paddle.nn.functional.dropout(Tensor([8, 2048, 1, 1],"float32"), p=float(0.5), axis=None, training=bool(True), mode=str(downscale_in_infer), name=None, )
paddle.nn.functional.dropout(Tensor([],"float32"), )
paddle.nn.functional.dropout(x=Tensor([1, 128, 32, 32],"float16"), p=float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(x=Tensor([1, 128, 32, 32],"float32"), p=float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(x=Tensor([1, 16, 32, 32],"float32"), p=float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(x=Tensor([1, 8, 128, 128],"float32"), p=float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(x=Tensor([1, 8, 32, 32],"float32"), p=float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.dropout(x=Tensor([16, 128, 32, 32],"float32"), p=float(0.0), training=bool(True), mode=str(upscale_in_train), )
paddle.nn.functional.elu(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.elu(Tensor([2, 32],"float32"), )
paddle.nn.functional.elu(Tensor([2, 64],"float32"), )
paddle.nn.functional.elu(Tensor([],"float32"), )
paddle.nn.functional.elu_(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.embedding(Tensor([1, 10],"int64"), weight=Tensor([10, 32],"float64"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([10, 1],"int64"), weight=Tensor([10, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([1024, 1],"int64"), weight=Tensor([27, 128],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([16, 1],"int64"), weight=Tensor([100, 20],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([16, 1],"int64"), weight=Tensor([128, 8],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([17, 23],"int32"), weight=Tensor([4, 2],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([2, 60],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([30522, 60],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([512, 60],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([2, 1],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([2, 2],"int64"), weight=Tensor([20, 32],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([2, 8],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=int(9), max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=int(9), max_norm=float(0.5), norm_type=float(3.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([1024, 512],bfloat16), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([1024, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([511, 512],bfloat16), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([511, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([10000, 512],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([10000, 512],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([4, 512],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([4, 512],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 10],"int64"), weight=Tensor([20, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 1],"int64"), weight=Tensor([128, 8],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 10],"float64"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 10],"float64"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(True), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([4, 5],"int64"), weight=Tensor([20, 10],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([469, 1],"int64"), weight=Tensor([4, 200],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([512, 1],"int64"), weight=Tensor([4, 200],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([2, 2],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([21128, 2],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([512, 2],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([6, 3, 1],"int64"), weight=Tensor([32, 20],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([6],"int64"), weight=Tensor([66, 8],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([8, 1],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(Tensor([8, 4],"int64"), weight=Tensor([100, 32],"float64"), padding_idx=None, max_norm=None, norm_type=float(2.0), sparse=bool(False), scale_grad_by_freq=bool(False), name=None, )
paddle.nn.functional.embedding(x=Tensor([],"int64"), weight=Tensor([3, 2],"float32"), sparse=bool(True), name=str(embedding), )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float64"), output_sizes=list(int(4),int(5),), kernel_sizes=list(int(2),int(2),), strides=list(int(1),int(1),), paddings=list(int(0),int(0),int(0),int(0),), dilations=list(int(1),int(1),), name=None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), bool(False), float(1e-06), str(none), None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), full=bool(False), reduction=str(none), )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), bool(False), float(1e-06), str(none), None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), full=bool(False), reduction=str(none), )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), bool(False), float(1e-06), str(none), None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), bool(True), float(1e-06), str(mean), None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), bool(True), float(1e-06), str(sum), None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=bool(False), reduction=str(none), )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=bool(True), reduction=str(mean), )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=bool(True), reduction=str(sum), )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), bool(False), float(1e-06), str(none), None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), full=bool(False), reduction=str(none), )
paddle.nn.functional.glu(Tensor([5, 20],"float64"), int(-1), )
paddle.nn.functional.glu(Tensor([6, 20],"float64"), int(-1), None, )
paddle.nn.functional.glu(Tensor([6, 20],"float64"), int(0), None, )
paddle.nn.functional.glu(Tensor([6, 20],"float64"), int(1), None, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode=str(bilinear), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 314, 378, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 426, 446, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 314, 378],"float32"), Tensor([1, 373, 426, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([1, 32, 26, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 400, 300, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 494, 450, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 494, 452, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 426, 446],"float32"), Tensor([1, 495, 511, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 494, 450],"float32"), Tensor([1, 505, 461, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 494, 452],"float32"), Tensor([1, 535, 498, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 64, 64, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 82, 82, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 8, 8, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode=str(bilinear), padding_mode=str(reflection), align_corners=bool(True), )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode=str(bilinear), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode=str(bilinear), padding_mode=str(zeros), align_corners=bool(True), )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 4, 4, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 8],"float32"), Tensor([2, 8, 8, 2],"float32"), mode=str(nearest), padding_mode=str(zeros), align_corners=bool(False), )
paddle.nn.functional.gumbel_softmax(Tensor([2, 3, 4, 5],"float32"), hard=bool(True), )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=bool(False), )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=bool(True), )
paddle.nn.functional.gumbel_softmax(Tensor([],"float32"), )
paddle.nn.functional.hardshrink(Tensor([],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 144, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 16, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 240, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 288, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 576, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 96, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 120, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 144, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 16, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 240, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 288, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 480, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 576, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 672, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 72, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 96, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 960, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 1024],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 120, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 144, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 16, 40, 40],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 240, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 288, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 288, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 576, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 96, 10, 10],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 96, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 1024],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 120, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 1280],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 144, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 16, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 184, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 200, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 240, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 240, 28, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 288, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 288, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 480, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 576, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 672, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 672, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 96, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 96, 28, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 960, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([],"float32"), )
paddle.nn.functional.hardtanh(Tensor([10, 20, 1],"float32"), float(-1.0), float(1.0), )
paddle.nn.functional.hardtanh(Tensor([],"float32"), )
paddle.nn.functional.hardtanh_(Tensor([10, 20, 1],"float32"), float(-1.0), float(1.0), )
paddle.nn.functional.interpolate(Tensor([1, 3, 123, 132],"float32"), size=tuple(int(280),int(280),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 128],"float32"), size=list(int(64),), mode=str(linear), align_mode=int(1), align_corners=bool(False), )
paddle.nn.functional.interpolate(Tensor([1, 3, 128],"float32"), size=list(int(64),), scale_factor=None, mode=str(linear), align_corners=bool(False), align_mode=int(1), data_format=str(NCW), name=None, )
paddle.nn.functional.interpolate(Tensor([1, 3, 182, 171],"float32"), size=tuple(int(280),int(280),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 244, 275],"float32"), size=tuple(int(224),int(224),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 256, 200],"float32"), size=tuple(int(180),int(160),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 259, 253],"float32"), size=tuple(int(224),int(224),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 262, 327],"float32"), size=tuple(int(224),int(224),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 272, 303],"float32"), size=tuple(int(280),int(280),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 28, 24],"float32"), size=tuple(int(46),int(40),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 280],"float32"), size=tuple(int(256),int(200),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 350],"float32"), size=tuple(int(300),int(375),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 304, 280],"float32"), size=tuple(int(280),int(280),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 336, 285],"float32"), size=tuple(int(224),int(224),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 64],"float32"), size=tuple(int(16),int(16),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 64],"float32"), size=tuple(int(64),int(64),), mode=str(bilinear), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 64],"float16"), scale_factor=int(2), mode=str(linear), align_mode=int(1), align_corners=bool(False), data_format=str(NCW), )
paddle.nn.functional.interpolate(Tensor([1, 3, 64],"float32"), scale_factor=int(2), mode=str(linear), align_mode=int(1), align_corners=bool(False), data_format=str(NCW), )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6, 6],"float16"), scale_factor=list(int(2),int(2),int(2),), mode=str(nearest), align_corners=bool(False), data_format=str(NCDHW), )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6, 6],"float32"), scale_factor=list(int(2),int(2),int(2),), mode=str(nearest), align_corners=bool(False), data_format=str(NCDHW), )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6],"float16"), scale_factor=list(int(2),int(2),), mode=str(nearest), align_corners=bool(False), )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6],"float32"), scale_factor=list(int(2),int(2),), mode=str(nearest), align_corners=bool(False), )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 4],"float16"), size=list(int(3),int(3),int(3),), mode=str(trilinear), align_corners=bool(True), align_mode=int(1), data_format=str(NCDHW), )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 4],"float32"), size=list(int(3),int(3),int(3),), mode=str(trilinear), align_corners=bool(True), align_mode=int(1), data_format=str(NCDHW), )
paddle.nn.functional.interpolate(Tensor([2, 3, 5, 5],"float16"), size=list(int(3),int(3),), mode=str(bicubic), align_corners=bool(True), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([2, 3, 5, 5],"float32"), size=list(int(3),int(3),), mode=str(bicubic), align_corners=bool(True), data_format=str(NCHW), )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode=str(trilinear), align_corners=bool(False), align_mode=int(0), data_format=str(NCDHW), name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6],"float32"), size=list(int(12),int(12),), mode=str(bicubic), align_corners=bool(False), )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 3],"float16"), size=list(int(3),int(3),int(3),), mode=str(trilinear), align_corners=bool(True), align_mode=int(1), data_format=str(NDHWC), )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 3],"float32"), size=list(int(3),int(3),int(3),), mode=str(trilinear), align_corners=bool(True), align_mode=int(1), data_format=str(NDHWC), )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode=str(nearest), align_corners=bool(False), data_format=str(NCDHW), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 5, 7, 7],"float32"), mode=str(area), size=list(int(2),int(3),int(5),), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode=str(trilinear), align_corners=bool(False), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=Tensor([],"float32"), mode=str(bilinear), align_corners=bool(False), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=list(Tensor([],"float32"),Tensor([],"float32"),), mode=str(bilinear), align_corners=bool(False), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list(Tensor([],"int32"),Tensor([],"int32"),), mode=str(bilinear), align_corners=bool(False), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list(int(12),int(12),), mode=str(bilinear), align_corners=bool(False), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode=str(nearest), align_corners=bool(False), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6],"float32"), scale_factor=Tensor([1],"float32"), mode=str(LINEAR), align_corners=bool(False), data_format=str(NCW), )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 7, 7],"float32"), mode=str(area), size=list(int(2),int(5),), )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 38],"float32"), size=Tensor([2],"int32"), mode=str(nearest), )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 19],"float32"), size=Tensor([2],"int32"), mode=str(nearest), )
paddle.nn.functional.layer_norm(Tensor([10, 20],"float16"), list(int(20),), Tensor([20],"float16"), Tensor([20],"float16"), )
paddle.nn.functional.layer_norm(Tensor([10, 20],"float16"), list(int(20),), Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.nn.functional.layer_norm(Tensor([17, 129],"float32"), list(int(129),), Tensor([129],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([2, 100],"float32"), list(int(100),), weight=Tensor([100],"float32"), bias=Tensor([100],"float32"), epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list(int(6),int(6),int(3),), weight=None, bias=None, epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list(int(6),int(6),int(3),), weight=None, bias=Tensor([108],"float32"), epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list(int(6),int(6),int(3),), weight=Tensor([108],"float32"), bias=None, epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list(int(6),int(6),int(3),), weight=Tensor([108],"float32"), bias=Tensor([108],"float32"), epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list(int(6),int(6),int(3),), weight=None, bias=None, epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list(int(6),int(6),int(3),), weight=None, bias=Tensor([108],"float64"), epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list(int(6),int(6),int(3),), weight=Tensor([108],"float64"), bias=None, epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list(int(6),int(6),int(3),), weight=Tensor([108],"float64"), bias=Tensor([108],"float64"), epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([2, 768],"float32"), list(int(768),), None, None, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 4],"float32"), int(4), )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 4],"float32"), list(int(10),int(4),int(4),), )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 4],"float32"), tuple(int(10),int(4),int(4),), )
paddle.nn.functional.layer_norm(Tensor([8, 128, 256],"float32"), list(int(256),), weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=float(1e-05), )
paddle.nn.functional.layer_norm(Tensor([8, 512],"float32"), list(int(512),), None, None, )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 16, 16],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 32, 32],"float32"), int(0), )
paddle.nn.functional.leaky_relu(Tensor([1, 1024, 8, 8],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 128, 128],"float32"), int(0), )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 64, 64],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 2, 16, 16],"float32"), int(0), )
paddle.nn.functional.leaky_relu(Tensor([1, 2048, 4, 4],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 32, 32],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 64, 64],"float32"), int(0), )
paddle.nn.functional.leaky_relu(Tensor([1, 4, 8, 8],"float32"), int(0), )
paddle.nn.functional.leaky_relu(Tensor([1, 512, 16, 16],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 128, 128],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 256, 256],"float32"), int(0), )
paddle.nn.functional.leaky_relu(Tensor([10, 20, 1],"float32"), float(0.01), )
paddle.nn.functional.leaky_relu(Tensor([16, 120],"float32"), float(0.01), None, )
paddle.nn.functional.leaky_relu(Tensor([32, 120],"float32"), float(0.01), None, )
paddle.nn.functional.leaky_relu(Tensor([4, 1024, 19, 19],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 152, 152],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 38, 38],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 76, 76],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 19, 19],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 38, 38],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 76, 76],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 32, 304, 304],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 32, 608, 608],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 512, 19, 19],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 512, 38, 38],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 64, 152, 152],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([4, 64, 304, 304],"float32"), float(0.1), )
paddle.nn.functional.leaky_relu(Tensor([50],"float32"), float(0.2), )
paddle.nn.functional.leaky_relu(Tensor([512, 120],"float32"), float(0.01), None, )
paddle.nn.functional.leaky_relu(Tensor([64, 120],"float32"), float(0.01), None, )
paddle.nn.functional.leaky_relu(Tensor([8, 16, 32],"float32"), float(0.1), None, )
paddle.nn.functional.leaky_relu(Tensor([],"float32"), )
paddle.nn.functional.leaky_relu_(Tensor([10, 20, 1],"float32"), float(0.01), )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 40],"float32"), int(5), float(0.0001), float(0.75), float(1.0), str(NCHW), None, )
paddle.nn.functional.local_response_norm(Tensor([3, 40, 40, 3],"float32"), int(5), float(0.0001), float(0.75), float(1.0), str(NHWC), None, )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 40],"float32"), size=int(5), data_format=str(NCDHW), )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 3],"float32"), size=int(5), data_format=str(NDHWC), )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40],"float32"), size=int(5), data_format=str(NCHW), )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40, 3],"float32"), size=int(5), data_format=str(NHWC), )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40],"float32"), size=int(5), data_format=str(NCL), )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40],"float32"), size=int(5), data_format=str(NLC), )
paddle.nn.functional.log_sigmoid(Tensor([10],"float64"), )
paddle.nn.functional.log_sigmoid(Tensor([5, 5],"float64"), )
paddle.nn.functional.log_sigmoid(Tensor([],"float32"), )
paddle.nn.functional.log_softmax(Tensor([1, 32000],"float16"), )
paddle.nn.functional.log_softmax(Tensor([100000, 2, 3],"float32"), )
paddle.nn.functional.log_softmax(Tensor([100000, 2],"float32"), )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), int(-1), )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), int(-1), None, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), int(-1), str(float64), )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), int(1), )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), int(1), None, )
paddle.nn.functional.log_softmax(Tensor([5, 3, 2, 4],"float32"), int(1), )
paddle.nn.functional.log_softmax(Tensor([5, 3],"float32"), int(1), )
paddle.nn.functional.log_softmax(Tensor([],"float32"), )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float16"), float(5.0), int(5), int(3), int(0), bool(False), str(NCL), None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float16"), norm_type=int(5), kernel_size=int(5), stride=int(3), padding=list(int(0),), )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), float(4.0), int(3), int(2), int(1), bool(False), str(NCL), None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), float(7.0), int(2), None, int(1), bool(True), str(NCL), None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), float(inf), int(2), None, int(1), bool(False), str(NCL), None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=float(inf), kernel_size=int(2), stride=int(2), padding=list(int(1),), ceil_mode=bool(True), )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=int(4), kernel_size=int(3), stride=int(2), padding=list(int(1),), )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=int(7), kernel_size=int(2), stride=int(2), padding=list(int(1),), ceil_mode=bool(True), )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), float(5.0), int(5), int(3), int(0), bool(False), str(NCL), None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), norm_type=int(5), kernel_size=int(5), stride=int(3), padding=list(int(0),), )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), float(7.0), int(2), None, int(1), bool(False), str(NLC), None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), norm_type=int(7), kernel_size=int(2), stride=int(2), padding=list(int(1),), ceil_mode=bool(True), data_format=str(NLC), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float16"), int(2), kernel_size=int(3), stride=int(2), ceil_mode=bool(False), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float16"), norm_type=float(2.0), kernel_size=int(3), stride=int(2), padding=int(0), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), float(-inf), kernel_size=int(2), stride=int(2), ceil_mode=bool(False), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), float(inf), kernel_size=list(int(2),int(4),), stride=int(2), ceil_mode=bool(False), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), int(2), kernel_size=int(2), stride=None, ceil_mode=bool(False), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), int(2), kernel_size=int(2), stride=int(1), ceil_mode=bool(False), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), int(2), kernel_size=int(5), stride=int(3), ceil_mode=bool(True), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=float(-inf), kernel_size=int(2), stride=int(2), padding=int(0), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=float(2.0), kernel_size=int(2), stride=int(1), padding=int(0), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=float(2.0), kernel_size=int(2), stride=int(2), padding=int(0), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=float(2.0), kernel_size=int(5), stride=int(3), padding=int(0), ceil_mode=bool(True), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=float(inf), kernel_size=list(int(2),int(4),), stride=int(2), padding=int(0), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float64"), int(2), kernel_size=int(5), stride=int(3), ceil_mode=bool(False), )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float64"), norm_type=float(2.0), kernel_size=int(5), stride=int(3), padding=int(0), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 3],"float32"), int(2), kernel_size=int(2), stride=int(2), ceil_mode=bool(False), data_format=str(NHWC), )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 3],"float32"), norm_type=float(2.0), kernel_size=int(2), stride=list(int(2),int(2),), padding=int(0), ceil_mode=bool(False), data_format=str(NHWC), name=None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float32"), kernel_size=int(2), stride=int(2), return_mask=bool(True), )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), int(2), int(2), int(0), bool(True), bool(False), None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), kernel_size=int(2), stride=int(2), return_mask=bool(True), )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 6],"float32"), kernel_size=int(5), stride=int(5), padding=int(0), ceil_mode=bool(True), return_mask=bool(True), )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), int(2), None, int(0), bool(False), bool(False), None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(True), )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=int(2), stride=int(2), padding=str(SAME), )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(True), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=int(2), stride=int(2), return_mask=bool(True), )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 5],"float32"), kernel_size=int(2), stride=int(2), return_mask=bool(True), )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 40, 40],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 12, 12],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(True), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 220, 220],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 40, 40],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 20],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 6],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(True), )
paddle.nn.functional.max_pool2d(Tensor([1, 50, 106, 106],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 5, 5],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 40, 40],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 80, 80],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 20, 24, 24],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 50, 8, 8],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 112, 112],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 55, 55],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 27],"float32"), kernel_size=int(3), stride=int(1), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 27],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 3],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 3],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 52, 52],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 55, 55],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 20, 24, 24],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 24, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 244, 2],"float32"), kernel_size=list(int(5),int(3),), stride=list(int(1),int(2),), padding=tuple(int(2),int(1),), )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 1],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 1],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 13, 13],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 27],"float32"), kernel_size=int(3), stride=int(1), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 27],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 54, 54],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 56, 56],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 288, 25, 25],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 224, 224],"float32"), kernel_size=list(int(5),int(3),), stride=list(int(1),int(2),), padding=tuple(int(2),int(1),), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=None, padding=str(SAME), return_mask=bool(True), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), ceil_mode=bool(True), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(True), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(1), ceil_mode=bool(False), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=list(list(int(0),int(0),),list(int(0),int(0),),list(int(0),int(0),),list(int(0),int(0),),), return_mask=bool(False), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 33],"float32"), kernel_size=int(5), stride=int(5), padding=int(0), ceil_mode=bool(True), return_mask=bool(True), )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 32, 3],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), data_format=str(NHWC), )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 13, 13],"float32"), kernel_size=int(3), stride=int(1), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 27, 27],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 50, 8, 8],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 13, 13],"float32"), kernel_size=int(3), stride=int(1), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 14, 14],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 26, 26],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 13, 13],"float32"), kernel_size=int(3), stride=int(1), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 109, 109],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float16"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 224, 224],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 55, 55],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 7],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 7],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 768, 12, 12],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 16, 64],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(True), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 4, 16],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(True), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 8, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(True), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 13, 13],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 6, 6],"float32"), kernel_size=int(3), stride=int(1), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 109, 109],"float32"), kernel_size=int(3), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 12, 12],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 3],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 3],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 1],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 1],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 4, 4],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 7],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 7],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 10],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 24],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 24],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 8],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 8],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 28],"float16"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 16, 10, 10],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 6, 28, 28],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float16"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float32"), kernel_size=int(3), stride=int(2), padding=int(1), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCHW), name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 33],"float32"), kernel_size=int(5), stride=int(5), padding=int(0), ceil_mode=bool(True), return_mask=bool(True), )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float32"), kernel_size=int(2), stride=int(2), return_mask=bool(True), )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(True), ceil_mode=bool(False), data_format=str(NCDHW), name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=int(2), stride=int(2), return_mask=bool(True), )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list(int(3),int(3),int(3),), stride=int(1), padding=list(int(0),int(0),int(0),), data_format=str(NDHWC), )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list(int(3),int(3),int(3),), stride=list(int(1),int(1),int(1),), padding=list(int(0),int(0),int(0),), data_format=str(NDHWC), )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 3],"float32"), list(int(3),int(3),int(3),), stride=list(int(1),int(1),int(1),), padding=int(1), data_format=str(NDHWC), )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 3],"float32"), list(int(5),int(5),int(5),), stride=list(int(1),int(1),int(1),), padding=list(int(0),int(0),int(0),), data_format=str(NDHWC), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=None, padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCDHW), name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=None, padding=int(0), return_mask=bool(False), ceil_mode=bool(True), data_format=str(NCDHW), name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=None, padding=str(SAME), return_mask=bool(True), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), ceil_mode=bool(True), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), return_mask=bool(False), ceil_mode=bool(False), data_format=str(NCDHW), name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=list(int(0),int(0),int(0),int(0),int(0),int(0),), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=int(2), stride=int(2), padding=list(list(int(0),int(0),),list(int(0),int(0),),list(int(0),int(0),),list(int(0),int(0),),list(int(0),int(0),),), )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 3],"float32"), int(3), data_format=str(NDHWC), )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 32, 3],"float32"), kernel_size=int(2), stride=int(2), padding=int(0), data_format=str(NDHWC), return_mask=bool(False), )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 9, 3],"float32"), list(int(3),int(3),int(3),), stride=list(int(1),int(1),int(1),), padding=list(int(0),int(0),int(0),), data_format=str(NDHWC), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=int(2), stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=int(2), stride=int(2), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=int(2), stride=int(2), padding=int(0), data_format=str(NCL), output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=int(2), stride=int(2), output_size=list(int(1),int(3),int(16),), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=int(2), stride=int(2), output_size=tuple(int(1),int(3),int(16),), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=int(2), stride=None, output_size=tuple(int(5),int(5),), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=int(2), stride=int(2), output_size=tuple(int(5),int(5),), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=int(2), stride=int(2), padding=int(0), data_format=str(NCHW), output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=int(2), stride=None, output_size=list(int(1),int(1),int(4),int(5),), )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=int(2), padding=int(0), output_size=list(int(1),int(1),int(7),int(7),), )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=int(2), padding=int(0), output_size=list(int(7),int(7),), )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list(int(2),int(2),), stride=list(int(2),int(2),), padding=list(int(0),int(0),), data_format=str(NCHW), output_size=list(int(14),int(16),), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list(int(4),int(4),), stride=list(int(2),int(2),), padding=list(int(0),int(0),), data_format=str(NCHW), output_size=list(int(12),int(12),), name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list(int(2),int(2),int(2),), stride=list(int(2),int(2),int(2),), padding=list(int(0),int(0),int(0),), data_format=str(NCDHW), output_size=list(int(8),int(10),int(12),), name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=int(2), stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=int(2), stride=int(2), )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=int(2), stride=int(2), padding=int(0), data_format=str(NCDHW), output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=int(2), stride=int(2), output_size=list(int(1),int(3),int(4),int(4),int(6),), )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list(int(2),int(2),int(2),), stride=list(int(2),int(2),int(2),), padding=list(int(0),int(0),int(0),), data_format=str(NCDHW), output_size=list(int(7),int(9),int(11),), name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list(int(2),int(2),int(2),), stride=list(int(2),int(2),int(2),), padding=list(int(0),int(0),int(0),), data_format=str(NCDHW), output_size=list(int(8),int(10),int(12),), name=None, )
paddle.nn.functional.mish(Tensor([2, 16],"float32"), name=str(mish), )
paddle.nn.functional.mish(Tensor([],"float32"), )
paddle.nn.functional.normalize(Tensor([10, 10],"float32"), )
paddle.nn.functional.normalize(Tensor([10, 10],"float32"), axis=int(0), )
paddle.nn.functional.normalize(Tensor([10, 10],"float32"), p=float(1.5), )
paddle.nn.functional.normalize(Tensor([10, 5],"float32"), axis=int(0), )
paddle.nn.functional.normalize(Tensor([18],"float32"), axis=int(0), epsilon=float(1e-10), )
paddle.nn.functional.normalize(Tensor([18],"float32"), axis=int(0), epsilon=float(1e-12), )
paddle.nn.functional.normalize(Tensor([1],"float32"), axis=int(0), epsilon=float(1e-10), )
paddle.nn.functional.normalize(Tensor([1],"float32"), axis=int(0), epsilon=float(1e-12), )
paddle.nn.functional.normalize(Tensor([2, 27],"float32"), axis=int(1), )
paddle.nn.functional.normalize(Tensor([2, 8, 7, 10],"float32"), axis=int(1), )
paddle.nn.functional.normalize(Tensor([2],"float32"), axis=int(0), )
paddle.nn.functional.normalize(Tensor([3, 18],"float32"), axis=int(1), )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), float(-inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), float(-inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), float(inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), float(inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(-1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(-1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(0), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(0), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(2), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), int(2), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 1],"float32"), float(2.0), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100],"float32"), float(2.0), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), float(-inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), float(-inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), float(inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), float(inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(-1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(-1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(0), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(0), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(2), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 100],"float64"), int(2), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), int(2), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), float(-inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), float(-inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), float(inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), float(inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(-1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(-1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(0), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(0), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(2), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), int(2), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), float(-inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), float(-inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), float(inf), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), float(inf), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(-1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(-1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(0), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(0), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(1), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(1), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(2), float(1e-06), bool(False), None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), int(2), float(1e-06), bool(True), None, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 100],"float32"), y=Tensor([100, 1],"float32"), p=float(2.0), epsilon=float(1e-06), keepdim=bool(False), )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 100],"float32"), y=Tensor([100],"float32"), p=float(2.0), epsilon=float(1e-06), keepdim=bool(False), )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), int(3), str(NHWC), )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), int(3), str(NHWC), None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float32"), upscale_factor=int(3), )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), int(3), str(NCHW), )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), int(3), str(NCHW), None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float16"), int(3), str(NCHW), )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float32"), int(3), str(NCHW), )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), int(3), str(NCHW), )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), int(3), str(NCHW), None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 1],"float64"), int(3), str(NHWC), )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 1],"float64"), int(3), str(NHWC), None, )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([1],"float32"), data_format=str(NCHW), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([2],"float32"), data_format=str(NCHW), )
paddle.nn.functional.prelu(Tensor([16, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format=str(NCHW), )
paddle.nn.functional.prelu(Tensor([32, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format=str(NCHW), )
paddle.nn.functional.prelu(Tensor([5, 20, 10, 10],"float32"), Tensor([1],"float32"), data_format=str(NCHW), )
paddle.nn.functional.prelu(Tensor([64, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format=str(NCHW), )
paddle.nn.functional.prelu(Tensor([],"float32"), Tensor([],"float32"), )
paddle.nn.functional.relu(Tensor([1, 100, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 1024, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([1, 1024, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([1, 10],"float32"), )
paddle.nn.functional.relu(Tensor([1, 12, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 12, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128],"float32"), )
paddle.nn.functional.relu(Tensor([1, 144, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16],"float32"), )
paddle.nn.functional.relu(Tensor([1, 20, 110, 110],"float32"), )
paddle.nn.functional.relu(Tensor([1, 2048, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([1, 2048, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([1, 256, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 3, 3, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 32, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 40, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 4096],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 48, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 48, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 50, 53, 53],"float32"), )
paddle.nn.functional.relu(Tensor([1, 512, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([1, 512, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 32, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 6, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 4, 4],"float32"), )
paddle.nn.functional.relu(Tensor([1, 64, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 80, 80],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64],"float32"), )
paddle.nn.functional.relu(Tensor([1, 72, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 8, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 8, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 88, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 10, 5],"float64"), )
paddle.nn.functional.relu(Tensor([10, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([10, 10],"float32"), )
paddle.nn.functional.relu(Tensor([10, 16],"float32"), )
paddle.nn.functional.relu(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.relu(Tensor([10, 20, 1],"float64"), )
paddle.nn.functional.relu(Tensor([10, 20],"float32"), )
paddle.nn.functional.relu(Tensor([120, 84],"float32"), )
paddle.nn.functional.relu(Tensor([128, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([128, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 1024, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([16, 16, 16, 8],"float16"), )
paddle.nn.functional.relu(Tensor([16, 16, 16, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 16, 16, 8],"float64"), )
paddle.nn.functional.relu(Tensor([16, 2048, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([16, 24, 16, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 256, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([16, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 512, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([16, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 6, 5, 5],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1000, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1000, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 14, 14],"float16"), )
paddle.nn.functional.relu(Tensor([2, 1024, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 6, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024],"float32"), )
paddle.nn.functional.relu(Tensor([2, 112, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 112, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 116, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 116, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 12, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 12, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 120, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 120, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128],"float32"), )
paddle.nn.functional.relu(Tensor([2, 144, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 16, 55, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 16, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 160, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 168, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 176, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 176, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 27, 27],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 3, 3],"float16"), )
paddle.nn.functional.relu(Tensor([2, 192, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 52, 52],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2048, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2048, 7, 7],"float16"), )
paddle.nn.functional.relu(Tensor([2, 2048, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([2, 2048, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 232, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 232, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 240, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 244, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 244, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 1, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 256, 1, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 13, 13],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 56, 56],"float16"), )
paddle.nn.functional.relu(Tensor([2, 256, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2],"float32"), )
paddle.nn.functional.relu(Tensor([2, 3, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 3, 2],"float32"), )
paddle.nn.functional.relu(Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 109, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 111, 111],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 320, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 352, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 352, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 384, 1, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 384, 1, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 384, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 384, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 384, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 3],"float32"), )
paddle.nn.functional.relu(Tensor([2, 3],"float64"), )
paddle.nn.functional.relu(Tensor([2, 4, 8, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 40, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 4096],"float32"), )
paddle.nn.functional.relu(Tensor([2, 4096],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 448, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 48, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 48, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 480, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 488, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 488, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 4],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 28, 28],"float16"), )
paddle.nn.functional.relu(Tensor([2, 512, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 528, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 58, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 58, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 600],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 109, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 112, 112],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 224, 224],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 55, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 55, 55],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 7, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64],"float32"), )
paddle.nn.functional.relu(Tensor([2, 72, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 8, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 8, 8, 8],"float16"), )
paddle.nn.functional.relu(Tensor([2, 8, 8, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 80, 54, 54],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 832, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 832, 6, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 88, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 88, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 96, 109, 109],"float32"), )
paddle.nn.functional.relu(Tensor([2, 96, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([20, 40],"float32"), )
paddle.nn.functional.relu(Tensor([272, 1, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([272, 120],"float32"), )
paddle.nn.functional.relu(Tensor([272, 400],"float32"), )
paddle.nn.functional.relu(Tensor([272, 6, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([272, 84],"float32"), )
paddle.nn.functional.relu(Tensor([2],"float32"), )
paddle.nn.functional.relu(Tensor([3, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 2],"float32"), )
paddle.nn.functional.relu(Tensor([3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([3, 4],"float32"), )
paddle.nn.functional.relu(Tensor([30, 10, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([30, 3],"float32"), )
paddle.nn.functional.relu(Tensor([31, 98, 130],"float32"), )
paddle.nn.functional.relu(Tensor([32, 10],"float32"), )
paddle.nn.functional.relu(Tensor([32, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 16, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 4, 2048],"float32"), )
paddle.nn.functional.relu(Tensor([32, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 6, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 10, 10, 10],"float16"), )
paddle.nn.functional.relu(Tensor([4, 10],"float32"), )
paddle.nn.functional.relu(Tensor([4, 192, 3, 3],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 192, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 2, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 256, 1, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 256, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 256],"float32"), )
paddle.nn.functional.relu(Tensor([4, 3, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 384, 1, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 384, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 6, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 64, 7, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 64, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 64],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8, 16, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8],"float16"), )
paddle.nn.functional.relu(Tensor([4, 8],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8],"float64"), )
paddle.nn.functional.relu(Tensor([400, 120],"float32"), )
paddle.nn.functional.relu(Tensor([5, 10],"float32"), )
paddle.nn.functional.relu(Tensor([512, 1, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([512, 120],"float32"), )
paddle.nn.functional.relu(Tensor([512, 400],"float32"), )
paddle.nn.functional.relu(Tensor([512, 6, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([512, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 768],"float32"), )
paddle.nn.functional.relu(Tensor([512, 84],"float32"), )
paddle.nn.functional.relu(Tensor([6, 1, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([600, 10],"float32"), )
paddle.nn.functional.relu(Tensor([64, 128, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 10, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 256, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 512, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 6, 28, 28],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 1024, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([8, 128],"float32"), )
paddle.nn.functional.relu(Tensor([8, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 16, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 16],"float32"), )
paddle.nn.functional.relu(Tensor([8, 2048, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([8, 256, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([8, 32],"float32"), )
paddle.nn.functional.relu(Tensor([8, 512, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([8, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 64],"float32"), )
paddle.nn.functional.relu(Tensor([8, 784],"float32"), )
paddle.nn.functional.relu(Tensor([84, 10],"float32"), )
paddle.nn.functional.relu(Tensor([],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 1280, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 1280, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 144, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 144, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 144, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 144, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 192, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 192, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 192, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 192, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 32, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 32, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 384, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 384, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 576, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 576, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 576, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 576, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 96, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 96, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 96, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 96, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 960, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 960, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 1280, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 144, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 144, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 192, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 192, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 32, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 384, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 576, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 576, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 96, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 96, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 960, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([4, 1280, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 144, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 144, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 192, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 192, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 32, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 384, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 576, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 576, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 96, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 96, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 960, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([512, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu6(Tensor([8, 16, 32],"float32"), None, )
paddle.nn.functional.relu6(Tensor([],"float32"), )
paddle.nn.functional.relu_(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.relu_(Tensor([],"float32"), )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), float(0.05), float(0.25), training=bool(False), )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), float(0.1), float(0.33), training=bool(False), )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), lower=float(0.05), upper=float(0.25), training=bool(True), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float16"), float(0.1), float(0.3), training=bool(False), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float16"), float(0.3), float(0.300000009), training=bool(True), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float32"), float(0.1), float(0.3), training=bool(False), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float32"), float(0.3), float(0.300000009), training=bool(True), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float64"), float(0.1), float(0.3), training=bool(False), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float64"), float(0.3), float(0.300000009), training=bool(True), )
paddle.nn.functional.rrelu(Tensor([],"float32"), )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), float(1.5), float(2.0), )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), float(1.5), float(2.0), None, )
paddle.nn.functional.selu(Tensor([],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 1024],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 2048],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 5, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 32],"float64"), )
paddle.nn.functional.sigmoid(Tensor([1, 512],"float32"), )
paddle.nn.functional.sigmoid(Tensor([10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([10, 15],"float32"), )
paddle.nn.functional.sigmoid(Tensor([10, 15],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([10],"float64"), )
paddle.nn.functional.sigmoid(Tensor([128, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([128, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([16, 10],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([16, 84],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([2, 10, 3, 3],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([2, 2],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 5, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 5, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([3, 1],"float64"), )
paddle.nn.functional.sigmoid(Tensor([3, 2, 2],"float32"), )
paddle.nn.functional.sigmoid(Tensor([32, 32],"float64"), )
paddle.nn.functional.sigmoid(Tensor([32, 84],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([4, 10, 10, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 10, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 17, 10, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 12, 17, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 16],"float64"), )
paddle.nn.functional.sigmoid(Tensor([4, 32],"float64"), )
paddle.nn.functional.sigmoid(Tensor([4, 4, 10, 17, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 10, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 5, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 8, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 6, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 6, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 7, 7, 7, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 10, 8, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 8, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 8, 8, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([469, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([5, 10],"float64"), )
paddle.nn.functional.sigmoid(Tensor([5, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([512, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([512, 84],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([64, 84],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([8, 1024],"float32"), )
paddle.nn.functional.sigmoid(Tensor([8, 2048],"float32"), )
paddle.nn.functional.sigmoid(Tensor([8, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([8, 512],"float32"), )
paddle.nn.functional.sigmoid(Tensor([],"float32"), )
paddle.nn.functional.silu(Tensor([100, 100],"float32"), )
paddle.nn.functional.silu(Tensor([2, 4, 2, 6],"float16"), )
paddle.nn.functional.silu(Tensor([4, 101],"float32"), )
paddle.nn.functional.silu(Tensor([4, 101],"float64"), )
paddle.nn.functional.silu(Tensor([8, 100],"float32"), )
paddle.nn.functional.silu(Tensor([8, 100],"float64"), )
paddle.nn.functional.silu(Tensor([8, 128],"float64"), )
paddle.nn.functional.silu(Tensor([8, 64],"float64"), )
paddle.nn.functional.silu(Tensor([],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 200],"float32"), reduction=str(mean), delta=float(0.03007869737980573), name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 200],"float32"), reduction=str(mean), delta=float(1.0), name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 200],"float32"), reduction=str(none), delta=float(1.0), name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 200],"float32"), reduction=str(sum), delta=float(1.0), name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],bfloat16), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],bfloat16), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],bfloat16), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],bfloat16), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],bfloat16), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],bfloat16), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 102],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 128, 32, 32],"float16"), )
paddle.nn.functional.softmax(Tensor([1, 128, 32, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 16, 32, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 2],"float32"), axis=int(1), )
paddle.nn.functional.softmax(Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 3, 2, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([1, 3, 2, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 4],"float16"), )
paddle.nn.functional.softmax(Tensor([1, 8, 128, 128],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 8, 32, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 8, 64, 64],"float32"), int(-1), )
paddle.nn.functional.softmax(Tensor([10, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([10, 16],"float32"), )
paddle.nn.functional.softmax(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.softmax(Tensor([10, 20],"float64"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([128, 100],"float32"), )
paddle.nn.functional.softmax(Tensor([128, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([16, 10],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([16, 128, 32, 32],"float32"), )
paddle.nn.functional.softmax(Tensor([16, 128],"float64"), int(0), name=None, )
paddle.nn.functional.softmax(Tensor([16, 128],"float64"), int(1), )
paddle.nn.functional.softmax(Tensor([16, 128],"float64"), int(1), name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 128, 128],"float64"), )
paddle.nn.functional.softmax(Tensor([16, 16, 128],"float64"), int(0), name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 128],"float64"), int(1), )
paddle.nn.functional.softmax(Tensor([16, 16, 128],"float64"), int(1), name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 128],"float64"), int(2), )
paddle.nn.functional.softmax(Tensor([16, 16, 128],"float64"), int(2), name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 512, 512],"float64"), )
paddle.nn.functional.softmax(Tensor([2, 102],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 102],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 10],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([2, 20],"float32"), axis=int(1), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 5],"float32"), axis=int(0), )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 5],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 5],"float32"), int(0), name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4],"float32"), axis=int(-3), dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 32, 1, 33],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 400],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 6, 4],"float64"), axis=int(-3), dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 5, 4],"float64"), axis=int(-3), dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 66],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 8, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([256, 128],"float64"), int(1), )
paddle.nn.functional.softmax(Tensor([2800],"float32"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([2],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([3, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([3, 16, 64, 64],"float16"), int(-1), )
paddle.nn.functional.softmax(Tensor([3, 5],"float32"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([3, 5],"float64"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([32, 10],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([32, 8, 4, 4],"float32"), )
paddle.nn.functional.softmax(Tensor([3],"float64"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([4, 50],"float32"), )
paddle.nn.functional.softmax(Tensor([512, 10],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([58, 2, 140, 140],"float32"), )
paddle.nn.functional.softmax(Tensor([58, 2],"float32"), )
paddle.nn.functional.softmax(Tensor([5],"float32"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([6, 5],"float32"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([64, 10],"float16"), )
paddle.nn.functional.softmax(Tensor([64, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([64, 10],"float32"), int(-1), name=None, )
paddle.nn.functional.softmax(Tensor([6],"float32"), axis=int(-1), )
paddle.nn.functional.softmax(Tensor([8, 102],"float16"), )
paddle.nn.functional.softmax(Tensor([8, 102],"float32"), )
paddle.nn.functional.softmax(Tensor([8, 16, 1, 129],"float32"), )
paddle.nn.functional.softmax(Tensor([8, 16, 128, 128],"float16"), )
paddle.nn.functional.softmax(Tensor([8, 16, 128, 128],"float32"), )
paddle.nn.functional.softmax(Tensor([8, 4, 100],"float64"), )
paddle.nn.functional.softmax(Tensor([],"float32"), )
paddle.nn.functional.softplus(Tensor([10],"float64"), )
paddle.nn.functional.softplus(Tensor([2, 3],"float64"), )
paddle.nn.functional.softplus(Tensor([3],"float64"), )
paddle.nn.functional.softplus(Tensor([],"float32"), )
paddle.nn.functional.softshrink(Tensor([],"float32"), )
paddle.nn.functional.softsign(Tensor([32, 128],"float32"), )
paddle.nn.functional.softsign(Tensor([],"float32"), )
paddle.nn.functional.tanh(Tensor([2, 60],"float32"), None, )
paddle.nn.functional.tanh(Tensor([],"float32"), )
paddle.nn.functional.tanhshrink(Tensor([],"float32"), )
paddle.nn.functional.thresholded_relu(Tensor([10, 20, 1],"float32"), float(1.0), )
paddle.nn.functional.thresholded_relu(Tensor([],"float32"), )
paddle.nn.functional.thresholded_relu_(Tensor([10, 20, 1],"float32"), float(1.0), )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=float(0.3), swap=bool(False), reduction=str(mean), name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=float(0.3), swap=bool(False), reduction=str(none), name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=float(0.3), swap=bool(False), reduction=str(sum), name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=float(0.3), swap=bool(True), reduction=str(mean), name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=float(0.3), swap=bool(False), reduction=str(mean), )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=float(0.3), swap=bool(False), reduction=str(none), )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=float(0.3), swap=bool(False), reduction=str(sum), )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=float(0.3), swap=bool(True), reduction=str(mean), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), int(3), int(1), int(1), tuple(int(1),int(1),), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), int(3), int(1), tuple(int(1),int(1),), int(1), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), int(3), tuple(int(1),int(1),), int(1), int(1), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), int(3), tuple(int(1),int(1),), tuple(int(1),int(1),), tuple(int(1),int(1),), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), tuple(int(3),int(3),), tuple(int(1),int(1),), tuple(int(1),int(1),), tuple(int(1),int(1),), )
paddle.nn.functional.unfold(Tensor([3, 3, 20, 20],"float64"), kernel_sizes=list(int(3),int(3),), strides=list(int(1),int(1),), paddings=list(int(1),int(1),int(1),int(1),), dilations=list(int(1),int(1),), name=None, )
paddle.nn.functional.upsample(x=Tensor([2, 3, 6, 6],"float32"), size=list(Tensor([],"int32"),Tensor([],"int32"),), mode=str(bilinear), align_corners=bool(False), )
paddle.nonzero(Tensor([10, 10],"float32"), as_tuple=bool(False), )
paddle.nonzero(Tensor([2, 2],bool), )
paddle.nonzero(x=Tensor([12, 9],bfloat16), )
paddle.nonzero(x=Tensor([2, 10, 2],"float32"), )
paddle.nonzero(x=Tensor([3, 4, 7],"float16"), )
paddle.nonzero(x=Tensor([3, 4, 7],"float32"), )
paddle.nonzero(x=Tensor([8, 8],"float64"), )
paddle.normal(Tensor([1, 100],"complex128"), Tensor([1, 100],"float64"), None, )
paddle.normal(Tensor([1, 100],"float64"), Tensor([1, 100],"float64"), None, )
paddle.normal(Tensor([100],"complex64"), Tensor([100],"float32"), None, )
paddle.normal(Tensor([100],"float64"), Tensor([100],"float32"), None, )
paddle.normal(Tensor([2, 3, 4, 5],"float64"), float(0.0), None, )
paddle.normal(Tensor([2, 3],"complex128"), float(1.0), None, )
paddle.normal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.normal(complex((1+1j)), Tensor([2, 5],"float64"), None, )
paddle.normal(complex((1+1j)), float(1.0), list(int(8),int(12),), )
paddle.normal(float(0.0), float(1.0), list(), )
paddle.normal(float(0.0), float(1.0), list(Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),), )
paddle.normal(float(0.0), float(1.0), shape=list(int(1),), )
paddle.normal(float(0.0), float(1.0), shape=list(int(18),), )
paddle.normal(float(1.0), Tensor([2, 3, 17],"float64"), None, )
paddle.normal(float(1.0), float(0.0), list(int(8),int(12),), )
paddle.normal(mean=Tensor([1000, 2],"float64"), std=Tensor([1000, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([1000, 2],"float64"), std=float(0.5), shape=None, name=None, )
paddle.normal(mean=complex(0j), shape=tuple(int(100000),int(4),), )
paddle.normal(mean=float(0.0), shape=tuple(), )
paddle.normal(mean=float(0.0), shape=tuple(int(100000),int(4),), )
paddle.normal(mean=float(0.0), shape=tuple(int(1000000),int(4),), )
paddle.normal(mean=float(0.0), shape=tuple(int(5),int(10),int(8),), )
paddle.normal(mean=float(0.0), std=Tensor([1000, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=float(0.0), std=float(0.5), shape=list(int(1000),), name=None, )
paddle.normal(mean=float(1.0), std=float(2.0), shape=list(int(1),int(2),int(3),), name=None, )
paddle.normal(shape=list(int(1),int(2),int(3),), )
paddle.normal(shape=list(int(3),int(121),int(175),), )
paddle.normal(shape=tuple(int(10000),int(2),), )
paddle.normal(shape=tuple(int(10000),int(2),int(3),), )
paddle.normal(shape=tuple(int(2),), )
paddle.normal(shape=tuple(int(2),int(3),), )
paddle.ones_like(Tensor([1, 128, 8, 16],"float32"), )
paddle.ones_like(Tensor([1, 1],"float32"), )
paddle.ones_like(Tensor([1, 3, 2, 4],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([1, 3, 2],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([1, 32, 128, 128],"float16"), )
paddle.ones_like(Tensor([1, 32, 128, 128],"float32"), )
paddle.ones_like(Tensor([1, 32, 128, 32],"float32"), )
paddle.ones_like(Tensor([1, 32, 16, 16],"float32"), )
paddle.ones_like(Tensor([1, 32, 8, 8],"float32"), )
paddle.ones_like(Tensor([1, 40, 1723],"float32"), )
paddle.ones_like(Tensor([1, 40, 289],"float32"), )
paddle.ones_like(Tensor([1, 40, 470],"float32"), )
paddle.ones_like(Tensor([1, 64, 1723],"float32"), )
paddle.ones_like(Tensor([1, 64, 333],"float32"), )
paddle.ones_like(Tensor([1, 64, 363],"float32"), )
paddle.ones_like(Tensor([1, 64, 382],"float32"), )
paddle.ones_like(Tensor([1, 64, 392],"float32"), )
paddle.ones_like(Tensor([1, 64, 470],"float32"), )
paddle.ones_like(Tensor([10, 12],"float32"), )
paddle.ones_like(Tensor([10, 12],"float64"), )
paddle.ones_like(Tensor([10],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([11],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([12],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([13],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([14],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([16, 32, 128, 128],"float32"), )
paddle.ones_like(Tensor([17],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([18],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([19],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([2, 1, 5, 2],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 128],"int64"), dtype=str(int64), )
paddle.ones_like(Tensor([2, 2, 2],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 2, 2],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 2, 2],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 2, 2],"int32"), )
paddle.ones_like(Tensor([2, 2, 3],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 2, 3],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 2, 3],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 3, 2],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 3, 2],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 3, 2],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 3, 3],"float64"), )
paddle.ones_like(Tensor([2, 3, 4],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 3, 4],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 3, 4],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 3, 5, 4],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 3, 5, 4],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 3, 5, 4],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 3, 5],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 3, 5],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 3, 5],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 3],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2, 3],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2, 3],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 4, 3],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 4],"float64"), )
paddle.ones_like(Tensor([2, 5, 4],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([2, 8, 8],"float32"), )
paddle.ones_like(Tensor([28, 28],"float32"), )
paddle.ones_like(Tensor([2],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([2],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([2],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([3, 1],"float32"), )
paddle.ones_like(Tensor([3, 2],"float32"), )
paddle.ones_like(Tensor([3, 3],"float32"), )
paddle.ones_like(Tensor([3],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([3],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([3],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([4, 5, 2],"float32"), )
paddle.ones_like(Tensor([4, 5, 2],"float64"), )
paddle.ones_like(Tensor([4, 8],"float32"), )
paddle.ones_like(Tensor([4, 8],"float64"), )
paddle.ones_like(Tensor([4],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([4],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([4],"float64"), )
paddle.ones_like(Tensor([4],"float64"), dtype=str(float64), )
paddle.ones_like(Tensor([5, 3],"float64"), )
paddle.ones_like(Tensor([6, 1],"float32"), )
paddle.ones_like(Tensor([6],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([8, 8],"float32"), )
paddle.ones_like(Tensor([8],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([9],"int64"), dtype=str(int32), )
paddle.ones_like(Tensor([],"float16"), dtype=str(float16), )
paddle.ones_like(Tensor([],"float32"), )
paddle.ones_like(Tensor([],"float32"), dtype=str(float32), )
paddle.ones_like(Tensor([],"float64"), )
paddle.ones_like(Tensor([],"float64"), dtype=str(float64), )
paddle.outer(Tensor([20, 10],"float32"), Tensor([],"float32"), )
paddle.outer(Tensor([20, 50],"complex128"), Tensor([50],"complex128"), )
paddle.outer(Tensor([20, 50],"float64"), Tensor([50],"float64"), )
paddle.outer(Tensor([5, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([5, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([5, 10, 10],"int32"), Tensor([2, 10],"int32"), )
paddle.outer(Tensor([5, 10, 10],"int64"), Tensor([2, 10],"int64"), )
paddle.pdist(Tensor([10, 20],"float32"), float(1.0), )
paddle.pdist(Tensor([10, 20],"float32"), float(1.5), )
paddle.pdist(Tensor([10, 20],"float32"), float(2.0), )
paddle.pdist(Tensor([10, 20],"float32"), float(2.5), )
paddle.pdist(Tensor([10, 20],"float32"), float(3.0), )
paddle.pdist(Tensor([10, 20],"float32"), float(inf), )
paddle.pdist(Tensor([10, 20],"float32"), int(0), )
paddle.pdist(Tensor([50, 20],"float64"), float(2.0), )
paddle.poisson(Tensor([10, 10],"float32"), )
paddle.poisson(Tensor([16, 1024, 1024],"float32"), )
paddle.poisson(Tensor([32, 3, 1024, 768],"float32"), )
paddle.poisson(Tensor([],"float32"), )
paddle.polygamma(Tensor([10, 20, 1],"float32"), int(1), )
paddle.polygamma(Tensor([2, 2, 6],"float64"), int(2), )
paddle.polygamma(Tensor([2, 6],"float64"), int(1), )
paddle.polygamma(Tensor([6],"float32"), int(1), )
paddle.polygamma(Tensor([6],"float32"), int(2), )
paddle.polygamma(Tensor([6],"float32"), int(3), )
paddle.polygamma(Tensor([6],"float64"), int(1), )
paddle.polygamma(Tensor([6],"float64"), int(2), )
paddle.polygamma(Tensor([6],"float64"), int(3), )
paddle.polygamma(Tensor([],"float32"), int(2), )
paddle.pow(Tensor([1, 1025, 118],"float32"), float(2.0), )
paddle.pow(Tensor([1, 1025, 431],"float32"), float(2.0), )
paddle.pow(Tensor([1, 1025, 73],"float32"), float(2.0), )
paddle.pow(Tensor([1, 1025, 91],"float32"), float(2.0), )
paddle.pow(Tensor([1, 1025, 98],"float32"), float(2.0), )
paddle.pow(Tensor([1, 21, 118],"float32"), float(1.0), )
paddle.pow(Tensor([1, 21, 431],"float32"), float(1.0), )
paddle.pow(Tensor([1, 21, 84],"float32"), float(1.0), )
paddle.pow(Tensor([1, 257, 1723],"float32"), float(2.0), )
paddle.pow(Tensor([1, 257, 289],"float32"), float(2.0), )
paddle.pow(Tensor([1, 257, 333],"float32"), float(2.0), )
paddle.pow(Tensor([1, 257, 363],"float32"), float(2.0), )
paddle.pow(Tensor([1, 257, 382],"float32"), float(2.0), )
paddle.pow(Tensor([1, 257, 392],"float32"), float(2.0), )
paddle.pow(Tensor([1, 257, 470],"float32"), float(2.0), )
paddle.pow(Tensor([1, 3, 4, 10],"float32"), int(2), )
paddle.pow(Tensor([1, 3, 4, 10],"float64"), int(2), )
paddle.pow(Tensor([1, 33, 431],"float32"), float(1.0), )
paddle.pow(Tensor([1, 33, 96],"float32"), float(1.0), )
paddle.pow(Tensor([1, 33, 98],"float32"), float(1.0), )
paddle.pow(Tensor([10, 1024],"float32"), int(2), )
paddle.pow(Tensor([10, 10],"float32"), float(2.7), )
paddle.pow(Tensor([10, 16],"float32"), int(2), )
paddle.pow(Tensor([10, 20, 1],"float32"), int(2), )
paddle.pow(Tensor([10, 20],"float32"), int(2), )
paddle.pow(Tensor([100000, 4],"float64"), int(2), )
paddle.pow(Tensor([1000000, 4],"float64"), int(2), )
paddle.pow(Tensor([1024, 1024, 8],"float32"), int(2), )
paddle.pow(Tensor([1024, 1024, 8],"float64"), int(2), )
paddle.pow(Tensor([120, 84],"float32"), int(2), )
paddle.pow(Tensor([16, 150],"float32"), int(2), )
paddle.pow(Tensor([16, 256],"float32"), int(2), )
paddle.pow(Tensor([16, 256],"float64"), int(2), )
paddle.pow(Tensor([1],"float32"), float(4.0), )
paddle.pow(Tensor([1],"float32"), int(2), )
paddle.pow(Tensor([2, 2, 2],"float32"), int(5), )
paddle.pow(Tensor([2, 2, 2],"float32"), int(6), )
paddle.pow(Tensor([2, 2],"float32"), int(5), )
paddle.pow(Tensor([2, 2],"float32"), int(6), )
paddle.pow(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([2, 3],"float32"), int(2), )
paddle.pow(Tensor([216],"int32"), Tensor([216],"int32"), )
paddle.pow(Tensor([237],"float64"), int(3), )
paddle.pow(Tensor([237],"int64"), int(6), )
paddle.pow(Tensor([247],"float64"), float(8.902181874411676), )
paddle.pow(Tensor([267],"float64"), Tensor([267],"float64"), )
paddle.pow(Tensor([280],"float32"), Tensor([280],"float32"), )
paddle.pow(Tensor([282],"int64"), Tensor([282],"int64"), )
paddle.pow(Tensor([2],"float32"), int(2), )
paddle.pow(Tensor([2],"float32"), int(5), )
paddle.pow(Tensor([2],"float32"), int(6), )
paddle.pow(Tensor([3, 3, 3, 40, 40],"float32"), float(0.75), )
paddle.pow(Tensor([3, 3, 40, 40, 3],"float32"), float(0.75), )
paddle.pow(Tensor([3, 3, 40, 40],"float32"), float(0.75), )
paddle.pow(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.pow(Tensor([3, 40, 40, 3],"float32"), float(0.75), )
paddle.pow(Tensor([3, 40, 40],"float32"), float(0.75), )
paddle.pow(Tensor([3, 5],"float32"), int(2), )
paddle.pow(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.pow(Tensor([3],"float32"), int(2), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([400, 120],"float32"), int(2), )
paddle.pow(Tensor([4],"float64"), int(2), )
paddle.pow(Tensor([5, 2],"float64"), int(1), )
paddle.pow(Tensor([5, 2],"float64"), int(2), )
paddle.pow(Tensor([5, 3],"float64"), int(2), )
paddle.pow(Tensor([5, 5],"float32"), float(6.996091978980955), )
paddle.pow(Tensor([5, 9, 7],"float64"), Tensor([7],"float64"), )
paddle.pow(Tensor([6, 9],"float32"), int(2), )
paddle.pow(Tensor([8, 16, 32],"float32"), int(3), )
paddle.pow(Tensor([84, 10],"float32"), int(2), )
paddle.pow(Tensor([],"float32"), Tensor([1],"float32"), )
paddle.pow(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.pow(Tensor([],"float32"), Tensor([207],"float32"), )
paddle.pow(Tensor([],"float32"), Tensor([209],"float32"), )
paddle.pow(Tensor([],"float32"), Tensor([210],"float32"), )
paddle.pow(Tensor([],"float32"), Tensor([5, 9],"float32"), )
paddle.pow(Tensor([],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([],"float32"), float(2.0), )
paddle.pow(Tensor([],"float32"), int(2), )
paddle.pow(Tensor([],"float64"), Tensor([1],"float64"), )
paddle.pow(Tensor([],"float64"), Tensor([247],"float64"), )
paddle.pow(Tensor([],"float64"), Tensor([6],"float64"), )
paddle.pow(Tensor([],"float64"), int(2), )
paddle.prod(Tensor([10, 10, 5],"complex64"), )
paddle.prod(Tensor([10, 10, 5],"complex64"), axis=int(1), )
paddle.prod(Tensor([10, 10, 5],"complex64"), axis=int(1), keepdim=bool(True), )
paddle.prod(Tensor([10, 10, 5],"complex64"), axis=list(int(0),int(1),), )
paddle.prod(Tensor([10, 10, 5],"float32"), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=int(-1), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=int(1), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=int(1), dtype=str(int64), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=int(1), keepdim=bool(True), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=int(1), keepdim=bool(True), dtype=str(int64), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=list(int(0),int(1),), )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list(int(0),Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.prod(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 2],"float16"), list(int(2),int(3),int(4),), bool(False), )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 2],"float32"), list(int(2),int(3),int(4),), bool(False), )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 2],"float64"), list(int(2),int(3),int(4),), bool(False), )
paddle.prod(Tensor([5, 6, 10],"float16"), list(int(0),), bool(False), )
paddle.prod(Tensor([5, 6, 10],"float32"), list(int(0),), bool(False), )
paddle.prod(Tensor([5, 6, 10],"float64"), list(int(0),), bool(False), )
paddle.prod(Tensor([5, 6, 2, 3, 4, 2],"float16"), list(int(2),int(3),int(4),), bool(False), )
paddle.prod(Tensor([5, 6, 2, 3, 4, 2],"float32"), list(int(2),int(3),int(4),), bool(False), )
paddle.prod(Tensor([5, 6, 2, 3, 4, 2],"float64"), list(int(2),int(3),int(4),), bool(False), )
paddle.prod(Tensor([],"float64"), list(), bool(False), )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(higher), )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(lower), )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(midpoint), )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=float(0.35), axis=int(0), interpolation=str(nearest), )
paddle.quantile(Tensor([2, 3],"float32"), float(0.5), axis=None, )
paddle.quantile(Tensor([2, 3],"float32"), list(float(0.3),float(0.7),), int(1), )
paddle.quantile(Tensor([3],"float32"), float(0.5), int(0), )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=float(0.1), axis=list(int(1),int(2),), keepdim=bool(True), )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=float(0.35), )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=float(0.35), axis=int(2), keepdim=bool(True), )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=float(0.5), axis=int(2), )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=float(0.75), axis=list(int(0),int(2),), )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=int(0), axis=int(1), )
paddle.quantile(Tensor([4, 7],"float32"), q=float(0.5), axis=int(1), )
paddle.quantile(Tensor([4, 7],"float64"), q=float(0.5), axis=int(1), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([2],"float32"), axis=list(int(1),int(2),), keepdim=bool(True), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([],"float32"), axis=list(int(1),int(2),), keepdim=bool(True), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=list(float(0.1),float(0.2),float(0.3),), axis=list(int(1),int(2),), keepdim=bool(True), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=list(float(0.2),float(0.67),), axis=list(int(1),int(-1),), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=list(float(0.3),float(0.44),), axis=int(-2), )
paddle.quantile(Tensor([8],"float32"), list(float(0.55),float(0.7),), int(0), )
paddle.quantile(Tensor([],"float32"), float(0.5), axis=None, )
paddle.quantile(Tensor([],"float32"), float(0.5), axis=list(), )
paddle.rad2deg(Tensor([1],"float32"), )
paddle.rad2deg(Tensor([1],"int64"), )
paddle.rad2deg(Tensor([6],"float32"), )
paddle.rad2deg(Tensor([8, 16, 32],"float32"), )
paddle.rad2deg(Tensor([],"float32"), )
paddle.randint_like(Tensor([10, 12],bool), low=int(-100), high=int(100), dtype=str(bool), )
paddle.randint_like(Tensor([10, 12],bool), low=int(-100), high=int(100), dtype=str(float16), )
paddle.randint_like(Tensor([10, 12],bool), low=int(-100), high=int(100), dtype=str(float32), )
paddle.randint_like(Tensor([10, 12],bool), low=int(-100), high=int(100), dtype=str(float64), )
paddle.randint_like(Tensor([10, 12],bool), low=int(-100), high=int(100), dtype=str(int32), )
paddle.randint_like(Tensor([10, 12],bool), low=int(-100), high=int(100), dtype=str(int64), )
paddle.randint_like(Tensor([10, 12],"float16"), low=int(-100), high=int(100), dtype=str(bool), )
paddle.randint_like(Tensor([10, 12],"float16"), low=int(-100), high=int(100), dtype=str(float16), )
paddle.randint_like(Tensor([10, 12],"float16"), low=int(-100), high=int(100), dtype=str(float32), )
paddle.randint_like(Tensor([10, 12],"float16"), low=int(-100), high=int(100), dtype=str(float64), )
paddle.randint_like(Tensor([10, 12],"float16"), low=int(-100), high=int(100), dtype=str(int32), )
paddle.randint_like(Tensor([10, 12],"float16"), low=int(-100), high=int(100), dtype=str(int64), )
paddle.randint_like(Tensor([10, 12],"float32"), low=int(-100), high=int(100), dtype=str(bool), )
paddle.randint_like(Tensor([10, 12],"float32"), low=int(-100), high=int(100), dtype=str(float16), )
paddle.randint_like(Tensor([10, 12],"float32"), low=int(-100), high=int(100), dtype=str(float32), )
paddle.randint_like(Tensor([10, 12],"float32"), low=int(-100), high=int(100), dtype=str(float64), )
paddle.randint_like(Tensor([10, 12],"float32"), low=int(-100), high=int(100), dtype=str(int32), )
paddle.randint_like(Tensor([10, 12],"float32"), low=int(-100), high=int(100), dtype=str(int64), )
paddle.randint_like(Tensor([10, 12],"float64"), low=int(-100), high=int(100), dtype=str(bool), )
paddle.randint_like(Tensor([10, 12],"float64"), low=int(-100), high=int(100), dtype=str(float16), )
paddle.randint_like(Tensor([10, 12],"float64"), low=int(-100), high=int(100), dtype=str(float32), )
paddle.randint_like(Tensor([10, 12],"float64"), low=int(-100), high=int(100), dtype=str(float64), )
paddle.randint_like(Tensor([10, 12],"float64"), low=int(-100), high=int(100), dtype=str(int32), )
paddle.randint_like(Tensor([10, 12],"float64"), low=int(-100), high=int(100), dtype=str(int64), )
paddle.randint_like(Tensor([10, 12],"int32"), low=int(-100), high=int(100), dtype=str(bool), )
paddle.randint_like(Tensor([10, 12],"int32"), low=int(-100), high=int(100), dtype=str(float16), )
paddle.randint_like(Tensor([10, 12],"int32"), low=int(-100), high=int(100), dtype=str(float32), )
paddle.randint_like(Tensor([10, 12],"int32"), low=int(-100), high=int(100), dtype=str(float64), )
paddle.randint_like(Tensor([10, 12],"int32"), low=int(-100), high=int(100), dtype=str(int32), )
paddle.randint_like(Tensor([10, 12],"int32"), low=int(-100), high=int(100), dtype=str(int64), )
paddle.randint_like(Tensor([10, 12],"int64"), low=int(-100), high=int(100), dtype=str(bool), )
paddle.randint_like(Tensor([10, 12],"int64"), low=int(-100), high=int(100), dtype=str(float16), )
paddle.randint_like(Tensor([10, 12],"int64"), low=int(-100), high=int(100), dtype=str(float32), )
paddle.randint_like(Tensor([10, 12],"int64"), low=int(-100), high=int(100), dtype=str(float64), )
paddle.randint_like(Tensor([10, 12],"int64"), low=int(-100), high=int(100), dtype=str(int32), )
paddle.randint_like(Tensor([10, 12],"int64"), low=int(-100), high=int(100), dtype=str(int64), )
paddle.randint_like(Tensor([],"int64"), int(-10), int(10), )
paddle.randperm(int(10), )
paddle.randperm(int(10), str(float32), )
paddle.randperm(int(10), str(float64), )
paddle.randperm(int(10), str(int32), )
paddle.randperm(int(30000), dtype=str(float32), )
paddle.randperm(int(30000), dtype=str(float64), )
paddle.randperm(int(30000), dtype=str(int32), )
paddle.randperm(int(30000), dtype=str(int64), )
paddle.randperm(int(5), )
paddle.real(Tensor([10, 10, 10, 20],"complex64"), )
paddle.real(Tensor([2, 20, 2, 3],"complex128"), )
paddle.real(Tensor([2, 20, 2, 3],"complex64"), )
paddle.real(Tensor([],"complex64"), )
paddle.reciprocal(Tensor([2, 3],"float32"), )
paddle.reciprocal(Tensor([],"float32"), )
paddle.renorm(Tensor([10, 20, 1],"float32"), float(1.0), int(-1), float(2.05), )
paddle.renorm(Tensor([2, 2, 3],"float32"), float(1.0), int(-1), float(2.05), )
paddle.renorm(Tensor([2, 2, 3],"float32"), float(1.0), int(2), float(2.05), )
paddle.repeat_interleave(Tensor([1, 128],"float32"), int(128), int(0), )
paddle.repeat_interleave(Tensor([1, 2],"int64"), int(1), axis=int(0), )
paddle.repeat_interleave(Tensor([1, 2],"int64"), int(2), axis=int(0), )
paddle.repeat_interleave(Tensor([2, 3],bfloat16), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 3],bfloat16), int(2), None, )
paddle.repeat_interleave(Tensor([2, 3],"int32"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 3],"int32"), int(2), None, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([3],"int32"), axis=int(0), )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([4],"int32"), int(-1), )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([4],"int32"), int(1), )
paddle.repeat_interleave(Tensor([],"float32"), Tensor([1],"int32"), None, )
paddle.repeat_interleave(Tensor([],"float32"), Tensor([],"int64"), None, )
paddle.repeat_interleave(Tensor([],"float32"), int(2), None, )
paddle.reshape(Tensor([0, 2],"float32"), list(int(-1),), )
paddle.reshape(Tensor([0, 2],"float32"), list(int(0),), )
paddle.reshape(Tensor([0, 2],"float32"), list(int(2),int(-1),), )
paddle.reshape(Tensor([0, 2],"float32"), list(int(2),int(3),int(0),), )
paddle.reshape(Tensor([1, 1, 3, 3, 1],"float32"), list(int(1),int(3),int(3),int(1),int(1),), )
paddle.reshape(Tensor([1, 10, 1, 1],"float32"), list(int(-1),int(10),), )
paddle.reshape(Tensor([1, 100, 10],"float32"), list(int(100),int(10),), )
paddle.reshape(Tensor([1, 100],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1, 1024, 1, 1],"float32"), shape=list(int(-1),int(1024),), )
paddle.reshape(Tensor([1, 1024],"float32"), list(int(1),int(1024),int(1),int(1),), )
paddle.reshape(Tensor([1, 10],"float32"), list(int(-1),int(10),int(1),int(1),), )
paddle.reshape(Tensor([1, 12, 2, 10, 10],"float32"), shape=list(int(1),int(24),int(10),int(10),), )
paddle.reshape(Tensor([1, 1280, 1, 1],"float32"), shape=list(int(-1),int(1280),), )
paddle.reshape(Tensor([1, 1],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([1, 1],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([1, 1],"float32"), list(), )
paddle.reshape(Tensor([1, 1],"float32"), list(Tensor([],"int32"),Tensor([],"int32"),), )
paddle.reshape(Tensor([1, 1],"float32"), list(int(-1),), )
paddle.reshape(Tensor([1, 2, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2048, 1, 1],"float32"), shape=list(int(-1),int(2048),), )
paddle.reshape(Tensor([1, 2048],"float32"), list(int(1),int(2048),int(1),int(1),), )
paddle.reshape(Tensor([1, 24, 10, 10],"float32"), shape=list(int(1),int(2),int(12),int(10),int(10),), )
paddle.reshape(Tensor([1, 24, 2, 5, 5],"float32"), shape=list(int(1),int(48),int(5),int(5),), )
paddle.reshape(Tensor([1, 256, 1, 1],"float32"), shape=list(int(-1),int(256),), )
paddle.reshape(Tensor([1, 256],"float32"), list(int(1),int(256),int(1),int(1),), )
paddle.reshape(Tensor([1, 2],"float32"), list(int(-1),), )
paddle.reshape(Tensor([1, 3, 1, 16, 1, 32, 1],"float32"), list(int(1),int(6),int(1),int(8),int(1),int(4),int(1),int(8),int(1),), )
paddle.reshape(Tensor([1, 3, 256, 256],"float32"), list(int(-1),int(196608),), )
paddle.reshape(Tensor([1, 3, 3, 1],"float32"), list(int(3),int(3),int(1),int(1),), )
paddle.reshape(Tensor([1, 3, 32, 32],"float32"), list(int(-1),int(3072),), )
paddle.reshape(Tensor([1, 3, 5, 2, 4],"float16"), shape=list(int(15),int(8),), )
paddle.reshape(Tensor([1, 3, 5, 2, 4],"float32"), shape=list(int(15),int(8),), )
paddle.reshape(Tensor([1, 3, 5, 8],"float16"), shape=list(int(1),int(3),int(5),int(2),int(4),), )
paddle.reshape(Tensor([1, 3, 5, 8],"float32"), shape=list(int(1),int(3),int(5),int(2),int(4),), )
paddle.reshape(Tensor([1, 4, 10],"float32"), shape=list(int(-1),int(10),), )
paddle.reshape(Tensor([1, 4, 10],"float32"), shape=list(int(1),int(-1),int(10),), )
paddle.reshape(Tensor([1, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 48, 2, 3, 3],"float32"), shape=list(int(1),int(96),int(3),int(3),), )
paddle.reshape(Tensor([1, 48, 5, 5],"float32"), shape=list(int(1),int(2),int(24),int(5),int(5),), )
paddle.reshape(Tensor([1, 50, 53, 53],"float32"), shape=list(int(-1),int(140450),), )
paddle.reshape(Tensor([1, 512, 1, 1],"float32"), shape=list(int(-1),int(512),), )
paddle.reshape(Tensor([1, 512],"float32"), list(int(1),int(512),int(1),int(1),), )
paddle.reshape(Tensor([1, 6],"float32"), shape=list(int(-1),int(6),), )
paddle.reshape(Tensor([1, 96, 3, 3],"float32"), shape=list(int(1),int(2),int(48),int(3),int(3),), )
paddle.reshape(Tensor([10, 1, 10],"float32"), list(int(10),int(10),), )
paddle.reshape(Tensor([10, 10, 10, 20],"float32"), list(int(10),int(100),int(20),), )
paddle.reshape(Tensor([10, 16],"float32"), list(int(-1),int(1),), )
paddle.reshape(Tensor([10, 1],"int64"), list(int(10),), )
paddle.reshape(Tensor([10, 20, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([10, 20, 1],"float32"), list(int(-1),), )
paddle.reshape(Tensor([10, 20],"float64"), list(int(10),int(20),), )
paddle.reshape(Tensor([10, 5],"float32"), list(int(2),int(25),), )
paddle.reshape(Tensor([10, 5],"int64"), list(int(2),int(25),), )
paddle.reshape(Tensor([1000, 1],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([1000, 2],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1000],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([100],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([100],"float32"), list(int(100),), name=str(Uniform_sample), )
paddle.reshape(Tensor([100],"float64"), Tensor([1],"int64"), )
paddle.reshape(Tensor([1024, 1, 128],"float32"), shape=list(int(-1),int(32),int(128),), )
paddle.reshape(Tensor([10],"float32"), list(int(2),int(5),), )
paddle.reshape(Tensor([10],"int64"), list(int(10),), name=str(Categorical_sample), )
paddle.reshape(Tensor([12, 1],"float32"), shape=list(int(-1),int(3),), )
paddle.reshape(Tensor([12, 1],"float64"), shape=list(int(-1),int(3),), )
paddle.reshape(Tensor([12, 5],"float32"), list(int(15),int(4),), )
paddle.reshape(Tensor([12, 5],"int64"), list(int(15),int(4),), )
paddle.reshape(Tensor([128, 1, 784],"float32"), shape=list(int(128),int(-1),), )
paddle.reshape(Tensor([128, 50, 4, 4],"float32"), shape=list(int(-1),int(800),), )
paddle.reshape(Tensor([128],"float32"), list(int(1),int(8),int(1),int(16),), )
paddle.reshape(Tensor([12],"float32"), list(int(1),int(12),int(1),int(1),), )
paddle.reshape(Tensor([12],"float32"), list(int(1),int(12),int(1),int(1),int(1),), )
paddle.reshape(Tensor([12],"int64"), shape=list(int(1),int(1),int(3),int(4),), )
paddle.reshape(Tensor([13, 1],"int64"), list(int(13),), )
paddle.reshape(Tensor([15, 1],"int64"), list(int(15),), )
paddle.reshape(Tensor([15, 6],"float16"), shape=list(int(1),int(3),int(5),int(6),), )
paddle.reshape(Tensor([15, 6],"float32"), shape=list(int(1),int(3),int(5),int(6),), )
paddle.reshape(Tensor([16, 1, 128],"float32"), shape=list(int(-1),int(128),), )
paddle.reshape(Tensor([16, 1],"int64"), list(int(16),), )
paddle.reshape(Tensor([16, 2048, 1, 1],"float32"), list(int(-1),int(8),int(2048),), )
paddle.reshape(Tensor([17, 1],"int64"), list(int(17),), )
paddle.reshape(Tensor([18, 1],"float32"), shape=list(int(-1),int(3),), )
paddle.reshape(Tensor([19, 1],"int64"), list(int(19),), )
paddle.reshape(Tensor([1],"float32"), list(), )
paddle.reshape(Tensor([1],"float32"), list(int(1),int(1),int(1),int(1),), )
paddle.reshape(Tensor([1],"float64"), list(int(1),int(1),), )
paddle.reshape(Tensor([1],"int64"), list(), name=str(Categorical_sample), )
paddle.reshape(Tensor([1],"int64"), list(int(1),), name=str(Categorical_sample), )
paddle.reshape(Tensor([2, 1, 128],"float32"), shape=list(int(-1),int(128),), )
paddle.reshape(Tensor([2, 1, 24],"float32"), list(int(-1),int(24),), )
paddle.reshape(Tensor([2, 1, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8],"float32"), list(int(-1),int(8),), )
paddle.reshape(Tensor([2, 112, 2, 28, 28],"float32"), shape=list(int(2),int(224),int(28),int(28),), )
paddle.reshape(Tensor([2, 116, 2, 14, 14],"float32"), shape=list(int(2),int(232),int(14),int(14),), )
paddle.reshape(Tensor([2, 116, 28, 28],"float32"), shape=list(int(2),int(2),int(58),int(28),int(28),), )
paddle.reshape(Tensor([2, 12, 2, 28, 28],"float32"), shape=list(int(2),int(24),int(28),int(28),), )
paddle.reshape(Tensor([2, 128, 60],"float32"), list(int(-1),int(60),), )
paddle.reshape(Tensor([2, 128, 7, 7],"float32"), shape=list(int(2),int(2),int(64),int(7),int(7),), )
paddle.reshape(Tensor([2, 16, 2, 28, 28],"float32"), shape=list(int(2),int(32),int(28),int(28),), )
paddle.reshape(Tensor([2, 176, 2, 14, 14],"float32"), shape=list(int(2),int(352),int(14),int(14),), )
paddle.reshape(Tensor([2, 176, 28, 28],"float32"), shape=list(int(2),int(2),int(88),int(28),int(28),), )
paddle.reshape(Tensor([2, 192, 7, 7],"float32"), shape=list(int(2),int(2),int(96),int(7),int(7),), )
paddle.reshape(Tensor([2, 198],"float32"), list(int(6),int(-1),), )
paddle.reshape(Tensor([2, 2, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 8, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2048, 1, 1],"float16"), shape=list(int(-1),int(2048),), )
paddle.reshape(Tensor([2, 2048, 1, 1],"float32"), shape=list(int(-1),int(2048),), )
paddle.reshape(Tensor([2, 2048],"float32"), shape=list(int(-1),int(2048),), )
paddle.reshape(Tensor([2, 224, 28, 28],"float32"), shape=list(int(2),int(2),int(112),int(28),int(28),), )
paddle.reshape(Tensor([2, 232, 14, 14],"float32"), shape=list(int(2),int(2),int(116),int(14),int(14),), )
paddle.reshape(Tensor([2, 232, 2, 7, 7],"float32"), shape=list(int(2),int(464),int(7),int(7),), )
paddle.reshape(Tensor([2, 24, 2, 14, 14],"float32"), shape=list(int(2),int(48),int(14),int(14),), )
paddle.reshape(Tensor([2, 24, 2, 28, 28],"float32"), shape=list(int(2),int(48),int(28),int(28),), )
paddle.reshape(Tensor([2, 24, 28, 28],"float32"), shape=list(int(2),int(2),int(12),int(28),int(28),), )
paddle.reshape(Tensor([2, 244, 2, 14, 14],"float32"), shape=list(int(2),int(488),int(14),int(14),), )
paddle.reshape(Tensor([2, 25],"float32"), list(int(2),int(5),int(5),), )
paddle.reshape(Tensor([2, 25],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([2, 25],"float32"), shape=list(Tensor([1],"int32"),int(10),), )
paddle.reshape(Tensor([2, 27],"float32"), list(int(2),int(3),int(3),int(3),), )
paddle.reshape(Tensor([2, 2],"float32"), list(int(-1),), )
paddle.reshape(Tensor([2, 2],"float64"), list(int(-1),), )
paddle.reshape(Tensor([2, 3, 3, 3],"float32"), tuple(int(2),int(-1),), )
paddle.reshape(Tensor([2, 3, 4],"complex128"), tuple(int(0),int(-1),), )
paddle.reshape(Tensor([2, 3, 4],"complex128"), tuple(int(2),int(-1),), )
paddle.reshape(Tensor([2, 3, 4],"complex64"), tuple(int(0),int(-1),), )
paddle.reshape(Tensor([2, 3, 4],"complex64"), tuple(int(2),int(-1),), )
paddle.reshape(Tensor([2, 3, 4],"float64"), list(int(-1),), )
paddle.reshape(Tensor([2, 3, 5, 2, 4],"float16"), shape=list(int(30),int(8),), )
paddle.reshape(Tensor([2, 3, 5, 2, 4],"float32"), shape=list(int(30),int(8),), )
paddle.reshape(Tensor([2, 3, 5, 8],"float16"), shape=list(int(2),int(3),int(5),int(2),int(4),), )
paddle.reshape(Tensor([2, 3, 5, 8],"float32"), shape=list(int(2),int(3),int(5),int(2),int(4),), )
paddle.reshape(Tensor([2, 3072],"float32"), list(int(2),int(3),int(32),int(32),), )
paddle.reshape(Tensor([2, 32, 2, 14, 14],"float32"), shape=list(int(2),int(64),int(14),int(14),), )
paddle.reshape(Tensor([2, 32, 28, 28],"float32"), shape=list(int(2),int(2),int(16),int(28),int(28),), )
paddle.reshape(Tensor([2, 352, 14, 14],"float32"), shape=list(int(2),int(2),int(176),int(14),int(14),), )
paddle.reshape(Tensor([2, 352, 2, 7, 7],"float32"), shape=list(int(2),int(704),int(7),int(7),), )
paddle.reshape(Tensor([2, 3],"float32"), list(int(3),int(2),), )
paddle.reshape(Tensor([2, 3],"float64"), list(int(-1),), )
paddle.reshape(Tensor([2, 3],"int32"), shape=tuple(int(-1),int(1),), )
paddle.reshape(Tensor([2, 3],"int64"), list(int(-1),), )
paddle.reshape(Tensor([2, 3],"int64"), list(int(-1),int(1),), )
paddle.reshape(Tensor([2, 4, 6],"float16"), shape=list(int(8),int(6),), )
paddle.reshape(Tensor([2, 4, 6],"float32"), shape=list(int(8),int(6),), )
paddle.reshape(Tensor([2, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 464, 7, 7],"float32"), shape=list(int(2),int(2),int(232),int(7),int(7),), )
paddle.reshape(Tensor([2, 48, 14, 14],"float32"), shape=list(int(2),int(2),int(24),int(14),int(14),), )
paddle.reshape(Tensor([2, 48, 2, 14, 14],"float32"), shape=list(int(2),int(96),int(14),int(14),), )
paddle.reshape(Tensor([2, 48, 2, 7, 7],"float32"), shape=list(int(2),int(96),int(7),int(7),), )
paddle.reshape(Tensor([2, 48, 28, 28],"float32"), shape=list(int(2),int(2),int(24),int(28),int(28),), )
paddle.reshape(Tensor([2, 488, 14, 14],"float32"), shape=list(int(2),int(2),int(244),int(14),int(14),), )
paddle.reshape(Tensor([2, 488, 2, 7, 7],"float32"), shape=list(int(2),int(976),int(7),int(7),), )
paddle.reshape(Tensor([2, 50, 4, 4],"float32"), shape=list(int(-1),int(800),), )
paddle.reshape(Tensor([2, 58, 2, 28, 28],"float32"), shape=list(int(2),int(116),int(28),int(28),), )
paddle.reshape(Tensor([2, 5],"float32"), list(int(10),), )
paddle.reshape(Tensor([2, 5],"int64"), list(int(10),), )
paddle.reshape(Tensor([2, 6, 32, 32],"float32"), list(int(2),int(-1),), )
paddle.reshape(Tensor([2, 60],"float32"), list(int(12),int(10),), )
paddle.reshape(Tensor([2, 64, 14, 14],"float32"), shape=list(int(2),int(2),int(32),int(14),int(14),), )
paddle.reshape(Tensor([2, 64, 2, 7, 7],"float32"), shape=list(int(2),int(128),int(7),int(7),), )
paddle.reshape(Tensor([2, 704, 7, 7],"float32"), shape=list(int(2),int(2),int(352),int(7),int(7),), )
paddle.reshape(Tensor([2, 8, 16, 2],"float32"), list(int(-1),int(8),int(32),), )
paddle.reshape(Tensor([2, 8, 3, 224, 224],"float32"), list(int(-1),int(3),int(224),int(224),), )
paddle.reshape(Tensor([2, 88, 2, 28, 28],"float32"), shape=list(int(2),int(176),int(28),int(28),), )
paddle.reshape(Tensor([2, 8],"float32"), list(int(-1),int(1),int(8),), )
paddle.reshape(Tensor([2, 8],"float32"), list(int(2),int(8),int(1),), )
paddle.reshape(Tensor([2, 96, 14, 14],"float32"), shape=list(int(2),int(2),int(48),int(14),int(14),), )
paddle.reshape(Tensor([2, 96, 2, 7, 7],"float32"), shape=list(int(2),int(192),int(7),int(7),), )
paddle.reshape(Tensor([2, 96, 7, 7],"float32"), shape=list(int(2),int(2),int(48),int(7),int(7),), )
paddle.reshape(Tensor([2, 976, 7, 7],"float32"), shape=list(int(2),int(2),int(488),int(7),int(7),), )
paddle.reshape(Tensor([20, 1],"int64"), list(int(20),), )
paddle.reshape(Tensor([21, 1],"int64"), list(int(21),), )
paddle.reshape(Tensor([24],"float64"), list(int(2),int(3),int(4),), )
paddle.reshape(Tensor([27],"int64"), shape=list(int(1),int(1),int(3),int(3),int(3),), )
paddle.reshape(Tensor([27],"int64"), shape=list(int(1),int(3),int(3),int(3),), )
paddle.reshape(Tensor([2],"float32"), list(int(1),int(2),), )
paddle.reshape(Tensor([2],"float32"), list(int(1),int(2),int(1),int(1),), )
paddle.reshape(Tensor([2],"float32"), shape=list(int(1),int(-1),), )
paddle.reshape(Tensor([2],"float64"), list(int(-1),), )
paddle.reshape(Tensor([2],"float64"), list(int(2),), )
paddle.reshape(Tensor([3, 1, 3, 3, 40, 40],"float32"), shape=list(int(3),int(1),int(3),int(3),int(1600),), )
paddle.reshape(Tensor([3, 1, 3, 40, 40, 3],"float32"), shape=list(int(3),int(1),int(3),int(1600),int(3),), )
paddle.reshape(Tensor([3, 1, 3, 40, 40],"float32"), shape=list(int(3),int(1),int(3),int(40),int(40),), )
paddle.reshape(Tensor([3, 1, 40, 40, 3],"float32"), shape=list(int(3),int(1),int(40),int(40),int(3),), )
paddle.reshape(Tensor([3, 100, 120],"float64"), list(int(120),int(300),), )
paddle.reshape(Tensor([3, 18],"float32"), list(int(3),int(2),int(3),int(3),), )
paddle.reshape(Tensor([3, 2, 3, 3],"float32"), tuple(int(3),int(-1),), )
paddle.reshape(Tensor([3, 2, 5],"float32"), list(int(6),int(5),), )
paddle.reshape(Tensor([3, 2],"int64"), list(int(3),int(2),), )
paddle.reshape(Tensor([3, 3, 1600, 3],"float32"), list(int(3),int(3),int(40),int(40),int(3),), )
paddle.reshape(Tensor([3, 3, 1],"float32"), list(Tensor([],"int64"),Tensor([],"int64"),Tensor([],"int64"),), )
paddle.reshape(Tensor([3, 3, 3, 1600],"float32"), list(int(3),int(3),int(3),int(40),int(40),), )
paddle.reshape(Tensor([3, 3, 40, 40],"float32"), list(int(3),int(3),int(40),int(40),), )
paddle.reshape(Tensor([3, 32, 32],"float32"), list(int(3),int(1024),), )
paddle.reshape(Tensor([3, 4, 4, 5, 7],"float32"), list(int(1),int(12),int(2),int(5),int(14),), )
paddle.reshape(Tensor([3, 4, 4, 5, 7],"int64"), list(int(1),int(12),int(2),int(5),int(14),), )
paddle.reshape(Tensor([3, 40, 40, 3],"float32"), list(int(3),int(40),int(40),int(3),), )
paddle.reshape(Tensor([3, 4],"float32"), list(int(2),int(2),int(3),), )
paddle.reshape(Tensor([3, 5],"float32"), list(int(3),int(5),), )
paddle.reshape(Tensor([3, 5],"float64"), list(int(3),int(5),), )
paddle.reshape(Tensor([30, 6],"float16"), shape=list(int(2),int(3),int(5),int(6),), )
paddle.reshape(Tensor([30, 6],"float32"), shape=list(int(2),int(3),int(5),int(6),), )
paddle.reshape(Tensor([32, 1],"int64"), list(int(32),), )
paddle.reshape(Tensor([32, 32],"float64"), shape=list(int(-1),int(4),int(32),), )
paddle.reshape(Tensor([32, 32],"int64"), shape=list(int(-1),int(1),), )
paddle.reshape(Tensor([32, 4, 512],"float32"), shape=list(int(-1),int(512),), )
paddle.reshape(Tensor([35, 1],"int64"), list(int(35),), )
paddle.reshape(Tensor([36, 1],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([36],"int64"), shape=list(int(1),int(1),int(3),int(3),int(4),), )
paddle.reshape(Tensor([3],"float32"), list(int(3),int(1),int(1),int(1),), )
paddle.reshape(Tensor([3],"int64"), list(int(1),int(-1),), name=str(Categorical_probs), )
paddle.reshape(Tensor([3],"int64"), list(int(1),int(1),int(-1),), name=str(Categorical_probs), )
paddle.reshape(Tensor([4, 1, 10],"float32"), shape=list(int(-1),int(10),), )
paddle.reshape(Tensor([4, 1, 128],"float32"), shape=list(int(-1),int(128),), )
paddle.reshape(Tensor([4, 1024, 1, 1],"float32"), shape=list(int(-1),int(1024),), )
paddle.reshape(Tensor([4, 10],"float32"), shape=list(int(-1),int(1),int(10),), )
paddle.reshape(Tensor([4, 10],"float32"), shape=list(int(1),int(-1),int(10),), )
paddle.reshape(Tensor([4, 1280, 1, 1],"float32"), shape=list(int(-1),int(1280),), )
paddle.reshape(Tensor([4, 1],"float32"), list(Tensor([],"int64"),int(1),Tensor([],"int64"),), )
paddle.reshape(Tensor([4, 1],"float32"), list(int(-1),int(1),), )
paddle.reshape(Tensor([4, 1],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([4, 2],"float32"), tuple(int(2),int(4),), )
paddle.reshape(Tensor([4, 3, 1, 10],"float32"), shape=list(int(-1),int(3),int(10),), )
paddle.reshape(Tensor([4, 3, 1000],"float32"), shape=list(int(-1),int(1000),), )
paddle.reshape(Tensor([4, 3, 1000],"float64"), shape=list(int(-1),int(1000),), )
paddle.reshape(Tensor([4, 3, 10],"float32"), shape=list(int(-1),int(3),int(10),), )
paddle.reshape(Tensor([4, 3, 1],"float32"), shape=list(int(-1),int(3),), )
paddle.reshape(Tensor([4, 30],"float32"), list(int(-1),int(3),int(10),), )
paddle.reshape(Tensor([45000, 10],"int64"), list(int(9),int(5000),int(10),), name=str(Categorical_sample), )
paddle.reshape(Tensor([4],"float32"), list(int(-1),), )
paddle.reshape(Tensor([4],"float32"), list(int(1),int(4),int(1),int(1),int(1),), )
paddle.reshape(Tensor([4],"float32"), list(int(2),int(2),), )
paddle.reshape(Tensor([4],"float32"), list(int(4),), )
paddle.reshape(Tensor([4],"float32"), shape=list(int(-1),int(4),), )
paddle.reshape(Tensor([4],"float64"), list(int(-1),), )
paddle.reshape(Tensor([4],"float64"), list(int(2),int(2),), )
paddle.reshape(Tensor([4],"float64"), list(int(4),), )
paddle.reshape(Tensor([4],"float64"), list(int(4),int(1),), )
paddle.reshape(Tensor([4],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([5, 10, 8],"float32"), list(int(5),int(10),int(8),), name=str(Normal_sample), )
paddle.reshape(Tensor([5, 2],"float32"), shape=list(int(5),int(-1),), )
paddle.reshape(Tensor([5, 7],"int32"), shape=tuple(Tensor([],"int64"),Tensor([],"int64"),), )
paddle.reshape(Tensor([5, 7],"int32"), shape=tuple(int(7),int(5),), )
paddle.reshape(Tensor([50000],"int64"), list(int(10),int(5000),), name=str(Categorical_sample), )
paddle.reshape(Tensor([512],"float32"), list(int(1),int(512),int(1),int(1),), )
paddle.reshape(Tensor([54, 10],"int64"), list(int(9),int(6),int(10),), name=str(Categorical_sample), )
paddle.reshape(Tensor([58, 1, 2],"float32"), shape=list(int(-1),int(2),), )
paddle.reshape(Tensor([5],"float32"), list(int(1),int(5),int(1),int(1),), )
paddle.reshape(Tensor([5],"float32"), list(int(1),int(5),int(1),int(1),int(1),), )
paddle.reshape(Tensor([5],"int32"), list(int(-1),int(1),), )
paddle.reshape(Tensor([5],"int32"), list(int(5),), )
paddle.reshape(Tensor([5],"int32"), shape=list(int(1),int(5),), )
paddle.reshape(Tensor([5],"int32"), shape=list(int(5),), )
paddle.reshape(Tensor([5],"int32"), shape=tuple(int(-1),int(5),), )
paddle.reshape(Tensor([5],"int32"), shape=tuple(int(-1),int(5),int(1),), )
paddle.reshape(Tensor([6, 1],"int32"), shape=tuple(int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(-1),int(0),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(-1),int(1),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(-1),int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(-1),int(6),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(-1),int(9),int(1),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(-1),int(9),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(0),int(0),int(-1),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(1),int(-1),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(1),int(0),int(2),int(-1),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(1),int(18),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(1),int(2),int(2),int(3),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(12),int(1),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(-1),int(0),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(-1),int(18),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(1),int(18),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(3),int(0),int(-1),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(3),int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(6),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(2),int(9),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(3),int(6),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(4),int(9),int(1),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(6),int(2),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"float32"), list(int(6),int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(-1),int(0),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(-1),int(1),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(-1),int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(-1),int(6),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(-1),int(9),int(1),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(-1),int(9),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(0),int(0),int(-1),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(1),int(-1),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(1),int(0),int(2),int(-1),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(1),int(18),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(1),int(2),int(2),int(3),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(12),int(1),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(-1),int(0),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(-1),int(18),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(1),int(18),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(3),int(0),int(-1),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(3),int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(6),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(2),int(9),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(3),int(6),int(2),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(4),int(9),int(1),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(6),int(2),int(3),), )
paddle.reshape(Tensor([6, 2, 3],"int64"), list(int(6),int(3),int(2),), )
paddle.reshape(Tensor([6, 2, 4],"float16"), shape=list(int(6),int(8),), )
paddle.reshape(Tensor([6, 2, 4],"float32"), shape=list(int(6),int(8),), )
paddle.reshape(Tensor([6, 3, 1, 32],"float32"), shape=list(int(-1),int(32),), )
paddle.reshape(Tensor([6, 8],"float32"), list(int(-1),int(3),int(8),), )
paddle.reshape(Tensor([60, 1],"int64"), list(int(60),), )
paddle.reshape(Tensor([60],"int64"), list(int(10),int(6),), name=str(Categorical_sample), )
paddle.reshape(Tensor([61, 1],"int64"), list(int(61),), )
paddle.reshape(Tensor([64, 1],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([64, 32],"float32"), list(int(16),int(-1),), )
paddle.reshape(Tensor([64, 50, 4, 4],"float16"), shape=list(int(-1),int(800),), )
paddle.reshape(Tensor([64, 50, 4, 4],"float32"), shape=list(int(-1),int(800),), )
paddle.reshape(Tensor([64],"float32"), list(int(1),int(8),int(1),int(8),), )
paddle.reshape(Tensor([6],"float32"), list(int(1),int(6),int(1),int(1),), )
paddle.reshape(Tensor([6],"float32"), list(int(1),int(6),int(1),int(1),int(1),), )
paddle.reshape(Tensor([6],"float64"), list(int(-1),), )
paddle.reshape(Tensor([6],"float64"), list(int(2),int(3),), )
paddle.reshape(Tensor([6],"float64"), list(int(6),), )
paddle.reshape(Tensor([7],"complex64"), list(int(7),), name=str(Normal_sample), )
paddle.reshape(Tensor([7],"float32"), list(int(7),), name=str(Normal_sample), )
paddle.reshape(Tensor([7],"float32"), list(int(7),), name=str(Uniform_sample), )
paddle.reshape(Tensor([8, 1, 128],"float32"), shape=list(int(-1),int(128),), )
paddle.reshape(Tensor([8, 1024, 1, 1],"float32"), shape=list(int(-1),int(1024),), )
paddle.reshape(Tensor([8, 1024],"float32"), list(int(8),int(1024),int(1),int(1),), )
paddle.reshape(Tensor([8, 1],"int64"), tuple(int(-1),int(1),), )
paddle.reshape(Tensor([8, 2048, 1, 1],"float16"), shape=list(int(-1),int(2048),), )
paddle.reshape(Tensor([8, 2048, 1, 1],"float32"), shape=list(int(-1),int(2048),), )
paddle.reshape(Tensor([8, 2048],"float32"), list(int(8),int(2048),int(1),int(1),), )
paddle.reshape(Tensor([8, 256, 1, 1],"float32"), shape=list(int(-1),int(256),), )
paddle.reshape(Tensor([8, 256],"float32"), list(int(8),int(256),int(1),int(1),), )
paddle.reshape(Tensor([8, 3, 4, 4, 5, 3],"float32"), list(int(24),int(8),int(10),int(3),), )
paddle.reshape(Tensor([8, 3, 4, 4, 5, 3],"int64"), list(int(24),int(8),int(10),int(3),), )
paddle.reshape(Tensor([8, 3],"int64"), list(int(2),int(4),int(3),), name=str(Categorical_sample), )
paddle.reshape(Tensor([8, 4, 100],"float64"), list(int(-1),int(400),), )
paddle.reshape(Tensor([8, 4, 32],"float64"), shape=list(int(-1),int(32),), )
paddle.reshape(Tensor([8, 512, 1, 1],"float32"), shape=list(int(-1),int(512),), )
paddle.reshape(Tensor([8, 512],"float32"), list(int(8),int(512),int(1),int(1),), )
paddle.reshape(Tensor([8, 6],"int64"), list(int(2),int(4),int(3),int(2),), name=str(Categorical_sample), )
paddle.reshape(Tensor([8],"float32"), list(int(1),int(8),int(1),int(1),), )
paddle.reshape(Tensor([8],"float32"), list(int(1),int(8),int(1),int(1),int(1),), )
paddle.reshape(Tensor([8],"int64"), list(int(2),int(4),), name=str(Categorical_sample), )
paddle.reshape(Tensor([9, 10],"int64"), list(int(9),int(10),), name=str(Categorical_sample), )
paddle.reshape(Tensor([9, 8],"float32"), list(int(18),int(4),), )
paddle.reshape(Tensor([9, 8],"int64"), list(int(18),int(4),), )
paddle.reshape(Tensor([9],"int64"), shape=list(int(1),int(1),int(3),int(3),), )
paddle.reshape(Tensor([9],"int64"), shape=list(int(1),int(3),int(3),), )
paddle.reshape(Tensor([],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([],"float32"), list(), )
paddle.reshape(Tensor([],"float32"), list(), name=str(Normal_sample), )
paddle.reshape(Tensor([],"float32"), list(), name=str(Uniform_sample), )
paddle.reshape(Tensor([],"float32"), list(int(-1),), )
paddle.reshape(Tensor([],"float32"), list(int(-1),int(1),), )
paddle.reshape(Tensor([],"float32"), list(int(1),), )
paddle.reshape(Tensor([],"float64"), list(int(-1),), )
paddle.reshape(Tensor([],"int64"), list(int(1),), )
paddle.reshape(x=Tensor([10, 10],"float32"), shape=list(int(100),), )
paddle.reshape(x=Tensor([10, 1],"float32"), shape=list(int(10),), )
paddle.reshape(x=Tensor([10, 8],"float32"), shape=list(int(80),), )
paddle.reshape(x=Tensor([10],"float32"), shape=list(int(10),), )
paddle.reshape(x=Tensor([2, 3],"float32"), shape=list(int(6),), )
paddle.reshape(x=Tensor([2, 8, 1],"float32"), shape=list(int(2),int(8),), )
paddle.reshape(x=Tensor([20, 10],"float32"), shape=list(int(200),), )
paddle.reshape(x=Tensor([32, 4, 512],"float32"), shape=list(int(0),int(0),int(8),int(64),), )
paddle.reshape(x=Tensor([32, 4, 8, 64],"float32"), shape=list(int(0),int(0),int(512),), )
paddle.reshape(x=Tensor([4, 9],"float32"), shape=list(int(36),), )
paddle.reshape(x=Tensor([5, 1, 10],"float32"), shape=list(int(5),int(10),), )
paddle.reshape(x=Tensor([5, 1, 10],"int32"), shape=list(int(5),int(10),), )
paddle.reshape(x=Tensor([5, 1, 10],uint8), shape=list(int(5),int(10),), )
paddle.reshape(x=Tensor([58, 140, 2, 1],"float32"), shape=list(int(0),int(0),int(2),), )
paddle.reshape(x=Tensor([58, 140, 2],"float32"), shape=list(int(-1),int(2),), )
paddle.reshape(x=Tensor([58, 140, 2],"float32"), shape=list(int(0),int(0),int(2),int(1),), )
paddle.reshape(x=Tensor([8, 10],"float32"), shape=list(int(80),), )
paddle.reshape(x=Tensor([8],"float32"), shape=list(int(8),), )
paddle.roll(Tensor([0, 3],"float32"), shifts=int(1), )
paddle.roll(Tensor([0, 3],"float32"), shifts=int(1), axis=int(0), )
paddle.roll(Tensor([2, 3],"float32"), int(1), )
paddle.roll(Tensor([3, 3],bool), shifts=int(1), )
paddle.roll(Tensor([3, 3],bool), shifts=int(1), axis=int(0), )
paddle.roll(Tensor([3, 3],"float64"), shifts=int(1), )
paddle.roll(Tensor([3, 3],"float64"), shifts=int(1), axis=int(0), )
paddle.roll(Tensor([3, 3],"int64"), shifts=Tensor([2],"int64"), axis=list(int(0),int(1),), )
paddle.roll(Tensor([4, 0, 3],"float32"), shifts=int(1), )
paddle.roll(Tensor([4, 0, 3],"float32"), shifts=int(1), axis=int(0), )
paddle.rot90(Tensor([2, 3],"float32"), k=int(1), axes=list(int(0),int(1),), )
paddle.row_stack(list(Tensor([1, 1, 1, 1],"float64"),), )
paddle.row_stack(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), )
paddle.row_stack(list(Tensor([1, 1, 1],"float64"),), )
paddle.row_stack(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), )
paddle.row_stack(list(Tensor([1, 1],"float64"),), )
paddle.row_stack(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), )
paddle.row_stack(list(Tensor([1],"float64"),), )
paddle.row_stack(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.row_stack(list(Tensor([2],"float64"),Tensor([1, 2],"float64"),), )
paddle.row_stack(list(Tensor([3, 2],"float64"),), )
paddle.row_stack(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), )
paddle.row_stack(list(Tensor([3, 4, 2, 5],"float64"),), )
paddle.row_stack(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), )
paddle.row_stack(list(Tensor([3, 4, 2],"float64"),), )
paddle.row_stack(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), )
paddle.row_stack(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), )
paddle.row_stack(list(Tensor([],"float16"),), )
paddle.row_stack(list(Tensor([],"float32"),), )
paddle.row_stack(list(Tensor([],"float64"),), )
paddle.row_stack(list(Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),), )
paddle.row_stack(list(Tensor([],"int32"),), )
paddle.row_stack(list(Tensor([],"int64"),), )
paddle.rsqrt(Tensor([1, 1, 4096],"float32"), )
paddle.rsqrt(Tensor([1, 300, 1],"float32"), )
paddle.rsqrt(Tensor([16, 1],"float32"), )
paddle.rsqrt(Tensor([16, 1],"float64"), )
paddle.rsqrt(Tensor([16],"float32"), )
paddle.rsqrt(Tensor([2, 1],"float16"), )
paddle.rsqrt(Tensor([2, 1],"float32"), )
paddle.rsqrt(Tensor([2, 3],"float32"), )
paddle.rsqrt(Tensor([32, 1],"float16"), )
paddle.rsqrt(Tensor([32, 1],"float32"), )
paddle.rsqrt(Tensor([6],"float32"), )
paddle.rsqrt(Tensor([],"float32"), )
paddle.sgn(Tensor([12, 20, 2],"float16"), )
paddle.sgn(Tensor([12, 20, 2],"float32"), )
paddle.sgn(Tensor([12, 20, 2],"float64"), )
paddle.sgn(Tensor([2, 4],"complex128"), )
paddle.sgn(Tensor([2, 4],"complex64"), )
paddle.sgn(Tensor([],"float32"), )
paddle.sign(Tensor([1, 4],"float32"), )
paddle.sign(Tensor([11, 17, 10],"int16"), )
paddle.sign(Tensor([11, 17, 10],"int32"), )
paddle.sign(Tensor([11, 17],"float32"), )
paddle.sign(Tensor([12, 20, 2],"float16"), )
paddle.sign(Tensor([12, 20, 2],"float32"), )
paddle.sign(Tensor([12, 20, 2],"float64"), )
paddle.sign(Tensor([120, 84],"float32"), )
paddle.sign(Tensor([132],"int64"), )
paddle.sign(Tensor([132],uint8), )
paddle.sign(Tensor([150, 16],"float32"), )
paddle.sign(Tensor([16, 1, 28, 28],"float32"), )
paddle.sign(Tensor([16, 120],"float32"), )
paddle.sign(Tensor([16, 400],"float32"), )
paddle.sign(Tensor([16, 6, 14, 14],"float32"), )
paddle.sign(Tensor([16, 6, 5, 5],"float32"), )
paddle.sign(Tensor([16, 84],"float32"), )
paddle.sign(Tensor([2, 3, 4, 5],"float64"), )
paddle.sign(Tensor([2, 3, 4, 5],"int8"), )
paddle.sign(Tensor([32, 1, 28, 28],"float32"), )
paddle.sign(Tensor([32, 120],"float32"), )
paddle.sign(Tensor([32, 32, 128],"float32"), )
paddle.sign(Tensor([32, 400],"float32"), )
paddle.sign(Tensor([32, 6, 14, 14],"float32"), )
paddle.sign(Tensor([32, 84],"float32"), )
paddle.sign(Tensor([400, 120],"float32"), )
paddle.sign(Tensor([5],"complex64"), )
paddle.sign(Tensor([5],"float64"), )
paddle.sign(Tensor([6, 1, 3, 3],"float32"), )
paddle.sign(Tensor([64, 1, 28, 28],"float32"), )
paddle.sign(Tensor([64, 120],"float32"), )
paddle.sign(Tensor([64, 400],"float32"), )
paddle.sign(Tensor([64, 6, 14, 14],"float32"), )
paddle.sign(Tensor([64, 84],"float32"), )
paddle.sign(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.sign(Tensor([84, 10],"float32"), )
paddle.sign(Tensor([9, 6],"float32"), )
paddle.sign(Tensor([],"float32"), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), int(512), None, None, None, bool(False), bool(False), bool(True), None, bool(False), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), int(512), None, None, None, bool(False), bool(False), bool(True), int(1888), bool(False), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), int(512), None, None, None, bool(True), bool(False), bool(True), None, bool(False), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), int(512), None, None, Tensor([512],"float64"), bool(True), bool(False), bool(True), None, bool(False), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), int(512), int(99), None, Tensor([512],"float64"), bool(True), bool(False), bool(True), None, bool(False), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), int(512), int(99), int(299), Tensor([299],"float64"), bool(True), bool(False), bool(True), None, bool(False), )
paddle.signal.istft(Tensor([257, 471],"complex128"), int(512), None, None, Tensor([512],"float64"), bool(True), bool(False), bool(True), None, bool(False), )
paddle.signbit(Tensor([11, 17, 10],"int16"), )
paddle.signbit(Tensor([11, 17, 10],"int32"), )
paddle.signbit(Tensor([11, 17],"float32"), )
paddle.signbit(Tensor([132],"int64"), )
paddle.signbit(Tensor([132],uint8), )
paddle.signbit(Tensor([2, 3, 4, 5],"float64"), )
paddle.signbit(Tensor([2, 3, 4, 5],"int8"), )
paddle.signbit(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.sin(Tensor([10, 20, 1],"float32"), )
paddle.sin(Tensor([2, 3, 4],"float32"), )
paddle.sin(Tensor([2, 3],"float32"), )
paddle.sin(Tensor([2],"float32"), )
paddle.sin(Tensor([2],"float64"), )
paddle.sin(Tensor([8, 16, 32],"complex128"), )
paddle.sin(Tensor([8, 16, 32],"complex64"), )
paddle.sin(Tensor([8, 16, 32],"float16"), )
paddle.sin(Tensor([8, 16, 32],"float32"), )
paddle.sin(Tensor([8, 16, 32],"float64"), )
paddle.sin(Tensor([],"float32"), )
paddle.sinh(Tensor([10, 20, 1],"float32"), )
paddle.sinh(Tensor([2, 3],"float32"), )
paddle.sinh(Tensor([8, 16, 32],"complex128"), )
paddle.sinh(Tensor([8, 16, 32],"complex64"), )
paddle.sinh(Tensor([8, 16, 32],"float16"), )
paddle.sinh(Tensor([8, 16, 32],"float32"), )
paddle.sinh(Tensor([8, 16, 32],"float64"), )
paddle.sinh(Tensor([],"float32"), )
paddle.sparse.addmm(Tensor([16, 10],"float64"), Tensor([16, 12],"float64"), Tensor([12, 10],"float64"), float(3.0), float(2.0), )
paddle.sparse.addmm(Tensor([8, 16, 10],"float64"), Tensor([8, 16, 12],"float64"), Tensor([8, 12, 10],"float64"), float(3.0), float(2.0), )
paddle.sparse.matmul(Tensor([100, 40],"float64"), Tensor([40, 21],"float64"), )
paddle.sparse.matmul(Tensor([16, 12],"float32"), Tensor([12, 10],"float32"), )
paddle.sparse.matmul(Tensor([16, 16, 12],"float32"), Tensor([16, 12, 10],"float32"), )
paddle.sparse.matmul(Tensor([17, 17],"float64"), Tensor([17, 16],"float64"), )
paddle.sparse.matmul(Tensor([17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.sparse.matmul(Tensor([4, 17],"float64"), Tensor([17, 4],"float64"), )
paddle.sparse.matmul(Tensor([40, 100],"float64"), Tensor([100, 21],"float64"), )
paddle.sparse.matmul(Tensor([8, 16, 12],"float32"), Tensor([8, 12, 10],"float32"), )
paddle.sparse.sparse_coo_tensor(Tensor([1, 16],"int64"), Tensor([16, 128],"float64"), list(int(16),int(128),), )
paddle.sparse.sparse_coo_tensor(Tensor([1, 16],"int64"), Tensor([16, 16, 128],"float64"), list(int(16),int(16),int(128),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 120],"int32"), Tensor([120],"float32"), list(int(12),int(10),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 17],"int64"), Tensor([17],"float64"), tuple(int(17),int(17),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 192],"int32"), Tensor([192],"float32"), list(int(16),int(12),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 256],"int64"), Tensor([256, 128],"float64"), list(int(16),int(16),int(128),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 2],"int32"), Tensor([2],"float32"), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 2],"int32"), Tensor([2],"float32"), list(int(2),int(2),), dtype=str(float64), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 2],"int64"), Tensor([2],"float32"), shape=list(int(3),int(4),), stop_gradient=bool(True), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 40],"int64"), Tensor([40],"float64"), tuple(int(100),int(40),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 4],"int64"), Tensor([4],"float64"), tuple(int(17),int(4),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 4],"int64"), Tensor([4],"float64"), tuple(int(4),int(17),), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 5],"int32"), Tensor([5],"float32"), shape=list(int(3),int(4),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 5],"int64"), Tensor([5, 2],"float32"), shape=list(int(3),int(4),int(2),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 5],"int64"), Tensor([5],"float32"), list(int(3),int(4),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 5],"int64"), Tensor([5],"float32"), shape=list(int(3),int(4),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([2, 9],"int64"), Tensor([9],"float32"), shape=list(int(3),int(3),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([3, 1536],"int32"), Tensor([1536],"float32"), list(int(8),int(16),int(12),), )
paddle.sparse.sparse_coo_tensor(Tensor([3, 4],"int32"), Tensor([4, 1],"float32"), list(int(1),int(3),int(4),int(1),), bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([3, 4],"int32"), Tensor([4, 1],"float32"), list(int(1),int(3),int(4),int(1),), stop_gradient=bool(True), )
paddle.sparse.sparse_coo_tensor(Tensor([3, 960],"int32"), Tensor([960],"float32"), list(int(8),int(12),int(10),), )
paddle.sparse.sparse_coo_tensor(Tensor([4, 4],"int32"), Tensor([4, 1],"float32"), list(int(1),int(1),int(3),int(4),int(1),), bool(False), )
paddle.sparse.sparse_coo_tensor(Tensor([4, 4],"int32"), Tensor([4, 1],"float32"), list(int(1),int(1),int(3),int(4),int(1),), stop_gradient=bool(True), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(0),int(1),),list(int(0),int(0),int(1),int(2),),), Tensor([4],"float32"), dtype=str(float16), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(0),int(1),),list(int(0),int(0),int(1),int(2),),), Tensor([4],"float32"), dtype=str(float32), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(0),int(1),),list(int(0),int(0),int(1),int(2),),), Tensor([4],"float32"), dtype=str(int32), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(0),int(1),),list(int(0),int(0),int(1),int(2),),), Tensor([4],"float32"), dtype=str(int64), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(0),int(1),),list(int(0),int(0),int(1),int(2),),), Tensor([4],"float32"), dtype=str(uint8), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(1),),list(int(1),int(1),int(2),),), list(float(1.0),float(2.0),float(3.0),), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(1),int(2),),list(int(0),int(1),int(1),int(2),),), Tensor([4],"float32"), dtype=str(float64), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(1),int(2),),list(int(0),int(1),int(1),int(2),),list(int(0),int(1),int(1),int(2),),), Tensor([4],"float32"), dtype=str(complex64), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(1),int(2),),list(int(0),int(1),int(1),int(2),),list(int(1),int(0),int(1),int(2),),), Tensor([4],"float32"), dtype=str(complex128), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(0),int(1),int(2),),list(int(0),int(2),int(0),int(2),),list(int(0),int(1),int(1),int(0),),), Tensor([4],"float32"), dtype=str(int16), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(1),),list(int(0),int(3),),), list(list(complex((1+0.2j)),),list(complex((2+0.3j)),),), list(int(2),int(4),int(2),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(1),),list(int(0),int(3),),), list(list(complex((1+0.2j)),),list(complex((2-0.3j)),),), list(int(2),int(4),int(2),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(1),),list(int(0),int(3),),), list(list(complex((1+0.2j)),complex((1-0.1j)),),list(complex((2+0.3j)),complex((2-0.4j)),),), list(int(2),int(4),int(2),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(1),),list(int(0),int(3),),), list(list(float(1.0),),list(float(2.0),),), list(int(2),int(4),int(2),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(1),),list(int(0),int(3),),), list(list(float(1.0),float(1.0),),list(float(2.0),float(2.0),),), list(int(2),int(4),int(2),), stop_gradient=bool(False), )
paddle.sparse.sparse_coo_tensor(list(list(int(0),int(1),int(2),),list(int(1),int(2),int(0),),), list(float(1.0),float(2.0),float(3.0),), list(int(3),int(3),), )
paddle.sparse.sparse_csr_tensor(Tensor([104],"int32"), Tensor([960],"int32"), Tensor([960],"float32"), list(int(8),int(12),int(10),), )
paddle.sparse.sparse_csr_tensor(Tensor([136],"int32"), Tensor([1536],"int32"), Tensor([1536],"float32"), list(int(8),int(16),int(12),), )
paddle.sparse.sparse_csr_tensor(Tensor([13],"int32"), Tensor([120],"int32"), Tensor([120],"float32"), list(int(12),int(10),), )
paddle.sparse.sparse_csr_tensor(Tensor([17],"int32"), Tensor([192],"int32"), Tensor([192],"float32"), list(int(16),int(12),), )
paddle.sparse.sparse_csr_tensor(Tensor([4],"int32"), Tensor([5],"int32"), Tensor([5],"float32"), )
paddle.sparse.sparse_csr_tensor(Tensor([4],"int64"), Tensor([5],"int64"), Tensor([5],"float32"), list(int(3),int(4),), stop_gradient=bool(False), )
paddle.sparse.sparse_csr_tensor(Tensor([9],"int32"), Tensor([3],"int32"), Tensor([3],"float32"), )
paddle.sparse.sparse_csr_tensor(Tensor([9],"int32"), Tensor([5],"int32"), Tensor([5],"float32"), )
paddle.sparse.sparse_csr_tensor(list(int(0),int(2),int(3),int(5),), list(int(1),int(3),int(2),int(0),int(1),), list(float(1.0),float(2.0),float(3.0),float(4.0),float(5.0),), list(int(3),int(5),), dtype=str(float16), )
paddle.sparse.sparse_csr_tensor(list(int(0),int(2),int(3),int(5),), list(int(1),int(3),int(2),int(0),int(1),), list(int(1),int(2),int(3),int(4),int(5),), list(int(3),int(4),), )
paddle.sqrt(Tensor([1, 10],"float64"), )
paddle.sqrt(Tensor([1, 2, 1],"float32"), )
paddle.sqrt(Tensor([1, 2, 2],"float32"), )
paddle.sqrt(Tensor([1, 3, 10],"float64"), )
paddle.sqrt(Tensor([1, 4],"float32"), )
paddle.sqrt(Tensor([1, 4],"float64"), )
paddle.sqrt(Tensor([10],"float32"), )
paddle.sqrt(Tensor([120],"float32"), )
paddle.sqrt(Tensor([16],"float32"), )
paddle.sqrt(Tensor([1],"float32"), )
paddle.sqrt(Tensor([2, 1],"float32"), )
paddle.sqrt(Tensor([2, 2, 1],"float32"), )
paddle.sqrt(Tensor([2, 2, 2],"float32"), )
paddle.sqrt(Tensor([2, 3],"float32"), )
paddle.sqrt(Tensor([2],"float32"), )
paddle.sqrt(Tensor([32, 32, 128],"float32"), )
paddle.sqrt(Tensor([4],"float32"), )
paddle.sqrt(Tensor([4],"float64"), )
paddle.sqrt(Tensor([5, 3],"float64"), )
paddle.sqrt(Tensor([5],"float32"), )
paddle.sqrt(Tensor([5],"float64"), )
paddle.sqrt(Tensor([6],"float32"), )
paddle.sqrt(Tensor([8, 16, 32],"float32"), )
paddle.sqrt(Tensor([84],"float32"), )
paddle.sqrt(Tensor([],"float32"), )
paddle.sqrt(Tensor([],"float64"), )
paddle.square(Tensor([1, 196608],"float32"), )
paddle.square(Tensor([1, 1],"float32"), )
paddle.square(Tensor([1, 3072],"float32"), )
paddle.square(Tensor([10, 10],"float32"), )
paddle.square(Tensor([10, 10],"float32"), name=None, )
paddle.square(Tensor([10, 2, 3],"float32"), )
paddle.square(Tensor([10, 2],"float32"), )
paddle.square(Tensor([10, 2],"float64"), )
paddle.square(Tensor([10, 3],"float32"), )
paddle.square(Tensor([1000, 1000],"float16"), )
paddle.square(Tensor([1000, 1000],"float32"), )
paddle.square(Tensor([1000, 10],"float16"), )
paddle.square(Tensor([1000, 10],"float32"), )
paddle.square(Tensor([1000],"float16"), )
paddle.square(Tensor([1000],"float32"), )
paddle.square(Tensor([1001088],"float32"), )
paddle.square(Tensor([1011072],"float32"), )
paddle.square(Tensor([1024, 1024],"float16"), )
paddle.square(Tensor([1024, 1024],"float32"), )
paddle.square(Tensor([1024, 10],"float16"), )
paddle.square(Tensor([1024, 10],"float32"), )
paddle.square(Tensor([1024, 2],"float16"), )
paddle.square(Tensor([1024, 2],"float32"), )
paddle.square(Tensor([1024],"float16"), )
paddle.square(Tensor([1024],"float32"), )
paddle.square(Tensor([10],"float16"), )
paddle.square(Tensor([10],"float32"), )
paddle.square(Tensor([1],"float32"), )
paddle.square(Tensor([1],"float64"), )
paddle.square(Tensor([2, 10, 10],"float32"), )
paddle.square(Tensor([2, 10, 10],"float32"), name=None, )
paddle.square(Tensor([2, 1],"float32"), )
paddle.square(Tensor([2, 3],"float32"), )
paddle.square(Tensor([2, 3],"float64"), )
paddle.square(Tensor([3, 2, 3, 3],"float32"), )
paddle.square(Tensor([3, 3, 10, 10],"float32"), )
paddle.square(Tensor([3, 3, 10, 10],"float32"), name=None, )
paddle.square(Tensor([3],"float32"), )
paddle.square(Tensor([4, 3, 2],"float64"), )
paddle.square(Tensor([5, 3],"float64"), )
paddle.square(Tensor([500000],"float32"), )
paddle.square(Tensor([500032],"float16"), )
paddle.square(Tensor([500032],"float32"), )
paddle.square(Tensor([524288],"float16"), )
paddle.square(Tensor([524288],"float32"), )
paddle.square(Tensor([8, 16, 32],"complex128"), )
paddle.square(Tensor([8, 16, 32],"complex64"), )
paddle.square(Tensor([8, 16, 32],"float16"), )
paddle.square(Tensor([8, 16, 32],"float32"), )
paddle.square(Tensor([8, 16, 32],"float64"), )
paddle.square(Tensor([],"float32"), )
paddle.square(Tensor([],"float64"), )
paddle.squeeze(Tensor([1, 1, 32],"float64"), axis=list(int(1),), )
paddle.squeeze(Tensor([1, 1],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([1, 2],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([1, 3, 4],"float64"), axis=int(0), )
paddle.squeeze(Tensor([1, 3],"float64"), axis=int(0), )
paddle.squeeze(Tensor([1, 6, 1, 1],"float32"), list(), )
paddle.squeeze(Tensor([1, 6, 1, 1],"float32"), list(int(1),int(2),), )
paddle.squeeze(Tensor([1, 8, 16, 128, 64],"float32"), axis=int(0), )
paddle.squeeze(Tensor([10, 10, 10],"float64"), )
paddle.squeeze(Tensor([10, 10, 10],"float64"), axis=int(-1), )
paddle.squeeze(Tensor([10, 20, 1],"float32"), )
paddle.squeeze(Tensor([100, 1],"float64"), axis=int(-1), )
paddle.squeeze(Tensor([100, 1],"float64"), int(-1), )
paddle.squeeze(Tensor([100, 1],"float64"), int(1), )
paddle.squeeze(Tensor([128, 1, 10000],"float32"), )
paddle.squeeze(Tensor([1],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([1],"float32"), axis=int(0), )
paddle.squeeze(Tensor([1],"float64"), axis=int(0), )
paddle.squeeze(Tensor([2, 1, 2, 2],"float64"), int(1), )
paddle.squeeze(Tensor([2, 1000, 1, 1],"float32"), axis=list(int(2),int(3),), )
paddle.squeeze(Tensor([2, 1024, 1, 1],"float32"), axis=list(int(2),int(3),), )
paddle.squeeze(Tensor([2, 1],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([2, 1],"float32"), axis=int(1), )
paddle.squeeze(Tensor([2, 1],"float32"), axis=list(int(1),), )
paddle.squeeze(Tensor([2, 1],"float64"), int(1), )
paddle.squeeze(Tensor([2, 2, 2, 1],"float64"), axis=int(-1), )
paddle.squeeze(Tensor([2, 2, 2, 1],"float64"), int(-1), )
paddle.squeeze(Tensor([2, 2],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([2, 3, 10, 10, 10],"float64"), axis=int(-1), )
paddle.squeeze(Tensor([2, 3, 1],"float32"), )
paddle.squeeze(Tensor([2, 3, 2, 5],"float64"), axis=int(-1), )
paddle.squeeze(Tensor([2, 3],"float32"), )
paddle.squeeze(Tensor([2, 3],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([2, 5],"float64"), )
paddle.squeeze(Tensor([2, 5],"float64"), axis=int(-1), )
paddle.squeeze(Tensor([2],"float32"), )
paddle.squeeze(Tensor([2],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([3, 1, 3, 1600, 3],"float32"), axis=int(1), )
paddle.squeeze(Tensor([3, 1, 3, 3, 1600],"float32"), axis=int(1), )
paddle.squeeze(Tensor([3, 1, 3, 40, 40],"float32"), axis=int(1), )
paddle.squeeze(Tensor([3, 1, 40, 40, 3],"float32"), axis=int(1), )
paddle.squeeze(Tensor([3, 1, 40, 40],"float32"), axis=int(1), )
paddle.squeeze(Tensor([3, 1],"float32"), axis=list(int(1),), )
paddle.squeeze(Tensor([3, 1],"float32"), list(int(-1),), )
paddle.squeeze(Tensor([3, 2, 1],"float32"), axis=int(2), )
paddle.squeeze(Tensor([3, 2, 2, 1],"int64"), axis=int(-1), )
paddle.squeeze(Tensor([4, 1, 6],"float64"), axis=int(1), )
paddle.squeeze(Tensor([4, 1],"float32"), axis=int(1), )
paddle.squeeze(Tensor([4, 1],"float32"), list(int(-1),), )
paddle.squeeze(Tensor([4, 1],"float64"), axis=int(1), )
paddle.squeeze(Tensor([4, 1],"int64"), axis=int(-1), )
paddle.squeeze(Tensor([4, 512, 512, 1],"float64"), int(-1), )
paddle.squeeze(Tensor([4, 7, 1],"float64"), axis=int(2), )
paddle.squeeze(Tensor([5, 1, 10],"float32"), axis=int(1), )
paddle.squeeze(Tensor([5, 1, 4],"float64"), axis=int(1), )
paddle.squeeze(Tensor([5, 10, 8, 1, 2],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([5, 1],"float64"), axis=int(1), )
paddle.squeeze(Tensor([7, 1],"float64"), axis=int(1), )
paddle.squeeze(Tensor([8, 16, 1],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([],"float32"), )
paddle.squeeze(Tensor([],"float32"), axis=Tensor([1],"int32"), )
paddle.squeeze(Tensor([],"float32"), axis=int(-1), )
paddle.squeeze(Tensor([],"float32"), axis=int(0), )
paddle.stack(list(Tensor([0],"int32"),Tensor([0],"int32"),), int(-1), )
paddle.stack(list(Tensor([1, 1],"float32"),), axis=int(0), )
paddle.stack(list(Tensor([1, 1],"float32"),Tensor([1, 1],"float32"),), int(-1), )
paddle.stack(list(Tensor([1, 2, 8, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),), axis=int(-1), )
paddle.stack(list(Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),), int(-1), )
paddle.stack(list(Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),), axis=int(0), )
paddle.stack(list(Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),), axis=int(1), )
paddle.stack(list(Tensor([1, 4, 8, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),), axis=int(-1), )
paddle.stack(list(Tensor([10, 10, 10],"float64"),Tensor([10, 10, 10],"float64"),), int(-1), )
paddle.stack(list(Tensor([10],"float32"),Tensor([10],"float32"),), )
paddle.stack(list(Tensor([10],"float32"),Tensor([10],"float32"),), axis=int(1), )
paddle.stack(list(Tensor([10],"int32"),), int(1), )
paddle.stack(list(Tensor([120],"float32"),Tensor([120],"float32"),), )
paddle.stack(list(Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),), )
paddle.stack(list(Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),), )
paddle.stack(list(Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),), )
paddle.stack(list(Tensor([16],"float32"),Tensor([16],"float32"),), )
paddle.stack(list(Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),), )
paddle.stack(list(Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),), )
paddle.stack(list(Tensor([1],"float32"),), )
paddle.stack(list(Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.stack(list(Tensor([1],"float32"),Tensor([1],"float32"),), int(-1), )
paddle.stack(list(Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.stack(list(Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.stack(list(Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.stack(list(Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),), )
paddle.stack(list(Tensor([1],"float64"),Tensor([1],"float64"),), int(-1), )
paddle.stack(list(Tensor([1],"int64"),Tensor([1],"int64"),), axis=int(0), )
paddle.stack(list(Tensor([1],"int64"),Tensor([1],"int64"),), axis=int(1), )
paddle.stack(list(Tensor([2, 1, 8, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),), axis=int(-1), )
paddle.stack(list(Tensor([2, 1],"float32"),Tensor([2, 1],"float32"),), int(-1), )
paddle.stack(list(Tensor([2, 2, 8, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),), axis=int(-1), )
paddle.stack(list(Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),), int(-1), )
paddle.stack(list(Tensor([2, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),), axis=int(1), )
paddle.stack(list(Tensor([2, 4, 8, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),), axis=int(-1), )
paddle.stack(list(Tensor([2, 5],"float64"),Tensor([2, 5],"float64"),), int(-1), )
paddle.stack(list(Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),), axis=int(-4), )
paddle.stack(list(Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),), axis=int(-3), )
paddle.stack(list(Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),), axis=int(-3), )
paddle.stack(list(Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),), int(1), )
paddle.stack(list(Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),), axis=int(-3), )
paddle.stack(list(Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),), axis=int(-3), )
paddle.stack(list(Tensor([2],"float32"),Tensor([2],"float32"),), int(-1), )
paddle.stack(list(Tensor([2],"float32"),Tensor([2],"float32"),), int(0), )
paddle.stack(list(Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),), )
paddle.stack(list(Tensor([3, 8, 8],"float32"),Tensor([3, 8, 8],"float32"),), )
paddle.stack(list(Tensor([3],"float32"),Tensor([3],"float32"),), int(-1), )
paddle.stack(list(Tensor([3],"float32"),Tensor([3],"float32"),Tensor([3],"float32"),), axis=int(1), )
paddle.stack(list(Tensor([3],"float64"),), int(0), )
paddle.stack(list(Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),), axis=int(0), )
paddle.stack(list(Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),), axis=int(1), )
paddle.stack(list(Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),), )
paddle.stack(list(Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),), )
paddle.stack(list(Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),), axis=int(1), )
paddle.stack(list(Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),), axis=int(0), )
paddle.stack(list(Tensor([4, 5],"float64"),Tensor([4, 5],"float64"),), int(-1), )
paddle.stack(list(Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),), )
paddle.stack(list(Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),), )
paddle.stack(list(Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),), axis=int(0), )
paddle.stack(list(Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),), axis=int(1), )
paddle.stack(list(Tensor([4],"float64"),), int(0), )
paddle.stack(list(Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),), int(0), )
paddle.stack(list(Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),), int(0), )
paddle.stack(list(Tensor([5, 4],"float64"),Tensor([5, 4],"float64"),), int(0), )
paddle.stack(list(Tensor([5],"float64"),Tensor([5],"float64"),), int(0), )
paddle.stack(list(Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),), axis=int(-4), )
paddle.stack(list(Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),), axis=int(-4), )
paddle.stack(list(Tensor([6],"float32"),), )
paddle.stack(list(Tensor([6],"float32"),Tensor([6],"float32"),), )
paddle.stack(list(Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),), axis=int(0), )
paddle.stack(list(Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),), axis=int(2), )
paddle.stack(list(Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),), axis=int(0), )
paddle.stack(list(Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),), axis=int(-3), )
paddle.stack(list(Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),), axis=int(-3), )
paddle.stack(list(Tensor([84],"float32"),Tensor([84],"float32"),), )
paddle.stack(list(Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),), )
paddle.stack(list(Tensor([],"float32"),), )
paddle.stack(list(Tensor([],"float32"),Tensor([],"float32"),), int(-1), )
paddle.stack(list(Tensor([],"float32"),Tensor([],"float32"),), int(0), )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=int(0), )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 224, 224],"float32"),), axis=int(0), )
paddle.stack(x=list(Tensor([58, 140, 140],"float32"),Tensor([58, 140, 140],"float32"),), axis=int(1), )
paddle.std(Tensor([1, 3, 4, 10],"float32"), list(int(1),int(3),), bool(True), bool(False), )
paddle.std(Tensor([1, 3, 4, 10],"float64"), int(2), bool(True), bool(False), )
paddle.std(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(2),), bool(True), bool(False), )
paddle.std(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(3),), bool(False), bool(False), )
paddle.std(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(3),), bool(True), bool(False), )
paddle.std(Tensor([1, 3, 4, 10],"float64"), tuple(int(1),int(3),), bool(True), bool(False), )
paddle.std(Tensor([120, 84],"float32"), axis=int(0), )
paddle.std(Tensor([16, 150],"float32"), axis=int(1), )
paddle.std(Tensor([2],"float32"), )
paddle.std(Tensor([3, 5],"float32"), )
paddle.std(Tensor([400, 120],"float32"), axis=int(0), )
paddle.std(Tensor([6, 9],"float32"), axis=int(1), )
paddle.std(Tensor([84, 10],"float32"), axis=int(0), )
paddle.std(Tensor([],"float32"), )
paddle.std(Tensor([],"float32"), list(), )
paddle.sum(Tensor([0, 0],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([0, 0],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([0, 0],"float32"), keepdim=bool(True), )
paddle.sum(Tensor([1, 1000],"float32"), axis=int(1), )
paddle.sum(Tensor([1, 14, 5, 14],"int64"), axis=list(int(1),int(3),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1, 14, 5, 14],"int64"), axis=list(int(1),int(3),), keepdim=bool(True), name=None, )
paddle.sum(Tensor([1, 16],"int64"), axis=int(0), )
paddle.sum(Tensor([1, 196608],"float32"), axis=int(1), )
paddle.sum(Tensor([1, 1],"float32"), )
paddle.sum(Tensor([1, 1],"float32"), axis=int(-1), )
paddle.sum(Tensor([1, 2, 2],"float32"), axis=int(-1), )
paddle.sum(Tensor([1, 2],"float32"), axis=int(-1), )
paddle.sum(Tensor([1, 3, 3, 5],"float32"), )
paddle.sum(Tensor([1, 3, 4, 10],"float32"), list(int(1),int(3),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), int(2), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(2),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(3),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1, 3, 4, 10],"float64"), tuple(int(1),int(3),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1, 3072],"float32"), axis=int(1), )
paddle.sum(Tensor([1, 3],"float32"), axis=int(0), )
paddle.sum(Tensor([10, 10, 5],"float64"), name=None, )
paddle.sum(Tensor([10, 10],"float32"), )
paddle.sum(Tensor([10, 10],"float32"), axis=list(), keepdim=bool(False), )
paddle.sum(Tensor([10, 10],"float32"), name=None, )
paddle.sum(Tensor([10, 20, 2],"float32"), axis=int(-1), )
paddle.sum(Tensor([10, 20, 2],"float64"), axis=int(-1), )
paddle.sum(Tensor([10, 20],"float64"), axis=int(-1), )
paddle.sum(Tensor([10, 20],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([10, 2],"float32"), )
paddle.sum(Tensor([10, 2],"float32"), name=None, )
paddle.sum(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.sum(Tensor([10, 5],"int64"), )
paddle.sum(Tensor([100, 1, 1],"float32"), None, None, bool(False), None, )
paddle.sum(Tensor([100, 1, 1],"float64"), None, None, bool(False), None, )
paddle.sum(Tensor([100, 1],"float32"), )
paddle.sum(Tensor([100, 200],"float32"), )
paddle.sum(Tensor([1000, 1000],"float16"), )
paddle.sum(Tensor([1000, 1000],"float32"), )
paddle.sum(Tensor([1000, 10],"float16"), )
paddle.sum(Tensor([1000, 10],"float32"), )
paddle.sum(Tensor([100000, 4],"float64"), int(0), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1000000, 4],"float64"), int(0), keepdim=bool(False), name=None, )
paddle.sum(Tensor([1000],"float16"), )
paddle.sum(Tensor([1000],"float32"), )
paddle.sum(Tensor([1001088],"float32"), )
paddle.sum(Tensor([1011072],"float32"), )
paddle.sum(Tensor([1024, 1024, 8],"float32"), None, keepdim=bool(False), name=None, )
paddle.sum(Tensor([1024, 1024, 8],"float64"), None, keepdim=bool(False), name=None, )
paddle.sum(Tensor([1024, 1024],"float16"), )
paddle.sum(Tensor([1024, 1024],"float32"), )
paddle.sum(Tensor([1024, 10],"float16"), )
paddle.sum(Tensor([1024, 10],"float32"), )
paddle.sum(Tensor([1024, 2],"float16"), )
paddle.sum(Tensor([1024, 2],"float32"), )
paddle.sum(Tensor([1024],"float16"), )
paddle.sum(Tensor([1024],"float32"), )
paddle.sum(Tensor([10],"float16"), )
paddle.sum(Tensor([10],"float32"), )
paddle.sum(Tensor([12, 5],"int64"), )
paddle.sum(Tensor([120, 84],"float32"), int(0), keepdim=bool(False), name=None, )
paddle.sum(Tensor([128, 1],"float32"), )
paddle.sum(Tensor([128, 32, 32],"float32"), axis=int(0), )
paddle.sum(Tensor([12],"float16"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([12],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([12],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([16, 150],"float32"), int(1), keepdim=bool(False), name=None, )
paddle.sum(Tensor([16, 256],"float32"), int(-1), keepdim=bool(True), name=None, )
paddle.sum(Tensor([16, 256],"float64"), int(-1), keepdim=bool(True), name=None, )
paddle.sum(Tensor([16, 32, 128],"float32"), axis=int(0), )
paddle.sum(Tensor([16, 32, 64],"float32"), axis=int(0), )
paddle.sum(Tensor([1],"float32"), )
paddle.sum(Tensor([2, 10, 10],"float32"), )
paddle.sum(Tensor([2, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([2, 100],"float32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([2, 100],"int64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([2, 2, 2],"float32"), axis=int(-1), )
paddle.sum(Tensor([2, 256],"int64"), axis=int(0), )
paddle.sum(Tensor([2, 2],"float32"), )
paddle.sum(Tensor([2, 2],"float32"), axis=int(-1), )
paddle.sum(Tensor([2, 2],"float32"), axis=int(1), )
paddle.sum(Tensor([2, 2],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([2, 2],"float64"), axis=int(1), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), int(2), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), int(3), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), int(4), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), int(5), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), int(2), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), int(3), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), int(4), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), int(5), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=None, keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=None, keepdim=bool(True), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=int(-1), keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=int(2), keepdim=bool(True), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=list(), keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=list(int(-1),), keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=list(int(0),int(1),int(2),int(3),), keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=list(int(0),int(2),), keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=list(int(2),), keepdim=bool(True), )
paddle.sum(Tensor([2, 3, 4, 5],bool), axis=tuple(int(0),int(2),), keepdim=bool(False), )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=None, keepdim=bool(False), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=None, keepdim=bool(True), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list(int(-1),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list(int(0),int(1),int(2),int(3),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list(int(0),int(2),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=list(int(2),), keepdim=bool(True), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=tuple(int(0),int(1),int(3),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([2, 3, 4, 5],"int64"), axis=tuple(int(0),int(2),), keepdim=bool(False), name=None, )
paddle.sum(Tensor([2, 3, 4],"int32"), )
paddle.sum(Tensor([2, 3, 4],"int32"), axis=int(0), )
paddle.sum(Tensor([2, 3, 4],"int32"), axis=tuple(int(0),int(1),), )
paddle.sum(Tensor([2, 3, 4],"int32"), axis=tuple(int(0),int(1),int(2),), )
paddle.sum(Tensor([2, 3],bool), axis=None, keepdim=bool(False), )
paddle.sum(Tensor([2, 3],bool), axis=None, keepdim=bool(True), )
paddle.sum(Tensor([2, 3],bool), axis=int(-1), keepdim=bool(False), )
paddle.sum(Tensor([2, 3],bool), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([2, 3],bool), axis=int(1), keepdim=bool(False), )
paddle.sum(Tensor([2, 3],bool), axis=list(int(-1),), keepdim=bool(False), )
paddle.sum(Tensor([2, 3],bool), axis=list(int(0),), keepdim=bool(True), )
paddle.sum(Tensor([2, 3],bool), axis=list(int(1),), keepdim=bool(False), )
paddle.sum(Tensor([2, 3],bool), axis=tuple(int(0),int(1),), keepdim=bool(False), )
paddle.sum(Tensor([2, 4],"float32"), axis=int(0), )
paddle.sum(Tensor([2, 5],"float32"), )
paddle.sum(Tensor([2, 5],"float32"), None, keepdim=bool(False), dtype=str(float32), )
paddle.sum(Tensor([2, 5],"float32"), None, keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([2, 5],"float32"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 5],"float32"), int(0), keepdim=bool(True), dtype=str(float32), )
paddle.sum(Tensor([2, 5],"float32"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), None, keepdim=bool(False), dtype=str(float32), )
paddle.sum(Tensor([2, 5],"float64"), None, keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), None, keepdim=bool(True), dtype=str(float32), )
paddle.sum(Tensor([2, 5],"float64"), int(-1), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), int(-1), keepdim=bool(True), dtype=str(float32), )
paddle.sum(Tensor([2, 5],"float64"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 5],"float64"), int(0), keepdim=bool(True), dtype=str(float32), )
paddle.sum(Tensor([2, 5],"float64"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([2, 5],"int64"), )
paddle.sum(Tensor([2, 8, 16],"float32"), axis=int(1), )
paddle.sum(Tensor([2000],"int64"), )
paddle.sum(Tensor([20],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([20],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([24],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([24],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([2800],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([2],"float32"), None, keepdim=bool(False), name=None, )
paddle.sum(Tensor([2],"int64"), )
paddle.sum(Tensor([3, 10],"float32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 10],"int64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 2, 3, 3],"float32"), )
paddle.sum(Tensor([3, 2, 4],"float32"), axis=int(1), )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=int(-1), )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=int(-1), keepdim=bool(True), name=str(Categorical_kl_divergence), )
paddle.sum(Tensor([3, 2, 5],"float32"), axis=list(int(-2),int(-1),), keepdim=bool(True), )
paddle.sum(Tensor([3, 2],"float32"), )
paddle.sum(Tensor([3, 2],"float32"), axis=int(0), )
paddle.sum(Tensor([3, 3, 10, 10],"float32"), )
paddle.sum(Tensor([3, 3, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 3, 3, 3],"float32"), )
paddle.sum(Tensor([3, 4, 2],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"float32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"float32"), axis=int(2), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"float64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"float64"), axis=int(2), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"int32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"int32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"int32"), axis=int(2), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"int64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"int64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 2],"int64"), axis=int(2), keepdim=bool(True), )
paddle.sum(Tensor([3, 4, 4, 5, 7],"int64"), )
paddle.sum(Tensor([3, 4],"float16"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"float16"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"float32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"float64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"int64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([3, 4],"int64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([3, 5],"float32"), None, keepdim=bool(False), name=None, )
paddle.sum(Tensor([3, 5],"float32"), axis=int(-1), )
paddle.sum(Tensor([3, 5],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([3, 5],"float32"), axis=int(-1), keepdim=bool(True), name=str(Categorical_kl_divergence), )
paddle.sum(Tensor([3, 5],"float64"), axis=int(-1), )
paddle.sum(Tensor([3, 5],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([3, 5],"float64"), axis=int(-1), keepdim=bool(True), name=str(Categorical_kl_divergence), )
paddle.sum(Tensor([30, 200, 40],"float32"), axis=int(1), keepdim=bool(False), )
paddle.sum(Tensor([32, 128, 128],"float32"), )
paddle.sum(Tensor([32, 32, 128],"float32"), axis=int(1), )
paddle.sum(Tensor([32, 64, 128],"float32"), axis=int(0), )
paddle.sum(Tensor([3],"float32"), )
paddle.sum(Tensor([3],"float32"), axis=int(-1), )
paddle.sum(Tensor([3],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([3],"float32"), name=None, )
paddle.sum(Tensor([3],"float64"), )
paddle.sum(Tensor([3],"float64"), axis=int(-1), )
paddle.sum(Tensor([3],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([4, 20],"float32"), )
paddle.sum(Tensor([4, 3, 2, 5],"float32"), axis=list(int(1),int(3),), keepdim=bool(False), )
paddle.sum(Tensor([4, 3, 2, 5],"float32"), axis=list(int(1),int(3),), keepdim=bool(True), )
paddle.sum(Tensor([4, 3, 2],"float32"), axis=int(1), keepdim=bool(False), )
paddle.sum(Tensor([4, 3, 2],"float32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([4, 3],"float16"), axis=int(1), )
paddle.sum(Tensor([4, 4],"complex128"), )
paddle.sum(Tensor([4, 4],"complex64"), )
paddle.sum(Tensor([4, 5, 5],"float64"), )
paddle.sum(Tensor([40, 1],"float32"), )
paddle.sum(Tensor([400, 120],"float32"), int(0), keepdim=bool(False), name=None, )
paddle.sum(Tensor([40],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([40],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([40],"int32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([40],"int64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([469, 1, 200],"float32"), axis=int(-1), )
paddle.sum(Tensor([4],"float32"), )
paddle.sum(Tensor([4],"float32"), axis=int(0), )
paddle.sum(Tensor([5, 1],"float64"), )
paddle.sum(Tensor([5, 20],"float64"), )
paddle.sum(Tensor([5, 4],"float32"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([5, 4],"float32"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([5, 4],"float64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([5, 4],"float64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([5, 4],"int64"), axis=int(0), keepdim=bool(True), )
paddle.sum(Tensor([5, 4],"int64"), axis=int(1), keepdim=bool(True), )
paddle.sum(Tensor([5, 5],"float64"), name=None, )
paddle.sum(Tensor([500000],"float32"), )
paddle.sum(Tensor([500032],"float16"), )
paddle.sum(Tensor([500032],"float32"), )
paddle.sum(Tensor([512, 1, 200],"float32"), axis=int(-1), )
paddle.sum(Tensor([512, 256],"float32"), )
paddle.sum(Tensor([524288],"float16"), )
paddle.sum(Tensor([524288],"float32"), )
paddle.sum(Tensor([5],"float32"), None, keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([5],"float32"), None, keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([5],"float32"), axis=int(-1), )
paddle.sum(Tensor([5],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([5],"float32"), axis=int(-1), keepdim=bool(True), name=str(Categorical_kl_divergence), )
paddle.sum(Tensor([5],"float32"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([5],"float32"), int(0), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([5],"float64"), )
paddle.sum(Tensor([5],"float64"), None, keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([5],"float64"), None, keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([5],"float64"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([5],"float64"), int(0), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([5],"float64"), name=None, )
paddle.sum(Tensor([5],"int64"), )
paddle.sum(Tensor([6, 1],"float32"), )
paddle.sum(Tensor([6, 2, 10],"float64"), None, str(float64), bool(False), None, )
paddle.sum(Tensor([6, 2, 3],"float32"), )
paddle.sum(Tensor([6, 2, 3],"float32"), None, keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), None, keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), int(-2), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), int(-2), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), int(0), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float32"), int(1), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), None, keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), None, keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(-1), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(-2), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(-2), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(0), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"float64"), int(1), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([6, 2, 3],"int64"), )
paddle.sum(Tensor([6, 9],"float32"), int(1), keepdim=bool(False), name=None, )
paddle.sum(Tensor([64, 128, 96],"float32"), axis=list(int(1),int(2),), )
paddle.sum(Tensor([6],"float32"), axis=int(-1), )
paddle.sum(Tensor([6],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.sum(Tensor([7, 3],"float32"), axis=int(-1), )
paddle.sum(Tensor([8, 16, 32],"float16"), )
paddle.sum(Tensor([8, 16, 32],"float32"), )
paddle.sum(Tensor([8, 16, 32],"float64"), )
paddle.sum(Tensor([8, 3, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(0), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(1), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(2), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(2), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(3), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(3), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(4), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(4), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(5), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float32"), int(5), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(0), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(0), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(1), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(1), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(2), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(2), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(3), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(3), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(4), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(4), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(5), keepdim=bool(False), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"float64"), int(5), keepdim=bool(True), dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 3],"int64"), )
paddle.sum(Tensor([84, 10],"float32"), int(0), keepdim=bool(False), name=None, )
paddle.sum(Tensor([9, 8],"int64"), )
paddle.sum(Tensor([96, 32, 32],"float32"), axis=int(0), )
paddle.sum(Tensor([],"float32"), )
paddle.sum(Tensor([],"float32"), None, keepdim=bool(False), name=None, )
paddle.sum(Tensor([],"float32"), list(), keepdim=bool(False), name=None, )
paddle.t(Tensor([1, 5],"float64"), )
paddle.t(Tensor([10, 20],"float32"), )
paddle.t(Tensor([10, 5],"float64"), )
paddle.t(Tensor([10],"float64"), )
paddle.t(Tensor([20, 10],"float32"), )
paddle.t(Tensor([3],"float32"), )
paddle.t(Tensor([],"float32"), )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 3],"int64"), mode=str(raise), )
paddle.take(Tensor([3, 4],"float64"), Tensor([2, 3],"int64"), mode=str(raise), )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode=str(clip), )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode=str(wrap), )
paddle.take(Tensor([3, 4],"int32"), Tensor([2, 3],"int64"), mode=str(raise), )
paddle.take(Tensor([3, 4],"int64"), Tensor([2, 3],"int64"), mode=str(raise), )
paddle.take(Tensor([4, 5],"float32"), Tensor([],"int64"), )
paddle.take(Tensor([],"float32"), Tensor([],"int64"), )
paddle.take_along_axis(Tensor([168],"float64"), Tensor([1],"int32"), axis=int(0), )
paddle.take_along_axis(Tensor([1],"float32"), Tensor([1],"int32"), axis=int(0), )
paddle.take_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"float32"), int(0), )
paddle.take_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), int(0), )
paddle.take_along_axis(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 4],"int32"), axis=int(0), )
paddle.take_along_axis(Tensor([2, 3],"float32"), Tensor([2, 1],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([2, 3],"float64"), Tensor([1, 3],"int32"), axis=int(0), )
paddle.take_along_axis(Tensor([3, 2, 5],"float32"), Tensor([1, 1, 3],"int64"), axis=int(-1), )
paddle.take_along_axis(Tensor([3, 3],"float32"), Tensor([1, 3],"float32"), int(0), )
paddle.take_along_axis(Tensor([3, 3],"float32"), Tensor([1, 3],"int64"), int(0), )
paddle.take_along_axis(Tensor([3, 3],"float32"), Tensor([1, 3],"int64"), int(0), bool(False), )
paddle.take_along_axis(Tensor([3, 5],"float32"), Tensor([1, 3],"int64"), axis=int(-1), )
paddle.take_along_axis(Tensor([3, 5],"float32"), Tensor([3, 2],"int64"), axis=int(-1), )
paddle.take_along_axis(Tensor([3, 5],"float64"), Tensor([1, 3],"int64"), axis=int(-1), )
paddle.take_along_axis(Tensor([3],"float32"), Tensor([1],"int32"), axis=int(0), )
paddle.take_along_axis(Tensor([4, 42],"float64"), Tensor([4, 1],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([4, 7, 6],"float64"), Tensor([4, 1, 6],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([4, 7, 6],"float64"), Tensor([4, 7, 1],"int32"), axis=int(2), )
paddle.take_along_axis(Tensor([4, 7],"float32"), Tensor([4, 1],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([4, 7],"float64"), Tensor([4, 1],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([5, 12],"float64"), Tensor([5, 1],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([5, 3, 4],"float64"), Tensor([5, 1, 4],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([6],"float32"), Tensor([1],"int32"), axis=int(0), )
paddle.take_along_axis(Tensor([7, 24],"float64"), Tensor([7, 1],"int32"), axis=int(1), )
paddle.take_along_axis(Tensor([8],"float32"), Tensor([1],"int32"), axis=int(0), )
paddle.tan(Tensor([10, 20, 1],"float32"), )
paddle.tan(Tensor([100, 1, 2, 2],"float32"), )
paddle.tan(Tensor([100, 1, 2],"float32"), )
paddle.tan(Tensor([100, 1],"float32"), )
paddle.tan(Tensor([100, 1],"float64"), )
paddle.tan(Tensor([100, 2, 1],"float32"), )
paddle.tan(Tensor([100, 2, 3, 1],"float32"), )
paddle.tan(Tensor([100, 2, 3],"float32"), )
paddle.tan(Tensor([100, 2],"float32"), )
paddle.tan(Tensor([100],"float32"), )
paddle.tan(Tensor([8, 16, 32],"complex128"), )
paddle.tan(Tensor([8, 16, 32],"complex64"), )
paddle.tan(Tensor([8, 16, 32],"float16"), )
paddle.tan(Tensor([8, 16, 32],"float32"), )
paddle.tan(Tensor([8, 16, 32],"float64"), )
paddle.tan(Tensor([],"float32"), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), int(2), axis=int(3), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), int(3), axis=int(3), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list(int(2),int(3),), axis=int(3), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list(int(2),int(4),int(6),), axis=int(3), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), tuple(int(2),int(6),), axis=int(3), )
paddle.tensor_split(Tensor([4, 4, 6],bool), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 6],"float16"), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 6],"float32"), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 6],"float64"), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 6],"int32"), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 6],"int64"), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 6],uint8), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), int(2), axis=int(-2), )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), int(3), axis=int(-2), )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), list(int(2),int(3),), axis=int(-2), )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), list(int(2),int(4),int(6),), axis=int(-2), )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), tuple(int(2),int(6),), axis=int(-2), )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), int(2), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), int(3), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), list(int(2),int(3),), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), list(int(2),int(4),int(6),), axis=int(2), )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), tuple(int(2),int(6),), axis=int(2), )
paddle.tensor_split(Tensor([4, 6],bool), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 6],"float16"), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 6],"float32"), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 6],"float64"), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 6],"int32"), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 6],"int64"), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 6],uint8), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 7],"int64"), int(2), axis=int(1), )
paddle.tensor_split(Tensor([4, 7],"int64"), int(3), axis=int(1), )
paddle.tensor_split(Tensor([4, 7],"int64"), list(int(2),int(3),), axis=int(1), )
paddle.tensor_split(Tensor([4, 7],"int64"), list(int(2),int(4),int(6),), axis=int(1), )
paddle.tensor_split(Tensor([4, 7],"int64"), tuple(int(2),int(6),), axis=int(1), )
paddle.tensor_split(Tensor([6],bool), int(3), axis=int(0), )
paddle.tensor_split(Tensor([6],"float16"), int(3), axis=int(0), )
paddle.tensor_split(Tensor([6],"float32"), int(3), axis=int(0), )
paddle.tensor_split(Tensor([6],"float64"), int(3), axis=int(0), )
paddle.tensor_split(Tensor([6],"int32"), int(3), axis=int(0), )
paddle.tensor_split(Tensor([6],"int64"), int(2), )
paddle.tensor_split(Tensor([6],"int64"), int(3), )
paddle.tensor_split(Tensor([6],"int64"), int(3), axis=int(0), )
paddle.tensor_split(Tensor([6],"int64"), list(int(2),int(3),), )
paddle.tensor_split(Tensor([6],"int64"), list(int(2),int(4),), )
paddle.tensor_split(Tensor([6],"int64"), list(int(2),int(4),int(5),), )
paddle.tensor_split(Tensor([6],"int64"), tuple(int(2),int(5),), )
paddle.tensor_split(Tensor([6],uint8), int(3), axis=int(0), )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), int(2), )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), int(3), )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), list(int(2),int(3),), )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), list(int(2),int(4),), )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), list(int(2),int(4),int(6),), )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), tuple(int(2),int(6),), )
paddle.tensor_split(Tensor([7, 4],"int64"), int(2), )
paddle.tensor_split(Tensor([7, 4],"int64"), int(3), )
paddle.tensor_split(Tensor([7, 4],"int64"), list(int(2),int(3),), )
paddle.tensor_split(Tensor([7, 4],"int64"), list(int(2),int(4),), )
paddle.tensor_split(Tensor([7, 4],"int64"), list(int(2),int(4),int(6),), )
paddle.tensor_split(Tensor([7, 4],"int64"), tuple(int(2),int(6),), )
paddle.tensor_split(Tensor([7],"int64"), int(2), )
paddle.tensor_split(Tensor([7],"int64"), int(2), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), int(3), )
paddle.tensor_split(Tensor([7],"int64"), int(3), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(1),int(3),), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(3),), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(3),), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(3),int(16),), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(4),), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(4),int(6),), )
paddle.tensor_split(Tensor([7],"int64"), list(int(2),int(4),int(6),), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), list(int(3),int(-1),int(16),), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), list(int(3),int(-1),int(5),int(2),int(16),), axis=int(0), )
paddle.tensor_split(Tensor([7],"int64"), tuple(int(2),int(6),), )
paddle.tensor_split(Tensor([7],"int64"), tuple(int(2),int(6),), axis=int(0), )
paddle.tensordot(Tensor([0, 0, 5, 5],"float32"), Tensor([0, 0, 5, 5],"float32"), list(list(),list(),), )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list(list(),list(),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(int(0),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(int(3),int(0),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(int(0),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(int(3),int(0),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list(list(),list(),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(int(0),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(int(3),int(0),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([10],"float64"), Tensor([10],"float64"), axes=int(1), )
paddle.tensordot(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), axes=int(2), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), int(0), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), int(1), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), int(2), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list(int(1),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list(list(int(1),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(int(1),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list(int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list(int(1),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(int(1),int(2),),tuple(int(0),int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(int(2),int(1),),tuple(int(0),),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), int(0), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), int(1), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), int(2), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list(int(1),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list(list(int(1),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(int(1),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list(int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list(int(1),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(int(1),int(2),),tuple(int(0),int(1),),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(int(2),int(1),),tuple(int(0),),), )
paddle.tensordot(Tensor([5, 0, 5, 0],"float32"), Tensor([5, 0, 5, 0],"float32"), list(list(),list(),), )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list(list(),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list(list(),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(int(3),int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(int(3),int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(int(3),int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(int(3),int(0),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(int(3),int(1),int(2),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(1),int(2),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(1),int(3),),list(int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(1),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(2),int(3),),list(int(3),int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(3),),list(int(0),int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(3),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(3),int(1),int(2),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(3),int(2),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(0),int(3),int(2),int(1),),list(int(2),int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),),list(int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),),list(int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(2),),list(int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(2),int(3),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(3),),list(int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(2),int(3),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(0),int(3),int(2),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(0),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(0),int(3),),list(int(0),int(2),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(1),int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(2),int(3),int(0),),list(int(3),int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),),list(int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),int(0),),list(int(3),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(0),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(1),int(3),int(2),int(0),),list(int(3),int(1),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(0),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(0),int(1),int(3),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(0),int(3),),list(int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),),list(int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),int(0),int(3),),list(int(3),int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(1),int(3),int(0),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),),list(int(1),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(1),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),int(0),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),int(0),int(1),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(2),int(3),int(1),),list(int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),),list(),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(0),),list(int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(0),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(0),int(2),int(1),),list(int(2),int(1),int(0),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(0),),list(int(3),int(2),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(0),int(2),),list(int(3),int(1),int(0),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(0),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(2),int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(1),int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(2),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),),list(int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(1),int(2),int(3),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(1),int(2),int(0),),list(int(2),int(3),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),),list(int(3),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),),list(int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(0),int(3),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(2),int(1),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),int(0),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),int(0),int(1),),list(int(3),int(2),int(0),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),int(1),),list(int(2),int(0),int(1),),), )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list(list(int(3),int(2),int(1),int(0),),list(int(0),int(1),int(3),int(2),),), )
paddle.tile(Tensor([1, 2, 1, 64, 16],"float32"), list(int(1),int(1),int(4),int(1),int(1),), )
paddle.tile(Tensor([1, 2],"float32"), repeat_times=list(int(2),int(1),), )
paddle.tile(Tensor([1, 4],"float32"), list(Tensor([],"int64"),int(1),), )
paddle.tile(Tensor([2, 3],"float32"), list(int(2),int(2),), )
paddle.tile(Tensor([3, 2, 1, 64, 32],"float16"), list(int(1),int(1),int(8),int(1),int(1),), )
paddle.tile(Tensor([8, 1, 32],"float64"), list(int(1),int(4),int(1),), )
paddle.tile(Tensor([8, 1],"int64"), list(int(1),int(4),), )
paddle.tile(Tensor([8, 4, 1],"float64"), list(int(1),int(1),int(100),), )
paddle.tile(x=Tensor([1, 512],"float64"), repeat_times=list(int(471),int(1),), )
paddle.trace(Tensor([2, 2],"float32"), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(-1), axis1=int(2), axis2=int(0), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(-5), axis1=int(2), axis2=int(0), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(0), axis1=int(-1), axis2=int(-2), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(0), axis1=int(1), axis2=int(2), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(1), axis1=int(0), axis2=int(1), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(2), axis1=int(1), axis2=int(2), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=int(5), axis1=int(1), axis2=int(2), )
paddle.transpose(Tensor([1, 10, 32],"float64"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([1, 100, 12],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 100, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 100, 40],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 100, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 100, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 100, 8],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 10],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([1, 12, 12],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 128, 32, 128],"float16"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([1, 128, 32, 128],"float16"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 128, 32, 128],"float32"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([1, 128, 32, 128],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 128, 32, 32],"float32"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([1, 128, 32, 32],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 128, 8, 16],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 16, 32, 16],"float32"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([1, 16, 32, 16],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 17, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 17, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 2, 12, 10, 10],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([1, 2, 24, 5, 5],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([1, 2, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 2, 48, 3, 3],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([1, 2],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([1, 3, 2, 5, 4],"float16"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([1, 3, 2, 5, 4],"float32"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([1, 3, 4, 2, 4],"float32"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([1, 3, 5, 2, 4],"float16"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([1, 3, 5, 2, 4],"float32"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([1, 32, 128, 128],"float16"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 32, 128, 128],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 32, 128, 32],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 32, 16, 16],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 32, 8, 8],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 4, 100],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 4, 17],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 4, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 4, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 40, 100],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 40, 12],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 40, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 40, 8],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 50],"complex128"), list(int(1),int(0),), )
paddle.transpose(Tensor([1, 50],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([1, 6, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([1, 8, 128, 16],"float32"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([1, 8, 128, 16],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 8, 14, 12],"float32"), perm=list(int(0),int(3),int(1),int(2),), )
paddle.transpose(Tensor([1, 8, 2, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([1, 8, 32, 8],"float32"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([1, 8, 32, 8],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([1, 8, 4, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([1, 8, 8],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([10, 20, 1],"float32"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([100, 1000],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 12],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 2],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 300],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 40],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 4],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 6],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([100, 8],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([1000, 10],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([1000, 10],"float64"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([100],"float32"), list(int(0),), )
paddle.transpose(Tensor([12, 12],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([16, 128, 32, 128],"float32"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([16, 128, 32, 128],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([16, 16],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([16, 32, 128, 128],"float32"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([16, 32, 64, 128],"float32"), list(int(2),int(0),int(1),int(3),), )
paddle.transpose(Tensor([16, 32, 64],"float32"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([17, 16],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([17, 17],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([17, 2],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([17, 4],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([2, 1, 32],"float64"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([2, 10],"complex128"), list(int(1),int(0),), )
paddle.transpose(Tensor([2, 10],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([2, 16, 2, 8],"float32"), perm=list(int(0),int(3),int(1),int(2),), )
paddle.transpose(Tensor([2, 1],"int64"), list(int(1),int(0),), )
paddle.transpose(Tensor([2, 2, 112, 28, 28],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 116, 14, 14],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 12, 28, 28],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 16, 28, 28],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 176, 14, 14],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 232, 7, 7],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 24, 14, 14],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 24, 28, 28],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 244, 14, 14],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 32, 14, 14],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 352, 7, 7],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 48, 14, 14],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 48, 7, 7],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 488, 7, 7],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 58, 28, 28],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 64, 7, 7],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 88, 28, 28],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2, 96, 7, 7],"float32"), perm=list(int(0),int(2),int(1),int(3),int(4),), )
paddle.transpose(Tensor([2, 2],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([2, 3, 100, 12],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 100, 2],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 100, 40],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 100, 4],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 100, 6],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 100, 8],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 12, 12],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 17, 2],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 17, 4],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 2, 2],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 2, 5, 4],"float16"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([2, 3, 2, 5, 4],"float32"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([2, 3, 3, 3],"float32"), list(int(1),int(0),int(2),int(3),), )
paddle.transpose(Tensor([2, 3, 32, 128],"float16"), list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([2, 3, 4, 100],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 4, 17],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), list(int(2),int(3),int(4),int(5),int(6),int(7),int(8),int(0),int(1),), )
paddle.transpose(Tensor([2, 3, 4, 2],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 4, 4],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 4, 5, 6, 1],"float32"), list(int(4),int(2),int(3),int(1),int(0),int(5),), )
paddle.transpose(Tensor([2, 3, 4, 5, 6],"float32"), list(int(4),int(2),int(3),int(1),int(0),), )
paddle.transpose(Tensor([2, 3, 4, 5],"complex128"), perm=list(int(3),int(2),int(0),int(1),), )
paddle.transpose(Tensor([2, 3, 4, 5],"complex64"), perm=list(int(3),int(2),int(0),int(1),), )
paddle.transpose(Tensor([2, 3, 4, 5],"float32"), list(int(0),int(2),int(3),int(1),), )
paddle.transpose(Tensor([2, 3, 40, 100],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 40, 12],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 40, 6],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 40, 8],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 4],"float32"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([2, 3, 4],"float32"), perm=list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([2, 3, 4],"float32"), perm=tuple(int(2),int(1),int(0),), )
paddle.transpose(Tensor([2, 3, 5, 2, 4],"float16"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([2, 3, 5, 2, 4],"float32"), perm=list(int(0),int(1),int(3),int(2),int(4),), )
paddle.transpose(Tensor([2, 3, 6, 6],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 3, 8, 8],"float64"), list(int(0),int(1),int(3),int(2),), )
paddle.transpose(Tensor([2, 4, 6, 6, 6],"float64"), list(int(0),int(2),int(3),int(4),int(1),), )
paddle.transpose(Tensor([2, 4, 6, 6],"float64"), list(int(0),int(2),int(3),int(1),), )
paddle.transpose(Tensor([2, 4, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([2, 5],"float32"), list(int(0),int(1),), )
paddle.transpose(Tensor([2, 5],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([2, 6, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([2, 6, 6, 4],"float64"), list(int(0),int(3),int(1),int(2),), )
paddle.transpose(Tensor([2, 6, 6, 6, 4],"float64"), list(int(0),int(4),int(1),int(2),int(3),), )
paddle.transpose(Tensor([2, 8, 1, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([2, 8, 2, 16],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([2, 8, 4, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([20, 10, 1],"float32"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([20, 40],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([21, 21],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([21, 8, 4],"int64"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([220500, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([3, 100, 120],"float64"), list(int(1),int(2),int(0),), )
paddle.transpose(Tensor([3, 100, 12],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 100, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 100, 40],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 100, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 100, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 100, 8],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 12, 12],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 17, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 17, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 2, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 2, 3, 3],"float32"), list(int(1),int(0),int(2),int(3),), )
paddle.transpose(Tensor([3, 2, 4],"float32"), perm=list(int(2),int(0),int(1),), )
paddle.transpose(Tensor([3, 2],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([3, 3, 40, 40],"float32"), list(int(0),int(2),int(3),int(1),), )
paddle.transpose(Tensor([3, 3],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([3, 4, 100],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 4, 10],"float32"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 4, 17],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 4, 2],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 4, 4],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 40, 100],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 40, 12],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 40, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 40, 8],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 6, 6],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([3, 8, 8],"float64"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([300, 100],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([32, 20],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([32, 8, 4, 64],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([36986, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([4, 100],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([4, 12, 16],"float64"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([4, 12, 8],"float64"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([4, 12],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([4, 17],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([4, 23, 16],"float32"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([4, 2],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([4, 4],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([40, 100],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([40, 12],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([40, 20],"float32"), list(int(1),int(0),), )
paddle.transpose(Tensor([40, 21],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([40, 6],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([40, 8],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([42538, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([46417, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([48836, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([5, 5],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([50148, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([58, 2, 140, 1],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(Tensor([6, 2, 3],"float32"), list(int(0),int(1),int(2),), )
paddle.transpose(Tensor([6, 2, 3],"float32"), list(int(0),int(2),int(1),), )
paddle.transpose(Tensor([6, 2, 3],"float32"), list(int(1),int(0),int(2),), )
paddle.transpose(Tensor([6, 2, 3],"float32"), list(int(1),int(2),int(0),), )
paddle.transpose(Tensor([6, 2, 3],"float32"), list(int(2),int(0),int(1),), )
paddle.transpose(Tensor([6, 2, 3],"float32"), list(int(2),int(1),int(0),), )
paddle.transpose(Tensor([6, 6],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([60071, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([64, 16, 32, 128],"float32"), list(int(0),int(2),int(3),int(1),), )
paddle.transpose(Tensor([64, 16, 32, 128],"float32"), list(int(3),int(1),int(0),int(2),), )
paddle.transpose(Tensor([8, 1, 2, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([8, 1, 4, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([8, 2, 1, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([8, 2, 2, 16],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([8, 2, 4, 8],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([8, 3, 4, 4, 5, 3],"float32"), list(int(5),int(3),int(4),int(1),int(0),int(2),), )
paddle.transpose(Tensor([8, 8],"float64"), list(int(1),int(0),), )
paddle.transpose(Tensor([8000, 1],"float32"), perm=list(int(1),int(0),), )
paddle.transpose(Tensor([],"float32"), list(), )
paddle.transpose(x=Tensor([1, 2, 8, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([1, 4, 8, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([1, 8, 1, 16],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([1, 8, 1, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([1, 8, 2, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([1, 8, 4, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 1, 8, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 2, 8, 16],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 4, 8, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 8, 1, 16],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 8, 1, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 8, 2, 16],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([2, 8, 4, 8],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([3, 4, 10],"float32"), perm=list(int(1),int(0),int(2),), )
paddle.transpose(x=Tensor([32, 4, 8, 64],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.transpose(x=Tensor([4, 1, 10],"float32"), perm=list(int(1),int(0),int(2),), )
paddle.transpose(x=Tensor([58, 140, 2, 1],"float32"), perm=list(int(0),int(2),int(1),int(3),), )
paddle.trapezoid(Tensor([5],"float32"), dx=float(2.0), )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=None, axis=int(-1), )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=int(-1), )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=int(0), )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=int(-1), )
paddle.trapezoid(y=Tensor([2, 3],"float64"), x=None, dx=None, axis=int(-1), )
paddle.trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=int(-1), )
paddle.trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"float32"), axis=int(1), )
paddle.trapezoid(y=Tensor([3, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=int(1), )
paddle.trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([4, 4],"float16"), )
paddle.tril(Tensor([1, 1],"float32"), diagonal=int(0), )
paddle.tril(Tensor([10, 10],bool), )
paddle.tril(Tensor([10, 20, 1],"float32"), int(0), )
paddle.tril(Tensor([50, 50],bool), )
paddle.tril(Tensor([64, 64],"float16"), )
paddle.tril(Tensor([64, 64],"float32"), )
paddle.tril_indices(int(4), None, int(2), )
paddle.tril_indices(int(4), int(4), int(-1), )
paddle.tril_indices(int(4), int(4), int(2), )
paddle.triu(Tensor([1, 128, 32, 32],"float32"), diagonal=int(1), )
paddle.triu(Tensor([10, 20, 1],"float32"), int(0), )
paddle.triu(Tensor([11, 16],"float32"), diagonal=int(1), )
paddle.triu(Tensor([11, 7],"float32"), diagonal=int(1), )
paddle.triu(Tensor([4, 5],"float32"), diagonal=int(1), )
paddle.triu(Tensor([6, 4],"float32"), diagonal=int(1), )
paddle.triu_indices(int(4), None, int(2), )
paddle.triu_indices(int(4), int(4), int(-1), )
paddle.triu_indices(int(4), int(4), int(2), )
paddle.trunc(Tensor([10, 20, 1],"float32"), )
paddle.trunc(Tensor([20, 20],"float32"), )
paddle.trunc(Tensor([],"float32"), )
paddle.unbind(Tensor([1],"float32"), int(0), )
paddle.unbind(Tensor([2, 2],bool), axis=int(0), )
paddle.unbind(Tensor([2, 3, 8, 8],"float32"), axis=int(0), )
paddle.unbind(Tensor([2, 3],"complex128"), int(0), )
paddle.unbind(Tensor([2, 3],"complex64"), int(0), )
paddle.unbind(Tensor([2, 3],"float32"), int(0), )
paddle.unbind(Tensor([2],"float32"), int(0), )
paddle.unbind(Tensor([3, 9, 5],"float32"), axis=int(0), )
paddle.unflatten(Tensor([3, 4, 4, 5],"float32"), axis=int(1), shape=list(int(2),int(2),), name=None, )
paddle.unflatten(x=Tensor([4, 6, 16],bool), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float16"), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(-1), shape=list(int(-1),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(-1), shape=tuple(int(2),int(8),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(0), shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(0), shape=list(int(-1),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(0), shape=list(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(0), shape=tuple(int(-1),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(0), shape=tuple(int(-1),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=int(1), shape=tuple(int(2),int(3),), )
paddle.unflatten(x=Tensor([4, 6, 16],"float64"), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"int16"), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"int32"), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unflatten(x=Tensor([4, 6, 16],"int64"), axis=int(0), shape=tuple(int(2),int(2),), )
paddle.unique(Tensor([120],"int64"), )
paddle.unique(Tensor([120],"int64"), return_index=bool(True), return_inverse=bool(True), return_counts=bool(True), dtype=str(int32), )
paddle.unique(Tensor([2, 3],"int64"), )
paddle.unique(Tensor([3, 1],"int64"), )
paddle.unique(Tensor([3, 5, 5],"float32"), return_index=bool(True), return_inverse=bool(True), return_counts=bool(True), axis=int(0), )
paddle.unique(Tensor([6],"float32"), )
paddle.unique(Tensor([6],"float32"), return_counts=bool(True), )
paddle.unique(Tensor([],"float32"), return_index=bool(True), return_inverse=bool(True), return_counts=bool(True), )
paddle.unique_consecutive(Tensor([100],"float64"), )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=bool(True), return_counts=bool(True), )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=bool(True), return_counts=bool(True), axis=int(-1), )
paddle.unique_consecutive(Tensor([],"float32"), return_inverse=bool(True), return_counts=bool(True), )
paddle.unsqueeze(Tensor([1, 1],"float64"), axis=int(2), )
paddle.unsqueeze(Tensor([1, 2],"float64"), axis=int(2), )
paddle.unsqueeze(Tensor([1, 3],"float64"), axis=int(2), )
paddle.unsqueeze(Tensor([10, 20, 1],"float32"), int(-1), )
paddle.unsqueeze(Tensor([10, 2],"float32"), int(-1), )
paddle.unsqueeze(Tensor([100],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([100],"int64"), axis=int(1), )
paddle.unsqueeze(Tensor([1],"float64"), axis=int(0), )
paddle.unsqueeze(Tensor([1],"float64"), axis=list(int(0),int(2),), )
paddle.unsqueeze(Tensor([2, 1],"float64"), axis=int(2), )
paddle.unsqueeze(Tensor([2, 2, 2],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([2, 2, 2],"int64"), axis=int(1), )
paddle.unsqueeze(Tensor([2, 3],"float32"), int(-1), )
paddle.unsqueeze(Tensor([2, 4],"float32"), axis=int(-1), )
paddle.unsqueeze(Tensor([2, 4],"float64"), axis=int(-1), )
paddle.unsqueeze(Tensor([20, 30, 40],"float32"), axis=list(int(1),int(2),), )
paddle.unsqueeze(Tensor([2],"float32"), axis=int(0), )
paddle.unsqueeze(Tensor([2],"float32"), axis=list(int(0),int(2),), )
paddle.unsqueeze(Tensor([2],"float64"), axis=int(0), )
paddle.unsqueeze(Tensor([2],"float64"), axis=list(int(0),int(2),), )
paddle.unsqueeze(Tensor([2],"int64"), axis=int(1), )
paddle.unsqueeze(Tensor([3, 2, 2],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([3, 2],"float64"), axis=int(2), )
paddle.unsqueeze(Tensor([3, 3, 3, 40, 40],"float32"), axis=int(1), )
paddle.unsqueeze(Tensor([3, 3, 40, 40, 3],"float32"), axis=int(1), )
paddle.unsqueeze(Tensor([3, 3, 40, 40],"float32"), axis=int(1), )
paddle.unsqueeze(Tensor([3, 40, 40, 3],"float32"), axis=int(1), )
paddle.unsqueeze(Tensor([3, 40, 40],"float32"), axis=int(1), )
paddle.unsqueeze(Tensor([3],"float64"), axis=int(0), )
paddle.unsqueeze(Tensor([3],"float64"), axis=list(int(0),int(2),), )
paddle.unsqueeze(Tensor([3],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([4, 10],"float64"), list(int(2),), )
paddle.unsqueeze(Tensor([4, 12],"float64"), int(-1), )
paddle.unsqueeze(Tensor([4, 512, 512],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([498, 80],"float32"), int(0), )
paddle.unsqueeze(Tensor([4],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([5, 10],"float32"), axis=int(0), )
paddle.unsqueeze(Tensor([5],"float64"), axis=int(0), )
paddle.unsqueeze(Tensor([5],"float64"), axis=list(int(0),int(2),), )
paddle.unsqueeze(Tensor([5],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([8, 16],"int64"), axis=int(-1), )
paddle.unsqueeze(Tensor([8, 32],"float64"), list(int(1),), )
paddle.unsqueeze(Tensor([8, 4],"float64"), list(int(2),), )
paddle.unsqueeze(Tensor([8],"int64"), list(int(1),), )
paddle.unsqueeze(Tensor([],"float32"), axis=Tensor([],"int32"), )
paddle.unsqueeze(Tensor([],"float32"), axis=int(0), )
paddle.unsqueeze(Tensor([],"float32"), list(int(-1),), )
paddle.unsqueeze(Tensor([],"float32"), list(int(-1),int(1),), )
paddle.unsqueeze(Tensor([],"float32"), list(int(0),int(1),int(2),), )
paddle.vander(Tensor([5],"complex128"), int(0), bool(False), )
paddle.vander(Tensor([5],"complex128"), int(0), bool(True), )
paddle.vander(Tensor([5],"complex128"), int(1), bool(False), )
paddle.vander(Tensor([5],"complex128"), int(1), bool(True), )
paddle.vander(Tensor([5],"complex128"), int(2), bool(False), )
paddle.vander(Tensor([5],"complex128"), int(2), bool(True), )
paddle.vander(Tensor([5],"complex128"), int(3), bool(False), )
paddle.vander(Tensor([5],"complex128"), int(3), bool(True), )
paddle.vander(Tensor([5],"complex128"), int(4), bool(False), )
paddle.vander(Tensor([5],"complex128"), int(4), bool(True), )
paddle.vander(Tensor([5],"float32"), None, bool(False), )
paddle.vander(Tensor([5],"float32"), int(0), bool(False), )
paddle.vander(Tensor([5],"float32"), int(0), bool(True), )
paddle.vander(Tensor([5],"float32"), int(1), bool(False), )
paddle.vander(Tensor([5],"float32"), int(1), bool(True), )
paddle.vander(Tensor([5],"float32"), int(2), bool(False), )
paddle.vander(Tensor([5],"float32"), int(2), bool(True), )
paddle.vander(Tensor([5],"float32"), int(3), bool(False), )
paddle.vander(Tensor([5],"float32"), int(3), bool(True), )
paddle.vander(Tensor([5],"float32"), int(4), bool(False), )
paddle.vander(Tensor([5],"float32"), int(4), bool(True), )
paddle.vander(Tensor([5],"float32"), int(5), bool(False), )
paddle.vander(Tensor([5],"float32"), int(5), bool(True), )
paddle.vander(Tensor([5],"float32"), int(6), bool(False), )
paddle.vander(Tensor([5],"float32"), int(6), bool(True), )
paddle.vander(Tensor([5],"float32"), int(7), bool(False), )
paddle.vander(Tensor([5],"float32"), int(7), bool(True), )
paddle.vander(Tensor([5],"float32"), int(8), bool(False), )
paddle.vander(Tensor([5],"float32"), int(8), bool(True), )
paddle.var(Tensor([1, 3, 4, 10],"float32"), list(int(1),int(3),), bool(True), bool(False), )
paddle.var(Tensor([1, 3, 4, 10],"float64"), int(2), bool(True), bool(False), )
paddle.var(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(2),), bool(True), bool(False), )
paddle.var(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(3),), bool(False), bool(False), )
paddle.var(Tensor([1, 3, 4, 10],"float64"), list(int(1),int(3),), bool(True), bool(False), )
paddle.var(Tensor([1, 3, 4, 10],"float64"), tuple(int(1),int(3),), bool(True), bool(False), )
paddle.var(Tensor([16, 256],"float32"), axis=int(-1), keepdim=bool(True), )
paddle.var(Tensor([16, 256],"float64"), axis=int(-1), keepdim=bool(True), )
paddle.var(Tensor([2],"float32"), )
paddle.var(Tensor([],"float32"), )
paddle.var(Tensor([],"float32"), list(), )
paddle.vsplit(Tensor([6, 4, 3],"int64"), int(2), )
paddle.vsplit(Tensor([6, 4, 3],"int64"), int(3), )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list(int(-1),), )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list(int(-1),int(1),int(3),), )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list(int(2),int(4),), )
paddle.vsplit(Tensor([6, 4, 3],"int64"), tuple(int(2),int(1),int(3),), )
paddle.vsplit(Tensor([6, 4],bool), int(3), )
paddle.vsplit(Tensor([6, 4],"float16"), int(3), )
paddle.vsplit(Tensor([6, 4],"float32"), int(3), )
paddle.vsplit(Tensor([6, 4],"float64"), int(3), )
paddle.vsplit(Tensor([6, 4],"int32"), int(3), )
paddle.vsplit(Tensor([6, 4],"int64"), int(2), )
paddle.vsplit(Tensor([6, 4],"int64"), int(3), )
paddle.vsplit(Tensor([6, 4],"int64"), list(int(-1),), )
paddle.vsplit(Tensor([6, 4],"int64"), list(int(-1),int(1),int(3),), )
paddle.vsplit(Tensor([6, 4],"int64"), list(int(2),int(4),), )
paddle.vsplit(Tensor([6, 4],"int64"), tuple(int(2),int(1),int(3),), )
paddle.vsplit(Tensor([6, 4],uint8), int(3), )
paddle.vstack(list(Tensor([1, 1, 1, 1],"float64"),), )
paddle.vstack(list(Tensor([1, 1, 1, 1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), )
paddle.vstack(list(Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1, 1, 1],"float64"),), )
paddle.vstack(list(Tensor([1, 1, 1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), )
paddle.vstack(list(Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1, 1],"float64"),), )
paddle.vstack(list(Tensor([1, 1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), )
paddle.vstack(list(Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1],"float64"),), )
paddle.vstack(list(Tensor([1],"float64"),), name=None, )
paddle.vstack(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), )
paddle.vstack(list(Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),), name=None, )
paddle.vstack(list(Tensor([2],"float64"),Tensor([1, 2],"float64"),), )
paddle.vstack(list(Tensor([2],"float64"),Tensor([1, 2],"float64"),), name=None, )
paddle.vstack(list(Tensor([3, 2],"float64"),), )
paddle.vstack(list(Tensor([3, 2],"float64"),), name=None, )
paddle.vstack(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), )
paddle.vstack(list(Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),), name=None, )
paddle.vstack(list(Tensor([3, 4, 2, 5],"float64"),), )
paddle.vstack(list(Tensor([3, 4, 2, 5],"float64"),), name=None, )
paddle.vstack(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), )
paddle.vstack(list(Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),), name=None, )
paddle.vstack(list(Tensor([3, 4, 2],"float64"),), )
paddle.vstack(list(Tensor([3, 4, 2],"float64"),), name=None, )
paddle.vstack(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), )
paddle.vstack(list(Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),), name=None, )
paddle.vstack(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), )
paddle.vstack(list(Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),), name=None, )
paddle.vstack(list(Tensor([],"float16"),), )
paddle.vstack(list(Tensor([],"float16"),), name=None, )
paddle.vstack(list(Tensor([],"float32"),), )
paddle.vstack(list(Tensor([],"float32"),), name=None, )
paddle.vstack(list(Tensor([],"float64"),), )
paddle.vstack(list(Tensor([],"float64"),), name=None, )
paddle.vstack(list(Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),), )
paddle.vstack(list(Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),), name=None, )
paddle.vstack(list(Tensor([],"int32"),), )
paddle.vstack(list(Tensor([],"int32"),), name=None, )
paddle.vstack(list(Tensor([],"int64"),), )
paddle.vstack(list(Tensor([],"int64"),), name=None, )
paddle.zeros_like(Tensor([1, 128],"float32"), )
paddle.zeros_like(Tensor([10, 2],"float32"), )
paddle.zeros_like(Tensor([1025],"float32"), )
paddle.zeros_like(Tensor([10],"float32"), )
paddle.zeros_like(Tensor([1],bool), )
paddle.zeros_like(Tensor([1],"float32"), )
paddle.zeros_like(Tensor([2, 100],"int64"), )
paddle.zeros_like(Tensor([2, 2],"float32"), )
paddle.zeros_like(Tensor([2, 3, 4, 5],"float32"), )
paddle.zeros_like(Tensor([2, 3, 8, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([2, 3],"float32"), )
paddle.zeros_like(Tensor([2, 4, 2],"float32"), )
paddle.zeros_like(Tensor([2, 4, 2],"float64"), )
paddle.zeros_like(Tensor([2, 4],"float32"), )
paddle.zeros_like(Tensor([257],"float32"), )
paddle.zeros_like(Tensor([2],bool), )
paddle.zeros_like(Tensor([2],"float32"), )
paddle.zeros_like(Tensor([3, 10],"int64"), )
paddle.zeros_like(Tensor([3, 28, 28],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([3, 2],"float32"), )
paddle.zeros_like(Tensor([3, 3, 5],"float32"), )
paddle.zeros_like(Tensor([3, 3],"float32"), )
paddle.zeros_like(Tensor([3, 4, 2],"int64"), )
paddle.zeros_like(Tensor([3, 40],"float32"), )
paddle.zeros_like(Tensor([3, 4],"float64"), )
paddle.zeros_like(Tensor([3, 4],"int64"), )
paddle.zeros_like(Tensor([3, 8, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([4, 5, 6],"float32"), )
paddle.zeros_like(Tensor([5, 2],"float32"), )
paddle.zeros_like(Tensor([5, 4],"int64"), )
paddle.zeros_like(Tensor([5],"float64"), )
paddle.zeros_like(Tensor([60],"float16"), )
paddle.zeros_like(Tensor([60],"float32"), )
paddle.zeros_like(Tensor([64],"float32"), dtype=str(int32), )
paddle.zeros_like(Tensor([6],"float32"), )
paddle.zeros_like(Tensor([8, 4],bool), )
paddle.zeros_like(Tensor([8, 4],"int64"), )
paddle.zeros_like(Tensor([9],"float32"), )
paddle.zeros_like(Tensor([],"float32"), )
