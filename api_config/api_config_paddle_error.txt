paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([1],"int32"), ) 
paddle.clip(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), ) 
paddle.linalg.cholesky(Tensor([3, 3],"float64"), ) 
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), ) 
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, ) 
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), ) 
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), ) 
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, ) 
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), ) 
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", ) 
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", ) 
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", ) 
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", ) 
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", ) 
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", ) 
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", ) 
paddle.logspace(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"int32"), Tensor([],"float32"), ) 
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype="float32", ) 
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, ) 
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 
paddle.reshape(Tensor([1, 1],"float32"), Tensor([3],"int32"), ) 
paddle.reshape(Tensor([1, 2, 8, 4, 2],"float32"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([1, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([10, 20, 1],"float32"), Tensor([1],"int64"), ) 
paddle.reshape(Tensor([2, 1, 8, 4, 2],"float32"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([2, 2, 1, 32, 2],"float16"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([2, 2, 64, 32, 2],"float16"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([2, 2, 8, 8, 2],"float32"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([2, 25],"float32"), shape=list[Tensor([1],"int32"),10,], ) 
paddle.reshape(Tensor([2, 25],"float32"), shape=Tensor([3],"int32"), ) 
paddle.reshape(Tensor([2, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([2, 8, 1, 32, 2],"float16"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([2, 8, 64, 32, 2],"float16"), Tensor([4],"int64"), ) 
paddle.reshape(Tensor([3, 3, 3],"float32"), list[3,Tensor([],"int32"),3,], ) 
paddle.reshape(Tensor([4, 1],"float32"), list[Tensor([],"int64"),1,Tensor([],"int64"),], ) 
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], ) 
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), ) 
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), ) 
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), ) 
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], ) 
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), ) 
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), ) 
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), ) 
paddle.tile(Tensor([1, 4],"float32"), list[Tensor([],"int64"),1,], ) 
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), ) 
