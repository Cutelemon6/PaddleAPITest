paddle.Tensor.__add__(Tensor([1],"float32"), ., )
paddle.Tensor.__div__(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__div__(Tensor([8, 16, 32],"float32"), 2, )
paddle.Tensor.__div__(Tensor([],"float32"), 0.5, )
paddle.Tensor.__div__(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__div__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__floordiv__(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float16"), )
paddle.Tensor.__floordiv__(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.Tensor.__floordiv__(Tensor([1],"int32"), 2, )
paddle.Tensor.__floordiv__(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.Tensor.__floordiv__(Tensor([2, 2, 2],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bfloat16"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bfloat16"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bool"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bool"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float16"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float16"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float32"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float32"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float64"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float64"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int32"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int32"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int64"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int64"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int8"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int8"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"uint8"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"uint8"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([3],"int64"), Tensor([],"int64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([6],"int32"), Tensor([6],"int32"), )
paddle.Tensor.__floordiv__(Tensor([],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), Tensor([3],"int64"), )
paddle.Tensor.__floordiv__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__mod__(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"float32"), 2, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"float32"), 2.0, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"int64"), 2, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"int64"), 2.0, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float32"), 1, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float32"), 1.0, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float64"), 1, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float64"), 1.0, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int32"), 1, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int32"), 1.0, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int64"), 1, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int64"), 1.0, )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([40],"int64"), 12, )
paddle.Tensor.__mod__(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.Tensor.__mod__(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.Tensor.__mod__(Tensor([],"float32"), 0.5, )
paddle.Tensor.__mod__(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__mod__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__mod__(Tensor([],"int64"), 2, )
paddle.Tensor.__mod__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__radd__(Tensor([1],"float32"), ., )
paddle.Tensor.__rmod__(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__rtruediv__(Tensor([10, 12],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([128],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([128],"float32"), 10.0, )
paddle.Tensor.__rtruediv__(Tensor([1],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([1],"float32"), 2, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"int64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"int64"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([2, 200],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 3],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 3],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([2],"float16"), 127.0, )
paddle.Tensor.__rtruediv__(Tensor([2],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([3, 1],"float32"), 0.5, )
paddle.Tensor.__rtruediv__(Tensor([3, 3],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([3, 4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3, 5],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3, 5],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3, 6, 4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([32],"float16"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4, 1],"float16"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([4, 1],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([4, 6],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([512, 256],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([512],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([512],"float32"), 10.0, )
paddle.Tensor.__rtruediv__(Tensor([5],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([6, 1],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([6, 1],"float32"), 5.0, )
paddle.Tensor.__rtruediv__(Tensor([64],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([64],"float32"), 2.0, )
paddle.Tensor.__rtruediv__(Tensor([6],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([8],"float16"), 127.0, )
paddle.Tensor.__rtruediv__(Tensor([8],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([8],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.2230001538991928, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 0.00038662925362586975, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 0.004224982112646103, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1.2293457984924316e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1e+20, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 5.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 6.258487701416016e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 7.029622793197632e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 7.729232311248779e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 8.158385753631592e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float64"), 1, )
paddle.Tensor.__setitem__(Tensor([4, 8, 16, 32],"float32"), tuple(Tensor([],"int64"),slice(None,None,None),slice(None,None,None),2,), Tensor([8, 16],"float32"), )
paddle.Tensor.__truediv__(Tensor([0, 4],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([1, 1, 32, 32],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 1, 32, 32],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 100],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([1, 100],"float64"), 40, )
paddle.Tensor.__truediv__(Tensor([1, 10],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 120],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 120],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 16, 12, 12],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 16, 12, 12],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 17],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([1, 1888],"float64"), Tensor([1888],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 1],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 3, 3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 1, 1, 4],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 1, 3, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 1, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 3, 4],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 10],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 40],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([1, 46530],"float64"), Tensor([46530],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 4],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([1, 4],"float64"), 17, )
paddle.Tensor.__truediv__(Tensor([1, 4],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 576],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 576],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6, 16, 16],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 6, 16, 16],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 6, 32, 32],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 6, 32, 32],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 60160],"float64"), Tensor([60160],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 60672],"float64"), Tensor([60672],"float64"), )
paddle.Tensor.__truediv__(Tensor([1, 84],"float32"), 57344, )
paddle.Tensor.__truediv__(Tensor([1, 84],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 10, 10],"float64"), Tensor([10, 10, 10],"float64"), )
paddle.Tensor.__truediv__(Tensor([10, 1024],"float32"), 0.1, )
paddle.Tensor.__truediv__(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 10],"float32"), Tensor([1, 10],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 12],"float32"), Tensor([10, 12],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 12],"float64"), Tensor([10, 12],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([10, 5],"float32"), Tensor([1, 5],"float32"), )
paddle.Tensor.__truediv__(Tensor([100, 200, 100],"float64"), Tensor([100, 200, 100],"float64"), )
paddle.Tensor.__truediv__(Tensor([1000, 2, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([1000, 2, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([10000, 2, 3],"float32"), Tensor([10000, 2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([10000, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([10000, 2, 3],"float64"), Tensor([10000, 2, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([10000, 2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([100000, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([100000, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([10000],"float32"), Tensor([10000],"float32"), )
paddle.Tensor.__truediv__(Tensor([10000],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([100],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([100],"float64"), 40, )
paddle.Tensor.__truediv__(Tensor([10],"float32"), 3, )
paddle.Tensor.__truediv__(Tensor([10],"float32"), Tensor([10],"float32"), )
paddle.Tensor.__truediv__(Tensor([10],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([10],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([120, 84],"float32"), 448, )
paddle.Tensor.__truediv__(Tensor([120, 84],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 128],"float32"), 7, )
paddle.Tensor.__truediv__(Tensor([128, 128],"float32"), Tensor([128, 128],"float32"), )
paddle.Tensor.__truediv__(Tensor([13],"float32"), Tensor([13],"float32"), )
paddle.Tensor.__truediv__(Tensor([15000],"float32"), Tensor([15000],"float32"), )
paddle.Tensor.__truediv__(Tensor([16, 16, 128, 128],"float64"), 4.0, )
paddle.Tensor.__truediv__(Tensor([16, 16, 128, 128],"float64"), 5.656854249492381, )
paddle.Tensor.__truediv__(Tensor([16, 16, 512, 512],"float64"), 4.0, )
paddle.Tensor.__truediv__(Tensor([16, 16, 512, 512],"float64"), 5.656854249492381, )
paddle.Tensor.__truediv__(Tensor([16, 16, 512, 512],"float64"), 8.0, )
paddle.Tensor.__truediv__(Tensor([16, 1],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([16, 1],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([16, 6, 5, 5],"float32"), 448, )
paddle.Tensor.__truediv__(Tensor([16, 6, 5, 5],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([17],"float64"), 17, )
paddle.Tensor.__truediv__(Tensor([17],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([18],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1],"complex64"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1],"float32"), 0.001, )
paddle.Tensor.__truediv__(Tensor([1],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([1],"float32"), 2.0, )
paddle.Tensor.__truediv__(Tensor([1],"float32"), 255, )
paddle.Tensor.__truediv__(Tensor([1],"float32"), 3.141592653589793, )
paddle.Tensor.__truediv__(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([1],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([1],"float64"), 3.141592653589793, )
paddle.Tensor.__truediv__(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__truediv__(Tensor([1],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.Tensor.__truediv__(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2, 2, 2],"float32"), Tensor([2, 2, 2, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"float32"), 0.5, )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"float32"), Tensor([2, 2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"float32"), Tensor([2, 2, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"int64"), 0.5, )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"int64"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 2, 2],"int64"), 2.0, )
paddle.Tensor.__truediv__(Tensor([2, 27],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float64"), Tensor([2],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 2],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 100],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([2, 3, 100],"float64"), 40, )
paddle.Tensor.__truediv__(Tensor([2, 3, 16, 16, 16],"float32"), 8, )
paddle.Tensor.__truediv__(Tensor([2, 3, 16, 16],"float32"), 4, )
paddle.Tensor.__truediv__(Tensor([2, 3, 17],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([2, 3, 3],"float64"), 2.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 4, 5],"complex128"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 4, 5],"complex64"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.Tensor.__truediv__(Tensor([2, 3, 40],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"bfloat16"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"bfloat16"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"bfloat16"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"bool"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"bool"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"bool"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"complex128"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"complex128"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"complex128"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"complex64"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"complex64"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"complex64"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float16"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float16"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float16"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float32"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float32"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float32"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float64"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float64"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float64"), 17, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"float64"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int32"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int32"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int32"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int64"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int64"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int64"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int8"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int8"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"int8"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"uint8"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"uint8"), 1.0, )
paddle.Tensor.__truediv__(Tensor([2, 3, 4],"uint8"), complex(0.0,2.0), )
paddle.Tensor.__truediv__(Tensor([2, 3],"complex128"), Tensor([2, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"complex64"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"float32"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 3],"float32"), 5, )
paddle.Tensor.__truediv__(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"float64"), 1, )
paddle.Tensor.__truediv__(Tensor([2, 3],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 3],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 4, 2],"float32"), Tensor([2, 4, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 4, 2],"float64"), Tensor([2, 4, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 4, 8, 8],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([2, 4, 8, 8],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 4],"float64"), Tensor([2, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 5, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 5, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2, 5],"float64"), Tensor([2, 5],"float64"), )
paddle.Tensor.__truediv__(Tensor([2, 8, 7, 10],"float32"), Tensor([2, 1, 7, 10],"float32"), )
paddle.Tensor.__truediv__(Tensor([20000, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([20000, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([20],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([23, 12],"float32"), Tensor([23, 12],"float32"), )
paddle.Tensor.__truediv__(Tensor([257],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([257],"float64"), 514.0, )
paddle.Tensor.__truediv__(Tensor([2800],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([2],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.Tensor.__truediv__(Tensor([2],"int64"), Tensor([2],"int64"), )
paddle.Tensor.__truediv__(Tensor([3, 1, 2],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 1, 2],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 100],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([3, 100],"float64"), 40, )
paddle.Tensor.__truediv__(Tensor([3, 17],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([3, 18],"float32"), Tensor([3, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 1],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 1],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 2, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 2, 2, 3],"float32"), Tensor([3, 2, 2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 2, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 2, 2],"float32"), Tensor([3, 2, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 2, 3, 3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 2, 5],"float32"), Tensor([3, 2, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 3],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 4, 1],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 4, 1],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([3, 40],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([3, 4],"float32"), 2.0, )
paddle.Tensor.__truediv__(Tensor([3, 4],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([3, 4],"float64"), 17, )
paddle.Tensor.__truediv__(Tensor([3, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 4],"float64"), Tensor([3, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 4],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 5],"float32"), Tensor([3, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3, 5],"float64"), Tensor([3, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([3, 7, 2, 9],"complex128"), Tensor([3, 7, 2, 9],"complex128"), )
paddle.Tensor.__truediv__(Tensor([3, 7, 2, 9],"complex64"), Tensor([3, 7, 2, 9],"complex64"), )
paddle.Tensor.__truediv__(Tensor([30000, 2, 2],"float32"), Tensor([30000, 2, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([30000, 2, 3],"float32"), Tensor([30000, 2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([30000, 2],"float32"), Tensor([30000, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([32, 32],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([32, 32],"float32"), 3.0, )
paddle.Tensor.__truediv__(Tensor([32],"float16"), 64, )
paddle.Tensor.__truediv__(Tensor([32],"float32"), 64, )
paddle.Tensor.__truediv__(Tensor([3],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([3],"float32"), 3.141592653589793, )
paddle.Tensor.__truediv__(Tensor([3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 1],"float32"), Tensor([4, 6],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 2, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 2, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 2],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 2],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"uint8"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"uint8"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__truediv__(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__truediv__(Tensor([4, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 4],"float32"), Tensor([4, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 4],"float64"), Tensor([4, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 8, 3, 5],"float32"), Tensor([4, 8, 3, 5],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 8, 3, 5],"float64"), Tensor([4, 8, 3, 5],"float64"), )
paddle.Tensor.__truediv__(Tensor([4, 8, 3, 5],"int32"), Tensor([4, 8, 3, 5],"int32"), )
paddle.Tensor.__truediv__(Tensor([4, 8, 3, 5],"int64"), Tensor([4, 8, 3, 5],"int64"), )
paddle.Tensor.__truediv__(Tensor([40, 1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([40],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([42],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([4],"float32"), 8, )
paddle.Tensor.__truediv__(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.__truediv__(Tensor([4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([4],"float64"), 100, )
paddle.Tensor.__truediv__(Tensor([4],"float64"), 17, )
paddle.Tensor.__truediv__(Tensor([4],"float64"), 2, )
paddle.Tensor.__truediv__(Tensor([4],"float64"), 2.0, )
paddle.Tensor.__truediv__(Tensor([4],"float64"), 4, )
paddle.Tensor.__truediv__(Tensor([4],"float64"), 6, )
paddle.Tensor.__truediv__(Tensor([4],"float64"), Tensor([4],"float32"), )
paddle.Tensor.__truediv__(Tensor([4],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 3],"float64"), 6, )
paddle.Tensor.__truediv__(Tensor([5, 5],"float32"), Tensor([1, 5],"float32"), )
paddle.Tensor.__truediv__(Tensor([5, 5],"float32"), Tensor([5, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([5, 5],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 5],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([5, 6],"float32"), Tensor([5, 6],"float32"), )
paddle.Tensor.__truediv__(Tensor([5, 6],"float64"), Tensor([5, 6],"float64"), )
paddle.Tensor.__truediv__(Tensor([512],"float64"), 1, )
paddle.Tensor.__truediv__(Tensor([512],"float64"), 7, )
paddle.Tensor.__truediv__(Tensor([512],"float64"), 98, )
paddle.Tensor.__truediv__(Tensor([513],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([576, 120],"float32"), 448, )
paddle.Tensor.__truediv__(Tensor([576, 120],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([5],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([5],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.Tensor.__truediv__(Tensor([5],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([6, 1, 3, 3],"float32"), 448, )
paddle.Tensor.__truediv__(Tensor([6, 1, 3, 3],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([64, 16, 32, 128],"float32"), 3, )
paddle.Tensor.__truediv__(Tensor([64],"float32"), 128, )
paddle.Tensor.__truediv__(Tensor([6],"float32"), 255, )
paddle.Tensor.__truediv__(Tensor([6],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__truediv__(Tensor([6],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([784, 10],"float32"), Tensor([1],"float32"), )
paddle.Tensor.__truediv__(Tensor([784],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([8, 10],"complex128"), Tensor([8, 10],"complex128"), )
paddle.Tensor.__truediv__(Tensor([8, 10],"complex64"), Tensor([8, 10],"complex64"), )
paddle.Tensor.__truediv__(Tensor([8, 8],"float16"), Tensor([8, 8],"float16"), )
paddle.Tensor.__truediv__(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.Tensor.__truediv__(Tensor([8, 8],"float64"), Tensor([8, 8],"float64"), )
paddle.Tensor.__truediv__(Tensor([8, 8],"int32"), Tensor([8, 8],"int32"), )
paddle.Tensor.__truediv__(Tensor([8, 8],"int64"), Tensor([8, 8],"int64"), )
paddle.Tensor.__truediv__(Tensor([84, 10],"float32"), 448, )
paddle.Tensor.__truediv__(Tensor([84, 10],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([89],"float64"), Tensor([1],"float64"), )
paddle.Tensor.__truediv__(Tensor([8],"float32"), 100352, )
paddle.Tensor.__truediv__(Tensor([8],"float32"), 16, )
paddle.Tensor.__truediv__(Tensor([],"complex64"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([],"complex64"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([],"float32"), 0.01, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 1, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 2, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 2.0, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 255, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 2e-05, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 3, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 3.141592653589793, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 32, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 4, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 40, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 5, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 6, )
paddle.Tensor.__truediv__(Tensor([],"float32"), 784000, )
paddle.Tensor.__truediv__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__truediv__(Tensor([],"float64"), 1e-07, )
paddle.Tensor.__truediv__(Tensor([],"float64"), 2.0, )
paddle.Tensor.__truediv__(Tensor([],"float64"), 3.141592653589793, )
paddle.Tensor.__truediv__(Tensor([],"float64"), Tensor([],"float64"), )
paddle.Tensor.__truediv__(Tensor([],"int32"), Tensor([],"int64"), )
paddle.Tensor.__truediv__(Tensor([],"int64"), 5, )
paddle.Tensor.__truediv__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.coalesce(Tensor([2, 3],"float16"), )
paddle.Tensor.coalesce(Tensor([2, 3],"float32"), )
paddle.Tensor.coalesce(Tensor([2, 3],"int32"), )
paddle.Tensor.coalesce(Tensor([3, 3, 2],"int16"), )
paddle.Tensor.coalesce(Tensor([3, 3, 3],"complex64"), )
paddle.Tensor.divide(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.Tensor.expand(Tensor([1, 1, 1, 2048],"bool"), list[1,1,Tensor([],"int64"),2048,], )
paddle.Tensor.expand(Tensor([1, 1, 2048, 2048],"bool"), list[Tensor([],"int64"),1,Tensor([],"int64"),Tensor([],"int64"),], )
paddle.Tensor.expand(Tensor([1],"float32"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.expand(Tensor([1],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.is_coalesced(Tensor([2, 3],"float16"), )
paddle.Tensor.is_coalesced(Tensor([2, 3],"float32"), )
paddle.Tensor.is_coalesced(Tensor([2, 3],"int32"), )
paddle.Tensor.is_coalesced(Tensor([2, 3],"int64"), )
paddle.Tensor.is_coalesced(Tensor([2, 3],"uint8"), )
paddle.Tensor.is_coalesced(Tensor([3, 3, 2],"int16"), )
paddle.Tensor.is_coalesced(Tensor([3, 3, 3],"complex128"), )
paddle.Tensor.is_coalesced(Tensor([3, 3, 3],"complex64"), )
paddle.Tensor.is_coalesced(Tensor([3, 3],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([125, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.Tensor.mod(Tensor([1],"int64"), Tensor([],"int64"), )
paddle.Tensor.reshape(Tensor([1],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([2],"float32"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([2],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([3],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([4, 6, 16],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([5],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([],"float16"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([],"float32"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([],"int32"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.reshape(Tensor([],"int64"), tuple(Tensor([],"int64"),1,), )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), 1, )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "float32", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "float64", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "int64", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), type(numpy.float32), )
paddle.arange(Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1],"int32"), type(numpy.int32), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.assign(., Tensor([],"float32"), )
paddle.assign(.09994, Tensor([],"float32"), )
paddle.assign(.356435, Tensor([],"float32"), )
paddle.assign(.5880145, Tensor([],"float32"), )
paddle.assign(.778772, Tensor([],"float32"), )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([1],"int32"), )
paddle.clip(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([1, 1],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.divide(Tensor([10, 10],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([128, 10],"float32"), Tensor([128, 10],"float32"), )
paddle.divide(Tensor([16, 64],"float32"), Tensor([16, 64],"float32"), )
paddle.divide(Tensor([16, 64],"float64"), Tensor([16, 64],"float64"), )
paddle.divide(Tensor([1],"complex64"), Tensor([],"float32"), name="Normal_probs", )
paddle.divide(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.divide(Tensor([1],"float32"), Tensor([],"float32"), name="Normal_probs", )
paddle.divide(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 4, 5],"complex128"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 4, 5],"complex64"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.divide(Tensor([2, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.divide(Tensor([2, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([2, 3],"complex128"), Tensor([2, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"complex64"), Tensor([2, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([20, 20],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.divide(Tensor([3, 100, 120],"float64"), Tensor([3, 100, 120],"float64"), )
paddle.divide(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.divide(Tensor([3, 3],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([3, 5],"float32"), Tensor([3, 5],"float32"), )
paddle.divide(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"uint8"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"uint8"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 4],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([4, 4],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([5, 5],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([5, 5],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([64, 1, 28, 28],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.divide(Tensor([6],"float64"), Tensor([6],"float64"), )
paddle.divide(Tensor([9, 6],"float32"), Tensor([9, 6],"float32"), )
paddle.divide(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([],"float32"), Tensor([],"float32"), name="Normal_probs", )
paddle.divide(Tensor([],"float64"), Tensor([],"float64"), )
paddle.divide(x=Tensor([],"float32"), y=Tensor([],"float32"), )
paddle.einsum("...ab,...ba,...ab,...ab", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.expand_as(Tensor([10, 2, 30, 30],"float16"), Tensor([10, 2, 30, 30],"float16"), )
paddle.floor_divide(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.floor_divide(Tensor([1],"bfloat16"), Tensor([3],"bfloat16"), )
paddle.floor_divide(Tensor([1],"float16"), Tensor([3],"float16"), )
paddle.floor_divide(Tensor([1],"float32"), Tensor([3],"float32"), )
paddle.floor_divide(Tensor([1],"float64"), Tensor([3],"float64"), )
paddle.floor_divide(Tensor([3],"int64"), Tensor([],"int64"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4],"bfloat16"), Tensor([4],"bfloat16"), )
paddle.floor_divide(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.floor_divide(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.floor_divide(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.floor_divide(Tensor([4],"int16"), Tensor([4],"int16"), )
paddle.floor_divide(Tensor([4],"int32"), Tensor([4],"int32"), )
paddle.floor_divide(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.floor_divide(Tensor([4],"int8"), Tensor([4],"int8"), )
paddle.floor_divide(Tensor([4],"uint8"), Tensor([4],"uint8"), )
paddle.floor_divide(Tensor([8, 4],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([],"int64"), Tensor([3],"int64"), )
paddle.floor_divide(Tensor([],"int64"), Tensor([],"int64"), )
paddle.floor_mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, Tensor([2, 8, 1, 65],"float16"), 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, Tensor([2, 8, 1, 65],"float16"), 1, 64, False, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([32, 256],"float16"), Tensor([256],"float16"), Tensor([256],"float16"), 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([32, 256],"float16"), Tensor([256],"float16"), Tensor([256],"float16"), 1e-06, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([32, 256],"float16"), )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([32, 256],"float16"), Tensor([256],"float16"), Tensor([256],"float16"), 1e-06, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([32, 256],"float16"), quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([32, 256],"float16"), Tensor([256],"float16"), Tensor([256],"float16"), 1e-06, begin_norm_axis=1, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([32, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([32, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-06, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([32, 256],"float32"), )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), None, Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), None, Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), None, Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), None, None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), None, None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), None, None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), None, Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), None, Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), None, Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 4, 8],"float32"), None, Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 4, 8],"float32"), None, Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 4, 8],"float32"), None, Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), None, Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), None, Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), None, Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), None, None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), None, None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), None, None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), None, Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), None, Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), None, Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), None, Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 4, 8],"float32"), None, Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 4, 8],"float32"), None, Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 4, 8],"float32"), None, Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), None, Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 2, 64, 16],"float32"), Tensor([1, 2, 64, 16],"float32"), Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1, 1, 64, 64],"float32"), 0.25, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 2, 64, 32],"float16"), Tensor([3, 2, 64, 32],"float16"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([3, 1, 64, 64],"float16"), 0.17677669529663687, )
paddle.index_add(Tensor([10, 10],"float32"), Tensor([4],"int32"), -1, Tensor([10, 4],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float64"), Tensor([20],"int64"), 0, Tensor([20, 5],"float64"), )
paddle.index_add(Tensor([101, 3],"float16"), Tensor([3],"int64"), 0, Tensor([3, 3],"float16"), )
paddle.index_add(Tensor([101, 3],"float32"), Tensor([3],"int64"), 0, Tensor([3, 3],"float32"), )
paddle.index_add(Tensor([101, 3],"float64"), Tensor([3],"int64"), 0, Tensor([3, 3],"float64"), )
paddle.index_add(Tensor([10],"float32"), Tensor([4],"int32"), 0, Tensor([4],"float32"), )
paddle.index_add(Tensor([4, 3, 2],"float32"), Tensor([16],"int64"), 1, Tensor([4, 16, 2],"float32"), )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), False, )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), True, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), False, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), True, )
paddle.index_put(Tensor([100, 110],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), False, )
paddle.index_put(Tensor([100, 110],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), True, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([100, 110],"int32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int32"), False, )
paddle.index_put(Tensor([100, 110],"int32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int32"), True, )
paddle.index_put(Tensor([100, 110],"int64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int64"), False, )
paddle.index_put(Tensor([100, 110],"int64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int64"), True, )
paddle.index_put(Tensor([110, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110, 94],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110, 94],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110],"bool"),), Tensor([55, 94],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110],"bool"),), Tensor([55, 94],"float64"), True, )
paddle.index_put(Tensor([128],"int64"), tuple(Tensor([28],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([128],"int64"), tuple(Tensor([30],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([128],"int64"), tuple(Tensor([38],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([15, 10, 10],"bool"), tuple(Tensor([5],"int32"),), Tensor([],"bool"), )
paddle.index_put(Tensor([15, 10, 10],"float16"), tuple(Tensor([5],"int64"),), Tensor([],"float16"), )
paddle.index_put(Tensor([15, 10, 10],"int64"), tuple(Tensor([5],"int32"),), Tensor([],"int64"), )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([16, 21],"bool"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([16, 21],"bool"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([4],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([4],"float64"), True, )
paddle.index_put(Tensor([20, 40],"float64"), tuple(Tensor([5],"int64"),), Tensor([],"float64"), )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([44],"bool"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([44],"bool"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([44],"bool"),), Tensor([94],"float64"), False, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([44],"bool"),), Tensor([94],"float64"), True, )
paddle.index_put(Tensor([4],"int64"), tuple(Tensor([4],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([8],"int64"), tuple(Tensor([5],"int64"),), Tensor([],"int64"), )
paddle.index_sample(Tensor([1, 32000],"float16"), Tensor([1, 1],"int64"), )
paddle.index_sample(Tensor([3, 10000],"float32"), Tensor([3, 1],"int64"), )
paddle.index_sample(Tensor([300, 4096],"float32"), Tensor([300, 2048],"int64"), )
paddle.linalg.cholesky(Tensor([2, 2],"float64"), )
paddle.linalg.cholesky(Tensor([3, 3],"float64"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.eigh(Tensor([0, 0],"float32"), )
paddle.linalg.eigh(Tensor([0, 5, 5],"float32"), )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 3],"float32"), Tensor([4, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 3],"float64"), Tensor([4, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float64"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 5],"float32"), Tensor([5],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 5],"float64"), Tensor([5],"int32"), )
paddle.matmul(x=Tensor([3, 2, 2, 5],"float64"), y=Tensor([5],"float64"), transpose_x=False, transpose_y=True, )
paddle.matrix_transpose(Tensor([],"float32"), )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.mod(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.mod(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.mod(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.mod(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.mod(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.mod(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([6],"int32"), Tensor([6],"int32"), )
paddle.mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.mod(Tensor([],"int64"), Tensor([],"int64"), )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([5],"float32"), )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 5],"float64"), Tensor([3, 2, 2, 5],"float64"), soft_label=True, axis=-1, weight=Tensor([5],"float64"), reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 5],"float64"), Tensor([3, 2, 2, 5],"float64"), soft_label=True, label_smoothing=0.18833946207874966, axis=-1, weight=Tensor([5],"float64"), reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 5],"float64"), Tensor([3, 2, 2],"int64"), soft_label=True, label_smoothing=0.20326138379662173, axis=-1, weight=Tensor([5],"float64"), reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([3, 3, 15],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int64"), Tensor([3],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([4, 4, 34],"float32"), Tensor([4, 4],"int32"), Tensor([4],"int64"), Tensor([4],"int64"), blank=33, reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([4, 4, 34],"float32"), Tensor([4, 4],"int32"), Tensor([4],"int64"), Tensor([4],"int64"), blank=33, reduction="sum", )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), Tensor([5, 1],"float64"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), True, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=list[Tensor([],"float32"),Tensor([],"float32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list[Tensor([],"int32"),Tensor([],"int32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.kl_div(Tensor([40, 20, 50],"float32"), Tensor([40, 20, 50],"float32"), "batchmean", False, )
paddle.nn.functional.kl_div(Tensor([40, 20, 50],"float32"), Tensor([40, 20, 50],"float32"), "batchmean", True, )
paddle.nn.functional.kl_div(Tensor([40, 20, 50],"float32"), Tensor([40, 20, 50],"float32"), "none", False, )
paddle.nn.functional.kl_div(input=Tensor([32, 128, 128],"float32"), label=Tensor([32, 128, 128],"float32"), reduction="batchmean", )
paddle.nn.functional.linear(x=Tensor([1, 10],"float16"), weight=Tensor([10, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 10],"float16"), weight=Tensor([10, 1],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 10],"float32"), weight=Tensor([10, 10],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 5],"float32"), weight=Tensor([5, 5],"float16"), bias=Tensor([5],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 96],"float32"), weight=Tensor([96, 4],"float16"), bias=Tensor([4],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 10],"float16"), weight=Tensor([10, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([100, 1000],"float32"), weight=Tensor([1000, 1000],"float16"), bias=Tensor([1000],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([100, 1024],"float32"), weight=Tensor([1024, 1024],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([100, 1024],"float32"), weight=Tensor([1024, 1024],"float16"), bias=Tensor([1024],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 2048],"float16"), weight=Tensor([2048, 102],"float32"), bias=Tensor([102],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 2],"float32"), weight=Tensor([2, 2],"float16"), bias=Tensor([2],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 2],"float32"), weight=Tensor([2, 4],"float16"), bias=Tensor([4],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 1000],"float32"), weight=Tensor([1000, 1000],"float16"), bias=Tensor([1000],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 5],"float32"), weight=Tensor([5, 5],"float16"), bias=Tensor([5],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 2048],"float16"), weight=Tensor([2048, 102],"float32"), bias=Tensor([102],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 4096],"float16"), weight=Tensor([4096, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([1, 10],"float32"),), weight=Tensor([10, 10],"float16"), bias=None, name=None, )
paddle.nn.functional.one_hot(Tensor([11, 1],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([11, 1],"int32"), Tensor([],"int32"), )
paddle.nn.functional.one_hot(Tensor([11],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([11],"int32"), Tensor([],"int32"), )
paddle.nn.functional.one_hot(Tensor([128, 1],"int64"), 10000, )
paddle.nn.functional.one_hot(Tensor([1],"int64"), num_classes=1000, )
paddle.nn.functional.one_hot(Tensor([2, 1],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([3, 2, 2],"int64"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 1],"int64"), 4, )
paddle.nn.functional.one_hot(Tensor([4, 1],"int64"), Tensor([1],"int64"), )
paddle.nn.functional.one_hot(Tensor([4],"int64"), 3, )
paddle.nn.functional.one_hot(Tensor([5, 10, 7, 3],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([5, 10, 7, 3],"int32"), Tensor([],"int32"), )
paddle.nn.functional.one_hot(Tensor([50, 10, 70, 30],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([6, 1],"int64"), 10, )
paddle.nn.functional.one_hot(Tensor([],"int64"), num_classes=4, )
paddle.nn.functional.one_hot(x=Tensor([6, 1],"int64"), num_classes=10, )
paddle.nn.functional.pad(Tensor([4, 3, 224, 224],"int64"), pad=list[2,2,4,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int64"), pad=list[1,2,3,4,5,6,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int64"), pad=tuple(1,2,3,4,5,6,), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int64"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int64"), pad=tuple(1,2,), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=Tensor([],"int64"), dtype="float32", )
paddle.nn.functional.upsample(x=Tensor([2, 3, 6, 6],"float32"), size=list[Tensor([],"int32"),Tensor([],"int32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), list[1,2,3,4,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), list[2,2,4,1,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), tuple(1,2,3,4,), )
paddle.nn.quant.weight_only_linear(Tensor([1, 1, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 1, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 128],"float16"), Tensor([288, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.normal(0.0, 1.0, list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.outer(Tensor([5, 10, 10],"int32"), Tensor([2, 10],"int32"), )
paddle.outer(Tensor([5, 10, 10],"int64"), Tensor([2, 10],"int64"), )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.remainder(Tensor([1, 1, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 1, 5],"int32"), Tensor([2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 1, 5],"int64"), Tensor([2, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int64"), Tensor([1, 2, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float32"), Tensor([2, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float64"), Tensor([2, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"int32"), Tensor([2, 1, 4, 1],"int32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"int64"), Tensor([2, 1, 4, 1],"int64"), )
paddle.remainder(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.remainder(Tensor([2, 1, 4, 1],"float32"), Tensor([1, 3, 1, 5],"float32"), )
paddle.remainder(Tensor([2, 1, 4, 1],"float64"), Tensor([1, 3, 1, 5],"float64"), )
paddle.remainder(Tensor([2, 1, 4, 1],"int32"), Tensor([1, 3, 1, 5],"int32"), )
paddle.remainder(Tensor([2, 1, 4, 1],"int64"), Tensor([1, 3, 1, 5],"int64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float32"), Tensor([1, 1, 5],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float64"), Tensor([1, 1, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"int32"), Tensor([1, 1, 5],"int32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"int64"), Tensor([1, 1, 5],"int64"), )
paddle.remainder(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.remainder(Tensor([4],"int64"), Tensor([4],"int64"), None, )
paddle.remainder(Tensor([8, 4],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.remainder(Tensor([],"float32"), Tensor([],"float32"), )
paddle.reshape(Tensor([1, 1],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([1, 2, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 8, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 25],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([2, 25],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([2, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([3, 3, 3],"float32"), list[3,Tensor([],"int32"),3,], )
paddle.reshape(Tensor([4, 1],"float32"), list[Tensor([],"int64"),1,Tensor([],"int64"),], )
paddle.signal.istft(Tensor([257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.sparse.divide(Tensor([3, 7, 2, 9],"complex128"), Tensor([3, 7, 2, 9],"complex128"), )
paddle.sparse.divide(Tensor([3, 7, 2, 9],"complex64"), Tensor([3, 7, 2, 9],"complex64"), )
paddle.sparse.divide(Tensor([4, 8, 3, 5],"float32"), Tensor([4, 8, 3, 5],"float32"), )
paddle.sparse.divide(Tensor([4, 8, 3, 5],"float64"), Tensor([4, 8, 3, 5],"float64"), )
paddle.sparse.divide(Tensor([4, 8, 3, 5],"int32"), Tensor([4, 8, 3, 5],"int32"), )
paddle.sparse.divide(Tensor([4, 8, 3, 5],"int64"), Tensor([4, 8, 3, 5],"int64"), )
paddle.sparse.divide(Tensor([8, 10],"complex128"), Tensor([8, 10],"complex128"), )
paddle.sparse.divide(Tensor([8, 10],"complex64"), Tensor([8, 10],"complex64"), )
paddle.sparse.divide(Tensor([8, 16, 32],"float32"), 2, )
paddle.sparse.divide(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.sparse.divide(Tensor([8, 8],"float64"), Tensor([8, 8],"float64"), )
paddle.sparse.divide(Tensor([8, 8],"int32"), Tensor([8, 8],"int32"), )
paddle.sparse.divide(Tensor([8, 8],"int64"), Tensor([8, 8],"int64"), )
paddle.split(Tensor([3, 8, 5],"float64"), num_or_sections=2, axis=Tensor([1],"int64"), )
paddle.split(Tensor([4, 6, 6],"int32"), num_or_sections=list[2,2,2,], axis=Tensor([1],"int32"), )
paddle.strided_slice(Tensor([5, 5, 5],"float32"), list[1,2,], list[Tensor([],"int32"),Tensor([],"int32"),], list[Tensor([],"int32"),Tensor([],"int32"),], list[Tensor([],"int32"),Tensor([],"int32"),], )
paddle.take_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"float32"), 0, )
paddle.take_along_axis(Tensor([3, 3],"float32"), Tensor([1, 3],"float32"), 0, )
paddle.tensordot(Tensor([0, 0, 5, 5],"float32"), Tensor([0, 0, 5, 5],"float32"), list[list[],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[],list[],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([5, 0, 5, 0],"float32"), Tensor([5, 0, 5, 0],"float32"), list[list[],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[],list[],], )
paddle.tile(Tensor([1, 4],"float32"), list[Tensor([],"int64"),1,], )
paddle.topk(Tensor([13, 11],"float64"), k=Tensor([1],"int64"), )
paddle.topk(Tensor([6, 7, 8],"float64"), k=Tensor([1],"int64"), axis=1, )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.vision.ops.psroi_pool(Tensor([2, 128, 32, 32],"float32"), Tensor([4, 4],"float32"), Tensor([2],"int32"), 8, 1.1, )
paddle.vision.ops.psroi_pool(Tensor([2, 128, 32, 32],"float64"), Tensor([4, 4],"float64"), Tensor([2],"int32"), 8, 1.1, )
paddle.vision.ops.psroi_pool(Tensor([2, 490, 28, 28],"float32"), Tensor([3, 4],"float32"), Tensor([2],"int32"), 7, )
paddle.vision.ops.psroi_pool(Tensor([2, 490, 28, 28],"float32"), Tensor([3, 4],"float32"), Tensor([2],"int32"), tuple(7,7,), )
paddle.vision.ops.psroi_pool(Tensor([2, 490, 28, 28],"float64"), Tensor([3, 4],"float64"), Tensor([2],"int32"), tuple(7,7,), )
paddle.vision.ops.psroi_pool(Tensor([3, 12, 6, 4],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.yolo_box(Tensor([2, 14, 8, 8],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_box(Tensor([2, 16, 8, 8],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, iou_aware=True, iou_aware_factor=0.5, )
paddle.vision.ops.yolo_loss(Tensor([2, 14, 8, 8],"float32"), gt_box=Tensor([2, 10, 4],"float32"), gt_label=Tensor([2, 10],"int32"), anchors=list[10,13,16,30,], anchor_mask=list[0,1,], class_num=2, ignore_thresh=0.7, downsample_ratio=8, use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=None, use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([3, 5],"float64"), use_label_smooth=False, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([3, 5],"float64"), use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([3, 5],"float64"), use_label_smooth=True, scale_x_y=1.2, )
paddle.vision.ops.yolo_loss(x=Tensor([4, 255, 19, 19],"float32"), gt_box=Tensor([4, 1, 4],"float32"), gt_label=Tensor([4, 1],"int32"), gt_score=Tensor([4, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[6,7,8,], class_num=80, ignore_thresh=0.7, downsample_ratio=32, use_label_smooth=True, )
paddle.vision.ops.yolo_loss(x=Tensor([4, 255, 38, 38],"float32"), gt_box=Tensor([4, 1, 4],"float32"), gt_label=Tensor([4, 1],"int32"), gt_score=Tensor([4, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[3,4,5,], class_num=80, ignore_thresh=0.7, downsample_ratio=16, use_label_smooth=True, )
paddle.vision.ops.yolo_loss(x=Tensor([4, 255, 76, 76],"float32"), gt_box=Tensor([4, 1, 4],"float32"), gt_label=Tensor([4, 1],"int32"), gt_score=Tensor([4, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=80, ignore_thresh=0.7, downsample_ratio=8, use_label_smooth=True, )
paddle.where(Tensor([64],"bool"), )
paddle.where(Tensor([64],"int32"), )