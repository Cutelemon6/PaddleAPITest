paddle.Tensor.__sub__(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.Tensor.astype(Tensor([1, 1, 32, 32],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 120],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 16, 12, 12],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 2],"float8_e4m3fn"), "float32", )
paddle.Tensor.astype(Tensor([1, 2],"float8_e5m2"), "float32", )
paddle.Tensor.astype(Tensor([1, 576],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 6, 16, 16],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 6, 32, 32],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([1, 84],"float8_e5m2"), Dtype(float32), )
paddle.Tensor.astype(Tensor([120, 84],"float8_e4m3fn"), Dtype(float32), )
paddle.Tensor.astype(Tensor([16, 16],"float32"), "float8_e4m3fn", )
paddle.Tensor.astype(Tensor([16, 16],"float32"), "float8_e5m2", )
paddle.Tensor.astype(Tensor([16, 16],"float8_e4m3fn"), "float32", )
paddle.Tensor.astype(Tensor([16, 16],"float8_e5m2"), "float32", )
paddle.Tensor.astype(Tensor([16, 6, 5, 5],"float8_e4m3fn"), Dtype(float32), )
paddle.Tensor.astype(Tensor([576, 120],"float8_e4m3fn"), Dtype(float32), )
paddle.Tensor.astype(Tensor([6, 1, 3, 3],"float8_e4m3fn"), Dtype(float32), )
paddle.Tensor.astype(Tensor([84, 10],"float8_e4m3fn"), Dtype(float32), )
paddle.cast(Tensor([1, 84],"float32"), "float8_e5m2", )
paddle.cast(Tensor([1, 6, 32, 32],"float32"), "float8_e5m2", )
paddle.cast(Tensor([1, 6, 16, 16],"float32"), "float8_e5m2", )
paddle.cast(Tensor([1, 576],"float32"), "float8_e5m2", )
paddle.cast(Tensor([1, 16, 12, 12],"float32"), "float8_e5m2", )
paddle.cast(Tensor([1, 120],"float32"), "float8_e5m2", )
paddle.cast(Tensor([1, 1, 32, 32],"float32"), "float8_e5m2", )
paddle.cast(Tensor([120, 84],"float32"), "float8_e4m3fn", )
paddle.cast(Tensor([16, 6, 5, 5],"float32"), "float8_e4m3fn", )
paddle.cast(Tensor([84, 10],"float32"), "float8_e4m3fn", )
paddle.cast(Tensor([6, 1, 3, 3],"float32"), "float8_e4m3fn", )
paddle.cast(Tensor([576, 120],"float32"), "float8_e4m3fn", )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=None, residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, quant_scale=127, quant_round_type=0, quant_max_bound=127, quant_min_bound=-128)
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), None, Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, quant_scale=127, quant_round_type=0, quant_max_bound=127, quant_min_bound=-128)
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, quant_scale=127, quant_round_type=0, quant_max_bound=127, quant_min_bound=-128)