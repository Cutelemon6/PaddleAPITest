paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 10, 10],"float16"), offset=Tensor([12, 18, 10, 10],"float16"), weight=Tensor([512, 512, 3, 3],"float16"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 20, 20],"float16"), offset=Tensor([12, 18, 10, 10],"float16"), weight=Tensor([512, 512, 3, 3],"float16"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 136],"float16"), offset=Tensor([20, 18, 76, 136],"float16"), weight=Tensor([64, 128, 3, 3],"float16"), bias=Tensor([64],"float16"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 256, 38, 68],"float16"), offset=Tensor([20, 18, 38, 68],"float16"), weight=Tensor([128, 256, 3, 3],"float16"), bias=Tensor([128],"float16"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 512, 19, 34],"float16"), offset=Tensor([20, 18, 19, 34],"float16"), weight=Tensor([256, 512, 3, 3],"float16"), bias=Tensor([256],"float16"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 19, 34],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 100, 100],"float16"), offset=Tensor([6, 36, 100, 100],"float16"), weight=Tensor([128, 128, 3, 3],"float16"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 200, 200],"float16"), offset=Tensor([6, 36, 100, 100],"float16"), weight=Tensor([128, 128, 3, 3],"float16"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 256, 100, 100],"float16"), offset=Tensor([6, 36, 50, 50],"float16"), weight=Tensor([256, 256, 3, 3],"float16"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 256, 50, 50],"float16"), offset=Tensor([6, 36, 50, 50],"float16"), weight=Tensor([256, 256, 3, 3],"float16"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 512, 25, 25],"float16"), offset=Tensor([6, 36, 25, 25],"float16"), weight=Tensor([512, 512, 3, 3],"float16"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 512, 50, 50],"float16"), offset=Tensor([6, 36, 25, 25],"float16"), weight=Tensor([512, 512, 3, 3],"float16"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 64, 16, 16],"float16"), offset=Tensor([64, 144, 16, 16],"float16"), weight=Tensor([64, 64, 3, 3],"float16"), bias=Tensor([64],"float16"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 16, 16],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 64, 32, 32],"float16"), offset=Tensor([64, 144, 32, 32],"float16"), weight=Tensor([64, 64, 3, 3],"float16"), bias=Tensor([64],"float16"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 32, 32],"float16"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 64, 64, 64],"float16"), offset=Tensor([64, 144, 64, 64],"float16"), weight=Tensor([64, 64, 3, 3],"float16"), bias=Tensor([64],"float16"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 64, 64],"float16"), )
paddle.vision.ops.distribute_fpn_proposals(fpn_rois=Tensor([10, 4],"float32"), min_level=2, max_level=5, refer_level=4, refer_scale=224, rois_num=Tensor([2],"int32"), )