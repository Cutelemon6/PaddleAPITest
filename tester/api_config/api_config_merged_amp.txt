paddle.matmul(Tensor([16, 16, 1024, 1024],"float32"), Tensor([16, 16, 1024, 64],"float16"), )
paddle.matmul(Tensor([2, 1, 114, 114],"bfloat16"), Tensor([2, 1, 114, 64],"bfloat16"), )
paddle.matmul(Tensor([2, 1, 114, 64],"bfloat16"), Tensor([2, 1, 64, 114],"bfloat16"), )
paddle.matmul(Tensor([2, 8, 302, 302],"bfloat16"), Tensor([2, 8, 302, 96],"bfloat16"), )
paddle.matmul(Tensor([2, 8, 302, 96],"bfloat16"), Tensor([2, 8, 96, 302],"bfloat16"), )
paddle.matmul(Tensor([32, 16, 128, 128],"float32"), Tensor([32, 16, 128, 64],"float16"), )
paddle.matmul(Tensor([32, 256],"float32"), Tensor([768, 256],"float16"), transpose_y=True, )
paddle.matmul(Tensor([32, 606],"float32"), Tensor([768, 606],"float16"), transpose_y=True, )
paddle.matmul(Tensor([64, 146],"float32"), Tensor([768, 146],"float16"), transpose_y=True, )
paddle.matmul(Tensor([64, 256],"float32"), Tensor([768, 256],"float16"), transpose_y=True, )
paddle.matmul(Tensor([7, 16, 128, 128],"float32"), Tensor([7, 16, 128, 64],"float16"), )
paddle.concat(list[Tensor([6, 1, 512, 512],"float32"),Tensor([6, 1, 512, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([3, 1, 512, 512],"float32"),Tensor([3, 1, 512, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 1, 512, 512],"float32"),Tensor([8, 1, 512, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 2, 8],"bfloat16"),Tensor([1, 1024, 2, 8],"bfloat16"),], axis=-1, )
paddle.concat(list[Tensor([1, 1024, 32, 64],"bfloat16"),Tensor([1, 1024, 32, 64],"bfloat16"),], axis=-1, )
paddle.concat(list[Tensor([1, 1024, 8, 48],"bfloat16"),Tensor([1, 1024, 8, 48],"bfloat16"),], axis=-1, )
paddle.concat(list[Tensor([1, 1024, 8, 8],"bfloat16"),Tensor([1, 1024, 8, 8],"bfloat16"),], axis=-1, )
paddle.concat(list[Tensor([1, 256, 128, 128],"float32"),Tensor([1, 48, 128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 64, 64],"float16"),Tensor([1, 256, 64, 64],"float16"),Tensor([1, 256, 64, 64],"float16"),Tensor([1, 256, 64, 64],"float16"),Tensor([1, 256, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([100],"bfloat16"),Tensor([100],"bfloat16"),], )
paddle.concat(list[Tensor([12, 128, 76, 136],"float32"),Tensor([12, 256, 76, 136],"float16"),], axis=1, )
paddle.concat(list[Tensor([12, 256, 38, 68],"float32"),Tensor([12, 512, 38, 68],"float16"),], axis=1, )
paddle.concat(list[Tensor([12, 256, 40, 40],"float32"),Tensor([12, 512, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([12, 512, 20, 20],"float32"),Tensor([12, 1024, 20, 20],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 1024, 40, 40],"float16"),Tensor([16, 192, 40, 40],"float32"),Tensor([16, 192, 40, 40],"float32"),Tensor([16, 192, 40, 40],"float32"),Tensor([16, 192, 40, 40],"float32"),Tensor([16, 192, 40, 40],"float32"),Tensor([16, 192, 40, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 128, 80, 80],"float32"),Tensor([16, 96, 80, 80],"float16"),Tensor([16, 96, 80, 80],"float16"),Tensor([16, 96, 80, 80],"float16"),Tensor([16, 96, 80, 80],"float16"),Tensor([16, 96, 80, 80],"float16"),Tensor([16, 96, 80, 80],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 20, 20],"float16"),Tensor([16, 192, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 22, 22],"float16"),Tensor([16, 192, 22, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 24, 24],"float16"),Tensor([16, 192, 24, 24],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 26, 26],"float16"),Tensor([16, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 28, 28],"float16"),Tensor([16, 192, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 30, 30],"float16"),Tensor([16, 192, 30, 30],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 32, 32],"float16"),Tensor([16, 192, 32, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 34, 34],"float16"),Tensor([16, 192, 34, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 36, 36],"float16"),Tensor([16, 192, 36, 36],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 38, 38],"float16"),Tensor([16, 192, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 40, 40],"float16"),Tensor([16, 192, 40, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 40, 40],"float32"),Tensor([16, 256, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 42, 42],"float16"),Tensor([16, 192, 42, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 44, 44],"float16"),Tensor([16, 192, 44, 44],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 44, 44],"float32"),Tensor([16, 256, 44, 44],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 46, 46],"float16"),Tensor([16, 192, 46, 46],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 48, 48],"float16"),Tensor([16, 192, 48, 48],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 48, 48],"float32"),Tensor([16, 256, 48, 48],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 52, 52],"float32"),Tensor([16, 256, 52, 52],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 56, 56],"float32"),Tensor([16, 256, 56, 56],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 60, 60],"float32"),Tensor([16, 256, 60, 60],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 64, 64],"float32"),Tensor([16, 256, 64, 64],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 68, 68],"float32"),Tensor([16, 256, 68, 68],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 72, 72],"float32"),Tensor([16, 256, 72, 72],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 76, 76],"float32"),Tensor([16, 256, 76, 76],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 80, 80],"float32"),Tensor([16, 256, 80, 80],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 84, 84],"float32"),Tensor([16, 256, 84, 84],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 88, 88],"float32"),Tensor([16, 256, 88, 88],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 92, 92],"float32"),Tensor([16, 256, 92, 92],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 192, 96, 96],"float32"),Tensor([16, 256, 96, 96],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 256, 40, 40],"float32"),Tensor([16, 256, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 256, 80, 80],"float32"),Tensor([16, 256, 80, 80],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 10, 10],"float16"),Tensor([16, 384, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 11, 11],"float16"),Tensor([16, 384, 11, 11],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 12, 12],"float16"),Tensor([16, 384, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 13, 13],"float16"),Tensor([16, 384, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 14, 14],"float16"),Tensor([16, 384, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 15, 15],"float16"),Tensor([16, 384, 15, 15],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 16, 16],"float16"),Tensor([16, 384, 16, 16],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 17, 17],"float16"),Tensor([16, 384, 17, 17],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 18, 18],"float16"),Tensor([16, 384, 18, 18],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 19, 19],"float16"),Tensor([16, 384, 19, 19],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 20, 20],"float16"),Tensor([16, 384, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 20, 20],"float32"),Tensor([16, 512, 20, 20],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 21, 21],"float16"),Tensor([16, 384, 21, 21],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 22, 22],"float16"),Tensor([16, 384, 22, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 22, 22],"float32"),Tensor([16, 512, 22, 22],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 23, 23],"float16"),Tensor([16, 384, 23, 23],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 24, 24],"float16"),Tensor([16, 384, 24, 24],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 24, 24],"float32"),Tensor([16, 512, 24, 24],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 26, 26],"float32"),Tensor([16, 512, 26, 26],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 28, 28],"float32"),Tensor([16, 512, 28, 28],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 30, 30],"float32"),Tensor([16, 512, 30, 30],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 32, 32],"float32"),Tensor([16, 512, 32, 32],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 34, 34],"float32"),Tensor([16, 512, 34, 34],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 36, 36],"float32"),Tensor([16, 512, 36, 36],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 38, 38],"float32"),Tensor([16, 512, 38, 38],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 40, 40],"float32"),Tensor([16, 512, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 42, 42],"float32"),Tensor([16, 512, 42, 42],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 44, 44],"float32"),Tensor([16, 512, 44, 44],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 46, 46],"float32"),Tensor([16, 512, 46, 46],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 384, 48, 48],"float32"),Tensor([16, 512, 48, 48],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 104, 104],"float16"),Tensor([16, 48, 104, 104],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 112, 112],"float16"),Tensor([16, 48, 112, 112],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 120, 120],"float16"),Tensor([16, 48, 120, 120],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 128, 128],"float16"),Tensor([16, 48, 128, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 136, 136],"float16"),Tensor([16, 48, 136, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 144, 144],"float16"),Tensor([16, 48, 144, 144],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 152, 152],"float16"),Tensor([16, 48, 152, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 160, 160],"float16"),Tensor([16, 48, 160, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 168, 168],"float16"),Tensor([16, 48, 168, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 176, 176],"float16"),Tensor([16, 48, 176, 176],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 184, 184],"float16"),Tensor([16, 48, 184, 184],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 192, 192],"float16"),Tensor([16, 48, 192, 192],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 80, 80],"float16"),Tensor([16, 48, 80, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 88, 88],"float16"),Tensor([16, 48, 88, 88],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 48, 96, 96],"float16"),Tensor([16, 48, 96, 96],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 512, 40, 40],"float32"),Tensor([16, 512, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 64, 160, 160],"float32"),Tensor([16, 64, 160, 160],"float32"),Tensor([16, 64, 160, 160],"float32"),Tensor([16, 64, 160, 160],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 40, 40],"float16"),Tensor([16, 96, 40, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 44, 44],"float16"),Tensor([16, 96, 44, 44],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 48, 48],"float16"),Tensor([16, 96, 48, 48],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 52, 52],"float16"),Tensor([16, 96, 52, 52],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 56, 56],"float16"),Tensor([16, 96, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 60, 60],"float16"),Tensor([16, 96, 60, 60],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 64, 64],"float16"),Tensor([16, 96, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 68, 68],"float16"),Tensor([16, 96, 68, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 72, 72],"float16"),Tensor([16, 96, 72, 72],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 76, 76],"float16"),Tensor([16, 96, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 80, 80],"float16"),Tensor([16, 96, 80, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 84, 84],"float16"),Tensor([16, 96, 84, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 88, 88],"float16"),Tensor([16, 96, 88, 88],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 92, 92],"float16"),Tensor([16, 96, 92, 92],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 96, 96, 96],"float16"),Tensor([16, 96, 96, 96],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 128, 128],"float32"),Tensor([2, 48, 128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 64, 64],"float16"),Tensor([2, 256, 64, 64],"float16"),Tensor([2, 256, 64, 64],"float16"),Tensor([2, 256, 64, 64],"float16"),Tensor([2, 256, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 302, 8, 48],"bfloat16"),Tensor([2, 302, 8, 48],"bfloat16"),], axis=-1, )
paddle.concat(list[Tensor([4, 1, 640, 640],"float16"),Tensor([4, 64, 640, 640],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 248, 216],"float16"),Tensor([4, 128, 248, 216],"float16"),Tensor([4, 128, 248, 216],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 256, 256],"float16"),Tensor([4, 128, 256, 256],"float32"),Tensor([4, 128, 256, 256],"float32"),Tensor([4, 128, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([4, 128, 32, 32],"float16"),Tensor([4, 32, 32, 32],"float32"),Tensor([4, 32, 32, 32],"float32"),Tensor([4, 32, 32, 32],"float32"),Tensor([4, 32, 32, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 136],"float16"),Tensor([4, 2, 100, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 140],"float16"),Tensor([4, 2, 100, 140],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 144],"float16"),Tensor([4, 2, 100, 144],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 148],"float16"),Tensor([4, 2, 100, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 152],"float16"),Tensor([4, 2, 100, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 156],"float16"),Tensor([4, 2, 100, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 160],"float16"),Tensor([4, 2, 100, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 164],"float16"),Tensor([4, 2, 100, 164],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 100, 168],"float16"),Tensor([4, 2, 100, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 104, 136],"float16"),Tensor([4, 2, 104, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 104, 152],"float16"),Tensor([4, 2, 104, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 104, 164],"float16"),Tensor([4, 2, 104, 164],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 104, 168],"float16"),Tensor([4, 2, 104, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 108, 148],"float16"),Tensor([4, 2, 108, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 108, 152],"float16"),Tensor([4, 2, 108, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 108, 156],"float16"),Tensor([4, 2, 108, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 112, 152],"float16"),Tensor([4, 2, 112, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 116, 152],"float16"),Tensor([4, 2, 116, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 116, 160],"float16"),Tensor([4, 2, 116, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 120, 152],"float16"),Tensor([4, 2, 120, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 124, 136],"float16"),Tensor([4, 2, 124, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 124, 152],"float16"),Tensor([4, 2, 124, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 124, 168],"float16"),Tensor([4, 2, 124, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 128, 128],"float32"),Tensor([4, 48, 128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 128, 136],"float16"),Tensor([4, 2, 128, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 128, 152],"float16"),Tensor([4, 2, 128, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 128, 168],"float16"),Tensor([4, 2, 128, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 128, 256],"float32"),Tensor([4, 48, 128, 256],"float16"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 132, 144],"float16"),Tensor([4, 2, 132, 144],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 132, 148],"float16"),Tensor([4, 2, 132, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 132, 152],"float16"),Tensor([4, 2, 132, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 132, 160],"float16"),Tensor([4, 2, 132, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 132, 168],"float16"),Tensor([4, 2, 132, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 100],"float16"),Tensor([4, 2, 136, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 108],"float16"),Tensor([4, 2, 136, 108],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 136],"float16"),Tensor([4, 2, 136, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 140],"float16"),Tensor([4, 2, 136, 140],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 148],"float16"),Tensor([4, 2, 136, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 152],"float16"),Tensor([4, 2, 136, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 156],"float16"),Tensor([4, 2, 136, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 160],"float16"),Tensor([4, 2, 136, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 164],"float16"),Tensor([4, 2, 136, 164],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 136, 168],"float16"),Tensor([4, 2, 136, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 140, 136],"float16"),Tensor([4, 2, 140, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 140, 140],"float16"),Tensor([4, 2, 140, 140],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 140, 152],"float16"),Tensor([4, 2, 140, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 140, 156],"float16"),Tensor([4, 2, 140, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 140, 164],"float16"),Tensor([4, 2, 140, 164],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 140, 168],"float16"),Tensor([4, 2, 140, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 144, 136],"float16"),Tensor([4, 2, 144, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 144, 152],"float16"),Tensor([4, 2, 144, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 144, 168],"float16"),Tensor([4, 2, 144, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 148, 136],"float16"),Tensor([4, 2, 148, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 148, 152],"float16"),Tensor([4, 2, 148, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 148, 164],"float16"),Tensor([4, 2, 148, 164],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 148, 168],"float16"),Tensor([4, 2, 148, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 100],"float16"),Tensor([4, 2, 152, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 108],"float16"),Tensor([4, 2, 152, 108],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 132],"float16"),Tensor([4, 2, 152, 132],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 136],"float16"),Tensor([4, 2, 152, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 140],"float16"),Tensor([4, 2, 152, 140],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 144],"float16"),Tensor([4, 2, 152, 144],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 148],"float16"),Tensor([4, 2, 152, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 152],"float16"),Tensor([4, 2, 152, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 156],"float16"),Tensor([4, 2, 152, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 160],"float16"),Tensor([4, 2, 152, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 164],"float16"),Tensor([4, 2, 152, 164],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 152, 168],"float16"),Tensor([4, 2, 152, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 156, 136],"float16"),Tensor([4, 2, 156, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 156, 148],"float16"),Tensor([4, 2, 156, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 156, 152],"float16"),Tensor([4, 2, 156, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 156, 168],"float16"),Tensor([4, 2, 156, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 160, 136],"float16"),Tensor([4, 2, 160, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 160, 152],"float16"),Tensor([4, 2, 160, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 160, 160],"float16"),Tensor([4, 2, 160, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 164, 100],"float16"),Tensor([4, 2, 164, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 164, 136],"float16"),Tensor([4, 2, 164, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 164, 148],"float16"),Tensor([4, 2, 164, 148],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 164, 152],"float16"),Tensor([4, 2, 164, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 100],"float16"),Tensor([4, 2, 168, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 136],"float16"),Tensor([4, 2, 168, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 140],"float16"),Tensor([4, 2, 168, 140],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 152],"float16"),Tensor([4, 2, 168, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 156],"float16"),Tensor([4, 2, 168, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 160],"float16"),Tensor([4, 2, 168, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 168, 168],"float16"),Tensor([4, 2, 168, 168],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 34],"float16"),Tensor([4, 2, 25, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 35],"float16"),Tensor([4, 2, 25, 35],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 36],"float16"),Tensor([4, 2, 25, 36],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 37],"float16"),Tensor([4, 2, 25, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 38],"float16"),Tensor([4, 2, 25, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 39],"float16"),Tensor([4, 2, 25, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 40],"float16"),Tensor([4, 2, 25, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 41],"float16"),Tensor([4, 2, 25, 41],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 25, 42],"float16"),Tensor([4, 2, 25, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 256, 256],"float32"),Tensor([4, 256, 256, 256],"float32"),Tensor([4, 256, 256, 256],"float32"),Tensor([4, 256, 256, 256],"float16"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 26, 34],"float16"),Tensor([4, 2, 26, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 26, 38],"float16"),Tensor([4, 2, 26, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 26, 41],"float16"),Tensor([4, 2, 26, 41],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 26, 42],"float16"),Tensor([4, 2, 26, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 27, 37],"float16"),Tensor([4, 2, 27, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 27, 38],"float16"),Tensor([4, 2, 27, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 27, 39],"float16"),Tensor([4, 2, 27, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 28, 38],"float16"),Tensor([4, 2, 28, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 29, 38],"float16"),Tensor([4, 2, 29, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 29, 40],"float16"),Tensor([4, 2, 29, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 30, 38],"float16"),Tensor([4, 2, 30, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 31, 34],"float16"),Tensor([4, 2, 31, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 31, 38],"float16"),Tensor([4, 2, 31, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 31, 42],"float16"),Tensor([4, 2, 31, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 32, 34],"float16"),Tensor([4, 2, 32, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 32, 38],"float16"),Tensor([4, 2, 32, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 32, 42],"float16"),Tensor([4, 2, 32, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 33, 36],"float16"),Tensor([4, 2, 33, 36],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 33, 37],"float16"),Tensor([4, 2, 33, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 33, 38],"float16"),Tensor([4, 2, 33, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 33, 40],"float16"),Tensor([4, 2, 33, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 33, 42],"float16"),Tensor([4, 2, 33, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 25],"float16"),Tensor([4, 2, 34, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 27],"float16"),Tensor([4, 2, 34, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 34],"float16"),Tensor([4, 2, 34, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 35],"float16"),Tensor([4, 2, 34, 35],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 37],"float16"),Tensor([4, 2, 34, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 38],"float16"),Tensor([4, 2, 34, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 39],"float16"),Tensor([4, 2, 34, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 40],"float16"),Tensor([4, 2, 34, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 41],"float16"),Tensor([4, 2, 34, 41],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 34, 42],"float16"),Tensor([4, 2, 34, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 35, 34],"float16"),Tensor([4, 2, 35, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 35, 35],"float16"),Tensor([4, 2, 35, 35],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 35, 38],"float16"),Tensor([4, 2, 35, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 35, 39],"float16"),Tensor([4, 2, 35, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 35, 41],"float16"),Tensor([4, 2, 35, 41],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 35, 42],"float16"),Tensor([4, 2, 35, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 36, 34],"float16"),Tensor([4, 2, 36, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 36, 38],"float16"),Tensor([4, 2, 36, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 36, 42],"float16"),Tensor([4, 2, 36, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 37, 34],"float16"),Tensor([4, 2, 37, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 37, 38],"float16"),Tensor([4, 2, 37, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 37, 41],"float16"),Tensor([4, 2, 37, 41],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 37, 42],"float16"),Tensor([4, 2, 37, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 25],"float16"),Tensor([4, 2, 38, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 27],"float16"),Tensor([4, 2, 38, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 33],"float16"),Tensor([4, 2, 38, 33],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 34],"float16"),Tensor([4, 2, 38, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 35],"float16"),Tensor([4, 2, 38, 35],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 36],"float16"),Tensor([4, 2, 38, 36],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 37],"float16"),Tensor([4, 2, 38, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 38],"float16"),Tensor([4, 2, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 39],"float16"),Tensor([4, 2, 38, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 40],"float16"),Tensor([4, 2, 38, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 41],"float16"),Tensor([4, 2, 38, 41],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 42],"float16"),Tensor([4, 2, 38, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 39, 34],"float16"),Tensor([4, 2, 39, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 39, 37],"float16"),Tensor([4, 2, 39, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 39, 38],"float16"),Tensor([4, 2, 39, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 39, 42],"float16"),Tensor([4, 2, 39, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 40, 34],"float16"),Tensor([4, 2, 40, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 40, 38],"float16"),Tensor([4, 2, 40, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 40, 40],"float16"),Tensor([4, 2, 40, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 41, 25],"float16"),Tensor([4, 2, 41, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 41, 34],"float16"),Tensor([4, 2, 41, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 41, 37],"float16"),Tensor([4, 2, 41, 37],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 41, 38],"float16"),Tensor([4, 2, 41, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 25],"float16"),Tensor([4, 2, 42, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 34],"float16"),Tensor([4, 2, 42, 34],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 35],"float16"),Tensor([4, 2, 42, 35],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 38],"float16"),Tensor([4, 2, 42, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 39],"float16"),Tensor([4, 2, 42, 39],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 40],"float16"),Tensor([4, 2, 42, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 42, 42],"float16"),Tensor([4, 2, 42, 42],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 68],"float16"),Tensor([4, 2, 50, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 70],"float16"),Tensor([4, 2, 50, 70],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 72],"float16"),Tensor([4, 2, 50, 72],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 74],"float16"),Tensor([4, 2, 50, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 76],"float16"),Tensor([4, 2, 50, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 78],"float16"),Tensor([4, 2, 50, 78],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 80],"float16"),Tensor([4, 2, 50, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 82],"float16"),Tensor([4, 2, 50, 82],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 50, 84],"float16"),Tensor([4, 2, 50, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 52, 68],"float16"),Tensor([4, 2, 52, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 52, 76],"float16"),Tensor([4, 2, 52, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 52, 82],"float16"),Tensor([4, 2, 52, 82],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 52, 84],"float16"),Tensor([4, 2, 52, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 54, 74],"float16"),Tensor([4, 2, 54, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 54, 76],"float16"),Tensor([4, 2, 54, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 54, 78],"float16"),Tensor([4, 2, 54, 78],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 56, 76],"float16"),Tensor([4, 2, 56, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 58, 76],"float16"),Tensor([4, 2, 58, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 58, 80],"float16"),Tensor([4, 2, 58, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 60, 76],"float16"),Tensor([4, 2, 60, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 62, 68],"float16"),Tensor([4, 2, 62, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 62, 76],"float16"),Tensor([4, 2, 62, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 62, 84],"float16"),Tensor([4, 2, 62, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 64, 128],"float16"),Tensor([4, 256, 64, 128],"float16"),Tensor([4, 256, 64, 128],"float16"),Tensor([4, 256, 64, 128],"float16"),Tensor([4, 256, 64, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 64, 64],"float16"),Tensor([4, 256, 64, 64],"float16"),Tensor([4, 256, 64, 64],"float16"),Tensor([4, 256, 64, 64],"float16"),Tensor([4, 256, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 64, 68],"float16"),Tensor([4, 2, 64, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 64, 76],"float16"),Tensor([4, 2, 64, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 64, 84],"float16"),Tensor([4, 2, 64, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 66, 72],"float16"),Tensor([4, 2, 66, 72],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 66, 74],"float16"),Tensor([4, 2, 66, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 66, 76],"float16"),Tensor([4, 2, 66, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 66, 80],"float16"),Tensor([4, 2, 66, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 66, 84],"float16"),Tensor([4, 2, 66, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 50],"float16"),Tensor([4, 2, 68, 50],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 54],"float16"),Tensor([4, 2, 68, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 68],"float16"),Tensor([4, 2, 68, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 70],"float16"),Tensor([4, 2, 68, 70],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 74],"float16"),Tensor([4, 2, 68, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 76],"float16"),Tensor([4, 2, 68, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 78],"float16"),Tensor([4, 2, 68, 78],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 80],"float16"),Tensor([4, 2, 68, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 82],"float16"),Tensor([4, 2, 68, 82],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 68, 84],"float16"),Tensor([4, 2, 68, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 70, 68],"float16"),Tensor([4, 2, 70, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 70, 70],"float16"),Tensor([4, 2, 70, 70],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 70, 76],"float16"),Tensor([4, 2, 70, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 70, 78],"float16"),Tensor([4, 2, 70, 78],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 70, 82],"float16"),Tensor([4, 2, 70, 82],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 70, 84],"float16"),Tensor([4, 2, 70, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 72, 68],"float16"),Tensor([4, 2, 72, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 72, 76],"float16"),Tensor([4, 2, 72, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 72, 84],"float16"),Tensor([4, 2, 72, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 74, 68],"float16"),Tensor([4, 2, 74, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 74, 76],"float16"),Tensor([4, 2, 74, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 74, 82],"float16"),Tensor([4, 2, 74, 82],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 74, 84],"float16"),Tensor([4, 2, 74, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 50],"float16"),Tensor([4, 2, 76, 50],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 54],"float16"),Tensor([4, 2, 76, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 66],"float16"),Tensor([4, 2, 76, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 68],"float16"),Tensor([4, 2, 76, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 70],"float16"),Tensor([4, 2, 76, 70],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 72],"float16"),Tensor([4, 2, 76, 72],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 74],"float16"),Tensor([4, 2, 76, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 76],"float16"),Tensor([4, 2, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 78],"float16"),Tensor([4, 2, 76, 78],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 80],"float16"),Tensor([4, 2, 76, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 82],"float16"),Tensor([4, 2, 76, 82],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 76, 84],"float16"),Tensor([4, 2, 76, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 78, 68],"float16"),Tensor([4, 2, 78, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 78, 74],"float16"),Tensor([4, 2, 78, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 78, 76],"float16"),Tensor([4, 2, 78, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 78, 84],"float16"),Tensor([4, 2, 78, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 80, 68],"float16"),Tensor([4, 2, 80, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 80, 76],"float16"),Tensor([4, 2, 80, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 80, 80],"float16"),Tensor([4, 2, 80, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 82, 50],"float16"),Tensor([4, 2, 82, 50],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 82, 68],"float16"),Tensor([4, 2, 82, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 82, 74],"float16"),Tensor([4, 2, 82, 74],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 82, 76],"float16"),Tensor([4, 2, 82, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 50],"float16"),Tensor([4, 2, 84, 50],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 68],"float16"),Tensor([4, 2, 84, 68],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 70],"float16"),Tensor([4, 2, 84, 70],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 76],"float16"),Tensor([4, 2, 84, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 78],"float16"),Tensor([4, 2, 84, 78],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 80],"float16"),Tensor([4, 2, 84, 80],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 84, 84],"float16"),Tensor([4, 2, 84, 84],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 3, 256, 256],"float32"),Tensor([4, 32, 256, 256],"float16"),], axis=1, )
paddle.concat(list[Tensor([4, 32, 64, 64],"float16"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 32, 64, 64],"float16"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 32, 64, 64],"float16"),Tensor([4, 32, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float16"),Tensor([4, 2, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 32, 64, 64],"float32"),Tensor([4, 32, 64, 64],"float16"),], axis=1, )
paddle.concat(list[Tensor([4, 512, 128, 128],"float16"),Tensor([4, 128, 128, 128],"float32"),Tensor([4, 128, 128, 128],"float32"),Tensor([4, 128, 128, 128],"float32"),Tensor([4, 128, 128, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 64, 128, 128],"float32"),Tensor([4, 64, 128, 128],"float16"),], 1, )
paddle.concat(list[Tensor([4, 64, 160, 160],"float32"),Tensor([4, 64, 160, 160],"float32"),Tensor([4, 64, 160, 160],"float32"),Tensor([4, 64, 160, 160],"float16"),], axis=1, )
paddle.concat(list[Tensor([4, 64, 256, 256],"float32"),Tensor([4, 64, 256, 256],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 22, 22],"float32"),Tensor([48, 128, 22, 22],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 24, 24],"float32"),Tensor([48, 128, 24, 24],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 26, 26],"float32"),Tensor([48, 128, 26, 26],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 28, 28],"float32"),Tensor([48, 128, 28, 28],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 30, 30],"float32"),Tensor([48, 128, 30, 30],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 44, 44],"float32"),Tensor([48, 128, 44, 44],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 48, 48],"float32"),Tensor([48, 128, 48, 48],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 52, 52],"float32"),Tensor([48, 128, 52, 52],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 56, 56],"float32"),Tensor([48, 128, 56, 56],"float16"),], 1, )
paddle.concat(list[Tensor([48, 128, 60, 60],"float32"),Tensor([48, 128, 60, 60],"float16"),], 1, )
paddle.concat(list[Tensor([512, 20, 32, 24],"float32"),Tensor([512, 20, 32, 24],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 40, 16, 12],"float32"),Tensor([512, 40, 16, 12],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 80, 8, 6],"float32"),Tensor([512, 80, 8, 6],"float16"),], axis=1, )
paddle.concat(list[Tensor([64, 24, 32, 32],"float16"),Tensor([64, 24, 32, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 24, 36, 36],"float16"),Tensor([64, 24, 36, 36],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 24, 40, 40],"float16"),Tensor([64, 24, 40, 40],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 24, 44, 44],"float16"),Tensor([64, 24, 44, 44],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 24, 48, 48],"float16"),Tensor([64, 24, 48, 48],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 48, 16, 16],"float16"),Tensor([64, 48, 16, 16],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 48, 18, 18],"float16"),Tensor([64, 48, 18, 18],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 48, 20, 20],"float16"),Tensor([64, 48, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 48, 22, 22],"float16"),Tensor([64, 48, 22, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 48, 24, 24],"float16"),Tensor([64, 48, 24, 24],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 60, 16, 16],"float16"),Tensor([64, 60, 16, 16],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 60, 18, 18],"float16"),Tensor([64, 60, 18, 18],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 60, 20, 20],"float16"),Tensor([64, 60, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 60, 22, 22],"float16"),Tensor([64, 60, 22, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 60, 24, 24],"float16"),Tensor([64, 60, 24, 24],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 64, 32, 32],"float16"),Tensor([64, 64, 32, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 64, 64, 64],"float16"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 96, 10, 10],"float16"),Tensor([64, 96, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 96, 11, 11],"float16"),Tensor([64, 96, 11, 11],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 96, 12, 12],"float16"),Tensor([64, 96, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 96, 122, 122],"float32"),Tensor([64, 96, 122, 122],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 16, 16],"float32"),Tensor([64, 96, 16, 16],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 18, 18],"float32"),Tensor([64, 96, 18, 18],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 20, 20],"float32"),Tensor([64, 96, 20, 20],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 22, 22],"float32"),Tensor([64, 96, 22, 22],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 24, 24],"float32"),Tensor([64, 96, 24, 24],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 31, 31],"float32"),Tensor([64, 96, 31, 31],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 32, 32],"float32"),Tensor([64, 96, 32, 32],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 36, 36],"float32"),Tensor([64, 96, 36, 36],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 40, 40],"float32"),Tensor([64, 96, 40, 40],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 44, 44],"float32"),Tensor([64, 96, 44, 44],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 48, 48],"float32"),Tensor([64, 96, 48, 48],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 61, 61],"float32"),Tensor([64, 96, 61, 61],"float16"),], 1, )
paddle.concat(list[Tensor([64, 96, 8, 8],"float16"),Tensor([64, 96, 8, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 96, 9, 9],"float16"),Tensor([64, 96, 9, 9],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 96],"float16"),Tensor([64, 50],"float32"),], 1, )
paddle.concat(list[Tensor([8, 128, 128, 128],"float16"),Tensor([8, 128, 128, 128],"float16"),Tensor([8, 128, 128, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 40, 40],"float16"),Tensor([8, 128, 40, 40],"float32"),], 1, )
paddle.concat(list[Tensor([8, 128, 40, 40],"float32"),Tensor([8, 256, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 44, 44],"float32"),Tensor([8, 256, 44, 44],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 48, 48],"float32"),Tensor([8, 256, 48, 48],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 52, 52],"float32"),Tensor([8, 256, 52, 52],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 56, 56],"float32"),Tensor([8, 256, 56, 56],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 60, 60],"float32"),Tensor([8, 256, 60, 60],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 64, 64],"float32"),Tensor([8, 256, 64, 64],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 68, 68],"float32"),Tensor([8, 256, 68, 68],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 72, 72],"float32"),Tensor([8, 256, 72, 72],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 76, 76],"float32"),Tensor([8, 256, 76, 76],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 128, 80, 80],"float16"),Tensor([8, 128, 80, 80],"float32"),], 1, )
paddle.concat(list[Tensor([8, 128, 80, 80],"float32"),Tensor([8, 128, 80, 80],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 20, 20],"float32"),Tensor([8, 256, 20, 20],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 22, 22],"float32"),Tensor([8, 256, 22, 22],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 24, 24],"float32"),Tensor([8, 256, 24, 24],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 26, 26],"float32"),Tensor([8, 256, 26, 26],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 28, 28],"float32"),Tensor([8, 256, 28, 28],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 30, 30],"float32"),Tensor([8, 256, 30, 30],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 32, 32],"float32"),Tensor([8, 256, 32, 32],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 34, 34],"float32"),Tensor([8, 256, 34, 34],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 36, 36],"float32"),Tensor([8, 256, 36, 36],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 38, 38],"float32"),Tensor([8, 256, 38, 38],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 40, 40],"float32"),Tensor([8, 256, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 42, 42],"float32"),Tensor([8, 256, 42, 42],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 44, 44],"float32"),Tensor([8, 256, 44, 44],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 46, 46],"float32"),Tensor([8, 256, 46, 46],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 192, 48, 48],"float32"),Tensor([8, 256, 48, 48],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 24, 160, 160],"float32"),Tensor([8, 24, 160, 160],"float32"),Tensor([8, 24, 160, 160],"float32"),Tensor([8, 24, 160, 160],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 24, 240, 240],"float32"),Tensor([8, 24, 240, 240],"float32"),Tensor([8, 24, 240, 240],"float32"),Tensor([8, 24, 240, 240],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 160, 160],"float16"),Tensor([8, 256, 160, 160],"float32"),Tensor([8, 256, 160, 160],"float32"),Tensor([8, 256, 160, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 20, 20],"float32"),Tensor([8, 512, 20, 20],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 22, 22],"float32"),Tensor([8, 512, 22, 22],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 24, 24],"float32"),Tensor([8, 512, 24, 24],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 26, 26],"float32"),Tensor([8, 512, 26, 26],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 28, 28],"float32"),Tensor([8, 512, 28, 28],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 30, 30],"float32"),Tensor([8, 512, 30, 30],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 32, 32],"float32"),Tensor([8, 512, 32, 32],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 34, 34],"float32"),Tensor([8, 512, 34, 34],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 36, 36],"float32"),Tensor([8, 512, 36, 36],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 38, 38],"float32"),Tensor([8, 512, 38, 38],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 256, 40, 40],"float16"),Tensor([8, 256, 40, 40],"float32"),], 1, )
paddle.concat(list[Tensor([8, 256, 40, 40],"float32"),Tensor([8, 256, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 64, 160, 160],"float16"),Tensor([8, 64, 160, 160],"float32"),Tensor([8, 64, 160, 160],"float32"),Tensor([8, 64, 160, 160],"float32"),], axis=1, )
paddle.concat(list[Tensor([8, 64, 160, 160],"float32"),Tensor([8, 64, 160, 160],"float32"),Tensor([8, 64, 160, 160],"float32"),Tensor([8, 64, 160, 160],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 64, 80, 80],"float16"),Tensor([8, 64, 80, 80],"float32"),], 1, )
paddle.concat(list[Tensor([8, 96, 40, 40],"float32"),Tensor([8, 128, 40, 40],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 44, 44],"float32"),Tensor([8, 128, 44, 44],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 48, 48],"float32"),Tensor([8, 128, 48, 48],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 52, 52],"float32"),Tensor([8, 128, 52, 52],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 56, 56],"float32"),Tensor([8, 128, 56, 56],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 60, 60],"float32"),Tensor([8, 128, 60, 60],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 64, 64],"float32"),Tensor([8, 128, 64, 64],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 68, 68],"float32"),Tensor([8, 128, 68, 68],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 72, 72],"float32"),Tensor([8, 128, 72, 72],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 76, 76],"float32"),Tensor([8, 128, 76, 76],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 80, 80],"float32"),Tensor([8, 128, 80, 80],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 84, 84],"float32"),Tensor([8, 128, 84, 84],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 88, 88],"float32"),Tensor([8, 128, 88, 88],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 92, 92],"float32"),Tensor([8, 128, 92, 92],"float16"),], axis=1, )
paddle.concat(list[Tensor([8, 96, 96, 96],"float32"),Tensor([8, 128, 96, 96],"float16"),], axis=1, )
paddle.concat(list[Tensor([90, 128, 22, 22],"float32"),Tensor([90, 128, 22, 22],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 24, 24],"float32"),Tensor([90, 128, 24, 24],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 26, 26],"float32"),Tensor([90, 128, 26, 26],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 28, 28],"float32"),Tensor([90, 128, 28, 28],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 30, 30],"float32"),Tensor([90, 128, 30, 30],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 44, 44],"float32"),Tensor([90, 128, 44, 44],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 48, 48],"float32"),Tensor([90, 128, 48, 48],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 52, 52],"float32"),Tensor([90, 128, 52, 52],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 56, 56],"float32"),Tensor([90, 128, 56, 56],"float16"),], 1, )
paddle.concat(list[Tensor([90, 128, 60, 60],"float32"),Tensor([90, 128, 60, 60],"float16"),], 1, )
paddle.concat(tuple(Tensor([128, 1, 768],"float32"),Tensor([128, 196, 768],"float16"),), axis=1, )
paddle.concat(tuple(Tensor([14, 1, 768],"float32"),Tensor([14, 1568, 768],"float16"),), axis=1, )
paddle.concat(tuple(Tensor([24, 32, 128, 128],"float32"),Tensor([24, 34, 128, 128],"float16"),), axis=1, )
paddle.concat(x=tuple(Tensor([2, 3, 1, 64],"float16"),Tensor([2, 3, 256, 64],"float32"),), axis=-2, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([15488, 80],"float16"), label=Tensor([15488, 80],"float32"), normalizer=Tensor([],"float32"), gamma=2.0, alpha=0.25, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([190960, 80],"float16"), Tensor([190960, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([210056, 80],"float16"), Tensor([210056, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([218240, 80],"float16"), Tensor([218240, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([220968, 80],"float16"), Tensor([220968, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([240064, 80],"float16"), Tensor([240064, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([245520, 80],"float16"), Tensor([245520, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([270072, 80],"float16"), Tensor([270072, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([272800, 80],"float16"), Tensor([272800, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([300080, 80],"float16"), Tensor([300080, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([330088, 80],"float16"), Tensor([330088, 80],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1024, 11008],"bfloat16"), weight=Tensor([11008, 4096],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 11008],"bfloat16"), weight=Tensor([11008, 768],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 128],"bfloat16"), weight=Tensor([128, 128],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 128],"bfloat16"), weight=Tensor([128, 128],"bfloat16"), bias=Tensor([128],"bfloat16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 128],"bfloat16"), weight=Tensor([128, 32],"bfloat16"), bias=Tensor([32],"bfloat16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 128],"bfloat16"), weight=Tensor([128, 4864],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 4096],"bfloat16"), weight=Tensor([4096, 11008],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 4096],"bfloat16"), weight=Tensor([4096, 12288],"bfloat16"), bias=Tensor([12288],"bfloat16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 4096],"bfloat16"), weight=Tensor([4096, 4096],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 4864],"bfloat16"), weight=Tensor([4864, 128],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 768],"bfloat16"), weight=Tensor([768, 11008],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 768],"bfloat16"), weight=Tensor([768, 768],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 28, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 29, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 30, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 32, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 33, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 34, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 36, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 28, 38, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 29, 28, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 30, 28, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 31, 28, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 32, 28, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 35, 28, 384],"float32"), weight=Tensor([384, 192],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 58, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 59, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 60, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 64, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 65, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 67, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 68, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 71, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 56, 75, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 57, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 59, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 60, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 61, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 62, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 64, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 70, 56, 96],"float32"), weight=Tensor([96, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 499, 512],"float32"), weight=Tensor([512, 2024],"float16"), bias=Tensor([2024],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 499, 512],"float32"), weight=Tensor([512, 4],"float16"), bias=Tensor([4],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 499, 512],"float32"), weight=Tensor([512, 43],"float16"), bias=Tensor([43],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 499, 512],"float32"), weight=Tensor([512, 512],"float16"), bias=Tensor([512],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 38, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 38, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 39, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 41, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 43, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 44, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 45, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 46, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 47, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 48, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 49, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([104, 9, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 197, 768],"float32"), weight=Tensor([768, 2304],"float16"), bias=Tensor([2304],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 38, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 41, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 43, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 44, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([112, 45, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 38, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 41, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([120, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 197, 768],"float16"), weight=Tensor([768, 768],"float32"), bias=Tensor([768],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 23, 384],"float32"), weight=Tensor([384, 1152],"float16"), bias=Tensor([1152],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 23, 384],"float32"), weight=Tensor([384, 1536],"float16"), bias=Tensor([1536],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 23, 384],"float32"), weight=Tensor([384, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 23, 384],"float32"), weight=Tensor([384, 6629],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([128, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 38, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 392, 96],"float32"), weight=Tensor([96, 288],"float16"), bias=Tensor([288],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([136, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([14, 1569, 768],"float32"), weight=Tensor([768, 3072],"float16"), bias=Tensor([3072],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([14, 768],"float32"), weight=Tensor([768, 400],"float16"), bias=Tensor([400],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([144, 392, 96],"float32"), weight=Tensor([96, 288],"float16"), bias=Tensor([288],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([15, 234, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([15, 244, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([152, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 100, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 109, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 115, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 116, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 122, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 141, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 146, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 149, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 156, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 166, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 170, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 171, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 173, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 174, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 176, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 178, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 182, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 182, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 199, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 2048],"float32"), weight=Tensor([2048, 400],"float16"), bias=Tensor([400],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 205, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 210, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 217, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 217, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 227, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 227, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 264, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 400, 256],"float16"), weight=Tensor([256, 256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.linear(x=Tensor([16, 400, 256],"float16"), weight=Tensor([256, 256],"float32"), bias=Tensor([256],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 476, 256],"float16"), weight=Tensor([256, 256],"float32"), bias=Tensor([256],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 62, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 81, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 8400, 256],"float16"), weight=Tensor([256, 256],"float32"), bias=Tensor([256],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 88, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 88, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 93, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([16, 94, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 392, 96],"float32"), weight=Tensor([96, 288],"float16"), bias=Tensor([288],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([160, 7, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([168, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([170628, 20, 64],"float16"), weight=Tensor([64, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([176, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([176, 392, 96],"float32"), weight=Tensor([96, 288],"float16"), bias=Tensor([288],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([184, 7, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 22, 384],"float32"), weight=Tensor([384, 1152],"float16"), bias=Tensor([1152],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 22, 384],"float32"), weight=Tensor([384, 1536],"float16"), bias=Tensor([1536],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 22, 384],"float32"), weight=Tensor([384, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 22, 384],"float32"), weight=Tensor([384, 6629],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([192, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([192, 7, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 1100, 256],"float16"), weight=Tensor([256, 256],"float32"), bias=Tensor([256],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 114, 64],"bfloat16"), weight=Tensor([64, 64],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([2, 11645, 256],"float32"), weight=Tensor([256, 128],"float16"), bias=Tensor([128],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 11645, 256],"float32"), weight=Tensor([256, 256],"float16"), bias=Tensor([256],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 14, 64],"bfloat16"), weight=Tensor([64, 8],"float32"), bias=Tensor([8],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 14, 768],"bfloat16"), weight=Tensor([768, 8],"float32"), bias=Tensor([8],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 300, 256],"float32"), weight=Tensor([256, 256],"float16"), bias=Tensor([256],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 302, 11008],"bfloat16"), weight=Tensor([11008, 768],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([2, 302, 768],"bfloat16"), weight=Tensor([768, 11008],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([2, 302, 768],"bfloat16"), weight=Tensor([768, 768],"bfloat16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([200, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([200, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2048, 12544],"float32"), weight=Tensor([12544, 1024],"float16"), bias=Tensor([1024],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([208, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([216, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([224, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([224, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([224, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([224, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([224, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([224, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([232, 22, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 101, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 103, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 104, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 105, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 106, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 107, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 109, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 110, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 110, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 111, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 112, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 113, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 114, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 115, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 116, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 116, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 117, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 118, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 119, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 121, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 122, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 122, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 123, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 124, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 126, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 128, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 129, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 130, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 131, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 132, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 133, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 135, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 136, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 137, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 139, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 140, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 141, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 142, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 144, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 144, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 146, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 149, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 149, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 150, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 151, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 153, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 154, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 157, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 158, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 159, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 160, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 162, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 162, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 163, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 163, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 171, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 173, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 174, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 176, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 178, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 182, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 205, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 68, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 68, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 72, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 80, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 81, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 81, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 82, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 83, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 84, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 86, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 87, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 89, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 91, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 94, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 96, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 97, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 97, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 98, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 99, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([24, 99, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 21, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 7, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([240, 9, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 25, 192],"float32"), weight=Tensor([192, 37],"float16"), bias=Tensor([37],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 25, 192],"float32"), weight=Tensor([192, 96],"float16"), bias=Tensor([96],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([256, 25, 512],"float32"), weight=Tensor([512, 96],"float16"), bias=Tensor([96],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([264, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 5, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([272, 6, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2744, 8, 768],"float32"), weight=Tensor([768, 2304],"float16"), bias=Tensor([2304],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([280, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([280, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([280, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([280, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([280, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([288, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([288, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([288, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([288, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([288, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([29151, 100, 64],"float16"), weight=Tensor([64, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([296, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 17, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([296, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 13, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 6, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([312, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 100, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 101, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 101, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 102, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 103, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 103, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 104, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 104, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 105, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 105, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 106, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 106, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 107, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 107, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 108, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 109, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 109, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 110, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 111, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 111, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 112, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 112, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 113, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 113, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 114, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 114, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 115, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 115, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 117, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 117, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 118, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 119, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 121, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 122, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 123, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 124, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 124, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 125, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 126, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 126, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 127, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 128, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 129, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 130, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 131, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 132, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 133, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 135, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 136, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 137, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 139, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 140, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 141, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 142, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 144, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 146, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 150, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 151, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 153, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 154, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 157, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 158, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 159, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 2048],"float32"), weight=Tensor([2048, 400],"float16"), bias=Tensor([400],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 256, 256],"float32"), weight=Tensor([256, 1],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([32, 256],"float32"), weight=Tensor([256, 256],"float16"), bias=Tensor([256],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 43, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 46, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 50, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 501, 256],"float32"), weight=Tensor([256, 30],"float16"), bias=Tensor([30],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 501, 832],"float32"), weight=Tensor([832, 4],"float16"), bias=Tensor([4],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 53, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 54, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 60, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 61, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 62, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 63, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 64, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 65, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 66, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 67, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 68, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 69, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 70, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 71, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 72, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 73, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 74, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 75, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 76, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 77, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 78, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 79, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 80, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 80, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 81, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 82, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 83, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 83, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 84, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 85, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 86, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 87, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 87, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 88, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 89, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 89, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 90, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 91, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 91, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 92, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 92, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 93, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 93, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 94, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 95, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 95, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 96, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 96, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 97, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 97, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 98, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 98, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 99, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 99, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([320, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([320, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([320, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([320, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([320, 16, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 5, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 6, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([336, 9, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([352, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([352, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 6, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([360, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([368, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([368, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([368, 3, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([368, 4, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([368, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([368, 9, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([392, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([392, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([392, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([392, 13, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 100, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 102, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 102, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 103, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 104, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 105, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 107, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 108, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 110, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 111, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 113, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 114, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 115, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 117, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 118, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 122, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 123, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 124, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 125, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 127, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 128, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 40, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 45, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 46, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 46, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 47, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 48, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 49, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 50, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 51, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 52, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 53, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 54, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 55, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 56, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 57, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 58, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 59, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 60, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 60, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 61, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 63, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 64, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 65, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 66, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 67, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 67, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 69, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 70, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 70, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 71, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 72, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 72, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 74, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 74, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 75, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 76, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 76, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 77, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 77, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 78, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 79, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 79, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 80, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 81, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 82, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 83, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 84, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 85, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 85, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 86, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 86, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 87, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 87, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 88, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 88, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 89, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 89, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 90, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 90, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 91, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 91, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 92, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 92, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 93, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 93, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 94, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 95, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 95, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 96, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 97, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 98, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([40, 99, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([408, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([408, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([408, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([408, 7, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([408, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([408, 9, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4096, 12544],"float32"), weight=Tensor([12544, 1024],"float16"), bias=Tensor([1024],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([424, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([424, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([424, 12, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([424, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([448, 7, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([448, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([448, 9, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([464, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([464, 11, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([464, 3, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([464, 4, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([464, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([464, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 100, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 101, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 102, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 103, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 104, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 105, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 106, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 39, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 41, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 42, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 43, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 44, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 47, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 48, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 49, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 49, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 51, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 51, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 53, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 54, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 55, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 57, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 58, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 58, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 59, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 61, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 61, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 62, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 63, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 64, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 65, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 65, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 66, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 67, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 67, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 68, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 68, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 69, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 70, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 70, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 71, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 71, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 72, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 73, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 73, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 74, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 75, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 75, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 76, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 76, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 77, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 78, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 78, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 79, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 79, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 80, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 81, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 81, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 82, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 82, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 83, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 83, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 84, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 84, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 85, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 85, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 86, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 87, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 88, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 89, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 90, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 91, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 92, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 93, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 94, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 95, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 96, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 97, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 98, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([48, 99, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([480, 5, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([480, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([512, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([512, 7, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([512, 7, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([512, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([512, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([512, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([528, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 25, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 38, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 44, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 45, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 45, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 47, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 50, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 51, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 52, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 52, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 53, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 53, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 54, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 55, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 56, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 56, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 57, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 58, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 59, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 60, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 60, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 61, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 62, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 62, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 63, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 64, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 65, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 66, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 66, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 67, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 68, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 69, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 69, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 70, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 71, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 71, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 72, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 72, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 73, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 73, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 74, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 75, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 76, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 77, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 78, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 79, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 80, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 81, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 82, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 83, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 84, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 85, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 86, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 87, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 88, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 89, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 90, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([56, 91, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([568, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([568, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([584, 6, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([584, 7, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([624, 7, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([624, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 23, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 24, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 256],"float32"), weight=Tensor([256, 256],"float16"), bias=Tensor([256],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 26, 1536],"float32"), weight=Tensor([1536, 6626],"float16"), bias=Tensor([6626],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 26, 512],"float32"), weight=Tensor([512, 512],"float16"), bias=Tensor([512],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 30, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 32, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 38, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 38, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 40, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 41, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 41, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 42, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 43, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 44, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 44, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 45, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 46, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 47, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 47, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 48, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 49, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 50, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 51, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 51, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 512],"float32"), weight=Tensor([512, 512],"float16"), bias=Tensor([512],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 52, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 53, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 54, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 54, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 55, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 55, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 56, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 57, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 57, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 58, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 59, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 59, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 60, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 60, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 61, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 61, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 62, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 62, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 63, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 63, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 64, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 64, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 65, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 66, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 67, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 68, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 69, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 70, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 71, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 72, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 73, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 74, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 75, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 76, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 77, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 78, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 79, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 8, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 80, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([64, 80, 128],"float32"), weight=Tensor([128, 96],"float16"), bias=Tensor([96],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([640, 6, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([640, 7, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([640, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([680, 6, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 10, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 15, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 26, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 26, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 28, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 39, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 40, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 41, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 42, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 43, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 43, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 44, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 45, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 46, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 46, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 47, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 48, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 48, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 49, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 49, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 50, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 50, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 51, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 51, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 52, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 52, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 53, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 53, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 54, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 54, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 55, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 55, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 56, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 56, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 57, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 58, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 59, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 60, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 61, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 62, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 63, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 64, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 65, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 66, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 67, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 68, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 69, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 70, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([72, 71, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([728, 7, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 1, 1, 1, 2304],"float32"), weight=Tensor([2304, 400],"float16"), bias=Tensor([400],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 234, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 244, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 14, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 18, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 19, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 20, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 21, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 22, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 23, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 24, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 25, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 29, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 33, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 38, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 39, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 40, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 41, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 42, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 43, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 44, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 45, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 45, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 46, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 46, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 47, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 47, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 48, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 48, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 49, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 49, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 50, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 50, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 51, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 51, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 52, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 53, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 54, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 55, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 56, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 57, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 58, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 59, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 60, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 61, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 62, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 63, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([80, 64, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([848, 6, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 12, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 14, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 15, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 17, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 20, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 27, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 34, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 36, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 38, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 39, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 40, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 41, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 41, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 42, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 43, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 43, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 44, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 44, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 45, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 45, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 46, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 46, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 47, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 48, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 49, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 50, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 51, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 52, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 53, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 54, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 55, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 56, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 57, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 58, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([88, 8, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 10, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 11, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 16, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 18, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 19, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 27, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 28, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 29, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 30, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 31, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 31, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 32, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 33, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 34, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 35, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 35, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 36, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 37, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 37, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 38, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 38, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 39, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 39, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 40, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 40, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 41, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 41, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 42, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 42, 512],"float16"), weight=Tensor([512, 512],"float32"), bias=Tensor([512],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 43, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 44, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 45, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 46, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 47, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 48, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 49, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 50, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 51, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 52, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 53, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([96, 9, 1024],"float16"), weight=Tensor([1024, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float16"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 54],"float16"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float16"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 68],"float32"), Tensor([128, 1, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 34],"float32"), Tensor([256, 1, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 68],"float32"), Tensor([64, 1, 8, 8],"float16"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 136],"float32"), Tensor([64, 1, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([24, 66, 128, 128],"float32"), Tensor([66, 32, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 124, 108],"float16"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 256, 64, 64],"float16"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv1d(Tensor([8, 400, 100],"float32"), Tensor([256, 100, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([1024],"float16"), label=Tensor([1024],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2048],"float16"), label=Tensor([2048],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10032, 80],"float16"), Tensor([10032, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10064, 80],"float16"), Tensor([10064, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10336, 80],"float16"), Tensor([10336, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([106, 28, 28],"float16"), Tensor([106, 28, 28],"float32"), weight=Tensor([106, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10608, 80],"float16"), Tensor([10608, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10640, 80],"float16"), Tensor([10640, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10752, 80],"float16"), Tensor([10752, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10880, 80],"float16"), Tensor([10880, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10920, 80],"float16"), Tensor([10920, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10944, 80],"float16"), Tensor([10944, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([110, 14, 14],"float16"), Tensor([110, 14, 14],"float32"), weight=Tensor([110, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11088, 80],"float16"), Tensor([11088, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11152, 80],"float16"), Tensor([11152, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([112, 14, 14],"float16"), Tensor([112, 14, 14],"float32"), weight=Tensor([112, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11248, 80],"float16"), Tensor([11248, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([113, 28, 28],"float16"), Tensor([113, 28, 28],"float32"), weight=Tensor([113, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([114, 14, 14],"float16"), Tensor([114, 14, 14],"float32"), weight=Tensor([114, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11424, 80],"float16"), Tensor([11424, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11480, 80],"float16"), Tensor([11480, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11520, 80],"float16"), Tensor([11520, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11552, 80],"float16"), Tensor([11552, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([116, 28, 28],"float16"), Tensor([116, 28, 28],"float32"), weight=Tensor([116, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([117, 28, 28],"float16"), Tensor([117, 28, 28],"float32"), weight=Tensor([117, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11760, 80],"float16"), Tensor([11760, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11840, 80],"float16"), Tensor([11840, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([11856, 80],"float16"), Tensor([11856, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([120, 14, 14],"float16"), Tensor([120, 14, 14],"float32"), weight=Tensor([120, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12096, 80],"float16"), Tensor([12096, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12136, 80],"float16"), Tensor([12136, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12160, 80],"float16"), Tensor([12160, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([121600, 80],"float16"), Tensor([121600, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([122, 28, 28],"float16"), Tensor([122, 28, 28],"float32"), weight=Tensor([122, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([123, 14, 14],"float16"), Tensor([123, 14, 14],"float32"), weight=Tensor([123, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([123, 28, 28],"float16"), Tensor([123, 28, 28],"float32"), weight=Tensor([123, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([124, 14, 14],"float16"), Tensor([124, 14, 14],"float32"), weight=Tensor([124, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([124, 28, 28],"float16"), Tensor([124, 28, 28],"float32"), weight=Tensor([124, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12432, 80],"float16"), Tensor([12432, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12464, 80],"float16"), Tensor([12464, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([124800, 80],"float16"), Tensor([124800, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([125, 28, 28],"float16"), Tensor([125, 28, 28],"float32"), weight=Tensor([125, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([126464, 80],"float16"), Tensor([126464, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([127, 28, 28],"float16"), Tensor([127, 28, 28],"float32"), weight=Tensor([127, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12768, 80],"float16"), Tensor([12768, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12792, 80],"float16"), Tensor([12792, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12800, 80],"float16"), Tensor([12800, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([128000, 80],"float16"), Tensor([128000, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([129, 28, 28],"float16"), Tensor([129, 28, 28],"float32"), weight=Tensor([129, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([131, 14, 14],"float16"), Tensor([131, 14, 14],"float32"), weight=Tensor([131, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([131, 28, 28],"float16"), Tensor([131, 28, 28],"float32"), weight=Tensor([131, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13104, 80],"float16"), Tensor([13104, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([131328, 80],"float16"), Tensor([131328, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([132, 14, 14],"float16"), Tensor([132, 14, 14],"float32"), weight=Tensor([132, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([132, 28, 28],"float16"), Tensor([132, 28, 28],"float32"), weight=Tensor([132, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([133, 14, 14],"float16"), Tensor([133, 14, 14],"float32"), weight=Tensor([133, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([133, 28, 28],"float16"), Tensor([133, 28, 28],"float32"), weight=Tensor([133, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([134, 28, 28],"float16"), Tensor([134, 28, 28],"float32"), weight=Tensor([134, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13440, 80],"float16"), Tensor([13440, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([134400, 80],"float16"), Tensor([134400, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([134784, 80],"float16"), Tensor([134784, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([135, 28, 28],"float16"), Tensor([135, 28, 28],"float32"), weight=Tensor([135, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([136, 28, 28],"float16"), Tensor([136, 28, 28],"float32"), weight=Tensor([136, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([136448, 80],"float16"), Tensor([136448, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([137, 28, 28],"float16"), Tensor([137, 28, 28],"float32"), weight=Tensor([137, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13776, 80],"float16"), Tensor([13776, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([139776, 80],"float16"), Tensor([139776, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([140, 14, 14],"float16"), Tensor([140, 14, 14],"float32"), weight=Tensor([140, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([141, 28, 28],"float16"), Tensor([141, 28, 28],"float32"), weight=Tensor([141, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([141056, 80],"float16"), Tensor([141056, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([14112, 80],"float16"), Tensor([14112, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([142, 14, 14],"float16"), Tensor([142, 14, 14],"float32"), weight=Tensor([142, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([142, 28, 28],"float16"), Tensor([142, 28, 28],"float32"), weight=Tensor([142, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([143, 28, 28],"float16"), Tensor([143, 28, 28],"float32"), weight=Tensor([143, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([144, 28, 28],"float16"), Tensor([144, 28, 28],"float32"), weight=Tensor([144, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([145, 28, 28],"float16"), Tensor([145, 28, 28],"float32"), weight=Tensor([145, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([147, 14, 14],"float16"), Tensor([147, 14, 14],"float32"), weight=Tensor([147, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([148, 14, 14],"float16"), Tensor([148, 14, 14],"float32"), weight=Tensor([148, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([148, 28, 28],"float16"), Tensor([148, 28, 28],"float32"), weight=Tensor([148, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([149, 28, 28],"float16"), Tensor([149, 28, 28],"float32"), weight=Tensor([149, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([150, 14, 14],"float16"), Tensor([150, 14, 14],"float32"), weight=Tensor([150, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([150, 28, 28],"float16"), Tensor([150, 28, 28],"float32"), weight=Tensor([150, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([150784, 80],"float16"), Tensor([150784, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([151, 28, 28],"float16"), Tensor([151, 28, 28],"float32"), weight=Tensor([151, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([152, 28, 28],"float16"), Tensor([152, 28, 28],"float32"), weight=Tensor([152, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([153, 14, 14],"float16"), Tensor([153, 14, 14],"float32"), weight=Tensor([153, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([153, 28, 28],"float16"), Tensor([153, 28, 28],"float32"), weight=Tensor([153, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([154, 28, 28],"float16"), Tensor([154, 28, 28],"float32"), weight=Tensor([154, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([155648, 80],"float16"), Tensor([155648, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([155904, 80],"float16"), Tensor([155904, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([156672, 80],"float16"), Tensor([156672, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([157, 14, 14],"float16"), Tensor([157, 14, 14],"float32"), weight=Tensor([157, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([157, 28, 28],"float16"), Tensor([157, 28, 28],"float32"), weight=Tensor([157, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([158, 14, 14],"float16"), Tensor([158, 14, 14],"float32"), weight=Tensor([158, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([158, 28, 28],"float16"), Tensor([158, 28, 28],"float32"), weight=Tensor([158, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([159, 14, 14],"float16"), Tensor([159, 14, 14],"float32"), weight=Tensor([159, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([159, 28, 28],"float16"), Tensor([159, 28, 28],"float32"), weight=Tensor([159, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([160, 14, 14],"float16"), Tensor([160, 14, 14],"float32"), weight=Tensor([160, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([160, 28, 28],"float16"), Tensor([160, 28, 28],"float32"), weight=Tensor([160, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([160512, 80],"float16"), Tensor([160512, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([161, 28, 28],"float16"), Tensor([161, 28, 28],"float32"), weight=Tensor([161, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([161024, 80],"float16"), Tensor([161024, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([162, 14, 14],"float16"), Tensor([162, 14, 14],"float32"), weight=Tensor([162, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([162, 28, 28],"float16"), Tensor([162, 28, 28],"float32"), weight=Tensor([162, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([163, 28, 28],"float16"), Tensor([163, 28, 28],"float32"), weight=Tensor([163, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([164, 14, 14],"float16"), Tensor([164, 14, 14],"float32"), weight=Tensor([164, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([165, 28, 28],"float16"), Tensor([165, 28, 28],"float32"), weight=Tensor([165, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([165376, 80],"float16"), Tensor([165376, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([166, 28, 28],"float16"), Tensor([166, 28, 28],"float32"), weight=Tensor([166, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([167, 14, 14],"float16"), Tensor([167, 14, 14],"float32"), weight=Tensor([167, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([167, 28, 28],"float16"), Tensor([167, 28, 28],"float32"), weight=Tensor([167, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([168, 14, 14],"float16"), Tensor([168, 14, 14],"float32"), weight=Tensor([168, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([168, 28, 28],"float16"), Tensor([168, 28, 28],"float32"), weight=Tensor([168, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([169, 14, 14],"float16"), Tensor([169, 14, 14],"float32"), weight=Tensor([169, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([169, 28, 28],"float16"), Tensor([169, 28, 28],"float32"), weight=Tensor([169, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([169728, 80],"float16"), Tensor([169728, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([170240, 80],"float16"), Tensor([170240, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([171, 14, 14],"float16"), Tensor([171, 14, 14],"float32"), weight=Tensor([171, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([171, 28, 28],"float16"), Tensor([171, 28, 28],"float32"), weight=Tensor([171, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([172, 14, 14],"float16"), Tensor([172, 14, 14],"float32"), weight=Tensor([172, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([172, 28, 28],"float16"), Tensor([172, 28, 28],"float32"), weight=Tensor([172, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([172032, 80],"float16"), Tensor([172032, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([173, 14, 14],"float16"), Tensor([173, 14, 14],"float32"), weight=Tensor([173, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([173, 28, 28],"float16"), Tensor([173, 28, 28],"float32"), weight=Tensor([173, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([174, 14, 14],"float16"), Tensor([174, 14, 14],"float32"), weight=Tensor([174, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([174, 28, 28],"float16"), Tensor([174, 28, 28],"float32"), weight=Tensor([174, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([174080, 80],"float16"), Tensor([174080, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([174720, 80],"float16"), Tensor([174720, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([175, 28, 28],"float16"), Tensor([175, 28, 28],"float32"), weight=Tensor([175, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([175104, 80],"float16"), Tensor([175104, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([176, 14, 14],"float16"), Tensor([176, 14, 14],"float32"), weight=Tensor([176, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([176, 28, 28],"float16"), Tensor([176, 28, 28],"float32"), weight=Tensor([176, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([177, 28, 28],"float16"), Tensor([177, 28, 28],"float32"), weight=Tensor([177, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([177408, 80],"float16"), Tensor([177408, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([178, 14, 14],"float16"), Tensor([178, 14, 14],"float32"), weight=Tensor([178, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([178, 28, 28],"float16"), Tensor([178, 28, 28],"float32"), weight=Tensor([178, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([178432, 80],"float16"), Tensor([178432, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([179, 28, 28],"float16"), Tensor([179, 28, 28],"float32"), weight=Tensor([179, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([179968, 80],"float16"), Tensor([179968, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([180, 28, 28],"float16"), Tensor([180, 28, 28],"float32"), weight=Tensor([180, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([181, 14, 14],"float16"), Tensor([181, 14, 14],"float32"), weight=Tensor([181, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([181, 28, 28],"float16"), Tensor([181, 28, 28],"float32"), weight=Tensor([181, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([182, 14, 14],"float16"), Tensor([182, 14, 14],"float32"), weight=Tensor([182, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([182, 28, 28],"float16"), Tensor([182, 28, 28],"float32"), weight=Tensor([182, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([182784, 80],"float16"), Tensor([182784, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([183, 14, 14],"float16"), Tensor([183, 14, 14],"float32"), weight=Tensor([183, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([183, 28, 28],"float16"), Tensor([183, 28, 28],"float32"), weight=Tensor([183, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([183680, 80],"float16"), Tensor([183680, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([184, 14, 14],"float16"), Tensor([184, 14, 14],"float32"), weight=Tensor([184, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([184, 28, 28],"float16"), Tensor([184, 28, 28],"float32"), weight=Tensor([184, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([184320, 80],"float16"), Tensor([184320, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([184832, 80],"float16"), Tensor([184832, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([186, 14, 14],"float16"), Tensor([186, 14, 14],"float32"), weight=Tensor([186, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([186, 28, 28],"float16"), Tensor([186, 28, 28],"float32"), weight=Tensor([186, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([187, 28, 28],"float16"), Tensor([187, 28, 28],"float32"), weight=Tensor([187, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([188, 28, 28],"float16"), Tensor([188, 28, 28],"float32"), weight=Tensor([188, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([188160, 80],"float16"), Tensor([188160, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([189, 28, 28],"float16"), Tensor([189, 28, 28],"float32"), weight=Tensor([189, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([189440, 80],"float16"), Tensor([189440, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([189696, 80],"float16"), Tensor([189696, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([190, 28, 28],"float16"), Tensor([190, 28, 28],"float32"), weight=Tensor([190, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([190960],"float16"), Tensor([190960],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([191, 14, 14],"float16"), Tensor([191, 14, 14],"float32"), weight=Tensor([191, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([191, 28, 28],"float16"), Tensor([191, 28, 28],"float32"), weight=Tensor([191, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([192, 28, 28],"float16"), Tensor([192, 28, 28],"float32"), weight=Tensor([192, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([193, 28, 28],"float16"), Tensor([193, 28, 28],"float32"), weight=Tensor([193, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([193536, 80],"float16"), Tensor([193536, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([194, 14, 14],"float16"), Tensor([194, 14, 14],"float32"), weight=Tensor([194, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([194, 28, 28],"float16"), Tensor([194, 28, 28],"float32"), weight=Tensor([194, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([194176, 80],"float16"), Tensor([194176, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([194560, 80],"float16"), Tensor([194560, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([195, 14, 14],"float16"), Tensor([195, 14, 14],"float32"), weight=Tensor([195, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([195, 28, 28],"float16"), Tensor([195, 28, 28],"float32"), weight=Tensor([195, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([196, 14, 14],"float16"), Tensor([196, 14, 14],"float32"), weight=Tensor([196, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([196, 28, 28],"float16"), Tensor([196, 28, 28],"float32"), weight=Tensor([196, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([197, 14, 14],"float16"), Tensor([197, 14, 14],"float32"), weight=Tensor([197, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([197, 28, 28],"float16"), Tensor([197, 28, 28],"float32"), weight=Tensor([197, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1976, 80],"float16"), Tensor([1976, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([198, 14, 14],"float16"), Tensor([198, 14, 14],"float32"), weight=Tensor([198, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([198, 28, 28],"float16"), Tensor([198, 28, 28],"float32"), weight=Tensor([198, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([198912, 80],"float16"), Tensor([198912, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([199, 14, 14],"float16"), Tensor([199, 14, 14],"float32"), weight=Tensor([199, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([199, 28, 28],"float16"), Tensor([199, 28, 28],"float32"), weight=Tensor([199, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([199424, 80],"float16"), Tensor([199424, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 300, 80],"float16"), Tensor([2, 300, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([200, 28, 28],"float16"), Tensor([200, 28, 28],"float32"), weight=Tensor([200, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([201, 14, 14],"float16"), Tensor([201, 14, 14],"float32"), weight=Tensor([201, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([202, 14, 14],"float16"), Tensor([202, 14, 14],"float32"), weight=Tensor([202, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([202, 28, 28],"float16"), Tensor([202, 28, 28],"float32"), weight=Tensor([202, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([203, 14, 14],"float16"), Tensor([203, 14, 14],"float32"), weight=Tensor([203, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([204, 14, 14],"float16"), Tensor([204, 14, 14],"float32"), weight=Tensor([204, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([204, 28, 28],"float16"), Tensor([204, 28, 28],"float32"), weight=Tensor([204, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([204288, 80],"float16"), Tensor([204288, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([204672, 80],"float16"), Tensor([204672, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([204800, 80],"float16"), Tensor([204800, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([205, 28, 28],"float16"), Tensor([205, 28, 28],"float32"), weight=Tensor([205, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([206, 14, 14],"float16"), Tensor([206, 14, 14],"float32"), weight=Tensor([206, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([206, 28, 28],"float16"), Tensor([206, 28, 28],"float32"), weight=Tensor([206, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([207, 14, 14],"float16"), Tensor([207, 14, 14],"float32"), weight=Tensor([207, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([207, 28, 28],"float16"), Tensor([207, 28, 28],"float32"), weight=Tensor([207, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([208, 14, 14],"float16"), Tensor([208, 14, 14],"float32"), weight=Tensor([208, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([208, 28, 28],"float16"), Tensor([208, 28, 28],"float32"), weight=Tensor([208, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2080, 80],"float16"), Tensor([2080, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([209, 28, 28],"float16"), Tensor([209, 28, 28],"float32"), weight=Tensor([209, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([209664, 80],"float16"), Tensor([209664, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([210, 14, 14],"float16"), Tensor([210, 14, 14],"float32"), weight=Tensor([210, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([210, 28, 28],"float16"), Tensor([210, 28, 28],"float32"), weight=Tensor([210, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([210056],"float16"), Tensor([210056],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([211, 14, 14],"float16"), Tensor([211, 14, 14],"float32"), weight=Tensor([211, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([212, 28, 28],"float16"), Tensor([212, 28, 28],"float32"), weight=Tensor([212, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2128, 80],"float16"), Tensor([2128, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([213, 14, 14],"float16"), Tensor([213, 14, 14],"float32"), weight=Tensor([213, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([213, 28, 28],"float16"), Tensor([213, 28, 28],"float32"), weight=Tensor([213, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([214, 14, 14],"float16"), Tensor([214, 14, 14],"float32"), weight=Tensor([214, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([215, 14, 14],"float16"), Tensor([215, 14, 14],"float32"), weight=Tensor([215, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([215, 28, 28],"float16"), Tensor([215, 28, 28],"float32"), weight=Tensor([215, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([215040, 80],"float16"), Tensor([215040, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([216, 14, 14],"float16"), Tensor([216, 14, 14],"float32"), weight=Tensor([216, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([216, 28, 28],"float16"), Tensor([216, 28, 28],"float32"), weight=Tensor([216, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([217, 14, 14],"float16"), Tensor([217, 14, 14],"float32"), weight=Tensor([217, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([218, 14, 14],"float16"), Tensor([218, 14, 14],"float32"), weight=Tensor([218, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([218, 28, 28],"float16"), Tensor([218, 28, 28],"float32"), weight=Tensor([218, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([218240],"float16"), Tensor([218240],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2184, 80],"float16"), Tensor([2184, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([219, 28, 28],"float16"), Tensor([219, 28, 28],"float32"), weight=Tensor([219, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([220, 14, 14],"float16"), Tensor([220, 14, 14],"float32"), weight=Tensor([220, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([220, 28, 28],"float16"), Tensor([220, 28, 28],"float32"), weight=Tensor([220, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([220416, 80],"float16"), Tensor([220416, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([220968],"float16"), Tensor([220968],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([221, 28, 28],"float16"), Tensor([221, 28, 28],"float32"), weight=Tensor([221, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([222, 28, 28],"float16"), Tensor([222, 28, 28],"float32"), weight=Tensor([222, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([223, 14, 14],"float16"), Tensor([223, 14, 14],"float32"), weight=Tensor([223, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([223, 28, 28],"float16"), Tensor([223, 28, 28],"float32"), weight=Tensor([223, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([224, 14, 14],"float16"), Tensor([224, 14, 14],"float32"), weight=Tensor([224, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([224, 28, 28],"float16"), Tensor([224, 28, 28],"float32"), weight=Tensor([224, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2240, 80],"float16"), Tensor([2240, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([225, 14, 14],"float16"), Tensor([225, 14, 14],"float32"), weight=Tensor([225, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([225, 28, 28],"float16"), Tensor([225, 28, 28],"float32"), weight=Tensor([225, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([225792, 80],"float16"), Tensor([225792, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([226, 14, 14],"float16"), Tensor([226, 14, 14],"float32"), weight=Tensor([226, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([226, 28, 28],"float16"), Tensor([226, 28, 28],"float32"), weight=Tensor([226, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([227, 14, 14],"float16"), Tensor([227, 14, 14],"float32"), weight=Tensor([227, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([227, 28, 28],"float16"), Tensor([227, 28, 28],"float32"), weight=Tensor([227, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([228, 14, 14],"float16"), Tensor([228, 14, 14],"float32"), weight=Tensor([228, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([228, 28, 28],"float16"), Tensor([228, 28, 28],"float32"), weight=Tensor([228, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2280, 80],"float16"), Tensor([2280, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([229, 28, 28],"float16"), Tensor([229, 28, 28],"float32"), weight=Tensor([229, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([230, 14, 14],"float16"), Tensor([230, 14, 14],"float32"), weight=Tensor([230, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([230, 28, 28],"float16"), Tensor([230, 28, 28],"float32"), weight=Tensor([230, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([231, 28, 28],"float16"), Tensor([231, 28, 28],"float32"), weight=Tensor([231, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([232, 14, 14],"float16"), Tensor([232, 14, 14],"float32"), weight=Tensor([232, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([232, 28, 28],"float16"), Tensor([232, 28, 28],"float32"), weight=Tensor([232, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([233, 14, 14],"float16"), Tensor([233, 14, 14],"float32"), weight=Tensor([233, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([233, 28, 28],"float16"), Tensor([233, 28, 28],"float32"), weight=Tensor([233, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([234, 14, 14],"float16"), Tensor([234, 14, 14],"float32"), weight=Tensor([234, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([234, 28, 28],"float16"), Tensor([234, 28, 28],"float32"), weight=Tensor([234, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([235, 14, 14],"float16"), Tensor([235, 14, 14],"float32"), weight=Tensor([235, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([235, 28, 28],"float16"), Tensor([235, 28, 28],"float32"), weight=Tensor([235, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([236, 28, 28],"float16"), Tensor([236, 28, 28],"float32"), weight=Tensor([236, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([237, 14, 14],"float16"), Tensor([237, 14, 14],"float32"), weight=Tensor([237, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([237, 28, 28],"float16"), Tensor([237, 28, 28],"float32"), weight=Tensor([237, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([238, 14, 14],"float16"), Tensor([238, 14, 14],"float32"), weight=Tensor([238, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([238, 28, 28],"float16"), Tensor([238, 28, 28],"float32"), weight=Tensor([238, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([239, 14, 14],"float16"), Tensor([239, 14, 14],"float32"), weight=Tensor([239, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([239, 28, 28],"float16"), Tensor([239, 28, 28],"float32"), weight=Tensor([239, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([240, 28, 28],"float16"), Tensor([240, 28, 28],"float32"), weight=Tensor([240, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([240064],"float16"), Tensor([240064],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([241, 28, 28],"float16"), Tensor([241, 28, 28],"float32"), weight=Tensor([241, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([242, 14, 14],"float16"), Tensor([242, 14, 14],"float32"), weight=Tensor([242, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([242, 28, 28],"float16"), Tensor([242, 28, 28],"float32"), weight=Tensor([242, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([243, 14, 14],"float16"), Tensor([243, 14, 14],"float32"), weight=Tensor([243, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([243, 28, 28],"float16"), Tensor([243, 28, 28],"float32"), weight=Tensor([243, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2432, 80],"float16"), Tensor([2432, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([244, 14, 14],"float16"), Tensor([244, 14, 14],"float32"), weight=Tensor([244, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([244, 28, 28],"float16"), Tensor([244, 28, 28],"float32"), weight=Tensor([244, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2448, 80],"float16"), Tensor([2448, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([245, 14, 14],"float16"), Tensor([245, 14, 14],"float32"), weight=Tensor([245, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([245, 28, 28],"float16"), Tensor([245, 28, 28],"float32"), weight=Tensor([245, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([245520],"float16"), Tensor([245520],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([246, 28, 28],"float16"), Tensor([246, 28, 28],"float32"), weight=Tensor([246, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([247, 14, 14],"float16"), Tensor([247, 14, 14],"float32"), weight=Tensor([247, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([247, 28, 28],"float16"), Tensor([247, 28, 28],"float32"), weight=Tensor([247, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([249, 14, 14],"float16"), Tensor([249, 14, 14],"float32"), weight=Tensor([249, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([249, 28, 28],"float16"), Tensor([249, 28, 28],"float32"), weight=Tensor([249, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([250, 14, 14],"float16"), Tensor([250, 14, 14],"float32"), weight=Tensor([250, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([250, 28, 28],"float16"), Tensor([250, 28, 28],"float32"), weight=Tensor([250, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([251, 14, 14],"float16"), Tensor([251, 14, 14],"float32"), weight=Tensor([251, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([251, 28, 28],"float16"), Tensor([251, 28, 28],"float32"), weight=Tensor([251, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([252, 14, 14],"float16"), Tensor([252, 14, 14],"float32"), weight=Tensor([252, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([252, 28, 28],"float16"), Tensor([252, 28, 28],"float32"), weight=Tensor([252, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2520, 80],"float16"), Tensor([2520, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([253, 14, 14],"float16"), Tensor([253, 14, 14],"float32"), weight=Tensor([253, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([253, 28, 28],"float16"), Tensor([253, 28, 28],"float32"), weight=Tensor([253, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([254, 14, 14],"float16"), Tensor([254, 14, 14],"float32"), weight=Tensor([254, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([254, 28, 28],"float16"), Tensor([254, 28, 28],"float32"), weight=Tensor([254, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([255, 28, 28],"float16"), Tensor([255, 28, 28],"float32"), weight=Tensor([255, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([256, 14, 14],"float16"), Tensor([256, 14, 14],"float32"), weight=Tensor([256, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([256, 28, 28],"float16"), Tensor([256, 28, 28],"float32"), weight=Tensor([256, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([257, 28, 28],"float16"), Tensor([257, 28, 28],"float32"), weight=Tensor([257, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([258, 14, 14],"float16"), Tensor([258, 14, 14],"float32"), weight=Tensor([258, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([258, 28, 28],"float16"), Tensor([258, 28, 28],"float32"), weight=Tensor([258, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2584, 80],"float16"), Tensor([2584, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([259, 28, 28],"float16"), Tensor([259, 28, 28],"float32"), weight=Tensor([259, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([260, 14, 14],"float16"), Tensor([260, 14, 14],"float32"), weight=Tensor([260, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([260, 28, 28],"float16"), Tensor([260, 28, 28],"float32"), weight=Tensor([260, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([261, 14, 14],"float16"), Tensor([261, 14, 14],"float32"), weight=Tensor([261, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([261, 28, 28],"float16"), Tensor([261, 28, 28],"float32"), weight=Tensor([261, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([262, 14, 14],"float16"), Tensor([262, 14, 14],"float32"), weight=Tensor([262, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([262, 28, 28],"float16"), Tensor([262, 28, 28],"float32"), weight=Tensor([262, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([263, 28, 28],"float16"), Tensor([263, 28, 28],"float32"), weight=Tensor([263, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([264, 14, 14],"float16"), Tensor([264, 14, 14],"float32"), weight=Tensor([264, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([264, 28, 28],"float16"), Tensor([264, 28, 28],"float32"), weight=Tensor([264, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([265, 14, 14],"float16"), Tensor([265, 14, 14],"float32"), weight=Tensor([265, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([265, 28, 28],"float16"), Tensor([265, 28, 28],"float32"), weight=Tensor([265, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([266, 28, 28],"float16"), Tensor([266, 28, 28],"float32"), weight=Tensor([266, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([267, 14, 14],"float16"), Tensor([267, 14, 14],"float32"), weight=Tensor([267, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([267, 28, 28],"float16"), Tensor([267, 28, 28],"float32"), weight=Tensor([267, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([268, 28, 28],"float16"), Tensor([268, 28, 28],"float32"), weight=Tensor([268, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2688, 80],"float16"), Tensor([2688, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([269, 14, 14],"float16"), Tensor([269, 14, 14],"float32"), weight=Tensor([269, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([269, 28, 28],"float16"), Tensor([269, 28, 28],"float32"), weight=Tensor([269, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([270, 14, 14],"float16"), Tensor([270, 14, 14],"float32"), weight=Tensor([270, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([270, 28, 28],"float16"), Tensor([270, 28, 28],"float32"), weight=Tensor([270, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([270072],"float16"), Tensor([270072],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([271, 14, 14],"float16"), Tensor([271, 14, 14],"float32"), weight=Tensor([271, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([271, 28, 28],"float16"), Tensor([271, 28, 28],"float32"), weight=Tensor([271, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([272, 28, 28],"float16"), Tensor([272, 28, 28],"float32"), weight=Tensor([272, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2720, 80],"float16"), Tensor([2720, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([272800],"float16"), Tensor([272800],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([273, 14, 14],"float16"), Tensor([273, 14, 14],"float32"), weight=Tensor([273, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([273, 28, 28],"float16"), Tensor([273, 28, 28],"float32"), weight=Tensor([273, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2736, 80],"float16"), Tensor([2736, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([274, 14, 14],"float16"), Tensor([274, 14, 14],"float32"), weight=Tensor([274, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([275, 14, 14],"float16"), Tensor([275, 14, 14],"float32"), weight=Tensor([275, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([275, 28, 28],"float16"), Tensor([275, 28, 28],"float32"), weight=Tensor([275, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([276, 14, 14],"float16"), Tensor([276, 14, 14],"float32"), weight=Tensor([276, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([276, 28, 28],"float16"), Tensor([276, 28, 28],"float32"), weight=Tensor([276, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([277, 14, 14],"float16"), Tensor([277, 14, 14],"float32"), weight=Tensor([277, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([277, 28, 28],"float16"), Tensor([277, 28, 28],"float32"), weight=Tensor([277, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([278, 14, 14],"float16"), Tensor([278, 14, 14],"float32"), weight=Tensor([278, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([278, 28, 28],"float16"), Tensor([278, 28, 28],"float32"), weight=Tensor([278, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([279, 28, 28],"float16"), Tensor([279, 28, 28],"float32"), weight=Tensor([279, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([280, 14, 14],"float16"), Tensor([280, 14, 14],"float32"), weight=Tensor([280, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([280, 28, 28],"float16"), Tensor([280, 28, 28],"float32"), weight=Tensor([280, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([281, 28, 28],"float16"), Tensor([281, 28, 28],"float32"), weight=Tensor([281, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([282, 14, 14],"float16"), Tensor([282, 14, 14],"float32"), weight=Tensor([282, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([282, 28, 28],"float16"), Tensor([282, 28, 28],"float32"), weight=Tensor([282, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([283, 14, 14],"float16"), Tensor([283, 14, 14],"float32"), weight=Tensor([283, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([283, 28, 28],"float16"), Tensor([283, 28, 28],"float32"), weight=Tensor([283, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([284, 28, 28],"float16"), Tensor([284, 28, 28],"float32"), weight=Tensor([284, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([285, 14, 14],"float16"), Tensor([285, 14, 14],"float32"), weight=Tensor([285, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([285, 28, 28],"float16"), Tensor([285, 28, 28],"float32"), weight=Tensor([285, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2856, 80],"float16"), Tensor([2856, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([286, 14, 14],"float16"), Tensor([286, 14, 14],"float32"), weight=Tensor([286, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([286, 28, 28],"float16"), Tensor([286, 28, 28],"float32"), weight=Tensor([286, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([287, 14, 14],"float16"), Tensor([287, 14, 14],"float32"), weight=Tensor([287, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([287, 28, 28],"float16"), Tensor([287, 28, 28],"float32"), weight=Tensor([287, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([288, 14, 14],"float16"), Tensor([288, 14, 14],"float32"), weight=Tensor([288, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([288, 28, 28],"float16"), Tensor([288, 28, 28],"float32"), weight=Tensor([288, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2880, 80],"float16"), Tensor([2880, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2888, 80],"float16"), Tensor([2888, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([289, 14, 14],"float16"), Tensor([289, 14, 14],"float32"), weight=Tensor([289, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([289, 28, 28],"float16"), Tensor([289, 28, 28],"float32"), weight=Tensor([289, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([290, 14, 14],"float16"), Tensor([290, 14, 14],"float32"), weight=Tensor([290, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([290, 28, 28],"float16"), Tensor([290, 28, 28],"float32"), weight=Tensor([290, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([291, 28, 28],"float16"), Tensor([291, 28, 28],"float32"), weight=Tensor([291, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([292, 14, 14],"float16"), Tensor([292, 14, 14],"float32"), weight=Tensor([292, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([292, 28, 28],"float16"), Tensor([292, 28, 28],"float32"), weight=Tensor([292, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([293, 14, 14],"float16"), Tensor([293, 14, 14],"float32"), weight=Tensor([293, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([293, 28, 28],"float16"), Tensor([293, 28, 28],"float32"), weight=Tensor([293, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([294, 14, 14],"float16"), Tensor([294, 14, 14],"float32"), weight=Tensor([294, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([294, 28, 28],"float16"), Tensor([294, 28, 28],"float32"), weight=Tensor([294, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([295, 14, 14],"float16"), Tensor([295, 14, 14],"float32"), weight=Tensor([295, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([295, 28, 28],"float16"), Tensor([295, 28, 28],"float32"), weight=Tensor([295, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([296, 14, 14],"float16"), Tensor([296, 14, 14],"float32"), weight=Tensor([296, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([296, 28, 28],"float16"), Tensor([296, 28, 28],"float32"), weight=Tensor([296, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([297, 14, 14],"float16"), Tensor([297, 14, 14],"float32"), weight=Tensor([297, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([297, 28, 28],"float16"), Tensor([297, 28, 28],"float32"), weight=Tensor([297, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([298, 14, 14],"float16"), Tensor([298, 14, 14],"float32"), weight=Tensor([298, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([298, 28, 28],"float16"), Tensor([298, 28, 28],"float32"), weight=Tensor([298, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([299, 14, 14],"float16"), Tensor([299, 14, 14],"float32"), weight=Tensor([299, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([299, 28, 28],"float16"), Tensor([299, 28, 28],"float32"), weight=Tensor([299, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 14, 14],"float16"), Tensor([300, 14, 14],"float32"), weight=Tensor([300, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 28, 28],"float16"), Tensor([300, 28, 28],"float32"), weight=Tensor([300, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300080],"float16"), Tensor([300080],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([301, 14, 14],"float16"), Tensor([301, 14, 14],"float32"), weight=Tensor([301, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([301, 28, 28],"float16"), Tensor([301, 28, 28],"float32"), weight=Tensor([301, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([302, 14, 14],"float16"), Tensor([302, 14, 14],"float32"), weight=Tensor([302, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([302, 28, 28],"float16"), Tensor([302, 28, 28],"float32"), weight=Tensor([302, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([3024, 80],"float16"), Tensor([3024, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([303, 14, 14],"float16"), Tensor([303, 14, 14],"float32"), weight=Tensor([303, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([303, 28, 28],"float16"), Tensor([303, 28, 28],"float32"), weight=Tensor([303, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([304, 14, 14],"float16"), Tensor([304, 14, 14],"float32"), weight=Tensor([304, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([304, 28, 28],"float16"), Tensor([304, 28, 28],"float32"), weight=Tensor([304, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([3040, 80],"float16"), Tensor([3040, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([30400, 80],"float16"), Tensor([30400, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([305, 14, 14],"float16"), Tensor([305, 14, 14],"float32"), weight=Tensor([305, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([306, 28, 28],"float16"), Tensor([306, 28, 28],"float32"), weight=Tensor([306, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([307, 14, 14],"float16"), Tensor([307, 14, 14],"float32"), weight=Tensor([307, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([307, 28, 28],"float16"), Tensor([307, 28, 28],"float32"), weight=Tensor([307, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([308, 14, 14],"float16"), Tensor([308, 14, 14],"float32"), weight=Tensor([308, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([308, 28, 28],"float16"), Tensor([308, 28, 28],"float32"), weight=Tensor([308, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([309, 14, 14],"float16"), Tensor([309, 14, 14],"float32"), weight=Tensor([309, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([310, 14, 14],"float16"), Tensor([310, 14, 14],"float32"), weight=Tensor([310, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([310, 28, 28],"float16"), Tensor([310, 28, 28],"float32"), weight=Tensor([310, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([311, 14, 14],"float16"), Tensor([311, 14, 14],"float32"), weight=Tensor([311, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([311, 28, 28],"float16"), Tensor([311, 28, 28],"float32"), weight=Tensor([311, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([312, 14, 14],"float16"), Tensor([312, 14, 14],"float32"), weight=Tensor([312, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([312, 28, 28],"float16"), Tensor([312, 28, 28],"float32"), weight=Tensor([312, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([31200, 80],"float16"), Tensor([31200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([313, 28, 28],"float16"), Tensor([313, 28, 28],"float32"), weight=Tensor([313, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([314, 14, 14],"float16"), Tensor([314, 14, 14],"float32"), weight=Tensor([314, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([314, 28, 28],"float16"), Tensor([314, 28, 28],"float32"), weight=Tensor([314, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([315, 14, 14],"float16"), Tensor([315, 14, 14],"float32"), weight=Tensor([315, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([315, 28, 28],"float16"), Tensor([315, 28, 28],"float32"), weight=Tensor([315, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([316, 14, 14],"float16"), Tensor([316, 14, 14],"float32"), weight=Tensor([316, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([316, 28, 28],"float16"), Tensor([316, 28, 28],"float32"), weight=Tensor([316, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([31616, 80],"float16"), Tensor([31616, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([317, 14, 14],"float16"), Tensor([317, 14, 14],"float32"), weight=Tensor([317, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([317, 28, 28],"float16"), Tensor([317, 28, 28],"float32"), weight=Tensor([317, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([318, 14, 14],"float16"), Tensor([318, 14, 14],"float32"), weight=Tensor([318, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([318, 28, 28],"float16"), Tensor([318, 28, 28],"float32"), weight=Tensor([318, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([319, 14, 14],"float16"), Tensor([319, 14, 14],"float32"), weight=Tensor([319, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([319, 28, 28],"float16"), Tensor([319, 28, 28],"float32"), weight=Tensor([319, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([3192, 80],"float16"), Tensor([3192, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([320, 14, 14],"float16"), Tensor([320, 14, 14],"float32"), weight=Tensor([320, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([320, 28, 28],"float16"), Tensor([320, 28, 28],"float32"), weight=Tensor([320, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([3200, 80],"float16"), Tensor([3200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([32000, 80],"float16"), Tensor([32000, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([321, 14, 14],"float16"), Tensor([321, 14, 14],"float32"), weight=Tensor([321, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([321, 28, 28],"float16"), Tensor([321, 28, 28],"float32"), weight=Tensor([321, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([322, 14, 14],"float16"), Tensor([322, 14, 14],"float32"), weight=Tensor([322, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([322, 28, 28],"float16"), Tensor([322, 28, 28],"float32"), weight=Tensor([322, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([323, 14, 14],"float16"), Tensor([323, 14, 14],"float32"), weight=Tensor([323, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([323, 28, 28],"float16"), Tensor([323, 28, 28],"float32"), weight=Tensor([323, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([324, 14, 14],"float16"), Tensor([324, 14, 14],"float32"), weight=Tensor([324, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([324, 28, 28],"float16"), Tensor([324, 28, 28],"float32"), weight=Tensor([324, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([325, 14, 14],"float16"), Tensor([325, 14, 14],"float32"), weight=Tensor([325, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([325, 28, 28],"float16"), Tensor([325, 28, 28],"float32"), weight=Tensor([325, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([326, 14, 14],"float16"), Tensor([326, 14, 14],"float32"), weight=Tensor([326, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([326, 28, 28],"float16"), Tensor([326, 28, 28],"float32"), weight=Tensor([326, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([327, 14, 14],"float16"), Tensor([327, 14, 14],"float32"), weight=Tensor([327, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([327, 28, 28],"float16"), Tensor([327, 28, 28],"float32"), weight=Tensor([327, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([328, 14, 14],"float16"), Tensor([328, 14, 14],"float32"), weight=Tensor([328, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([328, 28, 28],"float16"), Tensor([328, 28, 28],"float32"), weight=Tensor([328, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([32832, 80],"float16"), Tensor([32832, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([329, 14, 14],"float16"), Tensor([329, 14, 14],"float32"), weight=Tensor([329, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([329, 28, 28],"float16"), Tensor([329, 28, 28],"float32"), weight=Tensor([329, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([330, 28, 28],"float16"), Tensor([330, 28, 28],"float32"), weight=Tensor([330, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([330088],"float16"), Tensor([330088],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([331, 14, 14],"float16"), Tensor([331, 14, 14],"float32"), weight=Tensor([331, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([331, 28, 28],"float16"), Tensor([331, 28, 28],"float32"), weight=Tensor([331, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([332, 14, 14],"float16"), Tensor([332, 14, 14],"float32"), weight=Tensor([332, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([332, 28, 28],"float16"), Tensor([332, 28, 28],"float32"), weight=Tensor([332, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([333, 28, 28],"float16"), Tensor([333, 28, 28],"float32"), weight=Tensor([333, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([334, 28, 28],"float16"), Tensor([334, 28, 28],"float32"), weight=Tensor([334, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([335, 28, 28],"float16"), Tensor([335, 28, 28],"float32"), weight=Tensor([335, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([336, 14, 14],"float16"), Tensor([336, 14, 14],"float32"), weight=Tensor([336, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([336, 28, 28],"float16"), Tensor([336, 28, 28],"float32"), weight=Tensor([336, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([3360, 80],"float16"), Tensor([3360, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([33600, 80],"float16"), Tensor([33600, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([33696, 80],"float16"), Tensor([33696, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([337, 14, 14],"float16"), Tensor([337, 14, 14],"float32"), weight=Tensor([337, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([337, 28, 28],"float16"), Tensor([337, 28, 28],"float32"), weight=Tensor([337, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([338, 28, 28],"float16"), Tensor([338, 28, 28],"float32"), weight=Tensor([338, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([339, 14, 14],"float16"), Tensor([339, 14, 14],"float32"), weight=Tensor([339, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([339, 28, 28],"float16"), Tensor([339, 28, 28],"float32"), weight=Tensor([339, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([340, 14, 14],"float16"), Tensor([340, 14, 14],"float32"), weight=Tensor([340, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([340, 28, 28],"float16"), Tensor([340, 28, 28],"float32"), weight=Tensor([340, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([341, 28, 28],"float16"), Tensor([341, 28, 28],"float32"), weight=Tensor([341, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([34112, 80],"float16"), Tensor([34112, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([342, 14, 14],"float16"), Tensor([342, 14, 14],"float32"), weight=Tensor([342, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([342, 28, 28],"float16"), Tensor([342, 28, 28],"float32"), weight=Tensor([342, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([343, 14, 14],"float16"), Tensor([343, 14, 14],"float32"), weight=Tensor([343, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([343, 28, 28],"float16"), Tensor([343, 28, 28],"float32"), weight=Tensor([343, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([344, 14, 14],"float16"), Tensor([344, 14, 14],"float32"), weight=Tensor([344, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([344, 28, 28],"float16"), Tensor([344, 28, 28],"float32"), weight=Tensor([344, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([345, 14, 14],"float16"), Tensor([345, 14, 14],"float32"), weight=Tensor([345, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([346, 14, 14],"float16"), Tensor([346, 14, 14],"float32"), weight=Tensor([346, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([346, 28, 28],"float16"), Tensor([346, 28, 28],"float32"), weight=Tensor([346, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([347, 14, 14],"float16"), Tensor([347, 14, 14],"float32"), weight=Tensor([347, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([348, 28, 28],"float16"), Tensor([348, 28, 28],"float32"), weight=Tensor([348, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([349, 28, 28],"float16"), Tensor([349, 28, 28],"float32"), weight=Tensor([349, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([34944, 80],"float16"), Tensor([34944, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([350, 14, 14],"float16"), Tensor([350, 14, 14],"float32"), weight=Tensor([350, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([350, 28, 28],"float16"), Tensor([350, 28, 28],"float32"), weight=Tensor([350, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([352, 28, 28],"float16"), Tensor([352, 28, 28],"float32"), weight=Tensor([352, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([35264, 80],"float16"), Tensor([35264, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([3528, 80],"float16"), Tensor([3528, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([353, 14, 14],"float16"), Tensor([353, 14, 14],"float32"), weight=Tensor([353, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([353, 28, 28],"float16"), Tensor([353, 28, 28],"float32"), weight=Tensor([353, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([354, 14, 14],"float16"), Tensor([354, 14, 14],"float32"), weight=Tensor([354, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([354, 28, 28],"float16"), Tensor([354, 28, 28],"float32"), weight=Tensor([354, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([355, 14, 14],"float16"), Tensor([355, 14, 14],"float32"), weight=Tensor([355, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([355, 28, 28],"float16"), Tensor([355, 28, 28],"float32"), weight=Tensor([355, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([356, 14, 14],"float16"), Tensor([356, 14, 14],"float32"), weight=Tensor([356, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([356, 28, 28],"float16"), Tensor([356, 28, 28],"float32"), weight=Tensor([356, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([357, 28, 28],"float16"), Tensor([357, 28, 28],"float32"), weight=Tensor([357, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([358, 14, 14],"float16"), Tensor([358, 14, 14],"float32"), weight=Tensor([358, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([358, 28, 28],"float16"), Tensor([358, 28, 28],"float32"), weight=Tensor([358, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([359, 14, 14],"float16"), Tensor([359, 14, 14],"float32"), weight=Tensor([359, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([359, 28, 28],"float16"), Tensor([359, 28, 28],"float32"), weight=Tensor([359, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([360, 14, 14],"float16"), Tensor([360, 14, 14],"float32"), weight=Tensor([360, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([360, 28, 28],"float16"), Tensor([360, 28, 28],"float32"), weight=Tensor([360, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([361, 14, 14],"float16"), Tensor([361, 14, 14],"float32"), weight=Tensor([361, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([362, 14, 14],"float16"), Tensor([362, 14, 14],"float32"), weight=Tensor([362, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([362, 28, 28],"float16"), Tensor([362, 28, 28],"float32"), weight=Tensor([362, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([363, 14, 14],"float16"), Tensor([363, 14, 14],"float32"), weight=Tensor([363, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([364, 28, 28],"float16"), Tensor([364, 28, 28],"float32"), weight=Tensor([364, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([365, 14, 14],"float16"), Tensor([365, 14, 14],"float32"), weight=Tensor([365, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([365, 28, 28],"float16"), Tensor([365, 28, 28],"float32"), weight=Tensor([365, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([366, 14, 14],"float16"), Tensor([366, 14, 14],"float32"), weight=Tensor([366, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([366, 28, 28],"float16"), Tensor([366, 28, 28],"float32"), weight=Tensor([366, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([367, 14, 14],"float16"), Tensor([367, 14, 14],"float32"), weight=Tensor([367, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([367, 28, 28],"float16"), Tensor([367, 28, 28],"float32"), weight=Tensor([367, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([368, 14, 14],"float16"), Tensor([368, 14, 14],"float32"), weight=Tensor([368, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([368, 28, 28],"float16"), Tensor([368, 28, 28],"float32"), weight=Tensor([368, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([369, 14, 14],"float16"), Tensor([369, 14, 14],"float32"), weight=Tensor([369, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([369, 28, 28],"float16"), Tensor([369, 28, 28],"float32"), weight=Tensor([369, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([370, 14, 14],"float16"), Tensor([370, 14, 14],"float32"), weight=Tensor([370, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([371, 28, 28],"float16"), Tensor([371, 28, 28],"float32"), weight=Tensor([371, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([372, 28, 28],"float16"), Tensor([372, 28, 28],"float32"), weight=Tensor([372, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([373, 14, 14],"float16"), Tensor([373, 14, 14],"float32"), weight=Tensor([373, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([374, 14, 14],"float16"), Tensor([374, 14, 14],"float32"), weight=Tensor([374, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([374, 28, 28],"float16"), Tensor([374, 28, 28],"float32"), weight=Tensor([374, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([375, 14, 14],"float16"), Tensor([375, 14, 14],"float32"), weight=Tensor([375, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([375, 28, 28],"float16"), Tensor([375, 28, 28],"float32"), weight=Tensor([375, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([376, 14, 14],"float16"), Tensor([376, 14, 14],"float32"), weight=Tensor([376, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([376, 28, 28],"float16"), Tensor([376, 28, 28],"float32"), weight=Tensor([376, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([37696, 80],"float16"), Tensor([37696, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([377, 14, 14],"float16"), Tensor([377, 14, 14],"float32"), weight=Tensor([377, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([377, 28, 28],"float16"), Tensor([377, 28, 28],"float32"), weight=Tensor([377, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([378, 28, 28],"float16"), Tensor([378, 28, 28],"float32"), weight=Tensor([378, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([379, 14, 14],"float16"), Tensor([379, 14, 14],"float32"), weight=Tensor([379, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([379, 28, 28],"float16"), Tensor([379, 28, 28],"float32"), weight=Tensor([379, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([380, 28, 28],"float16"), Tensor([380, 28, 28],"float32"), weight=Tensor([380, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([381, 14, 14],"float16"), Tensor([381, 14, 14],"float32"), weight=Tensor([381, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([381, 28, 28],"float16"), Tensor([381, 28, 28],"float32"), weight=Tensor([381, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([382, 14, 14],"float16"), Tensor([382, 14, 14],"float32"), weight=Tensor([382, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([382, 28, 28],"float16"), Tensor([382, 28, 28],"float32"), weight=Tensor([382, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([383, 14, 14],"float16"), Tensor([383, 14, 14],"float32"), weight=Tensor([383, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([383, 28, 28],"float16"), Tensor([383, 28, 28],"float32"), weight=Tensor([383, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([384, 14, 14],"float16"), Tensor([384, 14, 14],"float32"), weight=Tensor([384, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([384, 28, 28],"float16"), Tensor([384, 28, 28],"float32"), weight=Tensor([384, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([385, 14, 14],"float16"), Tensor([385, 14, 14],"float32"), weight=Tensor([385, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([385, 28, 28],"float16"), Tensor([385, 28, 28],"float32"), weight=Tensor([385, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([386, 14, 14],"float16"), Tensor([386, 14, 14],"float32"), weight=Tensor([386, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([386, 28, 28],"float16"), Tensor([386, 28, 28],"float32"), weight=Tensor([386, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([387, 14, 14],"float16"), Tensor([387, 14, 14],"float32"), weight=Tensor([387, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([387, 28, 28],"float16"), Tensor([387, 28, 28],"float32"), weight=Tensor([387, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([388, 14, 14],"float16"), Tensor([388, 14, 14],"float32"), weight=Tensor([388, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([388, 28, 28],"float16"), Tensor([388, 28, 28],"float32"), weight=Tensor([388, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([389, 28, 28],"float16"), Tensor([389, 28, 28],"float32"), weight=Tensor([389, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([38912, 80],"float16"), Tensor([38912, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([38976, 80],"float16"), Tensor([38976, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([390, 14, 14],"float16"), Tensor([390, 14, 14],"float32"), weight=Tensor([390, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([39168, 80],"float16"), Tensor([39168, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([392, 14, 14],"float16"), Tensor([392, 14, 14],"float32"), weight=Tensor([392, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([392, 28, 28],"float16"), Tensor([392, 28, 28],"float32"), weight=Tensor([392, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([393, 14, 14],"float16"), Tensor([393, 14, 14],"float32"), weight=Tensor([393, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([393, 28, 28],"float16"), Tensor([393, 28, 28],"float32"), weight=Tensor([393, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([394, 14, 14],"float16"), Tensor([394, 14, 14],"float32"), weight=Tensor([394, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([394, 28, 28],"float16"), Tensor([394, 28, 28],"float32"), weight=Tensor([394, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([395, 28, 28],"float16"), Tensor([395, 28, 28],"float32"), weight=Tensor([395, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([396, 28, 28],"float16"), Tensor([396, 28, 28],"float32"), weight=Tensor([396, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([397, 28, 28],"float16"), Tensor([397, 28, 28],"float32"), weight=Tensor([397, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([398, 28, 28],"float16"), Tensor([398, 28, 28],"float32"), weight=Tensor([398, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([399, 28, 28],"float16"), Tensor([399, 28, 28],"float32"), weight=Tensor([399, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([400, 14, 14],"float16"), Tensor([400, 14, 14],"float32"), weight=Tensor([400, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([400, 28, 28],"float16"), Tensor([400, 28, 28],"float32"), weight=Tensor([400, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([401, 14, 14],"float16"), Tensor([401, 14, 14],"float32"), weight=Tensor([401, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([401, 28, 28],"float16"), Tensor([401, 28, 28],"float32"), weight=Tensor([401, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([40128, 80],"float16"), Tensor([40128, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([402, 28, 28],"float16"), Tensor([402, 28, 28],"float32"), weight=Tensor([402, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([40256, 80],"float16"), Tensor([40256, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([403, 28, 28],"float16"), Tensor([403, 28, 28],"float32"), weight=Tensor([403, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([404, 14, 14],"float16"), Tensor([404, 14, 14],"float32"), weight=Tensor([404, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([405, 14, 14],"float16"), Tensor([405, 14, 14],"float32"), weight=Tensor([405, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([405, 28, 28],"float16"), Tensor([405, 28, 28],"float32"), weight=Tensor([405, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([406, 28, 28],"float16"), Tensor([406, 28, 28],"float32"), weight=Tensor([406, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([407, 28, 28],"float16"), Tensor([407, 28, 28],"float32"), weight=Tensor([407, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([408, 14, 14],"float16"), Tensor([408, 14, 14],"float32"), weight=Tensor([408, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([408, 28, 28],"float16"), Tensor([408, 28, 28],"float32"), weight=Tensor([408, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([409, 14, 14],"float16"), Tensor([409, 14, 14],"float32"), weight=Tensor([409, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([410, 14, 14],"float16"), Tensor([410, 14, 14],"float32"), weight=Tensor([410, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([410, 28, 28],"float16"), Tensor([410, 28, 28],"float32"), weight=Tensor([410, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([411, 14, 14],"float16"), Tensor([411, 14, 14],"float32"), weight=Tensor([411, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([411, 28, 28],"float16"), Tensor([411, 28, 28],"float32"), weight=Tensor([411, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([413, 14, 14],"float16"), Tensor([413, 14, 14],"float32"), weight=Tensor([413, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([413, 28, 28],"float16"), Tensor([413, 28, 28],"float32"), weight=Tensor([413, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([41344, 80],"float16"), Tensor([41344, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([414, 28, 28],"float16"), Tensor([414, 28, 28],"float32"), weight=Tensor([414, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([415, 28, 28],"float16"), Tensor([415, 28, 28],"float32"), weight=Tensor([415, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([417, 14, 14],"float16"), Tensor([417, 14, 14],"float32"), weight=Tensor([417, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([417, 28, 28],"float16"), Tensor([417, 28, 28],"float32"), weight=Tensor([417, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([418, 14, 14],"float16"), Tensor([418, 14, 14],"float32"), weight=Tensor([418, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([418, 28, 28],"float16"), Tensor([418, 28, 28],"float32"), weight=Tensor([418, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([419, 14, 14],"float16"), Tensor([419, 14, 14],"float32"), weight=Tensor([419, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([419, 28, 28],"float16"), Tensor([419, 28, 28],"float32"), weight=Tensor([419, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([421, 14, 14],"float16"), Tensor([421, 14, 14],"float32"), weight=Tensor([421, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([421, 28, 28],"float16"), Tensor([421, 28, 28],"float32"), weight=Tensor([421, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([422, 28, 28],"float16"), Tensor([422, 28, 28],"float32"), weight=Tensor([422, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([423, 14, 14],"float16"), Tensor([423, 14, 14],"float32"), weight=Tensor([423, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([423, 28, 28],"float16"), Tensor([423, 28, 28],"float32"), weight=Tensor([423, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([424, 28, 28],"float16"), Tensor([424, 28, 28],"float32"), weight=Tensor([424, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([42432, 80],"float16"), Tensor([42432, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([425, 28, 28],"float16"), Tensor([425, 28, 28],"float32"), weight=Tensor([425, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([42560, 80],"float16"), Tensor([42560, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([426, 28, 28],"float16"), Tensor([426, 28, 28],"float32"), weight=Tensor([426, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([427, 28, 28],"float16"), Tensor([427, 28, 28],"float32"), weight=Tensor([427, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([428, 14, 14],"float16"), Tensor([428, 14, 14],"float32"), weight=Tensor([428, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([428, 28, 28],"float16"), Tensor([428, 28, 28],"float32"), weight=Tensor([428, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([429, 14, 14],"float16"), Tensor([429, 14, 14],"float32"), weight=Tensor([429, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([429, 28, 28],"float16"), Tensor([429, 28, 28],"float32"), weight=Tensor([429, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([430, 14, 14],"float16"), Tensor([430, 14, 14],"float32"), weight=Tensor([430, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([43008, 80],"float16"), Tensor([43008, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([431, 14, 14],"float16"), Tensor([431, 14, 14],"float32"), weight=Tensor([431, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([431, 28, 28],"float16"), Tensor([431, 28, 28],"float32"), weight=Tensor([431, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([432, 28, 28],"float16"), Tensor([432, 28, 28],"float32"), weight=Tensor([432, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([433, 28, 28],"float16"), Tensor([433, 28, 28],"float32"), weight=Tensor([433, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([434, 14, 14],"float16"), Tensor([434, 14, 14],"float32"), weight=Tensor([434, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([43520, 80],"float16"), Tensor([43520, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([436, 28, 28],"float16"), Tensor([436, 28, 28],"float32"), weight=Tensor([436, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([43680, 80],"float16"), Tensor([43680, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([43776, 80],"float16"), Tensor([43776, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([439, 14, 14],"float16"), Tensor([439, 14, 14],"float32"), weight=Tensor([439, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([440, 28, 28],"float16"), Tensor([440, 28, 28],"float32"), weight=Tensor([440, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([441, 28, 28],"float16"), Tensor([441, 28, 28],"float32"), weight=Tensor([441, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([44352, 80],"float16"), Tensor([44352, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([444, 28, 28],"float16"), Tensor([444, 28, 28],"float32"), weight=Tensor([444, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([445, 28, 28],"float16"), Tensor([445, 28, 28],"float32"), weight=Tensor([445, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([44608, 80],"float16"), Tensor([44608, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([448, 14, 14],"float16"), Tensor([448, 14, 14],"float32"), weight=Tensor([448, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([448, 28, 28],"float16"), Tensor([448, 28, 28],"float32"), weight=Tensor([448, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([449, 14, 14],"float16"), Tensor([449, 14, 14],"float32"), weight=Tensor([449, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([449, 28, 28],"float16"), Tensor([449, 28, 28],"float32"), weight=Tensor([449, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([44992, 80],"float16"), Tensor([44992, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([450, 28, 28],"float16"), Tensor([450, 28, 28],"float32"), weight=Tensor([450, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([452, 14, 14],"float16"), Tensor([452, 14, 14],"float32"), weight=Tensor([452, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([452, 28, 28],"float16"), Tensor([452, 28, 28],"float32"), weight=Tensor([452, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([453, 14, 14],"float16"), Tensor([453, 14, 14],"float32"), weight=Tensor([453, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([455, 28, 28],"float16"), Tensor([455, 28, 28],"float32"), weight=Tensor([455, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([45696, 80],"float16"), Tensor([45696, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([457, 28, 28],"float16"), Tensor([457, 28, 28],"float32"), weight=Tensor([457, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([45920, 80],"float16"), Tensor([45920, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([46080, 80],"float16"), Tensor([46080, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([461, 28, 28],"float16"), Tensor([461, 28, 28],"float32"), weight=Tensor([461, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([46208, 80],"float16"), Tensor([46208, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([464, 28, 28],"float16"), Tensor([464, 28, 28],"float32"), weight=Tensor([464, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([467, 28, 28],"float16"), Tensor([467, 28, 28],"float32"), weight=Tensor([467, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([469, 14, 14],"float16"), Tensor([469, 14, 14],"float32"), weight=Tensor([469, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([470, 14, 14],"float16"), Tensor([470, 14, 14],"float32"), weight=Tensor([470, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([470, 28, 28],"float16"), Tensor([470, 28, 28],"float32"), weight=Tensor([470, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([47040, 80],"float16"), Tensor([47040, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([472, 28, 28],"float16"), Tensor([472, 28, 28],"float32"), weight=Tensor([472, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([47360, 80],"float16"), Tensor([47360, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([47424, 80],"float16"), Tensor([47424, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([478, 28, 28],"float16"), Tensor([478, 28, 28],"float32"), weight=Tensor([478, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([482, 14, 14],"float16"), Tensor([482, 14, 14],"float32"), weight=Tensor([482, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([483, 28, 28],"float16"), Tensor([483, 28, 28],"float32"), weight=Tensor([483, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([48384, 80],"float16"), Tensor([48384, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([484, 28, 28],"float16"), Tensor([484, 28, 28],"float32"), weight=Tensor([484, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([48544, 80],"float16"), Tensor([48544, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([486, 28, 28],"float16"), Tensor([486, 28, 28],"float32"), weight=Tensor([486, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([48640, 80],"float16"), Tensor([48640, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([494, 28, 28],"float16"), Tensor([494, 28, 28],"float32"), weight=Tensor([494, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([495, 14, 14],"float16"), Tensor([495, 14, 14],"float32"), weight=Tensor([495, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([49728, 80],"float16"), Tensor([49728, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([498, 14, 14],"float16"), Tensor([498, 14, 14],"float32"), weight=Tensor([498, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([49856, 80],"float16"), Tensor([49856, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([499, 28, 28],"float16"), Tensor([499, 28, 28],"float32"), weight=Tensor([499, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([505, 28, 28],"float16"), Tensor([505, 28, 28],"float32"), weight=Tensor([505, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([510, 28, 28],"float16"), Tensor([510, 28, 28],"float32"), weight=Tensor([510, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([51072, 80],"float16"), Tensor([51072, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([51168, 80],"float16"), Tensor([51168, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 14, 14],"float16"), Tensor([512, 14, 14],"float32"), weight=Tensor([512, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 28, 28],"float16"), Tensor([512, 28, 28],"float32"), weight=Tensor([512, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([51200, 80],"float16"), Tensor([51200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([52416, 80],"float16"), Tensor([52416, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([53760, 80],"float16"), Tensor([53760, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([55104, 80],"float16"), Tensor([55104, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([560, 80],"float16"), Tensor([560, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([56448, 80],"float16"), Tensor([56448, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([616, 80],"float16"), Tensor([616, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([640, 80],"float16"), Tensor([640, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([648, 80],"float16"), Tensor([648, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([704, 80],"float16"), Tensor([704, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([720, 80],"float16"), Tensor([720, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([7600, 80],"float16"), Tensor([7600, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([7800, 80],"float16"), Tensor([7800, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([7904, 80],"float16"), Tensor([7904, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([792, 80],"float16"), Tensor([792, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([80, 28, 28],"float16"), Tensor([80, 28, 28],"float32"), weight=Tensor([80, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([800, 80],"float16"), Tensor([800, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8000, 80],"float16"), Tensor([8000, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8208, 80],"float16"), Tensor([8208, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8400, 80],"float16"), Tensor([8400, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8424, 80],"float16"), Tensor([8424, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8528, 80],"float16"), Tensor([8528, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8736, 80],"float16"), Tensor([8736, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([880, 80],"float16"), Tensor([880, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([8816, 80],"float16"), Tensor([8816, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([94, 14, 14],"float16"), Tensor([94, 14, 14],"float32"), weight=Tensor([94, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([9424, 80],"float16"), Tensor([9424, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([968, 80],"float16"), Tensor([968, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([97, 28, 28],"float16"), Tensor([97, 28, 28],"float32"), weight=Tensor([97, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([9728, 80],"float16"), Tensor([9728, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([9744, 80],"float16"), Tensor([9744, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([9792, 80],"float16"), Tensor([9792, 80],"float32"), reduction="none", )
paddle.exp(Tensor([10, 2],"bfloat16"), )
paddle.exp(Tensor([4, 3, 2],"bfloat16"), )
paddle.einsum("i,j->ij", Tensor([93],"float32"), Tensor([16],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1024, 11008],"bfloat16"), Tensor([1, 1024, 11008],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1024, 4864],"bfloat16"), Tensor([1, 1024, 4864],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([2, 114, 64],"bfloat16"), Tensor([2, 114, 64],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([2, 302, 11008],"bfloat16"), Tensor([2, 302, 11008],"bfloat16"), )
paddle.mm(Tensor([32, 1, 256],"float32"), Tensor([32, 256, 576],"float16"), )
paddle.atan2(x=Tensor([6, 6],"int32"), y=Tensor([6, 6],"int32"), )
paddle.atan2(x=Tensor([6, 6],"int64"), y=Tensor([6, 6],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([104, 28, 33712],"float16"), label=Tensor([104, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 29, 33712],"float16"), label=Tensor([104, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 30, 33712],"float16"), label=Tensor([104, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 31, 33712],"float16"), label=Tensor([104, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 32, 33712],"float16"), label=Tensor([104, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 33, 33712],"float16"), label=Tensor([104, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 34, 33712],"float16"), label=Tensor([104, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 35, 33712],"float16"), label=Tensor([104, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 36, 33712],"float16"), label=Tensor([104, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 37, 33712],"float16"), label=Tensor([104, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 38, 33712],"float16"), label=Tensor([104, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 39, 33712],"float16"), label=Tensor([104, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 40, 33712],"float16"), label=Tensor([104, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 41, 33712],"float16"), label=Tensor([104, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 42, 33712],"float16"), label=Tensor([104, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 43, 33712],"float16"), label=Tensor([104, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 44, 33712],"float16"), label=Tensor([104, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 45, 33712],"float16"), label=Tensor([104, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 46, 33712],"float16"), label=Tensor([104, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 47, 33712],"float16"), label=Tensor([104, 47, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 48, 33712],"float16"), label=Tensor([104, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 49, 33712],"float16"), label=Tensor([104, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 26, 33712],"float16"), label=Tensor([112, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 27, 33712],"float16"), label=Tensor([112, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 28, 33712],"float16"), label=Tensor([112, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 29, 33712],"float16"), label=Tensor([112, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 30, 33712],"float16"), label=Tensor([112, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 31, 33712],"float16"), label=Tensor([112, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 32, 33712],"float16"), label=Tensor([112, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 33, 33712],"float16"), label=Tensor([112, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 34, 33712],"float16"), label=Tensor([112, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 35, 33712],"float16"), label=Tensor([112, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 36, 33712],"float16"), label=Tensor([112, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 37, 33712],"float16"), label=Tensor([112, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 38, 33712],"float16"), label=Tensor([112, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 39, 33712],"float16"), label=Tensor([112, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 40, 33712],"float16"), label=Tensor([112, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 41, 33712],"float16"), label=Tensor([112, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 42, 33712],"float16"), label=Tensor([112, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 43, 33712],"float16"), label=Tensor([112, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 44, 33712],"float16"), label=Tensor([112, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 45, 33712],"float16"), label=Tensor([112, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 24, 33712],"float16"), label=Tensor([120, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 25, 33712],"float16"), label=Tensor([120, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 26, 33712],"float16"), label=Tensor([120, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 27, 33712],"float16"), label=Tensor([120, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 28, 33712],"float16"), label=Tensor([120, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 29, 33712],"float16"), label=Tensor([120, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 30, 33712],"float16"), label=Tensor([120, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 31, 33712],"float16"), label=Tensor([120, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 32, 33712],"float16"), label=Tensor([120, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 33, 33712],"float16"), label=Tensor([120, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 34, 33712],"float16"), label=Tensor([120, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 35, 33712],"float16"), label=Tensor([120, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 36, 33712],"float16"), label=Tensor([120, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 37, 33712],"float16"), label=Tensor([120, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 38, 33712],"float16"), label=Tensor([120, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 39, 33712],"float16"), label=Tensor([120, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 40, 33712],"float16"), label=Tensor([120, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 41, 33712],"float16"), label=Tensor([120, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 42, 33712],"float16"), label=Tensor([120, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 23, 33712],"float16"), label=Tensor([128, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 24, 33712],"float16"), label=Tensor([128, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 25, 33712],"float16"), label=Tensor([128, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 26, 33712],"float16"), label=Tensor([128, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 27, 33712],"float16"), label=Tensor([128, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 28, 33712],"float16"), label=Tensor([128, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 29, 33712],"float16"), label=Tensor([128, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 30, 33712],"float16"), label=Tensor([128, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 31, 33712],"float16"), label=Tensor([128, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 32, 33712],"float16"), label=Tensor([128, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 33, 33712],"float16"), label=Tensor([128, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 34, 33712],"float16"), label=Tensor([128, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 35, 33712],"float16"), label=Tensor([128, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 36, 33712],"float16"), label=Tensor([128, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 37, 33712],"float16"), label=Tensor([128, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 38, 33712],"float16"), label=Tensor([128, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 39, 33712],"float16"), label=Tensor([128, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 40, 33712],"float16"), label=Tensor([128, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 21, 33712],"float16"), label=Tensor([136, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 22, 33712],"float16"), label=Tensor([136, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 23, 33712],"float16"), label=Tensor([136, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 24, 33712],"float16"), label=Tensor([136, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 25, 33712],"float16"), label=Tensor([136, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 26, 33712],"float16"), label=Tensor([136, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 27, 33712],"float16"), label=Tensor([136, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 28, 33712],"float16"), label=Tensor([136, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 29, 33712],"float16"), label=Tensor([136, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 30, 33712],"float16"), label=Tensor([136, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 31, 33712],"float16"), label=Tensor([136, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 32, 33712],"float16"), label=Tensor([136, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 33, 33712],"float16"), label=Tensor([136, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 34, 33712],"float16"), label=Tensor([136, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 35, 33712],"float16"), label=Tensor([136, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 36, 33712],"float16"), label=Tensor([136, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 37, 33712],"float16"), label=Tensor([136, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 20, 33712],"float16"), label=Tensor([144, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 21, 33712],"float16"), label=Tensor([144, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 22, 33712],"float16"), label=Tensor([144, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 23, 33712],"float16"), label=Tensor([144, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 24, 33712],"float16"), label=Tensor([144, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 25, 33712],"float16"), label=Tensor([144, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 26, 33712],"float16"), label=Tensor([144, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 27, 33712],"float16"), label=Tensor([144, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 28, 33712],"float16"), label=Tensor([144, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 29, 33712],"float16"), label=Tensor([144, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 30, 33712],"float16"), label=Tensor([144, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 31, 33712],"float16"), label=Tensor([144, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 32, 33712],"float16"), label=Tensor([144, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 33, 33712],"float16"), label=Tensor([144, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 34, 33712],"float16"), label=Tensor([144, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 35, 33712],"float16"), label=Tensor([144, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([15, 244, 33712],"float16"), label=Tensor([15, 244, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 19, 33712],"float16"), label=Tensor([152, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 20, 33712],"float16"), label=Tensor([152, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 21, 33712],"float16"), label=Tensor([152, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 22, 33712],"float16"), label=Tensor([152, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 23, 33712],"float16"), label=Tensor([152, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 24, 33712],"float16"), label=Tensor([152, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 25, 33712],"float16"), label=Tensor([152, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 26, 33712],"float16"), label=Tensor([152, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 27, 33712],"float16"), label=Tensor([152, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 28, 33712],"float16"), label=Tensor([152, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 29, 33712],"float16"), label=Tensor([152, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 30, 33712],"float16"), label=Tensor([152, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 31, 33712],"float16"), label=Tensor([152, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 32, 33712],"float16"), label=Tensor([152, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 33, 33712],"float16"), label=Tensor([152, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 109, 33712],"float16"), label=Tensor([16, 109, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 149, 33712],"float16"), label=Tensor([16, 149, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 171, 33712],"float16"), label=Tensor([16, 171, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 173, 33712],"float16"), label=Tensor([16, 173, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 174, 33712],"float16"), label=Tensor([16, 174, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 176, 33712],"float16"), label=Tensor([16, 176, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 178, 33712],"float16"), label=Tensor([16, 178, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 182, 33712],"float16"), label=Tensor([16, 182, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 205, 33712],"float16"), label=Tensor([16, 205, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 217, 33712],"float16"), label=Tensor([16, 217, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 227, 33712],"float16"), label=Tensor([16, 227, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 264, 33712],"float16"), label=Tensor([16, 264, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 17, 33712],"float16"), label=Tensor([160, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 19, 33712],"float16"), label=Tensor([160, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 20, 33712],"float16"), label=Tensor([160, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 21, 33712],"float16"), label=Tensor([160, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 22, 33712],"float16"), label=Tensor([160, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 23, 33712],"float16"), label=Tensor([160, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 24, 33712],"float16"), label=Tensor([160, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 25, 33712],"float16"), label=Tensor([160, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 26, 33712],"float16"), label=Tensor([160, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 27, 33712],"float16"), label=Tensor([160, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 28, 33712],"float16"), label=Tensor([160, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 29, 33712],"float16"), label=Tensor([160, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 30, 33712],"float16"), label=Tensor([160, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 31, 33712],"float16"), label=Tensor([160, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 32, 33712],"float16"), label=Tensor([160, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 17, 33712],"float16"), label=Tensor([168, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 18, 33712],"float16"), label=Tensor([168, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 19, 33712],"float16"), label=Tensor([168, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 20, 33712],"float16"), label=Tensor([168, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 21, 33712],"float16"), label=Tensor([168, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 22, 33712],"float16"), label=Tensor([168, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 23, 33712],"float16"), label=Tensor([168, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 24, 33712],"float16"), label=Tensor([168, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 25, 33712],"float16"), label=Tensor([168, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 26, 33712],"float16"), label=Tensor([168, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 27, 33712],"float16"), label=Tensor([168, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 28, 33712],"float16"), label=Tensor([168, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 29, 33712],"float16"), label=Tensor([168, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 30, 33712],"float16"), label=Tensor([168, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 16, 33712],"float16"), label=Tensor([176, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 17, 33712],"float16"), label=Tensor([176, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 18, 33712],"float16"), label=Tensor([176, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 19, 33712],"float16"), label=Tensor([176, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 20, 33712],"float16"), label=Tensor([176, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 21, 33712],"float16"), label=Tensor([176, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 22, 33712],"float16"), label=Tensor([176, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 23, 33712],"float16"), label=Tensor([176, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 24, 33712],"float16"), label=Tensor([176, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 25, 33712],"float16"), label=Tensor([176, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 26, 33712],"float16"), label=Tensor([176, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 27, 33712],"float16"), label=Tensor([176, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 28, 33712],"float16"), label=Tensor([176, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 29, 33712],"float16"), label=Tensor([176, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 16, 33712],"float16"), label=Tensor([184, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 17, 33712],"float16"), label=Tensor([184, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 18, 33712],"float16"), label=Tensor([184, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 19, 33712],"float16"), label=Tensor([184, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 20, 33712],"float16"), label=Tensor([184, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 21, 33712],"float16"), label=Tensor([184, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 22, 33712],"float16"), label=Tensor([184, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 23, 33712],"float16"), label=Tensor([184, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 24, 33712],"float16"), label=Tensor([184, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 25, 33712],"float16"), label=Tensor([184, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 26, 33712],"float16"), label=Tensor([184, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 27, 33712],"float16"), label=Tensor([184, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 15, 33712],"float16"), label=Tensor([192, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 16, 33712],"float16"), label=Tensor([192, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 17, 33712],"float16"), label=Tensor([192, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 18, 33712],"float16"), label=Tensor([192, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 19, 33712],"float16"), label=Tensor([192, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 20, 33712],"float16"), label=Tensor([192, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 21, 33712],"float16"), label=Tensor([192, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 22, 33712],"float16"), label=Tensor([192, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 23, 33712],"float16"), label=Tensor([192, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 24, 33712],"float16"), label=Tensor([192, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 25, 33712],"float16"), label=Tensor([192, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 26, 33712],"float16"), label=Tensor([192, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 14, 33712],"float16"), label=Tensor([200, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 15, 33712],"float16"), label=Tensor([200, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 16, 33712],"float16"), label=Tensor([200, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 17, 33712],"float16"), label=Tensor([200, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 18, 33712],"float16"), label=Tensor([200, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 19, 33712],"float16"), label=Tensor([200, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 20, 33712],"float16"), label=Tensor([200, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 21, 33712],"float16"), label=Tensor([200, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 22, 33712],"float16"), label=Tensor([200, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 23, 33712],"float16"), label=Tensor([200, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 24, 33712],"float16"), label=Tensor([200, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 25, 33712],"float16"), label=Tensor([200, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 14, 33712],"float16"), label=Tensor([208, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 15, 33712],"float16"), label=Tensor([208, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 16, 33712],"float16"), label=Tensor([208, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 17, 33712],"float16"), label=Tensor([208, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 18, 33712],"float16"), label=Tensor([208, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 19, 33712],"float16"), label=Tensor([208, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 20, 33712],"float16"), label=Tensor([208, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 21, 33712],"float16"), label=Tensor([208, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 22, 33712],"float16"), label=Tensor([208, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 23, 33712],"float16"), label=Tensor([208, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 24, 33712],"float16"), label=Tensor([208, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 17, 33712],"float16"), label=Tensor([216, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 18, 33712],"float16"), label=Tensor([216, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 19, 33712],"float16"), label=Tensor([216, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 20, 33712],"float16"), label=Tensor([216, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 21, 33712],"float16"), label=Tensor([216, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 22, 33712],"float16"), label=Tensor([216, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 23, 33712],"float16"), label=Tensor([216, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 13, 33712],"float16"), label=Tensor([224, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 14, 33712],"float16"), label=Tensor([224, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 15, 33712],"float16"), label=Tensor([224, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 16, 33712],"float16"), label=Tensor([224, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 17, 33712],"float16"), label=Tensor([224, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 18, 33712],"float16"), label=Tensor([224, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 16, 33712],"float16"), label=Tensor([232, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 17, 33712],"float16"), label=Tensor([232, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 18, 33712],"float16"), label=Tensor([232, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 19, 33712],"float16"), label=Tensor([232, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 20, 33712],"float16"), label=Tensor([232, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 21, 33712],"float16"), label=Tensor([232, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 22, 33712],"float16"), label=Tensor([232, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 113, 33712],"float16"), label=Tensor([24, 113, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 114, 33712],"float16"), label=Tensor([24, 114, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 116, 33712],"float16"), label=Tensor([24, 116, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 117, 33712],"float16"), label=Tensor([24, 117, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 122, 33712],"float16"), label=Tensor([24, 122, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 129, 33712],"float16"), label=Tensor([24, 129, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 130, 33712],"float16"), label=Tensor([24, 130, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 131, 33712],"float16"), label=Tensor([24, 131, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 132, 33712],"float16"), label=Tensor([24, 132, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 133, 33712],"float16"), label=Tensor([24, 133, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 135, 33712],"float16"), label=Tensor([24, 135, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 136, 33712],"float16"), label=Tensor([24, 136, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 137, 33712],"float16"), label=Tensor([24, 137, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 139, 33712],"float16"), label=Tensor([24, 139, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 140, 33712],"float16"), label=Tensor([24, 140, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 141, 33712],"float16"), label=Tensor([24, 141, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 142, 33712],"float16"), label=Tensor([24, 142, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 144, 33712],"float16"), label=Tensor([24, 144, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 146, 33712],"float16"), label=Tensor([24, 146, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 149, 33712],"float16"), label=Tensor([24, 149, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 150, 33712],"float16"), label=Tensor([24, 150, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 151, 33712],"float16"), label=Tensor([24, 151, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 153, 33712],"float16"), label=Tensor([24, 153, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 154, 33712],"float16"), label=Tensor([24, 154, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 157, 33712],"float16"), label=Tensor([24, 157, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 158, 33712],"float16"), label=Tensor([24, 158, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 159, 33712],"float16"), label=Tensor([24, 159, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 162, 33712],"float16"), label=Tensor([24, 162, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 163, 33712],"float16"), label=Tensor([24, 163, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 171, 33712],"float16"), label=Tensor([24, 171, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 173, 33712],"float16"), label=Tensor([24, 173, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 174, 33712],"float16"), label=Tensor([24, 174, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 176, 33712],"float16"), label=Tensor([24, 176, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 178, 33712],"float16"), label=Tensor([24, 178, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 182, 33712],"float16"), label=Tensor([24, 182, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 205, 33712],"float16"), label=Tensor([24, 205, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 12, 33712],"float16"), label=Tensor([240, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 13, 33712],"float16"), label=Tensor([240, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 14, 33712],"float16"), label=Tensor([240, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 15, 33712],"float16"), label=Tensor([240, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 16, 33712],"float16"), label=Tensor([240, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 17, 33712],"float16"), label=Tensor([240, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 18, 33712],"float16"), label=Tensor([240, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 19, 33712],"float16"), label=Tensor([240, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 20, 33712],"float16"), label=Tensor([240, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 21, 33712],"float16"), label=Tensor([240, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 12, 33712],"float16"), label=Tensor([256, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 13, 33712],"float16"), label=Tensor([256, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 14, 33712],"float16"), label=Tensor([256, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 15, 33712],"float16"), label=Tensor([256, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 16, 33712],"float16"), label=Tensor([256, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 17, 33712],"float16"), label=Tensor([256, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 18, 33712],"float16"), label=Tensor([256, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 19, 33712],"float16"), label=Tensor([256, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 20, 33712],"float16"), label=Tensor([256, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 14, 33712],"float16"), label=Tensor([264, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 15, 33712],"float16"), label=Tensor([264, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 16, 33712],"float16"), label=Tensor([264, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 17, 33712],"float16"), label=Tensor([264, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 18, 33712],"float16"), label=Tensor([264, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 19, 33712],"float16"), label=Tensor([264, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 11, 33712],"float16"), label=Tensor([272, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 12, 33712],"float16"), label=Tensor([272, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 13, 33712],"float16"), label=Tensor([272, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 14, 33712],"float16"), label=Tensor([272, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 15, 33712],"float16"), label=Tensor([272, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 14, 33712],"float16"), label=Tensor([280, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 15, 33712],"float16"), label=Tensor([280, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 16, 33712],"float16"), label=Tensor([280, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 17, 33712],"float16"), label=Tensor([280, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 18, 33712],"float16"), label=Tensor([280, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 10, 33712],"float16"), label=Tensor([288, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 11, 33712],"float16"), label=Tensor([288, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 12, 33712],"float16"), label=Tensor([288, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 13, 33712],"float16"), label=Tensor([288, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 14, 33712],"float16"), label=Tensor([288, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 13, 33712],"float16"), label=Tensor([296, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 14, 33712],"float16"), label=Tensor([296, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 15, 33712],"float16"), label=Tensor([296, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 16, 33712],"float16"), label=Tensor([296, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 17, 33712],"float16"), label=Tensor([296, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 10, 33712],"float16"), label=Tensor([312, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 11, 33712],"float16"), label=Tensor([312, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 12, 33712],"float16"), label=Tensor([312, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 13, 33712],"float16"), label=Tensor([312, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 14, 33712],"float16"), label=Tensor([312, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 16, 33712],"float16"), label=Tensor([312, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 100, 33712],"float16"), label=Tensor([32, 100, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 101, 33712],"float16"), label=Tensor([32, 101, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 103, 33712],"float16"), label=Tensor([32, 103, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 104, 33712],"float16"), label=Tensor([32, 104, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 105, 33712],"float16"), label=Tensor([32, 105, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 106, 33712],"float16"), label=Tensor([32, 106, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 107, 33712],"float16"), label=Tensor([32, 107, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 108, 33712],"float16"), label=Tensor([32, 108, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 109, 33712],"float16"), label=Tensor([32, 109, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 110, 33712],"float16"), label=Tensor([32, 110, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 111, 33712],"float16"), label=Tensor([32, 111, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 112, 33712],"float16"), label=Tensor([32, 112, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 113, 33712],"float16"), label=Tensor([32, 113, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 114, 33712],"float16"), label=Tensor([32, 114, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 115, 33712],"float16"), label=Tensor([32, 115, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 117, 33712],"float16"), label=Tensor([32, 117, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 118, 33712],"float16"), label=Tensor([32, 118, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 121, 33712],"float16"), label=Tensor([32, 121, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 122, 33712],"float16"), label=Tensor([32, 122, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 123, 33712],"float16"), label=Tensor([32, 123, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 124, 33712],"float16"), label=Tensor([32, 124, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 125, 33712],"float16"), label=Tensor([32, 125, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 126, 33712],"float16"), label=Tensor([32, 126, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 127, 33712],"float16"), label=Tensor([32, 127, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 128, 33712],"float16"), label=Tensor([32, 128, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 129, 33712],"float16"), label=Tensor([32, 129, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 130, 33712],"float16"), label=Tensor([32, 130, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 131, 33712],"float16"), label=Tensor([32, 131, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 132, 33712],"float16"), label=Tensor([32, 132, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 133, 33712],"float16"), label=Tensor([32, 133, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 135, 33712],"float16"), label=Tensor([32, 135, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 137, 33712],"float16"), label=Tensor([32, 137, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 139, 33712],"float16"), label=Tensor([32, 139, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 140, 33712],"float16"), label=Tensor([32, 140, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 141, 33712],"float16"), label=Tensor([32, 141, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 142, 33712],"float16"), label=Tensor([32, 142, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 144, 33712],"float16"), label=Tensor([32, 144, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 146, 33712],"float16"), label=Tensor([32, 146, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 150, 33712],"float16"), label=Tensor([32, 150, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 151, 33712],"float16"), label=Tensor([32, 151, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 153, 33712],"float16"), label=Tensor([32, 153, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 154, 33712],"float16"), label=Tensor([32, 154, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 157, 33712],"float16"), label=Tensor([32, 157, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 158, 33712],"float16"), label=Tensor([32, 158, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 159, 33712],"float16"), label=Tensor([32, 159, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 87, 33712],"float16"), label=Tensor([32, 87, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 90, 33712],"float16"), label=Tensor([32, 90, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 91, 33712],"float16"), label=Tensor([32, 91, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 92, 33712],"float16"), label=Tensor([32, 92, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 96, 33712],"float16"), label=Tensor([32, 96, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 97, 33712],"float16"), label=Tensor([32, 97, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([320, 12, 33712],"float16"), label=Tensor([320, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([320, 13, 33712],"float16"), label=Tensor([320, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([320, 14, 33712],"float16"), label=Tensor([320, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([320, 15, 33712],"float16"), label=Tensor([320, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([320, 16, 33712],"float16"), label=Tensor([320, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 10, 33712],"float16"), label=Tensor([336, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 11, 33712],"float16"), label=Tensor([336, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 12, 33712],"float16"), label=Tensor([336, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 13, 33712],"float16"), label=Tensor([336, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 14, 33712],"float16"), label=Tensor([336, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 15, 33712],"float16"), label=Tensor([336, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([336, 9, 33712],"float16"), label=Tensor([336, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([352, 14, 33712],"float16"), label=Tensor([352, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([360, 11, 33712],"float16"), label=Tensor([360, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([360, 12, 33712],"float16"), label=Tensor([360, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([360, 13, 33712],"float16"), label=Tensor([360, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([360, 14, 33712],"float16"), label=Tensor([360, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([368, 10, 33712],"float16"), label=Tensor([368, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([368, 11, 33712],"float16"), label=Tensor([368, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([368, 9, 33712],"float16"), label=Tensor([368, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([392, 10, 33712],"float16"), label=Tensor([392, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([392, 11, 33712],"float16"), label=Tensor([392, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([392, 12, 33712],"float16"), label=Tensor([392, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([392, 13, 33712],"float16"), label=Tensor([392, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 100, 33712],"float16"), label=Tensor([40, 100, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 102, 33712],"float16"), label=Tensor([40, 102, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 104, 33712],"float16"), label=Tensor([40, 104, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 105, 33712],"float16"), label=Tensor([40, 105, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 107, 33712],"float16"), label=Tensor([40, 107, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 110, 33712],"float16"), label=Tensor([40, 110, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 111, 33712],"float16"), label=Tensor([40, 111, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 113, 33712],"float16"), label=Tensor([40, 113, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 114, 33712],"float16"), label=Tensor([40, 114, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 115, 33712],"float16"), label=Tensor([40, 115, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 117, 33712],"float16"), label=Tensor([40, 117, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 118, 33712],"float16"), label=Tensor([40, 118, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 122, 33712],"float16"), label=Tensor([40, 122, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 123, 33712],"float16"), label=Tensor([40, 123, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 124, 33712],"float16"), label=Tensor([40, 124, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 125, 33712],"float16"), label=Tensor([40, 125, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 127, 33712],"float16"), label=Tensor([40, 127, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 128, 33712],"float16"), label=Tensor([40, 128, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 76, 33712],"float16"), label=Tensor([40, 76, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 77, 33712],"float16"), label=Tensor([40, 77, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 80, 33712],"float16"), label=Tensor([40, 80, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 82, 33712],"float16"), label=Tensor([40, 82, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 83, 33712],"float16"), label=Tensor([40, 83, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 85, 33712],"float16"), label=Tensor([40, 85, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 86, 33712],"float16"), label=Tensor([40, 86, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 87, 33712],"float16"), label=Tensor([40, 87, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 88, 33712],"float16"), label=Tensor([40, 88, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 89, 33712],"float16"), label=Tensor([40, 89, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 90, 33712],"float16"), label=Tensor([40, 90, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 91, 33712],"float16"), label=Tensor([40, 91, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 92, 33712],"float16"), label=Tensor([40, 92, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 93, 33712],"float16"), label=Tensor([40, 93, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 94, 33712],"float16"), label=Tensor([40, 94, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 95, 33712],"float16"), label=Tensor([40, 95, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 96, 33712],"float16"), label=Tensor([40, 96, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 97, 33712],"float16"), label=Tensor([40, 97, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 98, 33712],"float16"), label=Tensor([40, 98, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([40, 99, 33712],"float16"), label=Tensor([40, 99, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([408, 10, 33712],"float16"), label=Tensor([408, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([408, 12, 33712],"float16"), label=Tensor([408, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([408, 8, 33712],"float16"), label=Tensor([408, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([408, 9, 33712],"float16"), label=Tensor([408, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([424, 10, 33712],"float16"), label=Tensor([424, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([424, 11, 33712],"float16"), label=Tensor([424, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([424, 12, 33712],"float16"), label=Tensor([424, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([424, 9, 33712],"float16"), label=Tensor([424, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([448, 8, 33712],"float16"), label=Tensor([448, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([448, 9, 33712],"float16"), label=Tensor([448, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([464, 10, 33712],"float16"), label=Tensor([464, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([464, 11, 33712],"float16"), label=Tensor([464, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([464, 9, 33712],"float16"), label=Tensor([464, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 100, 33712],"float16"), label=Tensor([48, 100, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 101, 33712],"float16"), label=Tensor([48, 101, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 102, 33712],"float16"), label=Tensor([48, 102, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 103, 33712],"float16"), label=Tensor([48, 103, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 104, 33712],"float16"), label=Tensor([48, 104, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 105, 33712],"float16"), label=Tensor([48, 105, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 106, 33712],"float16"), label=Tensor([48, 106, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 63, 33712],"float16"), label=Tensor([48, 63, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 64, 33712],"float16"), label=Tensor([48, 64, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 65, 33712],"float16"), label=Tensor([48, 65, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 67, 33712],"float16"), label=Tensor([48, 67, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 68, 33712],"float16"), label=Tensor([48, 68, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 69, 33712],"float16"), label=Tensor([48, 69, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 71, 33712],"float16"), label=Tensor([48, 71, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 72, 33712],"float16"), label=Tensor([48, 72, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 73, 33712],"float16"), label=Tensor([48, 73, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 74, 33712],"float16"), label=Tensor([48, 74, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 75, 33712],"float16"), label=Tensor([48, 75, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 76, 33712],"float16"), label=Tensor([48, 76, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 77, 33712],"float16"), label=Tensor([48, 77, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 78, 33712],"float16"), label=Tensor([48, 78, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 79, 33712],"float16"), label=Tensor([48, 79, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 80, 33712],"float16"), label=Tensor([48, 80, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 81, 33712],"float16"), label=Tensor([48, 81, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 82, 33712],"float16"), label=Tensor([48, 82, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 83, 33712],"float16"), label=Tensor([48, 83, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 84, 33712],"float16"), label=Tensor([48, 84, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 85, 33712],"float16"), label=Tensor([48, 85, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 87, 33712],"float16"), label=Tensor([48, 87, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 88, 33712],"float16"), label=Tensor([48, 88, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 90, 33712],"float16"), label=Tensor([48, 90, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 91, 33712],"float16"), label=Tensor([48, 91, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 92, 33712],"float16"), label=Tensor([48, 92, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 93, 33712],"float16"), label=Tensor([48, 93, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 94, 33712],"float16"), label=Tensor([48, 94, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 95, 33712],"float16"), label=Tensor([48, 95, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 96, 33712],"float16"), label=Tensor([48, 96, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 97, 33712],"float16"), label=Tensor([48, 97, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([48, 98, 33712],"float16"), label=Tensor([48, 98, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([480, 8, 33712],"float16"), label=Tensor([480, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([512, 10, 33712],"float16"), label=Tensor([512, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([512, 7, 33712],"float16"), label=Tensor([512, 7, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([512, 8, 33712],"float16"), label=Tensor([512, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([512, 9, 33712],"float16"), label=Tensor([512, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([528, 9, 33712],"float16"), label=Tensor([528, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 54, 33712],"float16"), label=Tensor([56, 54, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 56, 33712],"float16"), label=Tensor([56, 56, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 57, 33712],"float16"), label=Tensor([56, 57, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 58, 33712],"float16"), label=Tensor([56, 58, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 59, 33712],"float16"), label=Tensor([56, 59, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 60, 33712],"float16"), label=Tensor([56, 60, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 61, 33712],"float16"), label=Tensor([56, 61, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 62, 33712],"float16"), label=Tensor([56, 62, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 63, 33712],"float16"), label=Tensor([56, 63, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 64, 33712],"float16"), label=Tensor([56, 64, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 65, 33712],"float16"), label=Tensor([56, 65, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 66, 33712],"float16"), label=Tensor([56, 66, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 67, 33712],"float16"), label=Tensor([56, 67, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 68, 33712],"float16"), label=Tensor([56, 68, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 69, 33712],"float16"), label=Tensor([56, 69, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 70, 33712],"float16"), label=Tensor([56, 70, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 71, 33712],"float16"), label=Tensor([56, 71, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 72, 33712],"float16"), label=Tensor([56, 72, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 73, 33712],"float16"), label=Tensor([56, 73, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 76, 33712],"float16"), label=Tensor([56, 76, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 77, 33712],"float16"), label=Tensor([56, 77, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 78, 33712],"float16"), label=Tensor([56, 78, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 79, 33712],"float16"), label=Tensor([56, 79, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 80, 33712],"float16"), label=Tensor([56, 80, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 81, 33712],"float16"), label=Tensor([56, 81, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 82, 33712],"float16"), label=Tensor([56, 82, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 83, 33712],"float16"), label=Tensor([56, 83, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 84, 33712],"float16"), label=Tensor([56, 84, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 85, 33712],"float16"), label=Tensor([56, 85, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 86, 33712],"float16"), label=Tensor([56, 86, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 87, 33712],"float16"), label=Tensor([56, 87, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 88, 33712],"float16"), label=Tensor([56, 88, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 90, 33712],"float16"), label=Tensor([56, 90, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([56, 91, 33712],"float16"), label=Tensor([56, 91, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([568, 8, 33712],"float16"), label=Tensor([568, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([568, 9, 33712],"float16"), label=Tensor([568, 9, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([584, 7, 33712],"float16"), label=Tensor([584, 7, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([624, 8, 33712],"float16"), label=Tensor([624, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 45, 33712],"float16"), label=Tensor([64, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 46, 33712],"float16"), label=Tensor([64, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 48, 33712],"float16"), label=Tensor([64, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 49, 33712],"float16"), label=Tensor([64, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 50, 33712],"float16"), label=Tensor([64, 50, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 51, 33712],"float16"), label=Tensor([64, 51, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 52, 33712],"float16"), label=Tensor([64, 52, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 53, 33712],"float16"), label=Tensor([64, 53, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 54, 33712],"float16"), label=Tensor([64, 54, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 55, 33712],"float16"), label=Tensor([64, 55, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 56, 33712],"float16"), label=Tensor([64, 56, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 57, 33712],"float16"), label=Tensor([64, 57, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 58, 33712],"float16"), label=Tensor([64, 58, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 59, 33712],"float16"), label=Tensor([64, 59, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 60, 33712],"float16"), label=Tensor([64, 60, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 61, 33712],"float16"), label=Tensor([64, 61, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 62, 33712],"float16"), label=Tensor([64, 62, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 63, 33712],"float16"), label=Tensor([64, 63, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 64, 33712],"float16"), label=Tensor([64, 64, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 66, 33712],"float16"), label=Tensor([64, 66, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 67, 33712],"float16"), label=Tensor([64, 67, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 68, 33712],"float16"), label=Tensor([64, 68, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 69, 33712],"float16"), label=Tensor([64, 69, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 70, 33712],"float16"), label=Tensor([64, 70, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 71, 33712],"float16"), label=Tensor([64, 71, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 72, 33712],"float16"), label=Tensor([64, 72, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 73, 33712],"float16"), label=Tensor([64, 73, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 74, 33712],"float16"), label=Tensor([64, 74, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 75, 33712],"float16"), label=Tensor([64, 75, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 76, 33712],"float16"), label=Tensor([64, 76, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 77, 33712],"float16"), label=Tensor([64, 77, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 78, 33712],"float16"), label=Tensor([64, 78, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 79, 33712],"float16"), label=Tensor([64, 79, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([64, 80, 33712],"float16"), label=Tensor([64, 80, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([640, 7, 33712],"float16"), label=Tensor([640, 7, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([640, 8, 33712],"float16"), label=Tensor([640, 8, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([680, 6, 33712],"float16"), label=Tensor([680, 6, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 41, 33712],"float16"), label=Tensor([72, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 43, 33712],"float16"), label=Tensor([72, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 44, 33712],"float16"), label=Tensor([72, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 45, 33712],"float16"), label=Tensor([72, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 46, 33712],"float16"), label=Tensor([72, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 47, 33712],"float16"), label=Tensor([72, 47, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 48, 33712],"float16"), label=Tensor([72, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 49, 33712],"float16"), label=Tensor([72, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 50, 33712],"float16"), label=Tensor([72, 50, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 51, 33712],"float16"), label=Tensor([72, 51, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 52, 33712],"float16"), label=Tensor([72, 52, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 53, 33712],"float16"), label=Tensor([72, 53, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 54, 33712],"float16"), label=Tensor([72, 54, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 55, 33712],"float16"), label=Tensor([72, 55, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 56, 33712],"float16"), label=Tensor([72, 56, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 57, 33712],"float16"), label=Tensor([72, 57, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 58, 33712],"float16"), label=Tensor([72, 58, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 59, 33712],"float16"), label=Tensor([72, 59, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 60, 33712],"float16"), label=Tensor([72, 60, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 61, 33712],"float16"), label=Tensor([72, 61, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 62, 33712],"float16"), label=Tensor([72, 62, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 63, 33712],"float16"), label=Tensor([72, 63, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 64, 33712],"float16"), label=Tensor([72, 64, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 65, 33712],"float16"), label=Tensor([72, 65, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 66, 33712],"float16"), label=Tensor([72, 66, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 67, 33712],"float16"), label=Tensor([72, 67, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 68, 33712],"float16"), label=Tensor([72, 68, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 69, 33712],"float16"), label=Tensor([72, 69, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 70, 33712],"float16"), label=Tensor([72, 70, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([72, 71, 33712],"float16"), label=Tensor([72, 71, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([728, 7, 33712],"float16"), label=Tensor([728, 7, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([8, 244, 33712],"float16"), label=Tensor([8, 244, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 37, 33712],"float16"), label=Tensor([80, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 38, 33712],"float16"), label=Tensor([80, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 39, 33712],"float16"), label=Tensor([80, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 40, 33712],"float16"), label=Tensor([80, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 41, 33712],"float16"), label=Tensor([80, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 42, 33712],"float16"), label=Tensor([80, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 43, 33712],"float16"), label=Tensor([80, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 44, 33712],"float16"), label=Tensor([80, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 45, 33712],"float16"), label=Tensor([80, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 46, 33712],"float16"), label=Tensor([80, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 47, 33712],"float16"), label=Tensor([80, 47, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 48, 33712],"float16"), label=Tensor([80, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 49, 33712],"float16"), label=Tensor([80, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 50, 33712],"float16"), label=Tensor([80, 50, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 51, 33712],"float16"), label=Tensor([80, 51, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 52, 33712],"float16"), label=Tensor([80, 52, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 53, 33712],"float16"), label=Tensor([80, 53, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 54, 33712],"float16"), label=Tensor([80, 54, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 55, 33712],"float16"), label=Tensor([80, 55, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 56, 33712],"float16"), label=Tensor([80, 56, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 57, 33712],"float16"), label=Tensor([80, 57, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 58, 33712],"float16"), label=Tensor([80, 58, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 59, 33712],"float16"), label=Tensor([80, 59, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 60, 33712],"float16"), label=Tensor([80, 60, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 61, 33712],"float16"), label=Tensor([80, 61, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 62, 33712],"float16"), label=Tensor([80, 62, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 63, 33712],"float16"), label=Tensor([80, 63, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([80, 64, 33712],"float16"), label=Tensor([80, 64, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([848, 6, 33712],"float16"), label=Tensor([848, 6, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 31, 33712],"float16"), label=Tensor([88, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 33, 33712],"float16"), label=Tensor([88, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 34, 33712],"float16"), label=Tensor([88, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 35, 33712],"float16"), label=Tensor([88, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 36, 33712],"float16"), label=Tensor([88, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 37, 33712],"float16"), label=Tensor([88, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 38, 33712],"float16"), label=Tensor([88, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 39, 33712],"float16"), label=Tensor([88, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 40, 33712],"float16"), label=Tensor([88, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 41, 33712],"float16"), label=Tensor([88, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 42, 33712],"float16"), label=Tensor([88, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 43, 33712],"float16"), label=Tensor([88, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 44, 33712],"float16"), label=Tensor([88, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 45, 33712],"float16"), label=Tensor([88, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 46, 33712],"float16"), label=Tensor([88, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 47, 33712],"float16"), label=Tensor([88, 47, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 48, 33712],"float16"), label=Tensor([88, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 49, 33712],"float16"), label=Tensor([88, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 50, 33712],"float16"), label=Tensor([88, 50, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 51, 33712],"float16"), label=Tensor([88, 51, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 52, 33712],"float16"), label=Tensor([88, 52, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 53, 33712],"float16"), label=Tensor([88, 53, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 54, 33712],"float16"), label=Tensor([88, 54, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 55, 33712],"float16"), label=Tensor([88, 55, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 56, 33712],"float16"), label=Tensor([88, 56, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 57, 33712],"float16"), label=Tensor([88, 57, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([88, 58, 33712],"float16"), label=Tensor([88, 58, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 27, 33712],"float16"), label=Tensor([96, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 29, 33712],"float16"), label=Tensor([96, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 30, 33712],"float16"), label=Tensor([96, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 31, 33712],"float16"), label=Tensor([96, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 32, 33712],"float16"), label=Tensor([96, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 33, 33712],"float16"), label=Tensor([96, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 34, 33712],"float16"), label=Tensor([96, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 35, 33712],"float16"), label=Tensor([96, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 36, 33712],"float16"), label=Tensor([96, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 37, 33712],"float16"), label=Tensor([96, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 38, 33712],"float16"), label=Tensor([96, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 39, 33712],"float16"), label=Tensor([96, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 40, 33712],"float16"), label=Tensor([96, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 41, 33712],"float16"), label=Tensor([96, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 42, 33712],"float16"), label=Tensor([96, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 43, 33712],"float16"), label=Tensor([96, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 44, 33712],"float16"), label=Tensor([96, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 45, 33712],"float16"), label=Tensor([96, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 46, 33712],"float16"), label=Tensor([96, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 47, 33712],"float16"), label=Tensor([96, 47, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 48, 33712],"float16"), label=Tensor([96, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 49, 33712],"float16"), label=Tensor([96, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 50, 33712],"float16"), label=Tensor([96, 50, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 52, 33712],"float16"), label=Tensor([96, 52, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([96, 53, 33712],"float16"), label=Tensor([96, 53, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(Tensor([16, 400],"float16"), Tensor([16, 400],"float32"), soft_label=True, )
paddle.nn.functional.linear(x=Tensor([1, 10],"float16"), weight=Tensor([10, 1],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 10],"float16"), weight=Tensor([10, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 10],"float32"), weight=Tensor([10, 10],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 5],"float32"), weight=Tensor([5, 5],"float16"), bias=Tensor([5],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 96],"float32"), weight=Tensor([96, 4],"float16"), bias=Tensor([4],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10, 10],"float16"), weight=Tensor([10, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([100, 1000],"float32"), weight=Tensor([1000, 1000],"float16"), bias=Tensor([1000],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([100, 1024],"float32"), weight=Tensor([1024, 1024],"float16"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([100, 1024],"float32"), weight=Tensor([1024, 1024],"float16"), bias=Tensor([1024],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 2],"float32"), weight=Tensor([2, 2],"float16"), bias=Tensor([2],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 2],"float32"), weight=Tensor([2, 4],"float16"), bias=Tensor([4],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 2048],"float16"), weight=Tensor([2048, 102],"float32"), bias=Tensor([102],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 8, 8, 8],"float32"), weight=Tensor([8, 8],"float16"), bias=Tensor([8],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([32, 1000],"float32"), weight=Tensor([1000, 1000],"float16"), bias=Tensor([1000],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([5, 5],"float32"), weight=Tensor([5, 5],"float16"), bias=Tensor([5],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 2048],"float16"), weight=Tensor([2048, 102],"float32"), bias=Tensor([102],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([8, 4096],"float16"), weight=Tensor([4096, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([1, 10],"float32"),), weight=Tensor([10, 10],"float16"), bias=None, name=None, )
