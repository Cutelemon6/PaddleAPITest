paddle.cumsum(Tensor([0, 3],"float32"), axis=0, )
paddle.cumsum(Tensor([1, 0],"float32"), axis=0, )
paddle.cumsum(Tensor([0, 12],"float16"), dtype="float16", )
paddle.cumsum(Tensor([10, 0],"float16"), dtype="float16", )
paddle.cumsum(Tensor([0, 12],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 0],"float32"), dtype="float32", )
paddle.cumsum(Tensor([0, 20, 1],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 0, 1],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 20, 0],"float32"), dtype="float32", )
paddle.cumsum(Tensor([0, 128],"int64"), axis=-1, )
paddle.cumsum(Tensor([2, 0],"int64"), axis=-1, )
paddle.cumsum(Tensor([0, 2],"float32"), axis=1, )
paddle.cumsum(Tensor([2, 0],"float32"), axis=1, )
paddle.cumsum(Tensor([0, 2],"float64"), axis=1, )
paddle.cumsum(Tensor([2, 0],"float64"), axis=1, )
paddle.cumsum(Tensor([0, 3],"float32"), 1, )
paddle.cumsum(Tensor([2, 0],"float32"), 1, )
paddle.cumsum(Tensor([0],"int32"), )
paddle.cumsum(Tensor([0],"float32"), dtype="float32", )
paddle.cumsum(Tensor([0, 10000],"float32"), axis=-1, )
paddle.cumsum(Tensor([3, 0],"float32"), axis=-1, )
paddle.cumsum(Tensor([0, 2, 4],"float32"), axis=1, )
paddle.cumsum(Tensor([3, 0, 4],"float32"), axis=1, )
paddle.cumsum(Tensor([3, 2, 0],"float32"), axis=1, )
paddle.cumsum(Tensor([0, 4],"int64"), )
paddle.cumsum(Tensor([3, 0],"int64"), )
paddle.cumsum(Tensor([0, 4],"int64"), axis=0, )
paddle.cumsum(Tensor([3, 0],"int64"), axis=0, )
paddle.cumsum(Tensor([0, 4],"int64"), axis=-1, )
paddle.cumsum(Tensor([3, 0],"int64"), axis=-1, )
paddle.cumsum(Tensor([0, 4],"int64"), axis=-2, )
paddle.cumsum(Tensor([3, 0],"int64"), axis=-2, )
paddle.cumsum(Tensor([0, 4],"int64"), dtype="float64", )
paddle.cumsum(Tensor([3, 0],"int64"), dtype="float64", )
paddle.cumsum(Tensor([0, 4],"int64"), dtype=type(numpy.int32), )
paddle.cumsum(Tensor([3, 0],"int64"), dtype=type(numpy.int32), )
paddle.cumsum(Tensor([0, 3],"float16"), axis=1, )
paddle.cumsum(Tensor([4, 0],"float16"), axis=1, )
paddle.cumsum(Tensor([0, 6],"float64"), axis=Tensor([1],"int32"), )
paddle.cumsum(Tensor([5, 0],"float64"), axis=Tensor([1],"int32"), )
paddle.cumsum(Tensor([5, 6],"float64"), axis=Tensor([0],"int32"), )
paddle.diff(Tensor([0, 10],"float32"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(Tensor([10, 0],"float32"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(Tensor([0, 3],"float32"), axis=1, )
paddle.diff(Tensor([2, 0],"float32"), axis=1, )
paddle.diff(Tensor([0, 3],"float64"), axis=1, )
paddle.diff(Tensor([2, 0],"float64"), axis=1, )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=None, append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=None, append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=Tensor([3, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=Tensor([3, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([3, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=0, prepend=Tensor([3, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([0, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([0, 3],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 2],"float32"), append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([0, 3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 2],"float32"), append=Tensor([0, 3],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 3],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=Tensor([2, 3],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 3],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 3],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=0, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([0, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=0, prepend=Tensor([0, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=0, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=1, prepend=None, append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=1, prepend=None, append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([0, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=Tensor([0, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([0],"float32"), )
paddle.diff(Tensor([0, 4],"float16"), axis=1, )
paddle.diff(Tensor([4, 0],"float16"), axis=1, )
paddle.diff(Tensor([0],"float32"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(Tensor([0],"float32"), n=2, axis=0, prepend=None, append=None, )
paddle.diff(Tensor([0],"bool"), n=1, axis=-1, prepend=None, append=None, )
paddle.index_select(Tensor([0, 10],"float32"), Tensor([4],"int32"), 1, )
paddle.index_select(Tensor([10, 0],"float32"), Tensor([4],"int32"), 1, )
paddle.index_select(Tensor([10, 10],"float32"), Tensor([0],"int32"), 1, )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([3],"int64"), )
paddle.index_select(Tensor([10, 0],"float32"), Tensor([3],"int64"), )
paddle.index_select(Tensor([10, 3],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([0, 4],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([10, 0],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([10, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([0],"float32"), Tensor([4],"int32"), 0, )
paddle.index_select(Tensor([10],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([0],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([0, 100, 25],"float32"), Tensor([20],"int32"), 2, )
paddle.index_select(Tensor([100, 0, 25],"float32"), Tensor([20],"int32"), 2, )
paddle.index_select(Tensor([100, 100, 0],"float32"), Tensor([20],"int32"), 2, )
paddle.index_select(Tensor([100, 100, 25],"float32"), Tensor([0],"int32"), 2, )
paddle.index_select(Tensor([0, 100, 5],"float32"), Tensor([20],"int32"), 1, )
paddle.index_select(Tensor([100, 0, 5],"float32"), Tensor([20],"int32"), 1, )
paddle.index_select(Tensor([100, 100, 0],"float32"), Tensor([20],"int32"), 1, )
paddle.index_select(Tensor([100, 100, 5],"float32"), Tensor([0],"int32"), 1, )
paddle.index_select(Tensor([0, 5],"float32"), Tensor([20],"int32"), 0, )
paddle.index_select(Tensor([100, 0],"float32"), Tensor([20],"int32"), 0, )
paddle.index_select(Tensor([100, 5],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([0, 5],"float64"), Tensor([20],"int64"), 0, )
paddle.index_select(Tensor([100, 0],"float64"), Tensor([20],"int64"), 0, )
paddle.index_select(Tensor([100, 5],"float64"), Tensor([0],"int64"), 0, )
paddle.index_select(Tensor([0, 4096],"float32"), Tensor([10],"int64"), )
paddle.index_select(Tensor([300, 0],"float32"), Tensor([10],"int64"), )
paddle.index_select(Tensor([300, 4096],"float32"), Tensor([0],"int64"), )
paddle.log2(Tensor([0, 12],"float32"), )
paddle.log2(Tensor([10, 0],"float32"), )
paddle.log2(Tensor([0, 12],"float64"), )
paddle.log2(Tensor([10, 0],"float64"), )
paddle.log2(Tensor([0, 20, 1],"float32"), )
paddle.log2(Tensor([10, 0, 1],"float32"), )
paddle.log2(Tensor([10, 20, 0],"float32"), )
paddle.log2(Tensor([0, 5, 2],"float32"), )
paddle.log2(Tensor([4, 0, 2],"float32"), )
paddle.log2(Tensor([4, 5, 0],"float32"), )
paddle.log2(Tensor([0, 5, 2],"float64"), )
paddle.log2(Tensor([4, 0, 2],"float64"), )
paddle.log2(Tensor([4, 5, 0],"float64"), )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([0, 12],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([10, 0],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([0, 12],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([10, 0],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([0, 12],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([10, 0],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([0, 12],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([10, 0],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([0],"float32"), )
paddle.logcumsumexp(Tensor([0, 4],"float32"), )
paddle.logcumsumexp(Tensor([3, 0],"float32"), )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=-2, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=-2, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), dtype="float32", )
paddle.logcumsumexp(Tensor([3, 0],"float32"), dtype="float32", )
paddle.moveaxis(Tensor([0, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 0, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 0, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 4, 0, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 4, 5, 0],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([0, 7, 6],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 0, 6],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 7, 0],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(Tensor([0, 7, 6],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 0, 6],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 7, 0],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([0, 3, 4],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([5, 0, 4],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([5, 3, 0],"float64"), list[1,2,], list[1,2,], )
paddle.multigammaln(Tensor([0, 20],"float32"), 2, )
paddle.multigammaln(Tensor([10, 0],"float32"), 2, )
paddle.multigammaln(Tensor([0, 20],"float64"), 2, )
paddle.multigammaln(Tensor([10, 0],"float64"), 2, )
paddle.multinomial(Tensor([0],"float64"), num_samples=100, replacement=False, )
paddle.multinomial(Tensor([0, 10000],"float32"), 1, replacement=False, )
paddle.multinomial(Tensor([1024, 0],"float32"), 1, replacement=False, )
paddle.multinomial(Tensor([0, 10000],"float32"), 20000, replacement=True, )
paddle.multinomial(Tensor([1024, 0],"float32"), 20000, replacement=True, )
paddle.multinomial(Tensor([0, 10000],"float32"), 5000, replacement=False, )
paddle.multinomial(Tensor([1024, 0],"float32"), 5000, replacement=False, )
paddle.multinomial(Tensor([0, 10000],"float32"), )
paddle.multinomial(Tensor([3, 0],"float32"), )
paddle.multinomial(Tensor([0, 4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([3, 0],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([0],"float32"), num_samples=10, replacement=True, )
paddle.multinomial(Tensor([0],"float64"), num_samples=100000, replacement=True, )
paddle.nextafter(Tensor([0, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.nextafter(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.nextafter(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.nextafter(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.nextafter(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.nextafter(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 120, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 120, 0, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 120, 5, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1280, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1280, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 144, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 144, 0, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 144, 5, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 16, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 16, 0, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 16, 20, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 0, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 240, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 240, 0, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 240, 5, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 256, 0, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 256, 56, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 288, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 288, 0, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 288, 3, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 2, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 2, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 0],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 28, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 3, 3],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 3, 3],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 3],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 576, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 576, 0, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 576, 3, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 96, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 0, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 5, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10, 0, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10, 512, 0, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10, 512, 7, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 0, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 2048, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 2048, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1000, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 0, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 12, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1000, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 0, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 13, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 6, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 6, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 0, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 6, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 120, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 120, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 0, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 28, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 144, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 144, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 144, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 16, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 16, 0, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 16, 56, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1664, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1664, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1664, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1920, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1920, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1920, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 0, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 5, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 0, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 0],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 0, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2208, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2208, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2208, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 240, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 240, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2688, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2688, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2688, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 288, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 288, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 288, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 480, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 480, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 480, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 0, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 0, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 0],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 576, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 576, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 576, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 672, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 672, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 72, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 72, 0, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 72, 28, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 96, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 960, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 960, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 960, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 8, 8],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([3, 0, 8, 8],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([3, 2048, 0, 8],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([3, 2048, 8, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 0, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 0, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 7, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 0, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 0, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 0, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 0],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 0, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 0, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 0, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 0, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 56, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 0, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 0, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 28, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.dropout(Tensor([0, 1, 8],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 0, 8],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 1, 0],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 10],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 0],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 1024],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 0],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 128],"float32"), 0.6, )
paddle.nn.functional.dropout(Tensor([1, 0],"float32"), 0.6, )
paddle.nn.functional.dropout(Tensor([0, 1280],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 2048, 1, 1],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([1, 0, 1, 1],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([1, 2048, 0, 1],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([1, 2048, 1, 0],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 4096],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 0],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 9, 6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([1, 0, 6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([1, 9, 0],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([0, 1],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 0],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 0],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 10],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 0],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 10],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 10],"float32"), p=0.5, training=False, )
paddle.nn.functional.dropout(Tensor([10, 0],"float32"), p=0.5, training=False, )
paddle.nn.functional.dropout(Tensor([0, 10],"float32"), p=0.5, training=True, )
paddle.nn.functional.dropout(Tensor([10, 0],"float32"), p=0.5, training=True, )
paddle.nn.functional.dropout(Tensor([0, 4, 16],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([12, 0, 16],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([12, 4, 0],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 4, 8],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([12, 0, 8],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 128],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([128, 0],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 2048, 1, 1],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([16, 0, 1, 1],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([16, 2048, 0, 1],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([16, 2048, 1, 0],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([0, 64, 128, 128],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 0, 128, 128],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 64, 0, 128],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 64, 128, 0],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 64, 128, 128],"float32"), p=0.6, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 0, 128, 128],"float32"), p=0.6, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 64, 0, 128],"float32"), p=0.6, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 64, 128, 0],"float32"), p=0.6, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 10],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float16"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float16"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float16"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float16"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float32"), p=0.4, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float32"), p=0.4, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float32"), p=0.4, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float32"), p=0.4, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 1024, 1, 1],"float64"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 1, 1],"float64"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 0, 1],"float64"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 0],"float64"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 1024, 2, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 2, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 2, 0],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 1024],"float32"), p=0.7, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), p=0.7, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 12],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 12],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 128, 60],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0, 60],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 128, 0],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 2048],"float32"), p=0.2, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), p=0.2, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 4096],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 512, 12, 12],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0, 12, 12],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 0, 12],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 12, 0],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 512, 13, 13],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0, 13, 13],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 0, 13],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 13, 0],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 6, 7, 9, 3],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0, 7, 9, 3],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 0, 9, 3],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 7, 0, 3],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 7, 9, 0],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 8, 8],"float32"), 0.2, )
paddle.nn.functional.dropout(Tensor([2, 0, 8],"float32"), 0.2, )
paddle.nn.functional.dropout(Tensor([2, 8, 0],"float32"), 0.2, )
paddle.nn.functional.dropout(Tensor([0, 80, 8, 2],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 0, 8, 2],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 80, 0, 2],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 0],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 80, 8, 2],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 0, 8, 2],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 80, 0, 2],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 0],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 9216],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 20],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 0],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 20],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 0],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 32, 32],"float32"), p=0.35, )
paddle.nn.functional.dropout(Tensor([3, 0, 32],"float32"), p=0.35, )
paddle.nn.functional.dropout(Tensor([3, 32, 0],"float32"), p=0.35, )
paddle.nn.functional.dropout(Tensor([0, 32, 32],"float32"), p=0.35, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 0, 32],"float32"), p=0.35, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 32, 0],"float32"), p=0.35, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 4096],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([300, 0],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([0, 98, 130],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 0, 130],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 0],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 98, 130],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 0, 130],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 0],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 98, 508],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 0, 508],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 98, 508],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 0, 508],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 4, 2048],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 0, 2048],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 4, 0],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([0, 4, 512],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 0, 512],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([0, 8, 4, 4],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 0, 4, 4],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 8, 0, 4],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 8, 4, 0],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([0, 12, 16],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([4, 0, 16],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([4, 12, 0],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 12, 8],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([4, 0, 8],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([0, 32, 128],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([4, 0, 128],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([4, 32, 0],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 32, 256],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([4, 0, 256],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 512],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([512, 0],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 140, 2],"float32"), p=0.1, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 0, 2],"float32"), p=0.1, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 140, 0],"float32"), p=0.1, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 140, 2],"float32"), p=0.1, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 0, 2],"float32"), p=0.1, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 140, 0],"float32"), p=0.1, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([0, 2, 140, 140],"float32"), p=0.1, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 0, 140, 140],"float32"), p=0.1, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 2, 0, 140],"float32"), p=0.1, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 0],"float32"), p=0.1, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([0, 2, 140, 140],"float32"), p=0.1, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 0, 140, 140],"float32"), p=0.1, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 2, 0, 140],"float32"), p=0.1, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 0],"float32"), p=0.1, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([6, 0, 6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([6, 9, 0],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([0, 1, 1024],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 0, 1024],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 1, 0],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 128, 1024],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 0, 1024],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 128, 0],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 128, 1024],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 128, 0],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([0, 2048, 1, 1],"float32"), p=0.5, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([8, 0, 1, 1],"float32"), p=0.5, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([8, 2048, 0, 1],"float32"), p=0.5, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([8, 2048, 1, 0],"float32"), p=0.5, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(x=Tensor([0, 128, 32, 32],"float16"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 0, 32, 32],"float16"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 128, 0, 32],"float16"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 128, 32, 0],"float16"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([0, 128, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 0, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 128, 0, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 128, 32, 0],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([0, 16, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 16, 0, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 16, 32, 0],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([0, 8, 128, 128],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 0, 128, 128],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 8, 0, 128],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 8, 128, 0],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([0, 8, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 8, 0, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 8, 32, 0],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([16, 0, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([16, 128, 0, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([16, 128, 32, 0],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.embedding(Tensor([0, 1, 1],"int64"), weight=Tensor([20, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 0, 1],"int64"), weight=Tensor([20, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1, 0],"int64"), weight=Tensor([20, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1, 1],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1, 1],"int64"), weight=Tensor([20, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 10],"int64"), weight=Tensor([10, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 0],"int64"), weight=Tensor([10, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 10],"int64"), weight=Tensor([0, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 10],"int64"), weight=Tensor([10, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 10],"int64"), weight=Tensor([0, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 0],"int64"), weight=Tensor([10, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 300, 4096],"int64"), Tensor([10, 3],"float32"), padding_idx=1, )
paddle.nn.functional.embedding(Tensor([1, 0, 4096],"int64"), Tensor([10, 3],"float32"), padding_idx=1, )
paddle.nn.functional.embedding(Tensor([1, 300, 0],"int64"), Tensor([10, 3],"float32"), padding_idx=1, )
paddle.nn.functional.embedding(Tensor([1, 300, 4096],"int64"), Tensor([0, 3],"float32"), padding_idx=1, )
paddle.nn.functional.embedding(Tensor([1, 300, 4096],"int64"), Tensor([10, 0],"float32"), padding_idx=1, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([10, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([10, 0],"int64"), weight=Tensor([10, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([10, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([10, 1],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([10, 0],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([27, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1024, 0],"int64"), weight=Tensor([27, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1024, 1],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1024, 1],"int64"), weight=Tensor([27, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1024, 0],"int64"), weight=Tensor([27, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 8],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([11, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([11, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([11, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([11, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([12, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([12, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([12, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([12, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([100, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 0],"int64"), weight=Tensor([100, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 1],"int64"), weight=Tensor([0, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 1],"int64"), weight=Tensor([100, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 0],"int64"), weight=Tensor([100, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([128, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 0],"int64"), weight=Tensor([128, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 1],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 1],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([16, 0],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 23],"int32"), weight=Tensor([4, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([17, 0],"int32"), weight=Tensor([4, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([17, 23],"int32"), weight=Tensor([0, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([17, 23],"int32"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 23],"int32"), weight=Tensor([0, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([17, 0],"int32"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 1],"int64"), weight=Tensor([0, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 1],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 128],"int64"), weight=Tensor([2, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([2, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([0, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([2, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 128],"int64"), weight=Tensor([0, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([2, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 128],"int64"), weight=Tensor([30522, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([30522, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([30522, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([30522, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 128],"int64"), weight=Tensor([512, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([512, 60],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 128],"int64"), weight=Tensor([512, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([512, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 2],"int64"), weight=Tensor([20, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([20, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 2],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 2],"int64"), weight=Tensor([20, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 2],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), weight=Tensor([20, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([10, 4],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 4],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 3],"int64"), Tensor([0, 4],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 3],"int64"), Tensor([10, 0],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([0, 4],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 0],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([10, 4],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 4],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 3],"int64"), Tensor([0, 4],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 3],"int64"), Tensor([10, 0],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([0, 4],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 0],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), Tensor([10, 4],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 4],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), Tensor([0, 4],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), Tensor([10, 0],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), Tensor([0, 4],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 0],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), Tensor([10, 4],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 4],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), Tensor([0, 4],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), Tensor([10, 0],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), Tensor([0, 4],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 0],"int64"), Tensor([10, 0],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([0, 8],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 8],"int64"), weight=Tensor([0, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 8],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 8],"int64"), weight=Tensor([0, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 0],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 0],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 0],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 0],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 0],"int64"), weight=Tensor([10, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 0],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0],"int64"), Tensor([1024, 512],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([0, 512],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([1024, 0],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([0],"int64"), Tensor([1024, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([0, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([1024, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0],"int64"), Tensor([511, 512],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([511, 0],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([0],"int64"), Tensor([511, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([511, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 0],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 0],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 0],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 0],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 0],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 0],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([128, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int32"), Tensor([128, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 0],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 0],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 0],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 0],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 0],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 0],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([128, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), Tensor([128, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 0],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 0],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 0],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int32"), Tensor([128, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([128, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 0],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([128, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 0],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([128, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 0],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([128, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 3],"int64"), Tensor([128, 0],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([10000, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([10000, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([10000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([10000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([10000, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([10000, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([10000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([10000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([4, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([4, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([4, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([4, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 0],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([128, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 1],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 1],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 10],"int64"), weight=Tensor([20, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([20, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 10],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 10],"int64"), weight=Tensor([20, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 10],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([20, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3, 1],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0, 1],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 0],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3, 1],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0, 1],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 0],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([1000, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([0, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([0, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([1000, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([0, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3],"int64"), weight=Tensor([1000, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int64"), weight=Tensor([0, 10],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 5],"int64"), weight=Tensor([20, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 5],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 5],"int64"), weight=Tensor([20, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 5],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([4, 200],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([464, 0],"int64"), weight=Tensor([4, 200],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([464, 1],"int64"), weight=Tensor([0, 200],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([464, 1],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 200],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([464, 0],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([5, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([5, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([5, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([5, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([512, 0],"int64"), weight=Tensor([4, 200],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([512, 1],"int64"), weight=Tensor([0, 200],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([512, 1],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([512, 0],"int64"), weight=Tensor([4, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 140],"int64"), weight=Tensor([2, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 0],"int64"), weight=Tensor([2, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([0, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([2, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 140],"int64"), weight=Tensor([0, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 0],"int64"), weight=Tensor([2, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 140],"int64"), weight=Tensor([21128, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 0],"int64"), weight=Tensor([21128, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([21128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 0],"int64"), weight=Tensor([21128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 140],"int64"), weight=Tensor([512, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 0],"int64"), weight=Tensor([512, 2],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 140],"int64"), weight=Tensor([512, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([58, 0],"int64"), weight=Tensor([512, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3, 1],"int64"), weight=Tensor([32, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 0, 1],"int64"), weight=Tensor([32, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 3, 0],"int64"), weight=Tensor([32, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 3, 1],"int64"), weight=Tensor([0, 20],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 3, 1],"int64"), weight=Tensor([32, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([10, 4],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([6, 0],"int32"), Tensor([10, 4],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([6, 3],"int32"), Tensor([0, 4],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([6, 3],"int32"), Tensor([10, 0],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([0, 4],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([6, 0],"int32"), Tensor([10, 0],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([10, 4],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([6, 0],"int32"), Tensor([10, 4],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([6, 3],"int32"), Tensor([0, 4],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([6, 3],"int32"), Tensor([10, 0],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([0, 3],"int32"), Tensor([0, 4],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([6, 0],"int32"), Tensor([10, 0],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([6, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0],"int64"), weight=Tensor([66, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([6],"int64"), weight=Tensor([66, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0],"int64"), weight=Tensor([128, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([64],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([64],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([7, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([7, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([7, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([7, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 0],"int64"), weight=Tensor([128, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1],"int64"), weight=Tensor([0, 16],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 0],"int64"), weight=Tensor([128, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([100, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 0],"int64"), weight=Tensor([100, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 4],"int64"), weight=Tensor([0, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 4],"int64"), weight=Tensor([100, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([0, 32],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 0],"int64"), weight=Tensor([100, 0],"float64"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 4],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 4],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([9, 0],"int64"), weight=Tensor([1000, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([9, 8],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([9, 8],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([9, 0],"int64"), weight=Tensor([1000, 0],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.real(Tensor([0, 10, 10, 20],"complex64"), )
paddle.real(Tensor([10, 0, 10, 20],"complex64"), )
paddle.real(Tensor([10, 10, 0, 20],"complex64"), )
paddle.real(Tensor([10, 10, 10, 0],"complex64"), )
paddle.real(Tensor([0, 20, 2, 3],"complex128"), )
paddle.real(Tensor([2, 0, 2, 3],"complex128"), )
paddle.real(Tensor([2, 20, 0, 3],"complex128"), )
paddle.real(Tensor([2, 20, 2, 0],"complex128"), )
paddle.real(Tensor([0, 20, 2, 3],"complex64"), )
paddle.real(Tensor([2, 0, 2, 3],"complex64"), )
paddle.real(Tensor([2, 20, 0, 3],"complex64"), )
paddle.real(Tensor([2, 20, 2, 0],"complex64"), )
paddle.reciprocal(Tensor([0, 3],"float32"), )
paddle.reciprocal(Tensor([2, 0],"float32"), )
paddle.reciprocal(Tensor([0, 300, 2048],"float32"), )
paddle.reciprocal(Tensor([2, 0, 2048],"float32"), )
paddle.reciprocal(Tensor([2, 300, 0],"float32"), )
paddle.renorm(Tensor([0, 20, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([10, 0, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([10, 20, 0],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([0, 2, 3],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([2, 0, 3],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([2, 2, 0],"float32"), 1.0, -1, 2.05, )
paddle.renorm(Tensor([0, 2, 3],"float32"), 1.0, 2, 2.05, )
paddle.renorm(Tensor([2, 0, 3],"float32"), 1.0, 2, 2.05, )
paddle.renorm(Tensor([2, 2, 0],"float32"), 1.0, 2, 2.05, )
paddle.unique(Tensor([0],"int64"), )
paddle.unique(Tensor([0],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([0, 3],"int64"), )
paddle.unique(Tensor([2, 0],"int64"), )
paddle.unique(Tensor([0, 1],"int64"), )
paddle.unique(Tensor([3, 0],"int64"), )
paddle.unique(Tensor([0, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.unique(Tensor([3, 0, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.unique(Tensor([3, 5, 0],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.unique(Tensor([0],"float32"), )
paddle.unique(Tensor([0],"float32"), return_counts=True, )
paddle.unique_consecutive(Tensor([0],"float64"), )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, axis=-1, )
