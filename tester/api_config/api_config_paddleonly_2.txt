paddle.Tensor.__sub__(Tensor([2, 3, 4],"bool"), 1, )
paddle.Tensor.__sub__(Tensor([2, 3, 4],"bool"), 1.0, )
paddle.Tensor.__sub__(Tensor([2, 3, 4],"bool"), complex(0.0,2.0), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.Tensor.__sub__(Tensor([],"float32"), True, )
paddle.Tensor.__sub__(Tensor([],"float64"), False, )
paddle.Tensor.__sub__(Tensor([],"float64"), True, )
paddle.broadcast_shape(list[-1,1,3,], list[1,3,1,], )
paddle.broadcast_shape(list[2,-1,], list[0,], )
paddle.arange(0, Tensor([],"float32"), dtype="float32", )
paddle.arange(0, Tensor([],"float64"), dtype="float64", )
paddle.arange(0, Tensor([],"int32"), dtype="float32", )
paddle.arange(0, Tensor([],"int32"), dtype="float64", )
paddle.arange(0, Tensor([],"int64"), 1, dtype=Dtype(int64), )
paddle.arange(Tensor([1],"float32"), )
paddle.arange(Tensor([1],"float32"), 1, )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), 1, )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "float32", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "float64", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "int64", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), type(numpy.float32), )
paddle.arange(Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1],"int32"), type(numpy.int32), )
paddle.arange(Tensor([1],"int64"), dtype="int64", )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), -1, dtype=Dtype(int64), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), -2, dtype=Dtype(int64), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), -4, dtype=Dtype(int64), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.arange(Tensor([],"int64"), )
paddle.arange(Tensor([],"int64"), Tensor([],"int64"), )
paddle.arange(Tensor([],"int64"), Tensor([],"int64"), dtype=Dtype(int32), )
paddle.arange(Tensor([],"int64"), dtype="float32", )
paddle.arange(Tensor([],"int64"), dtype="int64", )
paddle.arange(end=Tensor([],"int64"), )
paddle.arange(start=0, end=Tensor([],"int64"), dtype="float32", )
paddle.arange(start=1, end=20, step=Tensor([1],"int64"), dtype=type(numpy.float32), )
paddle.arange(start=Tensor([1],"int64"), end=20, step=3, dtype=type(numpy.int64), )
paddle.arange(start=Tensor([1],"int64"), end=Tensor([1],"int64"), step=Tensor([1],"int64"), dtype=type(numpy.float32), )