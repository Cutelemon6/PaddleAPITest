paddle.argmax(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmin(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.assign(.09994, Tensor([],"float32"), )
paddle.assign(x=42, )
paddle.assign(x=list[list[3.1,2.1,2.2,],list[-1.0,-2.0,-2.2,],], )
paddle.assign(x=Tensor([3, 3],"float64"), )
paddle.assign(x=Tensor([3, 4],"float32"), )
paddle.assign(x=Tensor([3, 4],"float64"), )
paddle.assign(x=Tensor([3, 4],"int32"), )
paddle.assign(x=Tensor([3, 4],"int64"), )
paddle.assign(x=tuple(tuple(3.1,2.1,2.2,),tuple(-1.0,-2.0,-2.2,),), )
paddle.atan2(Tensor([5, 17, 1, 6],"float64"), Tensor([5, 17, 0, 6],"float64"), )
paddle.atan2(Tensor([5, 17, 6],"float64"), Tensor([0, 5, 17, 6],"float64"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([2, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([7, 4],"float32"),Tensor([7, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.scatter(Tensor([100, 1],"float32"), Tensor([100],"int64"), Tensor([100, 1],"float32"), )
paddle.scatter(Tensor([100, 1],"int64"), Tensor([100],"int64"), Tensor([100, 1],"int64"), )
paddle.scatter(Tensor([1200, 1],"float32"), Tensor([4],"int64"), Tensor([4, 1],"float32"), )
paddle.scatter(Tensor([1200, 1],"int64"), Tensor([4],"int64"), Tensor([4, 1],"int64"), )
paddle.scatter(Tensor([1600, 1],"float32"), Tensor([800],"int64"), Tensor([800, 1],"float32"), )
paddle.scatter(Tensor([1600, 1],"int64"), Tensor([800],"int64"), Tensor([800, 1],"int64"), )
paddle.scatter(Tensor([192, 1],"float32"), Tensor([96],"int64"), Tensor([96, 1],"float32"), )
paddle.scatter_nd(Tensor([1],"int64"), Tensor([],"float32"), list[5,], )
paddle.scatter_nd(Tensor([28, 1],"int64"), Tensor([28],"float32"), list[128,], )
paddle.scatter_nd(Tensor([3, 1],"int64"), Tensor([3],"int64"), list[8,], )
paddle.scatter_nd(Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd_add(Tensor([1, 2, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([2, 2, 2],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 3, 4],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([3, 5, 9, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.multiply(Tensor([40, 40],"bfloat16"), Tensor([40, 40],"bfloat16"), )
paddle.multinomial(Tensor([1, 8000],"float32"), 1, )
paddle.multinomial(Tensor([10, 8000],"float32"), 1, )
paddle.multinomial(Tensor([1000],"float64"), num_samples=100, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 1, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 20000, replacement=True, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 5000, replacement=False, )
paddle.multinomial(Tensor([2, 7],"float32"), num_samples=5, replacement=True, name=None, )
paddle.multinomial(Tensor([2, 7],"float64"), num_samples=5, replacement=True, name=None, )
paddle.multinomial(Tensor([2, 8000],"float32"), 1, )
paddle.multinomial(Tensor([3, 10000],"float32"), )
paddle.multinomial(Tensor([3, 4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([3, 8000],"float32"), 1, )
paddle.multinomial(Tensor([4, 8000],"float32"), 1, )
paddle.multinomial(Tensor([4],"float32"), num_samples=10, replacement=True, )
paddle.multinomial(Tensor([4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([5, 8000],"float32"), 1, )
paddle.multinomial(Tensor([6, 8000],"float32"), 1, )
paddle.multinomial(Tensor([6],"float32"), name=None, )
paddle.multinomial(Tensor([6],"float32"), num_samples=Tensor([],"int64"), name=None, )
paddle.multinomial(Tensor([6],"float64"), name=None, )
paddle.multinomial(Tensor([6],"float64"), num_samples=Tensor([],"int64"), name=None, )
paddle.multinomial(Tensor([7, 8000],"float32"), 1, )
paddle.multinomial(Tensor([7],"float32"), num_samples=4, name=None, )
paddle.multinomial(Tensor([7],"float64"), num_samples=4, name=None, )
paddle.multinomial(Tensor([8, 8000],"float32"), 1, )
paddle.multinomial(Tensor([9, 8000],"float32"), 1, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float32"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=Tensor([2],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=Tensor([3],"int64"), )
paddle.nn.functional.interpolate(Tensor([1, 2, 256, 256],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 2, 512, 512],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 2, 608, 913],"float32"), size=tuple(Tensor([],"int64"),Tensor([],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 2, 608, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 64, 128, 128],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=Tensor([1],"float32"), mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=Tensor([1],"int32"), scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 640, 640],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 144, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 24, 78],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 47, 156],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 94, 311],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 3, 640, 640],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 36, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 36, 24, 78],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=None, scale_factor=Tensor([2],"float32"), mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=Tensor([2],"int32"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 64, 128, 128],"float16"), size=Tensor([2],"int64"), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([4, 64, 128, 128],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([4, 72, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 72, 24, 78],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 81, 47, 156],"float32"), size=list[Tensor([],"int64"),Tensor([],"int64"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([8, 3, 640, 640],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"int32"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"int64"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=list[Tensor([],"float32"),Tensor([],"float32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=Tensor([],"float32"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list[Tensor([],"int32"),Tensor([],"int32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6],"float32"), scale_factor=Tensor([1],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 40],"bfloat16"), p=0.0, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 15],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 15],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 19, 29],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 19, 29],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 38, 58],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 38, 58],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 76, 115],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 76, 115],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float16"), Tensor([4, 128, 128, 2],"float16"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float16"), Tensor([4, 256, 256, 2],"float16"), )
paddle.nn.functional.hsigmoid_loss(Tensor([20, 5],"float64"), Tensor([20, 1],"int64"), 101, Tensor([100, 5],"float64"), Tensor([100, 1],"float64"), None, None, False, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), None, None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), path_table=None, path_code=None, is_sparse=False, name=None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), path_table=Tensor([4, 5],"int64"), path_code=Tensor([4, 5],"int64"), is_sparse=False, name=None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), None, Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), False, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), Tensor([5, 1],"float64"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), False, )
paddle.Tensor.log_normal_(Tensor([0, 200],"float32"), )
paddle.Tensor.log_normal_(Tensor([200, 0],"float32"), )
paddle.Tensor.clip(Tensor([2, 2],"int32"), Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.Tensor.clip(Tensor([512],"float32"), Tensor([0],"float32"), Tensor([],"float32"), )
paddle.expand(Tensor([64, 1, 512],"float32"), shape=list[Tensor([],"int64"),26,512,], )
paddle.expand(Tensor([8, 1, 512],"float32"), shape=list[Tensor([],"int64"),26,512,], )
paddle.expand(x=Tensor([1],"float64"), shape=Tensor([2],"int32"), )
paddle.expand(x=Tensor([1],"int64"), shape=Tensor([2],"int32"), )
paddle.expand_as(Tensor([10, 2, 30, 30],"float16"), Tensor([10, 2, 30, 30],"float16"), )
paddle.Tensor.expand(Tensor([],"float32"), tuple(Tensor([],"int64"),), )
paddle.Tensor.expand(Tensor([1, 1, 1, 2048],"bool"), list[1,1,Tensor([],"int64"),2048,], )
paddle.Tensor.expand(Tensor([1, 1, 2048, 2048],"bool"), list[Tensor([],"int64"),1,Tensor([],"int64"),Tensor([],"int64"),], )
paddle.Tensor.expand(Tensor([1],"float32"), tuple(Tensor([],"int64"),1,), )
paddle.Tensor.expand(Tensor([1],"float64"), tuple(Tensor([],"int64"),1,), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([2],"float32"), axis=list[1,2,], keepdim=True, )
paddle.standard_normal(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.Tensor.tile(Tensor([1, 1, 1, 1, 2, 1],"float32"), list[Tensor([],"int64"),Tensor([],"int64"),Tensor([],"int64"),1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 1, 1, 3],"float32"), list[Tensor([],"int64"),Tensor([],"int64"),Tensor([],"int64"),1,1,], )
paddle.Tensor.tile(Tensor([1, 280, 376, 25, 3],"float32"), tuple(Tensor([],"int64"),1,1,1,1,), )
paddle.Tensor.tile(Tensor([128, 1],"float32"), list[Tensor([],"int64"),], )
paddle.Tensor.tile(Tensor([140, 188, 1, 1, 3],"float32"), list[1,1,1,Tensor([],"int64"),1,], )
paddle.Tensor.tile(Tensor([256, 1],"float32"), list[Tensor([],"int64"),], )
paddle.Tensor.tile(Tensor([4, 4, 4],"float32"), list[Tensor([],"int64"),1,1,], )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 1, 2],"float64"), label=Tensor([1, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 21504, 10],"float32"), Tensor([1, 21504, 10],"float32"), weight=Tensor([1, 21504, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 21504, 15],"float32"), Tensor([1, 21504, 15],"float32"), weight=Tensor([1, 21504, 15],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 24276, 10],"float32"), Tensor([1, 24276, 10],"float32"), weight=Tensor([1, 24276, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 27216, 10],"float32"), Tensor([1, 27216, 10],"float32"), weight=Tensor([1, 27216, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 30324, 10],"float32"), Tensor([1, 30324, 10],"float32"), weight=Tensor([1, 30324, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 33600, 10],"float32"), Tensor([1, 33600, 10],"float32"), weight=Tensor([1, 33600, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 37044, 10],"float32"), Tensor([1, 37044, 10],"float32"), weight=Tensor([1, 37044, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 40656, 10],"float32"), Tensor([1, 40656, 10],"float32"), weight=Tensor([1, 40656, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 44436, 10],"float32"), Tensor([1, 44436, 10],"float32"), weight=Tensor([1, 44436, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 48384, 10],"float32"), Tensor([1, 48384, 10],"float32"), weight=Tensor([1, 48384, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 52500, 10],"float32"), Tensor([1, 52500, 10],"float32"), weight=Tensor([1, 52500, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 56784, 10],"float32"), Tensor([1, 56784, 10],"float32"), weight=Tensor([1, 56784, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 61236, 10],"float32"), Tensor([1, 61236, 10],"float32"), weight=Tensor([1, 61236, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 65856, 10],"float32"), Tensor([1, 65856, 10],"float32"), weight=Tensor([1, 65856, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 70644, 10],"float32"), Tensor([1, 70644, 10],"float32"), weight=Tensor([1, 70644, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 75600, 10],"float32"), Tensor([1, 75600, 10],"float32"), weight=Tensor([1, 75600, 10],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 8400, 2],"float32"), Tensor([1, 8400, 2],"float32"), weight=Tensor([1, 8400, 2],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1000, 1],"float32"), Tensor([1000, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1003, 1],"float32"), Tensor([1003, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1003, 7, 4],"float32"), Tensor([1003, 7, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1008, 1],"float32"), Tensor([1008, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10080, 1],"float32"), Tensor([10080, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1009, 1],"float32"), Tensor([1009, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([101, 4],"float32"), Tensor([101, 4],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1010, 1],"float32"), Tensor([1010, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1012, 1],"float32"), Tensor([1012, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1014, 1],"float32"), Tensor([1014, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1015, 1],"float32"), Tensor([1015, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10160, 1],"float32"), Tensor([10160, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1019, 1],"float32"), Tensor([1019, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([102, 1],"float32"), Tensor([102, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([102, 4],"float32"), Tensor([102, 4],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([10204, 1],"float32"), Tensor([10204, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1021, 2, 4],"float32"), Tensor([1021, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10244, 11],"float32"), Tensor([10244, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10284, 1],"float32"), Tensor([10284, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10285, 11],"float32"), Tensor([10285, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10304, 1],"float32"), Tensor([10304, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10308, 4],"float32"), Tensor([10308, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([103286, 1],"float32"), Tensor([103286, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1034, 1],"float32"), Tensor([1034, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10344, 11],"float32"), Tensor([10344, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1035, 1],"float32"), Tensor([1035, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10352, 1],"float32"), Tensor([10352, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1036, 1],"float32"), Tensor([1036, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10370, 1],"float32"), Tensor([10370, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10372, 11],"float32"), Tensor([10372, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1038, 3, 4],"float32"), Tensor([1038, 3, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([104, 1],"float32"), Tensor([104, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1041, 2, 4],"float32"), Tensor([1041, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1042, 1],"float32"), Tensor([1042, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1043, 2, 4],"float32"), Tensor([1043, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1047, 1],"float32"), Tensor([1047, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1049, 1],"float32"), Tensor([1049, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([105, 1],"float32"), Tensor([105, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([105, 2, 4],"float32"), Tensor([105, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1051, 1],"float32"), Tensor([1051, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10521, 11],"float32"), Tensor([10521, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([105581, 1],"float32"), Tensor([105581, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1056, 1],"float32"), Tensor([1056, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([106, 1, 4],"float32"), Tensor([106, 1, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1060, 1],"float32"), Tensor([1060, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1062, 1],"float32"), Tensor([1062, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([106204, 1],"float32"), Tensor([106204, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1063, 1],"float32"), Tensor([1063, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1065, 1],"float32"), Tensor([1065, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1066, 1],"float32"), Tensor([1066, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1069, 1],"float32"), Tensor([1069, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([107, 1, 4],"float32"), Tensor([107, 1, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([107, 2, 4],"float32"), Tensor([107, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([107, 4],"float32"), Tensor([107, 4],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([107416, 1],"float32"), Tensor([107416, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10746, 1],"float32"), Tensor([10746, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1077, 1],"float32"), Tensor([1077, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1078, 6, 4],"float32"), Tensor([1078, 6, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10780, 1],"float32"), Tensor([10780, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([108, 1],"float32"), Tensor([108, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([108, 4],"float32"), Tensor([108, 4],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1080, 1],"float32"), Tensor([1080, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1082, 1],"float32"), Tensor([1082, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1082, 4, 4],"float32"), Tensor([1082, 4, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([108273, 1],"float32"), Tensor([108273, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10880, 11],"float32"), Tensor([10880, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([109, 1, 4],"float32"), Tensor([109, 1, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10912, 11],"float32"), Tensor([10912, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10934, 1],"float32"), Tensor([10934, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1096, 1],"float32"), Tensor([1096, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1098, 1],"float32"), Tensor([1098, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([110, 1],"float32"), Tensor([110, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([110, 2, 4],"float32"), Tensor([110, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([110, 4],"float32"), Tensor([110, 4],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1100, 1],"float32"), Tensor([1100, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1102, 1],"float32"), Tensor([1102, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1107, 1],"float32"), Tensor([1107, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1108, 1],"float32"), Tensor([1108, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([111, 1],"float32"), Tensor([111, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([11144, 11],"float32"), Tensor([11144, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([111776, 11],"float32"), Tensor([111776, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1119, 2, 4],"float32"), Tensor([1119, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1119, 5, 4],"float32"), Tensor([1119, 5, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([11190, 1],"float32"), Tensor([11190, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1120, 1],"float32"), Tensor([1120, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([112112, 11],"float32"), Tensor([112112, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([112230, 11],"float32"), Tensor([112230, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1123, 1],"float32"), Tensor([1123, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1124, 1],"float32"), Tensor([1124, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([11253, 1],"float32"), Tensor([11253, 1],"float32"), reduction="none", )
