paddle.argmax(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmin(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.assign(.09994, Tensor([],"float32"), )
paddle.assign(x=42, )
paddle.assign(x=list[list[3.1,2.1,2.2,],list[-1.0,-2.0,-2.2,],], )
paddle.assign(x=Tensor([3, 3],"float64"), )
paddle.assign(x=Tensor([3, 4],"float32"), )
paddle.assign(x=Tensor([3, 4],"float64"), )
paddle.assign(x=Tensor([3, 4],"int32"), )
paddle.assign(x=Tensor([3, 4],"int64"), )
paddle.assign(x=tuple(tuple(3.1,2.1,2.2,),tuple(-1.0,-2.0,-2.2,),), )
paddle.multinomial(Tensor([1, 8000],"float32"), 1, )
paddle.multinomial(Tensor([10, 8000],"float32"), 1, )
paddle.multinomial(Tensor([1000],"float64"), num_samples=100, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 1, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 20000, replacement=True, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 5000, replacement=False, )
paddle.multinomial(Tensor([2, 7],"float32"), num_samples=5, replacement=True, name=None, )
paddle.multinomial(Tensor([2, 7],"float64"), num_samples=5, replacement=True, name=None, )
paddle.multinomial(Tensor([2, 8000],"float32"), 1, )
paddle.multinomial(Tensor([3, 10000],"float32"), )
paddle.multinomial(Tensor([3, 4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([3, 8000],"float32"), 1, )
paddle.multinomial(Tensor([4, 8000],"float32"), 1, )
paddle.multinomial(Tensor([4],"float32"), num_samples=10, replacement=True, )
paddle.multinomial(Tensor([4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([5, 8000],"float32"), 1, )
paddle.multinomial(Tensor([6, 8000],"float32"), 1, )
paddle.multinomial(Tensor([6],"float32"), name=None, )
paddle.multinomial(Tensor([6],"float32"), num_samples=Tensor([],"int64"), name=None, )
paddle.multinomial(Tensor([6],"float64"), name=None, )
paddle.multinomial(Tensor([6],"float64"), num_samples=Tensor([],"int64"), name=None, )
paddle.multinomial(Tensor([7, 8000],"float32"), 1, )
paddle.multinomial(Tensor([7],"float32"), num_samples=4, name=None, )
paddle.multinomial(Tensor([7],"float64"), num_samples=4, name=None, )
paddle.multinomial(Tensor([8, 8000],"float32"), 1, )
paddle.multinomial(Tensor([9, 8000],"float32"), 1, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float32"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 4],"float64"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 3],"float64"), output_size=Tensor([2],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 32],"float64"), output_size=Tensor([3],"int64"), )
paddle.nn.functional.interpolate(Tensor([1, 2, 256, 256],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 2, 512, 512],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 2, 608, 913],"float32"), size=tuple(Tensor([],"int64"),Tensor([],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 2, 608, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 64, 128, 128],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=Tensor([1],"float32"), mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=Tensor([1],"int32"), scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 640, 640],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 144, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 24, 78],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 47, 156],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 18, 94, 311],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 3, 640, 640],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 36, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 36, 24, 78],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=None, scale_factor=Tensor([2],"float32"), mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 5, 6, 7],"float64"), size=Tensor([2],"int32"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([4, 64, 128, 128],"float16"), size=Tensor([2],"int64"), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([4, 64, 128, 128],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([4, 72, 12, 39],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 72, 24, 78],"float32"), Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 81, 47, 156],"float32"), size=list[Tensor([],"int64"),Tensor([],"int64"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([8, 3, 640, 640],"float32"), size=Tensor([2],"int64"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"int32"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 4],"int64"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=list[Tensor([],"float32"),Tensor([],"float32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=Tensor([],"float32"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list[Tensor([],"int32"),Tensor([],"int32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6],"float32"), scale_factor=Tensor([1],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 15],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 15],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 19, 29],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 19, 29],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 38, 58],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 38, 58],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 76, 115],"float16"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 76, 115],"float16"), Tensor([16, 300, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float16"), Tensor([4, 128, 128, 2],"float16"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 128],"float16"), Tensor([4, 256, 256, 2],"float16"), )
paddle.nn.functional.hsigmoid_loss(Tensor([20, 5],"float64"), Tensor([20, 1],"int64"), 101, Tensor([100, 5],"float64"), Tensor([100, 1],"float64"), None, None, False, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), None, None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), path_table=None, path_code=None, is_sparse=False, name=None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), path_table=Tensor([4, 5],"int64"), path_code=Tensor([4, 5],"int64"), is_sparse=False, name=None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), None, Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), False, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), Tensor([5, 1],"float64"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), False, )
paddle.Tensor.clip(Tensor([2, 2],"int32"), Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.Tensor.clip(Tensor([512],"float32"), Tensor([0],"float32"), Tensor([],"float32"), )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([2],"float32"), axis=list[1,2,], keepdim=True, )
paddle.standard_normal(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=0.8, margin2=0.0, margin3=0.15, scale=40.0, group=None, return_softmax=False, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=64.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="sum", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.0, margin3=0.35, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.35, margin2=0.0, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=Tensor([2],"float64"), reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=Tensor([2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.strided_slice(Tensor([5, 5, 5],"float32"), list[1,2,], list[Tensor([],"int32"),Tensor([],"int32"),], list[Tensor([],"int32"),Tensor([],"int32"),], list[Tensor([],"int32"),Tensor([],"int32"),], )
