paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", Tensor([],"int32"), )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "sum", )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "sum", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="sub", )
paddle.multinomial(Tensor([1, 200],"float32"), )
paddle.multinomial(Tensor([1, 30000],"float32"), )
paddle.multinomial(Tensor([1, 32000],"float16"), )
paddle.multinomial(Tensor([1, 50304],"float32"), )
paddle.multinomial(Tensor([1, 99],"float32"), )
paddle.multinomial(Tensor([2, 100],"float32"), )
paddle.multinomial(Tensor([2, 123],"float32"), )
paddle.multinomial(Tensor([2, 256000],"float32"), )
paddle.multinomial(Tensor([2, 256],"float32"), )
paddle.multinomial(Tensor([2, 32000],"float32"), )
paddle.multinomial(Tensor([2, 99],"float16"), )
paddle.multinomial(Tensor([2, 99],"float32"), )
paddle.multinomial(Tensor([5, 12000],"float32"), )
paddle.multinomial(Tensor([6, 100],"float32"), )
paddle.multinomial(Tensor([6, 123],"float32"), )
paddle.multinomial(Tensor([6, 256000],"float32"), )
paddle.multinomial(Tensor([6, 256],"float32"), )
paddle.multinomial(Tensor([6, 32000],"float32"), )
paddle.multinomial(Tensor([6, 99],"float16"), )
paddle.multinomial(Tensor([6, 99],"float32"), )
paddle.nn.functional.upsample(Tensor([128, 192, 7, 7],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([128, 48, 14, 14],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([128, 48, 28, 28],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([128, 48, 7, 7],"float32"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([128, 96, 14, 14],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([128, 96, 7, 7],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([16, 256, 20, 20],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 256, 20, 20],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 256, 40, 40],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 256, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 64, 20, 20],"float16"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 64, 20, 20],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 64, 40, 40],"float16"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 64, 40, 40],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 64, 80, 80],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([16, 64, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([24, 96, 16, 16],"float32"), size=list[31,31,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([24, 96, 31, 31],"float32"), size=list[61,61,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([24, 96, 61, 61],"float32"), size=list[122,122,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([4, 24, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 24, 30, 30],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 24, 60, 60],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 20, 20],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 20, 20],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 30, 30],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 40, 40],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 60, 60],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 256, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 48, 40, 40],"float32"), size=list[80,80,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([4, 64, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 20, 20],"float16"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 20, 20],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 30, 30],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 40, 40],"float16"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 40, 40],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 60, 60],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 80, 80],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 64, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 96, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 96, 30, 30],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([4, 96, 60, 60],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([64, 160, 7, 7],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 160, 7, 7],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 18, 14, 14],"float16"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 18, 14, 14],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 18, 28, 28],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 18, 28, 28],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 18, 7, 7],"float16"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 18, 7, 7],"float32"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 36, 14, 14],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 36, 14, 14],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 36, 7, 7],"float16"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 36, 7, 7],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 40, 14, 14],"float16"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 40, 14, 14],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 40, 28, 28],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 40, 28, 28],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 40, 7, 7],"float16"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 40, 7, 7],"float32"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 72, 7, 7],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 72, 7, 7],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 80, 14, 14],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 80, 14, 14],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 80, 7, 7],"float16"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 80, 7, 7],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 96, 16, 16],"float16"), size=list[31,31,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 96, 31, 31],"float16"), size=list[61,61,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([64, 96, 61, 61],"float16"), size=list[122,122,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([8, 24, 120, 120],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 20, 20],"float16"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 20, 20],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 30, 30],"float16"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 30, 30],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 40, 40],"float16"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 40, 40],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 60, 60],"float16"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 60, 60],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 80, 80],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 24, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 20, 20],"float16"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 20, 20],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 20, 20],"float16"), scale_factor=8, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 20, 20],"float32"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 20, 20],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 20, 20],"float32"), scale_factor=8, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 30, 30],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 40, 40],"float16"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 40, 40],"float16"), scale_factor=4, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 40, 40],"float32"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 40, 40],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 40, 40],"float32"), scale_factor=4, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 60, 60],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 256, 80, 80],"float16"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 80, 80],"float32"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([8, 256, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 20, 20],"float16"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 20, 20],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 30, 30],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 40, 40],"float16"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 40, 40],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 60, 60],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 80, 80],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 64, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 120, 120],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 20, 20],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 20, 20],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 30, 30],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 30, 30],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 40, 40],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 60, 60],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([8, 96, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(x=Tensor([1, 2, 1],"float64"), size=Tensor([1],"float64"), scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1],"float64"), size=None, scale_factor=Tensor([2],"float64"), mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 2, 1],"float64"), size=Tensor([3],"float64"), scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.upsample(x=Tensor([2, 1, 4, 4],"float32"), size=Tensor([2],"float32"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.functional.upsample(x=Tensor([2, 1, 4, 4],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.functional.upsample(x=Tensor([2, 3, 6, 6],"float32"), size=list[Tensor([],"int32"),Tensor([],"int32"),], mode="bilinear", align_corners=False, )
