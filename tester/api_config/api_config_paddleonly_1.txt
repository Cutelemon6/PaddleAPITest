paddle.add_n(list[Tensor([],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.empty_like(Tensor([1, 10, 5],"float32"), )
paddle.empty_like(Tensor([1, 8400, 4],"float32"), )
paddle.empty_like(Tensor([10, 1000],"bfloat16"), )
paddle.empty_like(Tensor([10, 1000],"bool"), )
paddle.empty_like(Tensor([10, 1000],"float16"), )
paddle.empty_like(Tensor([10, 1000],"float32"), )
paddle.empty_like(Tensor([10, 1000],"float64"), )
paddle.empty_like(Tensor([10, 1000],"int32"), )
paddle.empty_like(Tensor([10, 1000],"int64"), )
paddle.empty_like(Tensor([10, 1000],"int8"), )
paddle.empty_like(Tensor([10, 1000],"uint8"), )
paddle.empty_like(Tensor([100, 200],"float32"), )
paddle.empty_like(Tensor([1024],"float32"), )
paddle.empty_like(Tensor([1048576],"float32"), )
paddle.empty_like(Tensor([13, 32],"float32"), )
paddle.empty_like(Tensor([13, 4, 7, 7],"float32"), )
paddle.empty_like(Tensor([13, 7, 32],"float32"), )
paddle.empty_like(Tensor([131072],"float32"), )
paddle.empty_like(Tensor([1500],"bool"), )
paddle.empty_like(Tensor([16, 128],"float64"), )
paddle.empty_like(Tensor([16, 16, 128],"float64"), )
paddle.empty_like(Tensor([180142],"uint8"), )
paddle.empty_like(Tensor([2, 10, 5],"float32"), )
paddle.empty_like(Tensor([2, 20, 20],"float16"), )
paddle.empty_like(Tensor([200],"bool"), )
paddle.empty_like(Tensor([256, 128],"float64"), )
paddle.empty_like(Tensor([256],"float32"), )
paddle.empty_like(Tensor([2],"int64"), )
paddle.empty_like(Tensor([300],"bool"), )
paddle.empty_like(Tensor([31],"uint8"), )
paddle.empty_like(Tensor([34, 13],"float32"), )
paddle.empty_like(Tensor([393216],"float32"), )
paddle.empty_like(Tensor([4, 20, 20],"float16"), )
paddle.empty_like(Tensor([4, 5, 20],"float32"), )
paddle.empty_like(Tensor([4194304],"float32"), )
paddle.empty_like(Tensor([446],"uint8"), )
paddle.empty_like(Tensor([50, 200],"float32"), )
paddle.empty_like(Tensor([52, 32],"float32"), )
paddle.empty_like(Tensor([52, 4, 7, 7],"float32"), )
paddle.empty_like(Tensor([52, 7, 32],"float32"), )
paddle.empty_like(Tensor([524288],"float32"), )
paddle.empty_like(Tensor([5341184],"float32"), )
paddle.empty_like(Tensor([5505024],"float32"), )
paddle.empty_like(Tensor([6662],"uint8"), )
paddle.empty_like(Tensor([6815744],"float32"), )
paddle.empty_like(Tensor([768],"float32"), )
paddle.empty_like(Tensor([8192000],"float32"), )
paddle.empty_like(Tensor([8192],"float32"), )
paddle.empty_like(Tensor([822],"uint8"), )
paddle.empty_like(Tensor([8249344],"float32"), )
paddle.empty_like(Tensor([8388608],"float32"), )
paddle.empty_like(Tensor([884],"uint8"), )
paddle.empty_like(Tensor([],"float16"), )
paddle.empty_like(Tensor([],"float32"), )
paddle.empty_like(Tensor([],"int64"), )
paddle.empty_like(x=Tensor([1, 768],"float32"), )
paddle.empty_like(x=Tensor([2],"bool"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"bool"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"bool"), dtype=None, )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"bool"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"float16"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"float16"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"float16"), dtype=None, )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"float16"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"float32"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"float32"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"float32"), dtype=None, )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"float32"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"float64"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"float64"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"float64"), dtype=None, )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"float64"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"int32"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"int32"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"int32"), dtype=None, )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"int32"), dtype=type(numpy.int64), )
paddle.empty_like(x=Tensor([2],"int64"), dtype="float16", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="float32", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="float64", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="int32", )
paddle.empty_like(x=Tensor([2],"int64"), dtype="int64", )
paddle.empty_like(x=Tensor([2],"int64"), dtype=None, )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(bool), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.float16), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.float32), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.float64), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.int32), )
paddle.empty_like(x=Tensor([2],"int64"), dtype=type(numpy.int64), )
paddle.empty(list[0,], )
paddle.empty(list[0,], dtype=Dtype(float16), )
paddle.empty(list[0,], dtype=Dtype(float32), )
paddle.empty(list[1,], )
paddle.empty(list[1,], dtype="int64", )
paddle.empty(list[10,10,], dtype="float32", )
paddle.empty(list[10,10,], dtype="float64", )
paddle.empty(list[10,], Dtype(float16), )
paddle.empty(list[128,], dtype=Dtype(int64), )
paddle.empty(list[13,], dtype="int64", )
paddle.empty(list[16,16,16,16,], dtype="float32", )
paddle.empty(list[16,2,1024,768,], dtype="float64", )
paddle.empty(list[2,2,3,], "float32", )
paddle.empty(list[2,2,], dtype="float32", )
paddle.empty(list[2,2,], dtype="int64", )
paddle.empty(list[2,3,3,], "float32", )
paddle.empty(list[20,], )
paddle.empty(list[24,], dtype="int64", )
paddle.empty(list[3,0,], )
paddle.empty(list[32,512,], dtype=Dtype(int64), )
paddle.empty(list[32,], dtype=Dtype(int64), )
paddle.empty(list[4,2,], dtype="float32", )
paddle.empty(list[4,], dtype=Dtype(int64), )
paddle.empty(list[40,], dtype="float32", )
paddle.empty(list[5,0,], dtype=Dtype(complex128), )
paddle.empty(list[5,0,], dtype=Dtype(float32), )
paddle.empty(list[5,1,], dtype=Dtype(complex128), )
paddle.empty(list[5,1,], dtype=Dtype(float32), )
paddle.empty(list[5,2,], dtype=Dtype(complex128), )
paddle.empty(list[5,2,], dtype=Dtype(float32), )
paddle.empty(list[5,3,], dtype=Dtype(complex128), )
paddle.empty(list[5,3,], dtype=Dtype(float32), )
paddle.empty(list[5,4,], dtype=Dtype(complex128), )
paddle.empty(list[5,4,], dtype=Dtype(float32), )
paddle.empty(list[5,5,], dtype=Dtype(float32), )
paddle.empty(list[5,6,], dtype=Dtype(float32), )
paddle.empty(list[5,7,], dtype=Dtype(float32), )
paddle.empty(list[5,8,], dtype=Dtype(float32), )
paddle.empty(list[512,768,], dtype="float64", )
paddle.empty(list[6,], )
paddle.empty(list[64,3,1024,1024,], dtype="float32", )
paddle.empty(list[7,], dtype="int64", )
paddle.empty(list[8,], dtype="int64", )
paddle.empty(list[8,], dtype=Dtype(int64), )
paddle.empty(list[90088,], dtype="uint8", )
paddle.empty(list[], )
paddle.empty(list[], dtype="int64", )
paddle.empty(shape=list[0,2,], dtype=Dtype(float32), )
paddle.empty(shape=list[0,4,], dtype=Dtype(float32), )
paddle.empty(shape=list[0,], dtype="int32", )
paddle.empty(shape=list[0,], dtype=Dtype(float32), )
paddle.empty(shape=list[0,], dtype=Dtype(float64), )
paddle.empty(shape=list[0,], dtype=Dtype(int64), )
paddle.empty(shape=list[1,1024,1024,], dtype="float16", )
paddle.empty(shape=list[1,2,3,], dtype="float16", )
paddle.empty(shape=list[1,2,3,], dtype="float32", )
paddle.empty(shape=list[1,2,3,], dtype="float64", )
paddle.empty(shape=list[1,2,3,], dtype="int32", )
paddle.empty(shape=list[1,2,3,], dtype="int64", )
paddle.empty(shape=list[1,2,3,], dtype=None, )
paddle.empty(shape=list[1,2,3,], dtype=type(bool), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.float16), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.float32), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.float64), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.int32), )
paddle.empty(shape=list[1,2,3,], dtype=type(numpy.int64), )
paddle.empty(shape=list[100,50,50,], dtype="float32", )
paddle.empty(shape=list[1024,16,1024,], dtype=Dtype(float16), )
paddle.empty(shape=list[1024,2,1024,], dtype=Dtype(float16), )
paddle.empty(shape=list[128,16,1024,], dtype=Dtype(float16), )
paddle.empty(shape=list[128,2,1024,], dtype=Dtype(float16), )
paddle.empty(shape=list[128,32,], )
paddle.empty(shape=list[2,1,128,], dtype="float32", )
paddle.empty(shape=list[2,1,16,], dtype="float32", )
paddle.empty(shape=list[2,1,], dtype="float32", )
paddle.empty(shape=list[2,1,], dtype="int64", )
paddle.empty(shape=list[2,1024,1024,], dtype="float16", )
paddle.empty(shape=list[2,2,], )
paddle.empty(shape=list[2,384,1,1,], dtype="float32", )
paddle.empty(shape=list[2,4,8,8,8,], )
paddle.empty(shape=list[2,4,8,8,], )
paddle.empty(shape=list[2,8,16,], dtype="float32", )
paddle.empty(shape=list[2,8,], dtype="int64", )
paddle.empty(shape=list[2,], dtype=Dtype(int64), )
paddle.empty(shape=list[200,3,], )
paddle.empty(shape=list[200,3,], dtype="float64", )
paddle.empty(shape=list[200,50,50,5,], dtype="float32", )
paddle.empty(shape=list[2000,], dtype=Dtype(int64), )
paddle.empty(shape=list[256,2,1024,], dtype="float16", )
paddle.empty(shape=list[256,2,1024,], dtype=Dtype(float16), )
paddle.empty(shape=list[3,3,], )
paddle.empty(shape=list[3,3,], dtype="int32", )
paddle.empty(shape=list[4,1,8,], dtype="float32", )
paddle.empty(shape=list[4,1,], dtype="int64", )
paddle.empty(shape=list[4,6,5,], )
paddle.empty(shape=list[50,50,50,], dtype="float32", )
paddle.empty(shape=list[77,768,], )
paddle.empty(shape=list[77,77,], )
paddle.empty(shape=list[8,8,], dtype="float32", )
paddle.empty(shape=tuple(0,200,), )
paddle.empty(shape=tuple(1,200,), )
paddle.empty(shape=tuple(2,3,), dtype="float16", )
paddle.empty(shape=tuple(2,3,), dtype="float32", )
paddle.empty(shape=tuple(2,3,), dtype="float64", )
paddle.empty(shape=tuple(2,3,), dtype="int32", )
paddle.empty(shape=tuple(2,3,), dtype="int64", )
paddle.empty(shape=tuple(2,3,), dtype=None, )
paddle.empty(shape=tuple(2,3,), dtype=type(bool), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.float16), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.float32), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.float64), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.int32), )
paddle.empty(shape=tuple(2,3,), dtype=type(numpy.int64), )
paddle.empty(shape=tuple(2,3,6,10,), )
paddle.empty(shape=tuple(200,0,), )
paddle.empty(shape=tuple(200,1,), )
paddle.empty(tuple(1,128,), )
paddle.empty(tuple(1,16,128,), )
paddle.empty(tuple(1,2,), )
paddle.empty(tuple(16,128,), )
paddle.empty(tuple(4,10,), )
paddle.empty(tuple(4,4,), )
paddle.empty(tuple(7,7,), dtype=Dtype(bool), )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float16"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), kernel_size=list[2,2,], output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float64"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.audio.functional.get_window("triang", 512, )
paddle.nn.functional.class_center_sample(Tensor([10],"int32"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([10],"int64"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([15],"int32"), 20, 8, )
paddle.nn.functional.class_center_sample(Tensor([20],"int32"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.class_center_sample(Tensor([20],"int64"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.class_center_sample(Tensor([5],"int32"), 10, 8, )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
