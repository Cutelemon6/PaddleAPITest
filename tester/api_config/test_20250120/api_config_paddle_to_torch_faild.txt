paddle.argmax(Tensor([10, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(Tensor([10, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.as_strided(Tensor([15, 3],"float32"), list[15,3,], list[2,], 0, )
paddle.as_strided(Tensor([15, 3],"float32"), list[15,3,], list[3,1,], 0, )
paddle.as_strided(Tensor([15, 3],"float32"), list[20,], list[1,], 0, )
paddle.as_strided(Tensor([15, 3],"float32"), list[20,], list[2,], 0, )
paddle.as_strided(Tensor([2, 4, 6],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"float64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"int32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"int32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"int64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"int64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([6, 3],"float16"), list[3,8,], list[2,2,], 0, )
paddle.as_strided(Tensor([6, 3],"float16"), list[3,8,], list[8,1,], 0, )
paddle.as_strided(Tensor([6, 3],"float16"), list[6,3,], list[2,2,], 0, )
paddle.as_strided(Tensor([6, 3],"float16"), list[6,3,], list[3,1,], 0, )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([1],"int16"), False, )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([300],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([1],"int8"), False, )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([300],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([3, 5],"float32"), keepdim=True, )
paddle.diag(Tensor([100],"float64"), padding_value=8, )
paddle.diag(Tensor([100],"int64"), padding_value=-8, )
paddle.diag(Tensor([100],"int64"), padding_value=8.0, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.logcumsumexp(Tensor([10, 12],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([10, 12],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([10, 12],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([10, 12],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([3, 4],"float32"), dtype="float32", )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 50],"float32"), Tensor([50, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float16"), Tensor([1, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float32"), Tensor([1, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float16"), Tensor([1, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 16],"float32"), Tensor([1, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 32],"float32"), Tensor([1, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([1],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([18],"float32"), )
paddle.matmul(Tensor([1, 2, 50],"complex128"), Tensor([1, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 50],"complex64"), Tensor([1, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 200],"float32"), Tensor([30, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([1, 448, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 480, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 493, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 530, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 128],"float32"), Tensor([1, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 16],"float32"), Tensor([1, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 32],"float32"), Tensor([1, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 8],"float32"), Tensor([1, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 64],"float32"), Tensor([1, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([10, 16],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([10],"float32"), True, True, )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 21],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([1000, 1000],"float32"), Tensor([1000, 1000],"float32"), )
paddle.matmul(Tensor([1024, 1024],"float32"), Tensor([1024, 1024],"float32"), )
paddle.matmul(Tensor([12, 32],"float16"), Tensor([12, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([12, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([15, 8],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([15, 8],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([16, 1, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([16, 12],"float32"), Tensor([12, 10],"float32"), )
paddle.matmul(Tensor([16, 12],"float64"), Tensor([12, 10],"float64"), )
paddle.matmul(Tensor([16, 128, 32, 128],"float32"), Tensor([16, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 32],"float32"), Tensor([16, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([16, 16, 12],"float32"), Tensor([16, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 5, 5],"float32"), Tensor([16, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 784],"float32"), Tensor([784, 784],"float32"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([1, 4],"float64"), )
paddle.matmul(Tensor([17, 17],"float64"), Tensor([17, 16],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 1, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([2, 100],"float32"), Tensor([100, 2],"float32"), )
paddle.matmul(Tensor([2, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([2, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([2, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([2],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([50000, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.matmul(Tensor([2, 24],"float32"), Tensor([24, 24],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([4],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([2, 3],"float16"), Tensor([3],"float16"), False, False, )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), True, False, )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([3, 5],"float32"), )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([3],"float32"), False, False, )
paddle.matmul(Tensor([2, 3],"float64"), Tensor([3],"float64"), False, False, )
paddle.matmul(Tensor([2, 32, 1, 33],"float16"), Tensor([2, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 42],"float32"), Tensor([42, 42],"float32"), )
paddle.matmul(Tensor([2, 8, 1, 129],"float16"), Tensor([2, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 65],"float16"), Tensor([2, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 128],"float16"), Tensor([2, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 8],"float32"), Tensor([24, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([2],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([3, 2],"float16"), False, True, )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([2],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([3, 2],"float32"), False, True, )
paddle.matmul(Tensor([2],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.matmul(Tensor([2],"float64"), Tensor([2],"float64"), False, False, )
paddle.matmul(Tensor([2],"float64"), Tensor([3, 2],"float64"), False, True, )
paddle.matmul(Tensor([3, 1],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 64],"float16"), Tensor([3, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 2, 2],"float32"), Tensor([1, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 2],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 100, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 17, 4],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 8],"float64"), )
paddle.matmul(Tensor([3],"float32"), Tensor([3],"float32"), False, False, )
paddle.matmul(Tensor([30, 1, 40, 200],"float32"), Tensor([1, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 40, 200],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 8],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([30, 8],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([32, 16, 5, 5],"float32"), Tensor([32, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([32, 8, 4, 4],"float32"), Tensor([32, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([4, 1, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([4, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([4, 10, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 10],"float32"), Tensor([10, 3],"float32"), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([100, 4],"float64"), )
paddle.matmul(Tensor([4, 12, 64, 88],"float32"), Tensor([4, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([16, 20],"float32"), )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([32, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([128, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([16, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([32, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([48, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([96, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([17, 4],"float64"), )
paddle.matmul(Tensor([4, 22],"float32"), Tensor([22, 20],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([10, 1000],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([10, 1000],"float64"), )
paddle.matmul(Tensor([4, 3],"float32"), Tensor([3, 2],"float32"), )
paddle.matmul(Tensor([4, 32],"float32"), Tensor([32, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([32, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([32, 8],"float64"), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([96, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 34],"float32"), Tensor([34, 26],"float32"), )
paddle.matmul(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.matmul(Tensor([4, 4],"float64"), Tensor([4, 4],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 5, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 8],"float64"), Tensor([128, 8],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.matmul(Tensor([40, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 21],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 105],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 120],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 419],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 480],"float32"), )
paddle.matmul(Tensor([5, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([5, 10],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([5, 3],"float32"), Tensor([3, 4],"float32"), )
paddle.matmul(Tensor([5, 5],"float32"), Tensor([5, 5],"float32"), )
paddle.matmul(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.matmul(Tensor([58, 2, 140, 140],"float32"), Tensor([58, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([6, 3, 1, 20],"float32"), Tensor([20, 32],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 112],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 74],"float32"), )
paddle.matmul(Tensor([64, 16, 5, 5],"float32"), Tensor([64, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 294],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 448],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 480],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 493],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 530],"float32"), )
paddle.matmul(Tensor([64, 96],"float32"), Tensor([96, 32],"float32"), )
paddle.matmul(Tensor([8, 1, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([8, 1, 4],"float32"), Tensor([8, 4, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 5],"float32"), Tensor([8, 5, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 6],"float32"), Tensor([8, 6, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 6, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 128, 256],"float32"), Tensor([768, 256],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 12],"float32"), Tensor([8, 12, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 12],"float64"), Tensor([8, 12, 10],"float64"), )
paddle.matmul(Tensor([8, 16, 128, 128],"float32"), Tensor([8, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 16],"float32"), Tensor([8, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([10, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([10000, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 128],"float16"), y=Tensor([2, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([3, 2, 2, 5],"float64"), y=Tensor([5],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([32, 16],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([32, 8, 4, 64],"float32"), y=Tensor([32, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([20, 40],"float32"), )
paddle.matmul(x=Tensor([4, 3],"float64"), y=Tensor([3],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 1],"float32"), y=Tensor([58, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 64],"float32"), y=Tensor([8, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float16"), y=Tensor([8, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float32"), y=Tensor([8, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([8, 24],"float32"), y=Tensor([24, 32],"float32"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 120, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 144, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 16, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 240, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 288, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 3, 3],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 576, 3, 3],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 96, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([16, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 12, 12],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1000, 13, 13],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 6, 6],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 120, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 144, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 16, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1664, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 1920, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 5, 5],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2048, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2208, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 240, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 2688, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 288, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 480, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 576, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 672, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 72, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 96, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 960, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([3, 2048, 8, 8],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1280, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([64, 512, 7, 7],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 7],"float16"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 2048, 7, 7],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 256, 56, 56],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([8, 512, 28, 28],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.dropout(Tensor([1, 1, 8],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 10],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 1024],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 1280],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([1, 2048, 1, 1],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([1, 4096],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 1],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([12, 4, 16],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([12, 4, 8],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([128, 128],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([16, 64, 128, 128],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([16, 64, 128, 128],"float32"), p=0.6, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float16"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float32"), p=0.4, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.5, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.5, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.5, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.9, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.9, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.9, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 0.9, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 1.0, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 1.0, training=False, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 1.0, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([2, 1024, 1, 1],"float64"), 1.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024, 2, 1],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 1024],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 1024],"float32"), p=0.7, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 12],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 12],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 128, 60],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 1280],"float32"), p=0.2, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 2048],"float32"), p=0.2, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 4096],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 4096],"float32"), p=0.5, axis=None, training=False, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 12, 12],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 512, 13, 13],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([2, 6, 7, 9, 3],"float32"), p=0.8, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 2],"float16"), 0.5, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([2, 80, 8, 2],"float16"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([2, 9216],"float32"), p=0.5, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([3, 20],"float32"), p=0.1, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 20],"float32"), p=0.5, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([3, 32, 32],"float32"), p=0.35, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 130],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 130],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 508],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([31, 98, 508],"float64"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([4, 12, 16],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([4, 12, 8],"float64"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([4, 32, 128],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([4, 32, 256],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([512, 512],"float32"), mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 140, 2],"float32"), p=0.1, axis=None, training=False, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 140, 2],"float32"), p=0.1, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 140],"float32"), p=0.1, training=False, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([58, 2, 140, 140],"float32"), p=0.1, training=True, mode="downscale_in_infer", )
paddle.nn.functional.dropout(Tensor([8, 1, 1024],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 128, 1024],"float16"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 128, 1024],"float32"), p=0.0, axis=None, training=True, mode="upscale_in_train", name=None, )
paddle.nn.functional.dropout(Tensor([8, 2048, 1, 1],"float32"), p=0.5, axis=None, training=True, mode="downscale_in_infer", name=None, )
paddle.nn.functional.dropout(x=Tensor([1, 128, 32, 32],"float16"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 128, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 16, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 8, 128, 128],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([1, 8, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(x=Tensor([16, 128, 32, 32],"float32"), p=0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.interpolate(Tensor([1, 3, 106, 125],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 128],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 3, 128],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 3, 159, 120],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 173, 145],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 188, 164],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 212, 250],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 251, 227],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 260, 257],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 28, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 302, 265],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64],"float16"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64],"float32"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6, 6],"float16"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6, 6],"float32"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6],"float16"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6],"float32"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 4],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 5, 5],"float16"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 5, 5],"float32"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6],"float32"), size=list[12,12,], mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 3],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 5, 7, 7],"float32"), mode="area", size=list[2,3,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=list[Tensor([],"float32"),Tensor([],"float32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), scale_factor=Tensor([],"float32"), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"float32"), size=list[Tensor([],"int32"),Tensor([],"int32"),], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6],"float32"), scale_factor=Tensor([1],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 7, 7],"float32"), mode="area", size=list[2,5,], )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 40, 40, 3],"float32"), 5, 0.0001, 0.75, 1.0, "NHWC", None, )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40],"float32"), size=5, data_format="NCHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40, 3],"float32"), size=5, data_format="NHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 50, 106, 106],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 244, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 54, 54],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 288, 25, 25],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 224, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 26, 26],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 224, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 768, 12, 12],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 16, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 6, 6],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 4, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 10],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 24],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 8],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.prelu(Tensor([],"float32"), Tensor([],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([16, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([32, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 20, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([64, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.selu(Tensor([],"float32"), )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"int32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=0, axis1=1, axis2=2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=-1, axis1=2, axis2=0, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=2, axis1=1, axis2=2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=5, axis1=1, axis2=2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=-5, axis1=2, axis2=0, )
paddle.unique(Tensor([],"float32"), return_index=True, return_inverse=True, return_counts=True, )
paddle.unique(Tensor([120],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([3, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
