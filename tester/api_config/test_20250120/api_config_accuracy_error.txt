paddle.argsort(Tensor([2],"int64"), )
paddle.bernoulli(Tensor([100, 1000],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), p=0.3917133774091194, )
paddle.bernoulli(Tensor([32, 1024, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float64"), )
paddle.concat(list[Tensor([100],"bfloat16"),Tensor([100],"bfloat16"),], )
paddle.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.empty_like(Tensor([1, 10, 5],"float32"), )
paddle.empty_like(Tensor([10, 1000],"bfloat16"), )
paddle.empty_like(Tensor([10, 1000],"bool"), )
paddle.empty_like(Tensor([10, 1000],"float16"), )
paddle.empty_like(Tensor([10, 1000],"float32"), )
paddle.empty_like(Tensor([10, 1000],"float64"), )
paddle.empty_like(Tensor([10, 1000],"int32"), )
paddle.empty_like(Tensor([10, 1000],"int64"), )
paddle.empty_like(Tensor([100, 200],"float32"), )
paddle.empty_like(Tensor([11, 20],"float32"), )
paddle.empty_like(Tensor([1500],"bool"), )
paddle.empty_like(Tensor([16, 16, 128],"float64"), )
paddle.empty_like(Tensor([180142],"uint8"), )
paddle.empty_like(Tensor([2, 2],"float32"), )
paddle.empty_like(Tensor([2, 20, 20],"float16"), )
paddle.empty_like(Tensor([2],"int64"), )
paddle.empty_like(Tensor([200, 200],"float32"), )
paddle.empty_like(Tensor([200],"bool"), )
paddle.empty_like(Tensor([256, 128],"float64"), )
paddle.empty_like(Tensor([300],"bool"), )
paddle.empty_like(Tensor([34, 13],"float32"), )
paddle.empty_like(Tensor([4, 20, 20],"float16"), )
paddle.empty_like(Tensor([4, 5, 20],"float32"), )
paddle.empty_like(Tensor([50, 200],"float32"), )
paddle.empty_like(Tensor([8, 16, 2],"float32"), )
paddle.exp(Tensor([10, 2],"bfloat16"), )
paddle.exp(Tensor([4, 3, 2],"bfloat16"), )
paddle.flatten(Tensor([2, 3],"bfloat16"), )
paddle.linalg.eigvals(Tensor([128, 128],"complex128"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 128],"complex64"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 128],"float32"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 128],"float64"), name="large_x", )
paddle.linalg.eigvals(Tensor([6, 6],"complex64"), name="small_x", )
paddle.linalg.norm(Tensor([16, 16],"float32"), 2.0, )
paddle.linalg.norm(Tensor([2, 3, 4, 5],"bfloat16"), 2.0, 1, False, )
paddle.linalg.norm(x=Tensor([3, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([1, 17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([1, 40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([1, 40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([3, 17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([3, 40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([3, 40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([5, 5],"float64"), None, center=False, )
paddle.linalg.pinv(Tensor([3, 5, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"complex64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"float32"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([5, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([5, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([1, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=8, )
paddle.mean(Tensor([10, 2],"bfloat16"), )
paddle.multinomial(Tensor([1000],"float64"), num_samples=100, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 1, replacement=False, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 20000, replacement=True, )
paddle.multinomial(Tensor([1024, 10000],"float32"), 5000, replacement=False, )
paddle.multinomial(Tensor([3, 4],"float64"), num_samples=100000, replacement=True, )
paddle.multinomial(Tensor([4],"float32"), num_samples=10, replacement=True, )
paddle.multinomial(Tensor([4],"float64"), num_samples=100000, replacement=True, )
paddle.nextafter(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.alpha_dropout(Tensor([],"float32"), )
paddle.nn.functional.alpha_dropout(Tensor([40, 40],"bfloat16"), p=0.0, training=False, name=None, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 40],"bfloat16"), p=0.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 40],"bfloat16"), p=0.0, training=False, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 40],"bfloat16"), p=1.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 40],"float32"), p=1.0, )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 1],"float32"), Tensor([23, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.dropout(Tensor([1, 128],"float32"), 0.6, )
paddle.nn.functional.dropout(Tensor([1, 9, 6],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([10, 10],"float32"), p=0.5, training=True, )
paddle.nn.functional.dropout(Tensor([16, 2048, 1, 1],"float32"), p=0.5, )
paddle.nn.functional.dropout(Tensor([2, 10],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([2, 8, 8],"float32"), 0.2, )
paddle.nn.functional.dropout(Tensor([3, 32, 32],"float32"), p=0.35, )
paddle.nn.functional.dropout(Tensor([300, 4096],"float32"), 0.5, )
paddle.nn.functional.dropout(Tensor([32, 4, 2048],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 4, 512],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([32, 8, 4, 4],"float32"), p=0.1, )
paddle.nn.functional.dropout(Tensor([6, 9, 6],"float32"), p=0.5, )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([1024, 512],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([511, 512],"bfloat16"), )
paddle.nn.functional.gumbel_softmax(Tensor([2, 3, 4, 5],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=False, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=True, )
paddle.normal(0.0, 1.0, list[], )
paddle.normal(0.0, 1.0, shape=list[1,], )
paddle.normal(0.0, 1.0, shape=list[18,], )
paddle.normal(mean=0.0, std=0.5, shape=list[1000,], name=None, )
paddle.normal(mean=1.0, std=2.0, shape=list[1,2,3,], name=None, )
paddle.normal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.poisson(Tensor([],"float64"), )
paddle.poisson(Tensor([10, 10],"float32"), )
paddle.poisson(Tensor([16, 1024, 1024],"float32"), )
paddle.poisson(Tensor([32, 3, 1024, 768],"float32"), )
paddle.poisson(Tensor([5000, 1],"float64"), )
paddle.poisson(Tensor([5000, 2],"float32"), )
paddle.poisson(Tensor([5000],"float64"), )
paddle.randint_like(Tensor([],"int64"), -10, 10, )
paddle.randperm(10, )
paddle.randperm(5, )
paddle.repeat_interleave(Tensor([2, 3],"bfloat16"), 2, None, )
paddle.repeat_interleave(Tensor([2, 3],"bfloat16"), Tensor([6],"int32"), None, )
paddle.squeeze(Tensor([1, 6, 1, 1],"float32"), list[], )
paddle.std(Tensor([],"float32"), )
paddle.std(Tensor([],"float32"), list[], )
paddle.var(Tensor([],"float32"), )
paddle.var(Tensor([],"float32"), list[], )
