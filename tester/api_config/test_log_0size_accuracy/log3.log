2025-03-05 15:22:01.691352 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 241],"bool"), list[1,8,76,241,], )

W0305 15:22:04.915405 136979 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0305 15:22:04.916493 136979 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 241],"bool"), list[1,8,76,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 241].  Tensor sizes: [1, 0, 76, 241]
2025-03-05 15:22:38.868795 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 261],"bool"), list[1,8,76,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 261],"bool"), list[1,8,76,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 261].  Tensor sizes: [1, 0, 76, 261]
2025-03-05 15:22:38.872674 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 385],"bool"), list[1,8,76,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 385],"bool"), list[1,8,76,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 385].  Tensor sizes: [1, 0, 76, 385]
2025-03-05 15:22:38.873769 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 61],"bool"), list[1,8,76,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 61],"bool"), list[1,8,76,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 61].  Tensor sizes: [1, 0, 76, 61]
2025-03-05 15:22:38.874719 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 65],"bool"), list[1,8,76,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 65],"bool"), list[1,8,76,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 65].  Tensor sizes: [1, 0, 76, 65]
2025-03-05 15:22:38.875542 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 69],"bool"), list[1,8,76,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 69],"bool"), list[1,8,76,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 69].  Tensor sizes: [1, 0, 76, 69]
2025-03-05 15:22:38.876278 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 73],"bool"), list[1,8,76,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 73],"bool"), list[1,8,76,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 73].  Tensor sizes: [1, 0, 76, 73]
2025-03-05 15:22:38.877111 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[1,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[1,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.877940 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[10,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[10,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.878571 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[2,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[2,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.879159 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[3,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[3,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.879749 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[30,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[30,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.880316 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[4,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[4,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.880892 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[5,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[5,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.881472 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[6,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[6,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.882048 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[7,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[7,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.882643 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[8,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[8,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.883242 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[9,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 76],"bool"), list[9,8,76,76,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 76, 76].  Tensor sizes: [1, 0, 76, 76]
2025-03-05 15:22:38.883798 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 85],"bool"), list[1,8,76,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 85],"bool"), list[1,8,76,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 85].  Tensor sizes: [1, 0, 76, 85]
2025-03-05 15:22:38.884359 test begin: paddle.broadcast_to(Tensor([1, 0, 76, 97],"bool"), list[1,8,76,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 76, 97],"bool"), list[1,8,76,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 76, 97].  Tensor sizes: [1, 0, 76, 97]
2025-03-05 15:22:38.884905 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 113],"bool"), list[1,8,77,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 113],"bool"), list[1,8,77,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 113].  Tensor sizes: [1, 0, 77, 113]
2025-03-05 15:22:38.885437 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 145],"bool"), list[1,8,77,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 145],"bool"), list[1,8,77,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 145].  Tensor sizes: [1, 0, 77, 145]
2025-03-05 15:22:38.885984 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 157],"bool"), list[1,8,77,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 157],"bool"), list[1,8,77,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 157].  Tensor sizes: [1, 0, 77, 157]
2025-03-05 15:22:38.886539 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 169],"bool"), list[1,8,77,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 169],"bool"), list[1,8,77,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 169].  Tensor sizes: [1, 0, 77, 169]
2025-03-05 15:22:38.887101 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 217],"bool"), list[1,8,77,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 217],"bool"), list[1,8,77,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 217].  Tensor sizes: [1, 0, 77, 217]
2025-03-05 15:22:38.887691 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 229],"bool"), list[1,8,77,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 229],"bool"), list[1,8,77,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 229].  Tensor sizes: [1, 0, 77, 229]
2025-03-05 15:22:38.888285 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 241],"bool"), list[1,8,77,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 241],"bool"), list[1,8,77,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 241].  Tensor sizes: [1, 0, 77, 241]
2025-03-05 15:22:38.888842 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 261],"bool"), list[1,8,77,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 261],"bool"), list[1,8,77,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 261].  Tensor sizes: [1, 0, 77, 261]
2025-03-05 15:22:38.889434 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 385],"bool"), list[1,8,77,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 385],"bool"), list[1,8,77,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 385].  Tensor sizes: [1, 0, 77, 385]
2025-03-05 15:22:38.889994 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 61],"bool"), list[1,8,77,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 61],"bool"), list[1,8,77,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 61].  Tensor sizes: [1, 0, 77, 61]
2025-03-05 15:22:38.890545 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 65],"bool"), list[1,8,77,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 65],"bool"), list[1,8,77,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 65].  Tensor sizes: [1, 0, 77, 65]
2025-03-05 15:22:38.891128 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 69],"bool"), list[1,8,77,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 69],"bool"), list[1,8,77,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 69].  Tensor sizes: [1, 0, 77, 69]
2025-03-05 15:22:38.891678 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 73],"bool"), list[1,8,77,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 73],"bool"), list[1,8,77,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 73].  Tensor sizes: [1, 0, 77, 73]
2025-03-05 15:22:38.892210 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[1,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[1,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.892749 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[10,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[10,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.893283 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[2,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[2,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.893830 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[3,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[3,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.894379 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[30,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[30,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.894965 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[4,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[4,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.895496 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[5,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[5,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.896023 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[6,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[6,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.896553 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[7,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[7,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.897096 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[8,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[8,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.897634 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[9,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 77],"bool"), list[9,8,77,77,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 77, 77].  Tensor sizes: [1, 0, 77, 77]
2025-03-05 15:22:38.898163 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 85],"bool"), list[1,8,77,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 85],"bool"), list[1,8,77,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 85].  Tensor sizes: [1, 0, 77, 85]
2025-03-05 15:22:38.898703 test begin: paddle.broadcast_to(Tensor([1, 0, 77, 97],"bool"), list[1,8,77,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 77, 97],"bool"), list[1,8,77,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 77, 97].  Tensor sizes: [1, 0, 77, 97]
2025-03-05 15:22:38.899236 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 113],"bool"), list[1,8,78,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 113],"bool"), list[1,8,78,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 113].  Tensor sizes: [1, 0, 78, 113]
2025-03-05 15:22:38.899761 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 145],"bool"), list[1,8,78,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 145],"bool"), list[1,8,78,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 145].  Tensor sizes: [1, 0, 78, 145]
2025-03-05 15:22:38.900293 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 157],"bool"), list[1,8,78,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 157],"bool"), list[1,8,78,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 157].  Tensor sizes: [1, 0, 78, 157]
2025-03-05 15:22:38.900832 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 169],"bool"), list[1,8,78,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 169],"bool"), list[1,8,78,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 169].  Tensor sizes: [1, 0, 78, 169]
2025-03-05 15:22:38.901367 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 217],"bool"), list[1,8,78,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 217],"bool"), list[1,8,78,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 217].  Tensor sizes: [1, 0, 78, 217]
2025-03-05 15:22:38.901913 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 229],"bool"), list[1,8,78,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 229],"bool"), list[1,8,78,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 229].  Tensor sizes: [1, 0, 78, 229]
2025-03-05 15:22:38.902458 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 241],"bool"), list[1,8,78,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 241],"bool"), list[1,8,78,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 241].  Tensor sizes: [1, 0, 78, 241]
2025-03-05 15:22:38.903015 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 261],"bool"), list[1,8,78,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 261],"bool"), list[1,8,78,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 261].  Tensor sizes: [1, 0, 78, 261]
2025-03-05 15:22:38.903555 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 385],"bool"), list[1,8,78,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 385],"bool"), list[1,8,78,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 385].  Tensor sizes: [1, 0, 78, 385]
2025-03-05 15:22:38.904126 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 61],"bool"), list[1,8,78,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 61],"bool"), list[1,8,78,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 61].  Tensor sizes: [1, 0, 78, 61]
2025-03-05 15:22:38.904687 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 65],"bool"), list[1,8,78,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 65],"bool"), list[1,8,78,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 65].  Tensor sizes: [1, 0, 78, 65]
2025-03-05 15:22:38.911340 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 69],"bool"), list[1,8,78,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 69],"bool"), list[1,8,78,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 69].  Tensor sizes: [1, 0, 78, 69]
2025-03-05 15:22:38.912311 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 73],"bool"), list[1,8,78,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 73],"bool"), list[1,8,78,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 73].  Tensor sizes: [1, 0, 78, 73]
2025-03-05 15:22:38.913148 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[1,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[1,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.913896 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[10,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[10,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.914596 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[2,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[2,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.915306 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[3,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[3,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.915989 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[30,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[30,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.916661 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[4,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[4,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.917303 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[5,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[5,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.918786 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[6,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[6,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.919473 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[7,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[7,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.920124 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[8,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[8,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.920846 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[9,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 78],"bool"), list[9,8,78,78,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 78, 78].  Tensor sizes: [1, 0, 78, 78]
2025-03-05 15:22:38.921518 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 85],"bool"), list[1,8,78,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 85],"bool"), list[1,8,78,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 85].  Tensor sizes: [1, 0, 78, 85]
2025-03-05 15:22:38.922223 test begin: paddle.broadcast_to(Tensor([1, 0, 78, 97],"bool"), list[1,8,78,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 78, 97],"bool"), list[1,8,78,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 78, 97].  Tensor sizes: [1, 0, 78, 97]
2025-03-05 15:22:38.922888 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 113],"bool"), list[1,8,79,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 113],"bool"), list[1,8,79,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 113].  Tensor sizes: [1, 0, 79, 113]
2025-03-05 15:22:38.924397 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 145],"bool"), list[1,8,79,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 145],"bool"), list[1,8,79,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 145].  Tensor sizes: [1, 0, 79, 145]
2025-03-05 15:22:38.925305 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 157],"bool"), list[1,8,79,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 157],"bool"), list[1,8,79,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 157].  Tensor sizes: [1, 0, 79, 157]
2025-03-05 15:22:38.926622 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 169],"bool"), list[1,8,79,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 169],"bool"), list[1,8,79,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 169].  Tensor sizes: [1, 0, 79, 169]
2025-03-05 15:22:38.927335 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 217],"bool"), list[1,8,79,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 217],"bool"), list[1,8,79,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 217].  Tensor sizes: [1, 0, 79, 217]
2025-03-05 15:22:38.927998 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 229],"bool"), list[1,8,79,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 229],"bool"), list[1,8,79,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 229].  Tensor sizes: [1, 0, 79, 229]
2025-03-05 15:22:38.928640 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 241],"bool"), list[1,8,79,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 241],"bool"), list[1,8,79,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 241].  Tensor sizes: [1, 0, 79, 241]
2025-03-05 15:22:38.929288 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 261],"bool"), list[1,8,79,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 261],"bool"), list[1,8,79,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 261].  Tensor sizes: [1, 0, 79, 261]
2025-03-05 15:22:38.929974 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 385],"bool"), list[1,8,79,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 385],"bool"), list[1,8,79,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 385].  Tensor sizes: [1, 0, 79, 385]
2025-03-05 15:22:38.930613 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 61],"bool"), list[1,8,79,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 61],"bool"), list[1,8,79,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 61].  Tensor sizes: [1, 0, 79, 61]
2025-03-05 15:22:38.931245 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 65],"bool"), list[1,8,79,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 65],"bool"), list[1,8,79,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 65].  Tensor sizes: [1, 0, 79, 65]
2025-03-05 15:22:38.931900 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 69],"bool"), list[1,8,79,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 69],"bool"), list[1,8,79,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 69].  Tensor sizes: [1, 0, 79, 69]
2025-03-05 15:22:38.932546 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 73],"bool"), list[1,8,79,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 73],"bool"), list[1,8,79,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 73].  Tensor sizes: [1, 0, 79, 73]
2025-03-05 15:22:38.933174 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[1,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[1,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.933810 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[10,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[10,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.934423 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[2,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[2,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.935183 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[3,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[3,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.935842 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[30,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[30,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.936459 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[4,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[4,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.937106 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[5,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[5,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.937734 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[6,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[6,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.938351 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[7,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[7,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.938999 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[8,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[8,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.939650 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[9,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 79],"bool"), list[9,8,79,79,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 79, 79].  Tensor sizes: [1, 0, 79, 79]
2025-03-05 15:22:38.940271 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 85],"bool"), list[1,8,79,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 85],"bool"), list[1,8,79,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 85].  Tensor sizes: [1, 0, 79, 85]
2025-03-05 15:22:38.940931 test begin: paddle.broadcast_to(Tensor([1, 0, 79, 97],"bool"), list[1,8,79,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 79, 97],"bool"), list[1,8,79,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 79, 97].  Tensor sizes: [1, 0, 79, 97]
2025-03-05 15:22:38.941555 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 109],"bool"), list[1,8,8,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 109],"bool"), list[1,8,8,109,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 109].  Tensor sizes: [1, 0, 8, 109]
2025-03-05 15:22:38.942278 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 113],"bool"), list[1,8,8,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 113],"bool"), list[1,8,8,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 113].  Tensor sizes: [1, 0, 8, 113]
2025-03-05 15:22:38.942903 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 145],"bool"), list[1,8,8,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 145],"bool"), list[1,8,8,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 145].  Tensor sizes: [1, 0, 8, 145]
2025-03-05 15:22:38.943526 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 157],"bool"), list[1,8,8,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 157],"bool"), list[1,8,8,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 157].  Tensor sizes: [1, 0, 8, 157]
2025-03-05 15:22:38.944159 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 169],"bool"), list[1,8,8,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 169],"bool"), list[1,8,8,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 169].  Tensor sizes: [1, 0, 8, 169]
2025-03-05 15:22:38.944795 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 217],"bool"), list[1,8,8,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 217],"bool"), list[1,8,8,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 217].  Tensor sizes: [1, 0, 8, 217]
2025-03-05 15:22:38.945413 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 229],"bool"), list[1,8,8,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 229],"bool"), list[1,8,8,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 229].  Tensor sizes: [1, 0, 8, 229]
2025-03-05 15:22:38.946041 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 241],"bool"), list[1,8,8,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 241],"bool"), list[1,8,8,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 241].  Tensor sizes: [1, 0, 8, 241]
2025-03-05 15:22:38.946661 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 261],"bool"), list[1,8,8,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 261],"bool"), list[1,8,8,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 261].  Tensor sizes: [1, 0, 8, 261]
2025-03-05 15:22:38.947338 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 385],"bool"), list[1,8,8,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 385],"bool"), list[1,8,8,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 385].  Tensor sizes: [1, 0, 8, 385]
2025-03-05 15:22:38.947979 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 61],"bool"), list[1,8,8,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 61],"bool"), list[1,8,8,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 61].  Tensor sizes: [1, 0, 8, 61]
2025-03-05 15:22:38.948686 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 65],"bool"), list[1,8,8,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 65],"bool"), list[1,8,8,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 65].  Tensor sizes: [1, 0, 8, 65]
2025-03-05 15:22:38.949339 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 69],"bool"), list[1,8,8,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 69],"bool"), list[1,8,8,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 69].  Tensor sizes: [1, 0, 8, 69]
2025-03-05 15:22:38.949983 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 73],"bool"), list[1,8,8,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 73],"bool"), list[1,8,8,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 73].  Tensor sizes: [1, 0, 8, 73]
2025-03-05 15:22:38.950619 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 85],"bool"), list[1,8,8,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 85],"bool"), list[1,8,8,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 85].  Tensor sizes: [1, 0, 8, 85]
2025-03-05 15:22:38.951235 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[1,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[1,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.951873 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[10,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[10,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.952499 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[14,4,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[14,4,8,8,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [14, 4, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.953125 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[2,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[2,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.953746 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[3,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[3,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.954356 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[4,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[4,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.954959 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[5,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[5,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.955563 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[6,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[6,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.956180 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[7,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[7,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.956791 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[8,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[8,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.957389 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[9,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 8],"bool"), list[9,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 8, 8].  Tensor sizes: [1, 0, 8, 8]
2025-03-05 15:22:38.958003 test begin: paddle.broadcast_to(Tensor([1, 0, 8, 97],"bool"), list[1,8,8,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 8, 97],"bool"), list[1,8,8,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 8, 97].  Tensor sizes: [1, 0, 8, 97]
2025-03-05 15:22:38.958678 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 113],"bool"), list[1,8,80,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 113],"bool"), list[1,8,80,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 113].  Tensor sizes: [1, 0, 80, 113]
2025-03-05 15:22:38.959307 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 145],"bool"), list[1,8,80,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 145],"bool"), list[1,8,80,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 145].  Tensor sizes: [1, 0, 80, 145]
2025-03-05 15:22:38.959983 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 157],"bool"), list[1,8,80,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 157],"bool"), list[1,8,80,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 157].  Tensor sizes: [1, 0, 80, 157]
2025-03-05 15:22:38.960626 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 169],"bool"), list[1,8,80,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 169],"bool"), list[1,8,80,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 169].  Tensor sizes: [1, 0, 80, 169]
2025-03-05 15:22:38.961268 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 217],"bool"), list[1,8,80,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 217],"bool"), list[1,8,80,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 217].  Tensor sizes: [1, 0, 80, 217]
2025-03-05 15:22:38.961910 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 229],"bool"), list[1,8,80,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 229],"bool"), list[1,8,80,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 229].  Tensor sizes: [1, 0, 80, 229]
2025-03-05 15:22:38.962547 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 241],"bool"), list[1,8,80,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 241],"bool"), list[1,8,80,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 241].  Tensor sizes: [1, 0, 80, 241]
2025-03-05 15:22:38.963164 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 261],"bool"), list[1,8,80,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 261],"bool"), list[1,8,80,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 261].  Tensor sizes: [1, 0, 80, 261]
2025-03-05 15:22:38.963771 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 385],"bool"), list[1,8,80,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 385],"bool"), list[1,8,80,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 385].  Tensor sizes: [1, 0, 80, 385]
2025-03-05 15:22:38.964428 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 61],"bool"), list[1,8,80,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 61],"bool"), list[1,8,80,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 61].  Tensor sizes: [1, 0, 80, 61]
2025-03-05 15:22:38.965056 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 65],"bool"), list[1,8,80,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 65],"bool"), list[1,8,80,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 65].  Tensor sizes: [1, 0, 80, 65]
2025-03-05 15:22:38.965699 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 69],"bool"), list[1,8,80,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 69],"bool"), list[1,8,80,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 69].  Tensor sizes: [1, 0, 80, 69]
2025-03-05 15:22:38.966316 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 73],"bool"), list[1,8,80,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 73],"bool"), list[1,8,80,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 73].  Tensor sizes: [1, 0, 80, 73]
2025-03-05 15:22:38.966956 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[1,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[1,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.967577 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[10,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[10,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.968195 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[2,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[2,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.968937 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[3,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[3,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.969643 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[30,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[30,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.970209 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[4,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[4,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.970763 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[5,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[5,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.971358 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[6,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[6,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.971909 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[7,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[7,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.972450 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[8,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[8,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.972992 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[9,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 80],"bool"), list[9,8,80,80,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 80, 80].  Tensor sizes: [1, 0, 80, 80]
2025-03-05 15:22:38.973535 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 85],"bool"), list[1,8,80,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 85],"bool"), list[1,8,80,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 85].  Tensor sizes: [1, 0, 80, 85]
2025-03-05 15:22:38.974075 test begin: paddle.broadcast_to(Tensor([1, 0, 80, 97],"bool"), list[1,8,80,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 80, 97],"bool"), list[1,8,80,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 80, 97].  Tensor sizes: [1, 0, 80, 97]
2025-03-05 15:22:38.974662 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 113],"bool"), list[1,8,81,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 113],"bool"), list[1,8,81,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 113].  Tensor sizes: [1, 0, 81, 113]
2025-03-05 15:22:38.975257 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 145],"bool"), list[1,8,81,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 145],"bool"), list[1,8,81,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 145].  Tensor sizes: [1, 0, 81, 145]
2025-03-05 15:22:38.975839 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 157],"bool"), list[1,8,81,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 157],"bool"), list[1,8,81,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 157].  Tensor sizes: [1, 0, 81, 157]
2025-03-05 15:22:38.976399 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 169],"bool"), list[1,8,81,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 169],"bool"), list[1,8,81,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 169].  Tensor sizes: [1, 0, 81, 169]
2025-03-05 15:22:38.976961 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 217],"bool"), list[1,8,81,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 217],"bool"), list[1,8,81,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 217].  Tensor sizes: [1, 0, 81, 217]
2025-03-05 15:22:38.977538 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 229],"bool"), list[1,8,81,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 229],"bool"), list[1,8,81,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 229].  Tensor sizes: [1, 0, 81, 229]
2025-03-05 15:22:38.978095 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 241],"bool"), list[1,8,81,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 241],"bool"), list[1,8,81,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 241].  Tensor sizes: [1, 0, 81, 241]
2025-03-05 15:22:38.978639 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 261],"bool"), list[1,8,81,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 261],"bool"), list[1,8,81,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 261].  Tensor sizes: [1, 0, 81, 261]
2025-03-05 15:22:38.979193 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 385],"bool"), list[1,8,81,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 385],"bool"), list[1,8,81,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 385].  Tensor sizes: [1, 0, 81, 385]
2025-03-05 15:22:38.979746 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 61],"bool"), list[1,8,81,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 61],"bool"), list[1,8,81,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 61].  Tensor sizes: [1, 0, 81, 61]
2025-03-05 15:22:38.980286 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 65],"bool"), list[1,8,81,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 65],"bool"), list[1,8,81,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 65].  Tensor sizes: [1, 0, 81, 65]
2025-03-05 15:22:38.980825 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 69],"bool"), list[1,8,81,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 69],"bool"), list[1,8,81,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 69].  Tensor sizes: [1, 0, 81, 69]
2025-03-05 15:22:38.981363 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 73],"bool"), list[1,8,81,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 73],"bool"), list[1,8,81,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 73].  Tensor sizes: [1, 0, 81, 73]
2025-03-05 15:22:38.981906 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[1,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[1,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.982441 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[10,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[10,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.982976 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[2,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[2,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.984266 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[3,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[3,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.985089 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[30,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[30,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.985724 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[4,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[4,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.986307 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[5,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[5,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.986910 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[6,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[6,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.987479 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[7,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[7,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.988039 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[8,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[8,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.988610 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[9,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 81],"bool"), list[9,8,81,81,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 81, 81].  Tensor sizes: [1, 0, 81, 81]
2025-03-05 15:22:38.989163 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 85],"bool"), list[1,8,81,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 85],"bool"), list[1,8,81,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 85].  Tensor sizes: [1, 0, 81, 85]
2025-03-05 15:22:38.989750 test begin: paddle.broadcast_to(Tensor([1, 0, 81, 97],"bool"), list[1,8,81,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 81, 97],"bool"), list[1,8,81,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 81, 97].  Tensor sizes: [1, 0, 81, 97]
2025-03-05 15:22:38.990296 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 113],"bool"), list[1,8,82,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 113],"bool"), list[1,8,82,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 113].  Tensor sizes: [1, 0, 82, 113]
2025-03-05 15:22:38.990888 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 145],"bool"), list[1,8,82,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 145],"bool"), list[1,8,82,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 145].  Tensor sizes: [1, 0, 82, 145]
2025-03-05 15:22:38.991544 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 157],"bool"), list[1,8,82,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 157],"bool"), list[1,8,82,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 157].  Tensor sizes: [1, 0, 82, 157]
2025-03-05 15:22:38.992135 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 169],"bool"), list[1,8,82,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 169],"bool"), list[1,8,82,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 169].  Tensor sizes: [1, 0, 82, 169]
2025-03-05 15:22:38.992716 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 217],"bool"), list[1,8,82,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 217],"bool"), list[1,8,82,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 217].  Tensor sizes: [1, 0, 82, 217]
2025-03-05 15:22:38.993267 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 229],"bool"), list[1,8,82,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 229],"bool"), list[1,8,82,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 229].  Tensor sizes: [1, 0, 82, 229]
2025-03-05 15:22:38.993849 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 241],"bool"), list[1,8,82,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 241],"bool"), list[1,8,82,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 241].  Tensor sizes: [1, 0, 82, 241]
2025-03-05 15:22:38.994403 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 261],"bool"), list[1,8,82,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 261],"bool"), list[1,8,82,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 261].  Tensor sizes: [1, 0, 82, 261]
2025-03-05 15:22:38.994962 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 385],"bool"), list[1,8,82,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 385],"bool"), list[1,8,82,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 385].  Tensor sizes: [1, 0, 82, 385]
2025-03-05 15:22:38.995518 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 61],"bool"), list[1,8,82,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 61],"bool"), list[1,8,82,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 61].  Tensor sizes: [1, 0, 82, 61]
2025-03-05 15:22:38.996081 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 65],"bool"), list[1,8,82,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 65],"bool"), list[1,8,82,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 65].  Tensor sizes: [1, 0, 82, 65]
2025-03-05 15:22:38.996631 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 69],"bool"), list[1,8,82,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 69],"bool"), list[1,8,82,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 69].  Tensor sizes: [1, 0, 82, 69]
2025-03-05 15:22:38.997182 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 73],"bool"), list[1,8,82,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 73],"bool"), list[1,8,82,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 73].  Tensor sizes: [1, 0, 82, 73]
2025-03-05 15:22:38.997724 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[1,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[1,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:38.998256 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[10,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[10,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:38.998804 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[2,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[2,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:38.999356 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[3,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[3,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:38.999946 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[30,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[30,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.000497 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[4,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[4,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.001037 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[5,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[5,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.001565 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[6,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[6,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.002129 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[7,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[7,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.002669 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[8,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[8,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.003216 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[9,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 82],"bool"), list[9,8,82,82,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 82, 82].  Tensor sizes: [1, 0, 82, 82]
2025-03-05 15:22:39.003796 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 85],"bool"), list[1,8,82,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 85],"bool"), list[1,8,82,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 85].  Tensor sizes: [1, 0, 82, 85]
2025-03-05 15:22:39.004356 test begin: paddle.broadcast_to(Tensor([1, 0, 82, 97],"bool"), list[1,8,82,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 82, 97],"bool"), list[1,8,82,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 82, 97].  Tensor sizes: [1, 0, 82, 97]
2025-03-05 15:22:39.004913 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 113],"bool"), list[1,8,83,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 113],"bool"), list[1,8,83,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 113].  Tensor sizes: [1, 0, 83, 113]
2025-03-05 15:22:39.005464 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 145],"bool"), list[1,8,83,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 145],"bool"), list[1,8,83,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 145].  Tensor sizes: [1, 0, 83, 145]
2025-03-05 15:22:39.006026 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 157],"bool"), list[1,8,83,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 157],"bool"), list[1,8,83,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 157].  Tensor sizes: [1, 0, 83, 157]
2025-03-05 15:22:39.006598 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 169],"bool"), list[1,8,83,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 169],"bool"), list[1,8,83,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 169].  Tensor sizes: [1, 0, 83, 169]
2025-03-05 15:22:39.007159 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 217],"bool"), list[1,8,83,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 217],"bool"), list[1,8,83,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 217].  Tensor sizes: [1, 0, 83, 217]
2025-03-05 15:22:39.007725 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 229],"bool"), list[1,8,83,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 229],"bool"), list[1,8,83,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 229].  Tensor sizes: [1, 0, 83, 229]
2025-03-05 15:22:39.008284 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 241],"bool"), list[1,8,83,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 241],"bool"), list[1,8,83,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 241].  Tensor sizes: [1, 0, 83, 241]
2025-03-05 15:22:39.008859 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 261],"bool"), list[1,8,83,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 261],"bool"), list[1,8,83,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 261].  Tensor sizes: [1, 0, 83, 261]
2025-03-05 15:22:39.009453 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 385],"bool"), list[1,8,83,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 385],"bool"), list[1,8,83,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 385].  Tensor sizes: [1, 0, 83, 385]
2025-03-05 15:22:39.010003 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 61],"bool"), list[1,8,83,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 61],"bool"), list[1,8,83,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 61].  Tensor sizes: [1, 0, 83, 61]
2025-03-05 15:22:39.010542 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 65],"bool"), list[1,8,83,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 65],"bool"), list[1,8,83,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 65].  Tensor sizes: [1, 0, 83, 65]
2025-03-05 15:22:39.011129 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 69],"bool"), list[1,8,83,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 69],"bool"), list[1,8,83,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 69].  Tensor sizes: [1, 0, 83, 69]
2025-03-05 15:22:39.011694 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 73],"bool"), list[1,8,83,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 73],"bool"), list[1,8,83,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 73].  Tensor sizes: [1, 0, 83, 73]
2025-03-05 15:22:39.012246 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[1,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[1,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.012802 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[10,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[10,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.013342 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[2,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[2,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.013880 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[3,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[3,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.014439 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[30,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[30,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.014993 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[4,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[4,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.015537 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[5,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[5,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.016088 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[6,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[6,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.016681 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[7,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[7,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.017224 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[8,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[8,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.017788 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[9,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 83],"bool"), list[9,8,83,83,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 83, 83].  Tensor sizes: [1, 0, 83, 83]
2025-03-05 15:22:39.018318 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 85],"bool"), list[1,8,83,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 85],"bool"), list[1,8,83,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 85].  Tensor sizes: [1, 0, 83, 85]
2025-03-05 15:22:39.018858 test begin: paddle.broadcast_to(Tensor([1, 0, 83, 97],"bool"), list[1,8,83,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 83, 97],"bool"), list[1,8,83,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 83, 97].  Tensor sizes: [1, 0, 83, 97]
2025-03-05 15:22:39.019392 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 113],"bool"), list[1,8,84,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 113],"bool"), list[1,8,84,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 113].  Tensor sizes: [1, 0, 84, 113]
2025-03-05 15:22:39.019936 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 145],"bool"), list[1,8,84,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 145],"bool"), list[1,8,84,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 145].  Tensor sizes: [1, 0, 84, 145]
2025-03-05 15:22:39.020472 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 157],"bool"), list[1,8,84,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 157],"bool"), list[1,8,84,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 157].  Tensor sizes: [1, 0, 84, 157]
2025-03-05 15:22:39.021014 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 169],"bool"), list[1,8,84,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 169],"bool"), list[1,8,84,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 169].  Tensor sizes: [1, 0, 84, 169]
2025-03-05 15:22:39.021553 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 217],"bool"), list[1,8,84,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 217],"bool"), list[1,8,84,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 217].  Tensor sizes: [1, 0, 84, 217]
2025-03-05 15:22:39.022135 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 229],"bool"), list[1,8,84,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 229],"bool"), list[1,8,84,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 229].  Tensor sizes: [1, 0, 84, 229]
2025-03-05 15:22:39.022706 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 241],"bool"), list[1,8,84,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 241],"bool"), list[1,8,84,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 241].  Tensor sizes: [1, 0, 84, 241]
2025-03-05 15:22:39.023263 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 261],"bool"), list[1,8,84,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 261],"bool"), list[1,8,84,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 261].  Tensor sizes: [1, 0, 84, 261]
2025-03-05 15:22:39.023822 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 385],"bool"), list[1,8,84,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 385],"bool"), list[1,8,84,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 385].  Tensor sizes: [1, 0, 84, 385]
2025-03-05 15:22:39.024358 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 61],"bool"), list[1,8,84,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 61],"bool"), list[1,8,84,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 61].  Tensor sizes: [1, 0, 84, 61]
2025-03-05 15:22:39.024919 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 65],"bool"), list[1,8,84,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 65],"bool"), list[1,8,84,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 65].  Tensor sizes: [1, 0, 84, 65]
2025-03-05 15:22:39.025459 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 69],"bool"), list[1,8,84,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 69],"bool"), list[1,8,84,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 69].  Tensor sizes: [1, 0, 84, 69]
2025-03-05 15:22:39.026024 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 73],"bool"), list[1,8,84,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 73],"bool"), list[1,8,84,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 73].  Tensor sizes: [1, 0, 84, 73]
2025-03-05 15:22:39.026560 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[1,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[1,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.027106 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[10,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[10,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.027645 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[2,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[2,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.028199 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[3,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[3,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.028730 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[30,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[30,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.029257 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[4,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[4,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.029813 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[5,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[5,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.030357 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[6,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[6,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.030925 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[7,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[7,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.031481 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[8,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[8,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.032033 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[9,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 84],"bool"), list[9,8,84,84,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 84, 84].  Tensor sizes: [1, 0, 84, 84]
2025-03-05 15:22:39.032613 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 85],"bool"), list[1,8,84,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 85],"bool"), list[1,8,84,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 85].  Tensor sizes: [1, 0, 84, 85]
2025-03-05 15:22:39.033167 test begin: paddle.broadcast_to(Tensor([1, 0, 84, 97],"bool"), list[1,8,84,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 84, 97],"bool"), list[1,8,84,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 84, 97].  Tensor sizes: [1, 0, 84, 97]
2025-03-05 15:22:39.033723 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 113],"bool"), list[1,8,85,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 113],"bool"), list[1,8,85,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 113].  Tensor sizes: [1, 0, 85, 113]
2025-03-05 15:22:39.034270 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 145],"bool"), list[1,8,85,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 145],"bool"), list[1,8,85,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 145].  Tensor sizes: [1, 0, 85, 145]
2025-03-05 15:22:39.034817 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 157],"bool"), list[1,8,85,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 157],"bool"), list[1,8,85,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 157].  Tensor sizes: [1, 0, 85, 157]
2025-03-05 15:22:39.035346 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 169],"bool"), list[1,8,85,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 169],"bool"), list[1,8,85,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 169].  Tensor sizes: [1, 0, 85, 169]
2025-03-05 15:22:39.035884 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 217],"bool"), list[1,8,85,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 217],"bool"), list[1,8,85,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 217].  Tensor sizes: [1, 0, 85, 217]
2025-03-05 15:22:39.036414 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 229],"bool"), list[1,8,85,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 229],"bool"), list[1,8,85,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 229].  Tensor sizes: [1, 0, 85, 229]
2025-03-05 15:22:39.036952 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 241],"bool"), list[1,8,85,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 241],"bool"), list[1,8,85,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 241].  Tensor sizes: [1, 0, 85, 241]
2025-03-05 15:22:39.037486 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 261],"bool"), list[1,8,85,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 261],"bool"), list[1,8,85,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 261].  Tensor sizes: [1, 0, 85, 261]
2025-03-05 15:22:39.038064 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 385],"bool"), list[1,8,85,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 385],"bool"), list[1,8,85,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 385].  Tensor sizes: [1, 0, 85, 385]
2025-03-05 15:22:39.038664 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 61],"bool"), list[1,8,85,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 61],"bool"), list[1,8,85,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 61].  Tensor sizes: [1, 0, 85, 61]
2025-03-05 15:22:39.039211 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 65],"bool"), list[1,8,85,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 65],"bool"), list[1,8,85,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 65].  Tensor sizes: [1, 0, 85, 65]
2025-03-05 15:22:39.039768 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 69],"bool"), list[1,8,85,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 69],"bool"), list[1,8,85,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 69].  Tensor sizes: [1, 0, 85, 69]
2025-03-05 15:22:39.040320 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 73],"bool"), list[1,8,85,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 73],"bool"), list[1,8,85,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 73].  Tensor sizes: [1, 0, 85, 73]
2025-03-05 15:22:39.040871 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[1,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[1,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.041422 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[10,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[10,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.041978 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[2,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[2,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.042515 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[3,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[3,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.043097 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[30,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[30,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.043645 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[4,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[4,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.044196 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[5,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[5,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.044740 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[6,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[6,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.045274 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[7,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[7,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.045823 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[8,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[8,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.046350 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[9,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 85],"bool"), list[9,8,85,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 85, 85].  Tensor sizes: [1, 0, 85, 85]
2025-03-05 15:22:39.046917 test begin: paddle.broadcast_to(Tensor([1, 0, 85, 97],"bool"), list[1,8,85,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 85, 97],"bool"), list[1,8,85,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 85, 97].  Tensor sizes: [1, 0, 85, 97]
2025-03-05 15:22:39.047448 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 113],"bool"), list[1,8,86,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 113],"bool"), list[1,8,86,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 113].  Tensor sizes: [1, 0, 86, 113]
2025-03-05 15:22:39.048003 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 145],"bool"), list[1,8,86,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 145],"bool"), list[1,8,86,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 145].  Tensor sizes: [1, 0, 86, 145]
2025-03-05 15:22:39.048540 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 157],"bool"), list[1,8,86,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 157],"bool"), list[1,8,86,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 157].  Tensor sizes: [1, 0, 86, 157]
2025-03-05 15:22:39.049088 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 169],"bool"), list[1,8,86,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 169],"bool"), list[1,8,86,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 169].  Tensor sizes: [1, 0, 86, 169]
2025-03-05 15:22:39.049625 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 217],"bool"), list[1,8,86,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 217],"bool"), list[1,8,86,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 217].  Tensor sizes: [1, 0, 86, 217]
2025-03-05 15:22:39.050178 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 229],"bool"), list[1,8,86,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 229],"bool"), list[1,8,86,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 229].  Tensor sizes: [1, 0, 86, 229]
2025-03-05 15:22:39.050795 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 241],"bool"), list[1,8,86,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 241],"bool"), list[1,8,86,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 241].  Tensor sizes: [1, 0, 86, 241]
2025-03-05 15:22:39.051334 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 261],"bool"), list[1,8,86,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 261],"bool"), list[1,8,86,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 261].  Tensor sizes: [1, 0, 86, 261]
2025-03-05 15:22:39.051876 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 385],"bool"), list[1,8,86,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 385],"bool"), list[1,8,86,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 385].  Tensor sizes: [1, 0, 86, 385]
2025-03-05 15:22:39.052420 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 61],"bool"), list[1,8,86,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 61],"bool"), list[1,8,86,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 61].  Tensor sizes: [1, 0, 86, 61]
2025-03-05 15:22:39.052961 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 65],"bool"), list[1,8,86,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 65],"bool"), list[1,8,86,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 65].  Tensor sizes: [1, 0, 86, 65]
2025-03-05 15:22:39.053488 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 69],"bool"), list[1,8,86,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 69],"bool"), list[1,8,86,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 69].  Tensor sizes: [1, 0, 86, 69]
2025-03-05 15:22:39.054023 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 73],"bool"), list[1,8,86,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 73],"bool"), list[1,8,86,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 73].  Tensor sizes: [1, 0, 86, 73]
2025-03-05 15:22:39.054550 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 85],"bool"), list[1,8,86,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 85],"bool"), list[1,8,86,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 85].  Tensor sizes: [1, 0, 86, 85]
2025-03-05 15:22:39.055084 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[1,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[1,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.055603 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[10,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[10,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.056159 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[2,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[2,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.056726 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[3,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[3,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.057254 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[30,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[30,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.057780 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[4,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[4,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.058302 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[5,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[5,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.058838 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[6,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[6,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.059362 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[7,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[7,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.059975 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[8,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[8,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.060519 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[9,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 86],"bool"), list[9,8,86,86,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 86, 86].  Tensor sizes: [1, 0, 86, 86]
2025-03-05 15:22:39.061061 test begin: paddle.broadcast_to(Tensor([1, 0, 86, 97],"bool"), list[1,8,86,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 86, 97],"bool"), list[1,8,86,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 86, 97].  Tensor sizes: [1, 0, 86, 97]
2025-03-05 15:22:39.061596 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 113],"bool"), list[1,8,87,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 113],"bool"), list[1,8,87,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 113].  Tensor sizes: [1, 0, 87, 113]
2025-03-05 15:22:39.062120 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 145],"bool"), list[1,8,87,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 145],"bool"), list[1,8,87,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 145].  Tensor sizes: [1, 0, 87, 145]
2025-03-05 15:22:39.062694 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 157],"bool"), list[1,8,87,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 157],"bool"), list[1,8,87,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 157].  Tensor sizes: [1, 0, 87, 157]
2025-03-05 15:22:39.063223 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 169],"bool"), list[1,8,87,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 169],"bool"), list[1,8,87,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 169].  Tensor sizes: [1, 0, 87, 169]
2025-03-05 15:22:39.063754 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 217],"bool"), list[1,8,87,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 217],"bool"), list[1,8,87,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 217].  Tensor sizes: [1, 0, 87, 217]
2025-03-05 15:22:39.064285 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 229],"bool"), list[1,8,87,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 229],"bool"), list[1,8,87,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 229].  Tensor sizes: [1, 0, 87, 229]
2025-03-05 15:22:39.064813 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 241],"bool"), list[1,8,87,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 241],"bool"), list[1,8,87,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 241].  Tensor sizes: [1, 0, 87, 241]
2025-03-05 15:22:39.065341 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 261],"bool"), list[1,8,87,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 261],"bool"), list[1,8,87,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 261].  Tensor sizes: [1, 0, 87, 261]
2025-03-05 15:22:39.065928 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 385],"bool"), list[1,8,87,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 385],"bool"), list[1,8,87,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 385].  Tensor sizes: [1, 0, 87, 385]
2025-03-05 15:22:39.066463 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 61],"bool"), list[1,8,87,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 61],"bool"), list[1,8,87,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 61].  Tensor sizes: [1, 0, 87, 61]
2025-03-05 15:22:39.067001 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 65],"bool"), list[1,8,87,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 65],"bool"), list[1,8,87,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 65].  Tensor sizes: [1, 0, 87, 65]
2025-03-05 15:22:39.067531 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 69],"bool"), list[1,8,87,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 69],"bool"), list[1,8,87,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 69].  Tensor sizes: [1, 0, 87, 69]
2025-03-05 15:22:39.068066 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 73],"bool"), list[1,8,87,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 73],"bool"), list[1,8,87,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 73].  Tensor sizes: [1, 0, 87, 73]
2025-03-05 15:22:39.068606 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 85],"bool"), list[1,8,87,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 85],"bool"), list[1,8,87,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 85].  Tensor sizes: [1, 0, 87, 85]
2025-03-05 15:22:39.069129 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[1,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[1,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.069656 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[10,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[10,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.070177 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[2,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[2,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.070725 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[3,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[3,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.071267 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[30,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[30,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.071803 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[4,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[4,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.072328 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[5,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[5,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.072871 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[6,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[6,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.073396 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[7,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[7,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.073933 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[8,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[8,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.074480 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[9,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 87],"bool"), list[9,8,87,87,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 87, 87].  Tensor sizes: [1, 0, 87, 87]
2025-03-05 15:22:39.075024 test begin: paddle.broadcast_to(Tensor([1, 0, 87, 97],"bool"), list[1,8,87,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 87, 97],"bool"), list[1,8,87,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 87, 97].  Tensor sizes: [1, 0, 87, 97]
2025-03-05 15:22:39.075548 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 113],"bool"), list[1,8,88,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 113],"bool"), list[1,8,88,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 113].  Tensor sizes: [1, 0, 88, 113]
2025-03-05 15:22:39.076094 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 145],"bool"), list[1,8,88,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 145],"bool"), list[1,8,88,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 145].  Tensor sizes: [1, 0, 88, 145]
2025-03-05 15:22:39.076644 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 157],"bool"), list[1,8,88,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 157],"bool"), list[1,8,88,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 157].  Tensor sizes: [1, 0, 88, 157]
2025-03-05 15:22:39.077182 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 169],"bool"), list[1,8,88,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 169],"bool"), list[1,8,88,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 169].  Tensor sizes: [1, 0, 88, 169]
2025-03-05 15:22:39.077719 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 217],"bool"), list[1,8,88,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 217],"bool"), list[1,8,88,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 217].  Tensor sizes: [1, 0, 88, 217]
2025-03-05 15:22:39.078265 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 229],"bool"), list[1,8,88,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 229],"bool"), list[1,8,88,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 229].  Tensor sizes: [1, 0, 88, 229]
2025-03-05 15:22:39.078811 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 241],"bool"), list[1,8,88,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 241],"bool"), list[1,8,88,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 241].  Tensor sizes: [1, 0, 88, 241]
2025-03-05 15:22:39.079354 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 261],"bool"), list[1,8,88,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 261],"bool"), list[1,8,88,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 261].  Tensor sizes: [1, 0, 88, 261]
2025-03-05 15:22:39.079901 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 385],"bool"), list[1,8,88,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 385],"bool"), list[1,8,88,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 385].  Tensor sizes: [1, 0, 88, 385]
2025-03-05 15:22:39.080428 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 61],"bool"), list[1,8,88,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 61],"bool"), list[1,8,88,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 61].  Tensor sizes: [1, 0, 88, 61]
2025-03-05 15:22:39.080988 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 65],"bool"), list[1,8,88,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 65],"bool"), list[1,8,88,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 65].  Tensor sizes: [1, 0, 88, 65]
2025-03-05 15:22:39.081515 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 69],"bool"), list[1,8,88,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 69],"bool"), list[1,8,88,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 69].  Tensor sizes: [1, 0, 88, 69]
2025-03-05 15:22:39.082068 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 73],"bool"), list[1,8,88,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 73],"bool"), list[1,8,88,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 73].  Tensor sizes: [1, 0, 88, 73]
2025-03-05 15:22:39.082611 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 85],"bool"), list[1,8,88,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 85],"bool"), list[1,8,88,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 85].  Tensor sizes: [1, 0, 88, 85]
2025-03-05 15:22:39.083150 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[1,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[1,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.083706 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[10,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[10,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.084248 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[2,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[2,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.084811 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[3,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[3,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.085363 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[30,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[30,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.085917 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[4,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[4,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.086472 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[5,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[5,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.087027 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[6,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[6,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.087576 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[7,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[7,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.088122 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[8,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[8,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.088674 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[9,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 88],"bool"), list[9,8,88,88,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 88, 88].  Tensor sizes: [1, 0, 88, 88]
2025-03-05 15:22:39.089209 test begin: paddle.broadcast_to(Tensor([1, 0, 88, 97],"bool"), list[1,8,88,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 88, 97],"bool"), list[1,8,88,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 88, 97].  Tensor sizes: [1, 0, 88, 97]
2025-03-05 15:22:39.089748 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 113],"bool"), list[1,8,89,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 113],"bool"), list[1,8,89,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 113].  Tensor sizes: [1, 0, 89, 113]
2025-03-05 15:22:39.090280 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 145],"bool"), list[1,8,89,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 145],"bool"), list[1,8,89,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 145].  Tensor sizes: [1, 0, 89, 145]
2025-03-05 15:22:39.090849 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 157],"bool"), list[1,8,89,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 157],"bool"), list[1,8,89,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 157].  Tensor sizes: [1, 0, 89, 157]
2025-03-05 15:22:39.091389 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 169],"bool"), list[1,8,89,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 169],"bool"), list[1,8,89,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 169].  Tensor sizes: [1, 0, 89, 169]
2025-03-05 15:22:39.091939 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 217],"bool"), list[1,8,89,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 217],"bool"), list[1,8,89,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 217].  Tensor sizes: [1, 0, 89, 217]
2025-03-05 15:22:39.092484 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 229],"bool"), list[1,8,89,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 229],"bool"), list[1,8,89,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 229].  Tensor sizes: [1, 0, 89, 229]
2025-03-05 15:22:39.093087 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 241],"bool"), list[1,8,89,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 241],"bool"), list[1,8,89,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 241].  Tensor sizes: [1, 0, 89, 241]
2025-03-05 15:22:39.093755 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 261],"bool"), list[1,8,89,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 261],"bool"), list[1,8,89,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 261].  Tensor sizes: [1, 0, 89, 261]
2025-03-05 15:22:39.095187 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 385],"bool"), list[1,8,89,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 385],"bool"), list[1,8,89,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 385].  Tensor sizes: [1, 0, 89, 385]
2025-03-05 15:22:39.095917 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 61],"bool"), list[1,8,89,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 61],"bool"), list[1,8,89,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 61].  Tensor sizes: [1, 0, 89, 61]
2025-03-05 15:22:39.096728 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 65],"bool"), list[1,8,89,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 65],"bool"), list[1,8,89,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 65].  Tensor sizes: [1, 0, 89, 65]
2025-03-05 15:22:39.097444 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 69],"bool"), list[1,8,89,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 69],"bool"), list[1,8,89,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 69].  Tensor sizes: [1, 0, 89, 69]
2025-03-05 15:22:39.098094 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 73],"bool"), list[1,8,89,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 73],"bool"), list[1,8,89,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 73].  Tensor sizes: [1, 0, 89, 73]
2025-03-05 15:22:39.099238 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 85],"bool"), list[1,8,89,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 85],"bool"), list[1,8,89,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 85].  Tensor sizes: [1, 0, 89, 85]
2025-03-05 15:22:39.099937 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[1,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[1,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.100550 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[10,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[10,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.101122 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[2,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[2,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.101690 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[3,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[3,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.102259 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[4,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[4,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.102809 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[5,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[5,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.103344 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[6,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[6,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.103894 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[7,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[7,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.104921 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[8,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[8,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.105833 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[9,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 89],"bool"), list[9,8,89,89,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 89, 89].  Tensor sizes: [1, 0, 89, 89]
2025-03-05 15:22:39.106452 test begin: paddle.broadcast_to(Tensor([1, 0, 89, 97],"bool"), list[1,8,89,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 89, 97],"bool"), list[1,8,89,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 89, 97].  Tensor sizes: [1, 0, 89, 97]
2025-03-05 15:22:39.107217 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 109],"bool"), list[1,8,9,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 109],"bool"), list[1,8,9,109,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 109].  Tensor sizes: [1, 0, 9, 109]
2025-03-05 15:22:39.107990 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 113],"bool"), list[1,8,9,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 113],"bool"), list[1,8,9,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 113].  Tensor sizes: [1, 0, 9, 113]
2025-03-05 15:22:39.108827 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 145],"bool"), list[1,8,9,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 145],"bool"), list[1,8,9,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 145].  Tensor sizes: [1, 0, 9, 145]
2025-03-05 15:22:39.109379 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 157],"bool"), list[1,8,9,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 157],"bool"), list[1,8,9,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 157].  Tensor sizes: [1, 0, 9, 157]
2025-03-05 15:22:39.109936 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 169],"bool"), list[1,8,9,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 169],"bool"), list[1,8,9,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 169].  Tensor sizes: [1, 0, 9, 169]
2025-03-05 15:22:39.110486 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 217],"bool"), list[1,8,9,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 217],"bool"), list[1,8,9,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 217].  Tensor sizes: [1, 0, 9, 217]
2025-03-05 15:22:39.111091 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 229],"bool"), list[1,8,9,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 229],"bool"), list[1,8,9,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 229].  Tensor sizes: [1, 0, 9, 229]
2025-03-05 15:22:39.111648 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 241],"bool"), list[1,8,9,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 241],"bool"), list[1,8,9,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 241].  Tensor sizes: [1, 0, 9, 241]
2025-03-05 15:22:39.112239 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 261],"bool"), list[1,8,9,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 261],"bool"), list[1,8,9,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 261].  Tensor sizes: [1, 0, 9, 261]
2025-03-05 15:22:39.112800 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 385],"bool"), list[1,8,9,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 385],"bool"), list[1,8,9,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 385].  Tensor sizes: [1, 0, 9, 385]
2025-03-05 15:22:39.113343 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 61],"bool"), list[1,8,9,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 61],"bool"), list[1,8,9,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 61].  Tensor sizes: [1, 0, 9, 61]
2025-03-05 15:22:39.113886 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 65],"bool"), list[1,8,9,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 65],"bool"), list[1,8,9,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 65].  Tensor sizes: [1, 0, 9, 65]
2025-03-05 15:22:39.114453 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 69],"bool"), list[1,8,9,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 69],"bool"), list[1,8,9,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 69].  Tensor sizes: [1, 0, 9, 69]
2025-03-05 15:22:39.115023 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 73],"bool"), list[1,8,9,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 73],"bool"), list[1,8,9,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 73].  Tensor sizes: [1, 0, 9, 73]
2025-03-05 15:22:39.115550 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 85],"bool"), list[1,8,9,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 85],"bool"), list[1,8,9,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 85].  Tensor sizes: [1, 0, 9, 85]
2025-03-05 15:22:39.116087 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 97],"bool"), list[1,8,9,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 97],"bool"), list[1,8,9,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 97].  Tensor sizes: [1, 0, 9, 97]
2025-03-05 15:22:39.116667 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[1,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[1,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.117188 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[10,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[10,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.117721 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[2,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[2,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.118239 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[3,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[3,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.118775 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[4,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[4,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.119290 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[5,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[5,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.119829 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[6,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[6,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.120345 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[7,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[7,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.120876 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[8,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[8,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.121394 test begin: paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[9,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 9, 9],"bool"), list[9,8,9,9,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 9, 9].  Tensor sizes: [1, 0, 9, 9]
2025-03-05 15:22:39.121922 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 113],"bool"), list[1,8,90,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 113],"bool"), list[1,8,90,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 113].  Tensor sizes: [1, 0, 90, 113]
2025-03-05 15:22:39.122450 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 145],"bool"), list[1,8,90,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 145],"bool"), list[1,8,90,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 145].  Tensor sizes: [1, 0, 90, 145]
2025-03-05 15:22:39.123057 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 157],"bool"), list[1,8,90,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 157],"bool"), list[1,8,90,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 157].  Tensor sizes: [1, 0, 90, 157]
2025-03-05 15:22:39.123570 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 169],"bool"), list[1,8,90,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 169],"bool"), list[1,8,90,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 169].  Tensor sizes: [1, 0, 90, 169]
2025-03-05 15:22:39.124102 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 217],"bool"), list[1,8,90,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 217],"bool"), list[1,8,90,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 217].  Tensor sizes: [1, 0, 90, 217]
2025-03-05 15:22:39.124630 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 229],"bool"), list[1,8,90,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 229],"bool"), list[1,8,90,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 229].  Tensor sizes: [1, 0, 90, 229]
2025-03-05 15:22:39.125157 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 241],"bool"), list[1,8,90,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 241],"bool"), list[1,8,90,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 241].  Tensor sizes: [1, 0, 90, 241]
2025-03-05 15:22:39.125688 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 261],"bool"), list[1,8,90,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 261],"bool"), list[1,8,90,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 261].  Tensor sizes: [1, 0, 90, 261]
2025-03-05 15:22:39.126216 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 385],"bool"), list[1,8,90,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 385],"bool"), list[1,8,90,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 385].  Tensor sizes: [1, 0, 90, 385]
2025-03-05 15:22:39.126753 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 61],"bool"), list[1,8,90,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 61],"bool"), list[1,8,90,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 61].  Tensor sizes: [1, 0, 90, 61]
2025-03-05 15:22:39.127278 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 65],"bool"), list[1,8,90,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 65],"bool"), list[1,8,90,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 65].  Tensor sizes: [1, 0, 90, 65]
2025-03-05 15:22:39.127811 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 69],"bool"), list[1,8,90,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 69],"bool"), list[1,8,90,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 69].  Tensor sizes: [1, 0, 90, 69]
2025-03-05 15:22:39.128347 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 73],"bool"), list[1,8,90,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 73],"bool"), list[1,8,90,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 73].  Tensor sizes: [1, 0, 90, 73]
2025-03-05 15:22:39.128929 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 85],"bool"), list[1,8,90,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 85],"bool"), list[1,8,90,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 85].  Tensor sizes: [1, 0, 90, 85]
2025-03-05 15:22:39.129451 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[1,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[1,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.129976 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[10,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[10,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.130619 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[2,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[2,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.131257 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[3,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[3,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.131923 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[30,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[30,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.132846 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[4,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[4,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.133513 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[5,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[5,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.134501 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[6,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[6,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.135141 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[7,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[7,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.135742 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[8,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[8,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.136294 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[9,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 90],"bool"), list[9,8,90,90,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 90, 90].  Tensor sizes: [1, 0, 90, 90]
2025-03-05 15:22:39.136855 test begin: paddle.broadcast_to(Tensor([1, 0, 90, 97],"bool"), list[1,8,90,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 90, 97],"bool"), list[1,8,90,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 90, 97].  Tensor sizes: [1, 0, 90, 97]
2025-03-05 15:22:39.137400 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 113],"bool"), list[1,8,91,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 113],"bool"), list[1,8,91,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 113].  Tensor sizes: [1, 0, 91, 113]
2025-03-05 15:22:39.137941 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 145],"bool"), list[1,8,91,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 145],"bool"), list[1,8,91,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 145].  Tensor sizes: [1, 0, 91, 145]
2025-03-05 15:22:39.138467 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 157],"bool"), list[1,8,91,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 157],"bool"), list[1,8,91,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 157].  Tensor sizes: [1, 0, 91, 157]
2025-03-05 15:22:39.139013 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 169],"bool"), list[1,8,91,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 169],"bool"), list[1,8,91,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 169].  Tensor sizes: [1, 0, 91, 169]
2025-03-05 15:22:39.139592 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 217],"bool"), list[1,8,91,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 217],"bool"), list[1,8,91,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 217].  Tensor sizes: [1, 0, 91, 217]
2025-03-05 15:22:39.140134 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 229],"bool"), list[1,8,91,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 229],"bool"), list[1,8,91,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 229].  Tensor sizes: [1, 0, 91, 229]
2025-03-05 15:22:39.140668 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 241],"bool"), list[1,8,91,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 241],"bool"), list[1,8,91,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 241].  Tensor sizes: [1, 0, 91, 241]
2025-03-05 15:22:39.141215 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 261],"bool"), list[1,8,91,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 261],"bool"), list[1,8,91,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 261].  Tensor sizes: [1, 0, 91, 261]
2025-03-05 15:22:39.141780 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 385],"bool"), list[1,8,91,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 385],"bool"), list[1,8,91,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 385].  Tensor sizes: [1, 0, 91, 385]
2025-03-05 15:22:39.142371 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 61],"bool"), list[1,8,91,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 61],"bool"), list[1,8,91,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 61].  Tensor sizes: [1, 0, 91, 61]
2025-03-05 15:22:39.142944 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 65],"bool"), list[1,8,91,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 65],"bool"), list[1,8,91,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 65].  Tensor sizes: [1, 0, 91, 65]
2025-03-05 15:22:39.143483 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 69],"bool"), list[1,8,91,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 69],"bool"), list[1,8,91,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 69].  Tensor sizes: [1, 0, 91, 69]
2025-03-05 15:22:39.144027 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 73],"bool"), list[1,8,91,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 73],"bool"), list[1,8,91,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 73].  Tensor sizes: [1, 0, 91, 73]
2025-03-05 15:22:39.144558 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 85],"bool"), list[1,8,91,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 85],"bool"), list[1,8,91,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 85].  Tensor sizes: [1, 0, 91, 85]
2025-03-05 15:22:39.145107 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[1,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[1,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.145657 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[10,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[10,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.146197 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[2,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[2,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.146743 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[3,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[3,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.147297 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[30,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[30,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.147861 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[4,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[4,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.148399 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[5,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[5,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.148959 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[6,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[6,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.149505 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[7,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[7,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.151276 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[8,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[8,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.152443 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[9,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 91],"bool"), list[9,8,91,91,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 91, 91].  Tensor sizes: [1, 0, 91, 91]
2025-03-05 15:22:39.153143 test begin: paddle.broadcast_to(Tensor([1, 0, 91, 97],"bool"), list[1,8,91,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 91, 97],"bool"), list[1,8,91,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 91, 97].  Tensor sizes: [1, 0, 91, 97]
2025-03-05 15:22:39.153831 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 113],"bool"), list[1,8,92,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 113],"bool"), list[1,8,92,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 113].  Tensor sizes: [1, 0, 92, 113]
2025-03-05 15:22:39.154462 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 145],"bool"), list[1,8,92,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 145],"bool"), list[1,8,92,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 145].  Tensor sizes: [1, 0, 92, 145]
2025-03-05 15:22:39.155101 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 157],"bool"), list[1,8,92,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 157],"bool"), list[1,8,92,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 157].  Tensor sizes: [1, 0, 92, 157]
2025-03-05 15:22:39.155739 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 169],"bool"), list[1,8,92,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 169],"bool"), list[1,8,92,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 169].  Tensor sizes: [1, 0, 92, 169]
2025-03-05 15:22:39.156365 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 217],"bool"), list[1,8,92,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 217],"bool"), list[1,8,92,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 217].  Tensor sizes: [1, 0, 92, 217]
2025-03-05 15:22:39.156986 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 229],"bool"), list[1,8,92,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 229],"bool"), list[1,8,92,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 229].  Tensor sizes: [1, 0, 92, 229]
2025-03-05 15:22:39.157791 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 241],"bool"), list[1,8,92,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 241],"bool"), list[1,8,92,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 241].  Tensor sizes: [1, 0, 92, 241]
2025-03-05 15:22:39.158392 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 261],"bool"), list[1,8,92,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 261],"bool"), list[1,8,92,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 261].  Tensor sizes: [1, 0, 92, 261]
2025-03-05 15:22:39.158951 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 385],"bool"), list[1,8,92,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 385],"bool"), list[1,8,92,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 385].  Tensor sizes: [1, 0, 92, 385]
2025-03-05 15:22:39.159645 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 61],"bool"), list[1,8,92,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 61],"bool"), list[1,8,92,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 61].  Tensor sizes: [1, 0, 92, 61]
2025-03-05 15:22:39.160295 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 65],"bool"), list[1,8,92,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 65],"bool"), list[1,8,92,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 65].  Tensor sizes: [1, 0, 92, 65]
2025-03-05 15:22:39.160922 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 69],"bool"), list[1,8,92,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 69],"bool"), list[1,8,92,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 69].  Tensor sizes: [1, 0, 92, 69]
2025-03-05 15:22:39.161473 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 73],"bool"), list[1,8,92,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 73],"bool"), list[1,8,92,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 73].  Tensor sizes: [1, 0, 92, 73]
2025-03-05 15:22:39.162018 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 85],"bool"), list[1,8,92,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 85],"bool"), list[1,8,92,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 85].  Tensor sizes: [1, 0, 92, 85]
2025-03-05 15:22:39.162554 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[1,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[1,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.163095 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[10,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[10,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.163636 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[2,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[2,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.164190 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[3,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[3,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.164753 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[30,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[30,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.165284 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[4,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[4,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.165836 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[5,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[5,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.166371 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[6,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[6,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.166972 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[7,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[7,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.167502 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[8,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[8,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.168614 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[9,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 92],"bool"), list[9,8,92,92,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 92, 92].  Tensor sizes: [1, 0, 92, 92]
2025-03-05 15:22:39.169379 test begin: paddle.broadcast_to(Tensor([1, 0, 92, 97],"bool"), list[1,8,92,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 92, 97],"bool"), list[1,8,92,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 92, 97].  Tensor sizes: [1, 0, 92, 97]
2025-03-05 15:22:39.169957 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 113],"bool"), list[1,8,93,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 113],"bool"), list[1,8,93,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 113].  Tensor sizes: [1, 0, 93, 113]
2025-03-05 15:22:39.170553 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 145],"bool"), list[1,8,93,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 145],"bool"), list[1,8,93,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 145].  Tensor sizes: [1, 0, 93, 145]
2025-03-05 15:22:39.171185 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 157],"bool"), list[1,8,93,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 157],"bool"), list[1,8,93,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 157].  Tensor sizes: [1, 0, 93, 157]
2025-03-05 15:22:39.171871 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 169],"bool"), list[1,8,93,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 169],"bool"), list[1,8,93,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 169].  Tensor sizes: [1, 0, 93, 169]
2025-03-05 15:22:39.172431 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 217],"bool"), list[1,8,93,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 217],"bool"), list[1,8,93,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 217].  Tensor sizes: [1, 0, 93, 217]
2025-03-05 15:22:39.173032 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 229],"bool"), list[1,8,93,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 229],"bool"), list[1,8,93,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 229].  Tensor sizes: [1, 0, 93, 229]
2025-03-05 15:22:39.173561 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 241],"bool"), list[1,8,93,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 241],"bool"), list[1,8,93,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 241].  Tensor sizes: [1, 0, 93, 241]
2025-03-05 15:22:39.174116 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 261],"bool"), list[1,8,93,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 261],"bool"), list[1,8,93,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 261].  Tensor sizes: [1, 0, 93, 261]
2025-03-05 15:22:39.174691 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 385],"bool"), list[1,8,93,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 385],"bool"), list[1,8,93,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 385].  Tensor sizes: [1, 0, 93, 385]
2025-03-05 15:22:39.175223 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 61],"bool"), list[1,8,93,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 61],"bool"), list[1,8,93,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 61].  Tensor sizes: [1, 0, 93, 61]
2025-03-05 15:22:39.175757 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 65],"bool"), list[1,8,93,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 65],"bool"), list[1,8,93,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 65].  Tensor sizes: [1, 0, 93, 65]
2025-03-05 15:22:39.176270 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 69],"bool"), list[1,8,93,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 69],"bool"), list[1,8,93,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 69].  Tensor sizes: [1, 0, 93, 69]
2025-03-05 15:22:39.176795 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 73],"bool"), list[1,8,93,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 73],"bool"), list[1,8,93,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 73].  Tensor sizes: [1, 0, 93, 73]
2025-03-05 15:22:39.177311 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 85],"bool"), list[1,8,93,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 85],"bool"), list[1,8,93,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 85].  Tensor sizes: [1, 0, 93, 85]
2025-03-05 15:22:39.177835 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[1,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[1,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.178359 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[10,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[10,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.178880 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[2,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[2,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.179391 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[3,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[3,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.179933 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[30,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[30,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.180503 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[4,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[4,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.181055 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[5,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[5,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.181579 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[6,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[6,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.182120 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[7,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[7,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.182647 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[8,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[8,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.183237 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[9,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 93],"bool"), list[9,8,93,93,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 93, 93].  Tensor sizes: [1, 0, 93, 93]
2025-03-05 15:22:39.183788 test begin: paddle.broadcast_to(Tensor([1, 0, 93, 97],"bool"), list[1,8,93,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 93, 97],"bool"), list[1,8,93,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 93, 97].  Tensor sizes: [1, 0, 93, 97]
2025-03-05 15:22:39.184332 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 113],"bool"), list[1,8,94,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 113],"bool"), list[1,8,94,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 113].  Tensor sizes: [1, 0, 94, 113]
2025-03-05 15:22:39.184866 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 145],"bool"), list[1,8,94,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 145],"bool"), list[1,8,94,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 145].  Tensor sizes: [1, 0, 94, 145]
2025-03-05 15:22:39.185406 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 157],"bool"), list[1,8,94,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 157],"bool"), list[1,8,94,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 157].  Tensor sizes: [1, 0, 94, 157]
2025-03-05 15:22:39.186015 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 169],"bool"), list[1,8,94,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 169],"bool"), list[1,8,94,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 169].  Tensor sizes: [1, 0, 94, 169]
2025-03-05 15:22:39.186536 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 217],"bool"), list[1,8,94,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 217],"bool"), list[1,8,94,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 217].  Tensor sizes: [1, 0, 94, 217]
2025-03-05 15:22:39.187075 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 229],"bool"), list[1,8,94,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 229],"bool"), list[1,8,94,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 229].  Tensor sizes: [1, 0, 94, 229]
2025-03-05 15:22:39.187597 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 241],"bool"), list[1,8,94,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 241],"bool"), list[1,8,94,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 241].  Tensor sizes: [1, 0, 94, 241]
2025-03-05 15:22:39.188160 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 261],"bool"), list[1,8,94,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 261],"bool"), list[1,8,94,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 261].  Tensor sizes: [1, 0, 94, 261]
2025-03-05 15:22:39.189324 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 385],"bool"), list[1,8,94,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 385],"bool"), list[1,8,94,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 385].  Tensor sizes: [1, 0, 94, 385]
2025-03-05 15:22:39.189995 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 61],"bool"), list[1,8,94,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 61],"bool"), list[1,8,94,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 61].  Tensor sizes: [1, 0, 94, 61]
2025-03-05 15:22:39.190550 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 65],"bool"), list[1,8,94,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 65],"bool"), list[1,8,94,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 65].  Tensor sizes: [1, 0, 94, 65]
2025-03-05 15:22:39.191126 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 69],"bool"), list[1,8,94,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 69],"bool"), list[1,8,94,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 69].  Tensor sizes: [1, 0, 94, 69]
2025-03-05 15:22:39.191681 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 73],"bool"), list[1,8,94,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 73],"bool"), list[1,8,94,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 73].  Tensor sizes: [1, 0, 94, 73]
2025-03-05 15:22:39.192201 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 85],"bool"), list[1,8,94,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 85],"bool"), list[1,8,94,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 85].  Tensor sizes: [1, 0, 94, 85]
2025-03-05 15:22:39.192751 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[1,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[1,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.193281 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[10,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[10,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.193810 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[2,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[2,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.194338 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[3,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[3,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.194864 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[30,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[30,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.195390 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[4,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[4,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.195976 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[5,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[5,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.196503 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[6,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[6,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.197042 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[7,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[7,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.197572 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[8,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[8,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.198150 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[9,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 94],"bool"), list[9,8,94,94,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 94, 94].  Tensor sizes: [1, 0, 94, 94]
2025-03-05 15:22:39.198692 test begin: paddle.broadcast_to(Tensor([1, 0, 94, 97],"bool"), list[1,8,94,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 94, 97],"bool"), list[1,8,94,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 94, 97].  Tensor sizes: [1, 0, 94, 97]
2025-03-05 15:22:39.199347 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 113],"bool"), list[1,8,95,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 113],"bool"), list[1,8,95,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 113].  Tensor sizes: [1, 0, 95, 113]
2025-03-05 15:22:39.199905 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 145],"bool"), list[1,8,95,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 145],"bool"), list[1,8,95,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 145].  Tensor sizes: [1, 0, 95, 145]
2025-03-05 15:22:39.200434 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 157],"bool"), list[1,8,95,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 157],"bool"), list[1,8,95,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 157].  Tensor sizes: [1, 0, 95, 157]
2025-03-05 15:22:39.200970 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 169],"bool"), list[1,8,95,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 169],"bool"), list[1,8,95,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 169].  Tensor sizes: [1, 0, 95, 169]
2025-03-05 15:22:39.201492 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 217],"bool"), list[1,8,95,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 217],"bool"), list[1,8,95,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 217].  Tensor sizes: [1, 0, 95, 217]
2025-03-05 15:22:39.202459 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 229],"bool"), list[1,8,95,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 229],"bool"), list[1,8,95,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 229].  Tensor sizes: [1, 0, 95, 229]
2025-03-05 15:22:39.203248 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 241],"bool"), list[1,8,95,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 241],"bool"), list[1,8,95,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 241].  Tensor sizes: [1, 0, 95, 241]
2025-03-05 15:22:39.203962 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 261],"bool"), list[1,8,95,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 261],"bool"), list[1,8,95,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 261].  Tensor sizes: [1, 0, 95, 261]
2025-03-05 15:22:39.204574 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 385],"bool"), list[1,8,95,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 385],"bool"), list[1,8,95,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 385].  Tensor sizes: [1, 0, 95, 385]
2025-03-05 15:22:39.205169 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 61],"bool"), list[1,8,95,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 61],"bool"), list[1,8,95,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 61].  Tensor sizes: [1, 0, 95, 61]
2025-03-05 15:22:39.205724 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 65],"bool"), list[1,8,95,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 65],"bool"), list[1,8,95,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 65].  Tensor sizes: [1, 0, 95, 65]
2025-03-05 15:22:39.206299 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 69],"bool"), list[1,8,95,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 69],"bool"), list[1,8,95,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 69].  Tensor sizes: [1, 0, 95, 69]
2025-03-05 15:22:39.206914 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 73],"bool"), list[1,8,95,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 73],"bool"), list[1,8,95,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 73].  Tensor sizes: [1, 0, 95, 73]
2025-03-05 15:22:39.207670 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 85],"bool"), list[1,8,95,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 85],"bool"), list[1,8,95,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 85].  Tensor sizes: [1, 0, 95, 85]
2025-03-05 15:22:39.208331 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[1,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[1,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.208951 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[10,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[10,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.209504 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[2,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[2,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.210053 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[3,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[3,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.210601 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[30,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[30,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.211138 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[4,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[4,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.211695 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[5,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[5,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.212233 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[6,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[6,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.212778 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[7,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[7,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.213323 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[8,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[8,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.213854 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[9,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 95],"bool"), list[9,8,95,95,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 95, 95].  Tensor sizes: [1, 0, 95, 95]
2025-03-05 15:22:39.214384 test begin: paddle.broadcast_to(Tensor([1, 0, 95, 97],"bool"), list[1,8,95,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 95, 97],"bool"), list[1,8,95,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 95, 97].  Tensor sizes: [1, 0, 95, 97]
2025-03-05 15:22:39.214918 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 113],"bool"), list[1,8,96,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 113],"bool"), list[1,8,96,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 113].  Tensor sizes: [1, 0, 96, 113]
2025-03-05 15:22:39.215454 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 145],"bool"), list[1,8,96,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 145],"bool"), list[1,8,96,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 145].  Tensor sizes: [1, 0, 96, 145]
2025-03-05 15:22:39.216016 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 157],"bool"), list[1,8,96,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 157],"bool"), list[1,8,96,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 157].  Tensor sizes: [1, 0, 96, 157]
2025-03-05 15:22:39.216563 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 169],"bool"), list[1,8,96,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 169],"bool"), list[1,8,96,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 169].  Tensor sizes: [1, 0, 96, 169]
2025-03-05 15:22:39.217110 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 217],"bool"), list[1,8,96,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 217],"bool"), list[1,8,96,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 217].  Tensor sizes: [1, 0, 96, 217]
2025-03-05 15:22:39.217669 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 229],"bool"), list[1,8,96,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 229],"bool"), list[1,8,96,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 229].  Tensor sizes: [1, 0, 96, 229]
2025-03-05 15:22:39.218203 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 241],"bool"), list[1,8,96,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 241],"bool"), list[1,8,96,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 241].  Tensor sizes: [1, 0, 96, 241]
2025-03-05 15:22:39.218744 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 261],"bool"), list[1,8,96,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 261],"bool"), list[1,8,96,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 261].  Tensor sizes: [1, 0, 96, 261]
2025-03-05 15:22:39.219267 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 385],"bool"), list[1,8,96,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 385],"bool"), list[1,8,96,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 385].  Tensor sizes: [1, 0, 96, 385]
2025-03-05 15:22:39.219810 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 61],"bool"), list[1,8,96,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 61],"bool"), list[1,8,96,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 61].  Tensor sizes: [1, 0, 96, 61]
2025-03-05 15:22:39.220345 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 65],"bool"), list[1,8,96,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 65],"bool"), list[1,8,96,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 65].  Tensor sizes: [1, 0, 96, 65]
2025-03-05 15:22:39.220881 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 69],"bool"), list[1,8,96,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 69],"bool"), list[1,8,96,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 69].  Tensor sizes: [1, 0, 96, 69]
2025-03-05 15:22:39.221411 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 73],"bool"), list[1,8,96,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 73],"bool"), list[1,8,96,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 73].  Tensor sizes: [1, 0, 96, 73]
2025-03-05 15:22:39.221952 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 85],"bool"), list[1,8,96,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 85],"bool"), list[1,8,96,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 85].  Tensor sizes: [1, 0, 96, 85]
2025-03-05 15:22:39.222481 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[1,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[1,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.223018 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[10,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[10,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.223565 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[2,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[2,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.224116 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[3,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[3,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.224648 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[30,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[30,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.225178 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[4,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[4,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.225706 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[5,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[5,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.226232 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[6,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[6,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.226795 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[7,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[7,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.227318 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[8,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[8,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.227854 test begin: paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[9,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 96, 96],"bool"), list[9,8,96,96,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 96, 96].  Tensor sizes: [1, 0, 96, 96]
2025-03-05 15:22:39.228371 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 113],"bool"), list[1,8,97,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 113],"bool"), list[1,8,97,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 113].  Tensor sizes: [1, 0, 97, 113]
2025-03-05 15:22:39.228907 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 145],"bool"), list[1,8,97,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 145],"bool"), list[1,8,97,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 145].  Tensor sizes: [1, 0, 97, 145]
2025-03-05 15:22:39.229439 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 157],"bool"), list[1,8,97,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 157],"bool"), list[1,8,97,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 157].  Tensor sizes: [1, 0, 97, 157]
2025-03-05 15:22:39.229990 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 169],"bool"), list[1,8,97,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 169],"bool"), list[1,8,97,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 169].  Tensor sizes: [1, 0, 97, 169]
2025-03-05 15:22:39.230513 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 217],"bool"), list[1,8,97,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 217],"bool"), list[1,8,97,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 217].  Tensor sizes: [1, 0, 97, 217]
2025-03-05 15:22:39.231052 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 229],"bool"), list[1,8,97,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 229],"bool"), list[1,8,97,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 229].  Tensor sizes: [1, 0, 97, 229]
2025-03-05 15:22:39.231577 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 241],"bool"), list[1,8,97,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 241],"bool"), list[1,8,97,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 241].  Tensor sizes: [1, 0, 97, 241]
2025-03-05 15:22:39.232118 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 261],"bool"), list[1,8,97,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 261],"bool"), list[1,8,97,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 261].  Tensor sizes: [1, 0, 97, 261]
2025-03-05 15:22:39.232645 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 385],"bool"), list[1,8,97,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 385],"bool"), list[1,8,97,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 385].  Tensor sizes: [1, 0, 97, 385]
2025-03-05 15:22:39.233165 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 61],"bool"), list[1,8,97,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 61],"bool"), list[1,8,97,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 61].  Tensor sizes: [1, 0, 97, 61]
2025-03-05 15:22:39.233716 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 65],"bool"), list[1,8,97,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 65],"bool"), list[1,8,97,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 65].  Tensor sizes: [1, 0, 97, 65]
2025-03-05 15:22:39.234247 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 69],"bool"), list[1,8,97,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 69],"bool"), list[1,8,97,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 69].  Tensor sizes: [1, 0, 97, 69]
2025-03-05 15:22:39.234788 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 73],"bool"), list[1,8,97,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 73],"bool"), list[1,8,97,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 73].  Tensor sizes: [1, 0, 97, 73]
2025-03-05 15:22:39.235320 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 85],"bool"), list[1,8,97,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 85],"bool"), list[1,8,97,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 85].  Tensor sizes: [1, 0, 97, 85]
2025-03-05 15:22:39.235873 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[1,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[1,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.236406 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[10,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[10,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.236947 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[2,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[2,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.237473 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[3,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[3,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.238009 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[30,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[30,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.239005 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[4,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[4,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.239662 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[5,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[5,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.240287 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[6,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[6,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.240919 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[7,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[7,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.241548 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[8,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[8,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.242166 test begin: paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[9,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 97, 97],"bool"), list[9,8,97,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 97, 97].  Tensor sizes: [1, 0, 97, 97]
2025-03-05 15:22:39.242786 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 113],"bool"), list[1,8,98,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 113],"bool"), list[1,8,98,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 113].  Tensor sizes: [1, 0, 98, 113]
2025-03-05 15:22:39.243407 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 145],"bool"), list[1,8,98,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 145],"bool"), list[1,8,98,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 145].  Tensor sizes: [1, 0, 98, 145]
2025-03-05 15:22:39.244026 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 157],"bool"), list[1,8,98,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 157],"bool"), list[1,8,98,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 157].  Tensor sizes: [1, 0, 98, 157]
2025-03-05 15:22:39.244642 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 169],"bool"), list[1,8,98,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 169],"bool"), list[1,8,98,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 169].  Tensor sizes: [1, 0, 98, 169]
2025-03-05 15:22:39.245246 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 217],"bool"), list[1,8,98,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 217],"bool"), list[1,8,98,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 217].  Tensor sizes: [1, 0, 98, 217]
2025-03-05 15:22:39.245868 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 229],"bool"), list[1,8,98,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 229],"bool"), list[1,8,98,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 229].  Tensor sizes: [1, 0, 98, 229]
2025-03-05 15:22:39.246474 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 241],"bool"), list[1,8,98,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 241],"bool"), list[1,8,98,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 241].  Tensor sizes: [1, 0, 98, 241]
2025-03-05 15:22:39.247096 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 261],"bool"), list[1,8,98,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 261],"bool"), list[1,8,98,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 261].  Tensor sizes: [1, 0, 98, 261]
2025-03-05 15:22:39.247717 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 385],"bool"), list[1,8,98,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 385],"bool"), list[1,8,98,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 385].  Tensor sizes: [1, 0, 98, 385]
2025-03-05 15:22:39.248328 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 61],"bool"), list[1,8,98,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 61],"bool"), list[1,8,98,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 61].  Tensor sizes: [1, 0, 98, 61]
2025-03-05 15:22:39.248998 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 65],"bool"), list[1,8,98,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 65],"bool"), list[1,8,98,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 65].  Tensor sizes: [1, 0, 98, 65]
2025-03-05 15:22:39.249618 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 69],"bool"), list[1,8,98,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 69],"bool"), list[1,8,98,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 69].  Tensor sizes: [1, 0, 98, 69]
2025-03-05 15:22:39.250249 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 73],"bool"), list[1,8,98,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 73],"bool"), list[1,8,98,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 73].  Tensor sizes: [1, 0, 98, 73]
2025-03-05 15:22:39.250862 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 85],"bool"), list[1,8,98,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 85],"bool"), list[1,8,98,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 85].  Tensor sizes: [1, 0, 98, 85]
2025-03-05 15:22:39.251474 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[1,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[1,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.252085 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[10,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[10,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.252696 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[2,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[2,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.253302 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[3,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[3,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.253921 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[30,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[30,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.254531 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[4,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[4,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.255277 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[5,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[5,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.255921 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[6,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[6,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.256680 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[7,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[7,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.257356 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[8,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[8,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.257967 test begin: paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[9,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 98, 98],"bool"), list[9,8,98,98,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 98, 98].  Tensor sizes: [1, 0, 98, 98]
2025-03-05 15:22:39.258546 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 113],"bool"), list[1,8,99,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 113],"bool"), list[1,8,99,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 113].  Tensor sizes: [1, 0, 99, 113]
2025-03-05 15:22:39.259129 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 145],"bool"), list[1,8,99,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 145],"bool"), list[1,8,99,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 145].  Tensor sizes: [1, 0, 99, 145]
2025-03-05 15:22:39.259701 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 157],"bool"), list[1,8,99,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 157],"bool"), list[1,8,99,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 157].  Tensor sizes: [1, 0, 99, 157]
2025-03-05 15:22:39.260250 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 169],"bool"), list[1,8,99,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 169],"bool"), list[1,8,99,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 169].  Tensor sizes: [1, 0, 99, 169]
2025-03-05 15:22:39.260827 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 217],"bool"), list[1,8,99,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 217],"bool"), list[1,8,99,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 217].  Tensor sizes: [1, 0, 99, 217]
2025-03-05 15:22:39.261384 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 229],"bool"), list[1,8,99,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 229],"bool"), list[1,8,99,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 229].  Tensor sizes: [1, 0, 99, 229]
2025-03-05 15:22:39.261953 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 241],"bool"), list[1,8,99,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 241],"bool"), list[1,8,99,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 241].  Tensor sizes: [1, 0, 99, 241]
2025-03-05 15:22:39.262499 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 261],"bool"), list[1,8,99,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 261],"bool"), list[1,8,99,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 261].  Tensor sizes: [1, 0, 99, 261]
2025-03-05 15:22:39.263113 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 385],"bool"), list[1,8,99,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 385],"bool"), list[1,8,99,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 385].  Tensor sizes: [1, 0, 99, 385]
2025-03-05 15:22:39.263682 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 61],"bool"), list[1,8,99,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 61],"bool"), list[1,8,99,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 61].  Tensor sizes: [1, 0, 99, 61]
2025-03-05 15:22:39.264258 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 65],"bool"), list[1,8,99,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 65],"bool"), list[1,8,99,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 65].  Tensor sizes: [1, 0, 99, 65]
2025-03-05 15:22:39.264825 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 69],"bool"), list[1,8,99,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 69],"bool"), list[1,8,99,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 69].  Tensor sizes: [1, 0, 99, 69]
2025-03-05 15:22:39.265409 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 73],"bool"), list[1,8,99,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 73],"bool"), list[1,8,99,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 73].  Tensor sizes: [1, 0, 99, 73]
2025-03-05 15:22:39.265974 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 85],"bool"), list[1,8,99,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 85],"bool"), list[1,8,99,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 85].  Tensor sizes: [1, 0, 99, 85]
2025-03-05 15:22:39.266512 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[1,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[1,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.267045 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[10,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[10,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [10, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.267572 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[2,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[2,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.268125 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[3,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[3,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.268675 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[30,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[30,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [30, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.269214 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[4,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[4,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.269761 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[5,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[5,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [5, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.270313 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[6,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[6,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [6, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.270890 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[7,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[7,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [7, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.271438 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[8,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[8,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [8, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.271987 test begin: paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[9,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 0, 99, 99],"bool"), list[9,8,99,99,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [9, 8, 99, 99].  Tensor sizes: [1, 0, 99, 99]
2025-03-05 15:22:39.272529 test begin: paddle.broadcast_to(Tensor([1, 0],"bool"), list[1,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 0],"bool"), list[1,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 2].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.273052 test begin: paddle.broadcast_to(Tensor([1, 0],"bool"), list[3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 0],"bool"), list[3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 3].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.273594 test begin: paddle.broadcast_to(Tensor([1, 0],"bool"), tuple(3,4,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"bool"), tuple(3,4,), ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 4].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.274106 test begin: paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(1,3,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(1,3,), ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 3].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.274711 test begin: paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(1,799,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(1,799,), ) 
 The expanded size of the tensor (799) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 799].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.275256 test begin: paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(3,4,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(3,4,), ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 4].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.275803 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,2,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,2,), ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 2].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.276544 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,3,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,3,), ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 3].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.277122 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,4,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,4,), ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 4].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.277705 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,799,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,799,), ) 
 The expanded size of the tensor (799) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [1, 799].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.278266 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(2,1,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(2,1,), ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [2, 1].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.278845 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(3,3,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(3,3,), ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [3, 3].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.279400 test begin: paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(4,1,), )

[torch error] paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(4,1,), ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 1.  Target sizes: [4, 1].  Tensor sizes: [1, 0]
2025-03-05 15:22:39.279985 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[1,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[1,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.280574 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[10,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[10,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.281127 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[2,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[2,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.281687 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[3,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[3,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.282251 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[30,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[30,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.282811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[4,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[4,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.283367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[5,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[5,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.283978 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[6,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[6,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.284547 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[7,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[7,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.285121 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[8,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[8,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.285674 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[9,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 100],"bool"), list[9,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 100, 100].  Tensor sizes: [1, 1, 0, 100]
2025-03-05 15:22:39.286213 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[1,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[1,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.287220 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[10,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[10,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.287886 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[2,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[2,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.288521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[3,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[3,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.289153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[30,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[30,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.289810 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[4,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[4,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.290433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[5,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[5,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.291081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[6,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[6,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.291712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[7,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[7,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.292328 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[8,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[8,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.292962 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[9,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 101],"bool"), list[9,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 101, 101].  Tensor sizes: [1, 1, 0, 101]
2025-03-05 15:22:39.293580 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[1,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[1,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.294304 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[10,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[10,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.294927 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[2,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[2,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.295537 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[3,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[3,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.296158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[30,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[30,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.296787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[4,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[4,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.297426 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[5,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[5,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.298050 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[6,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[6,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.298744 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[7,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[7,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.299352 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[8,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[8,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.299968 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[9,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 102],"bool"), list[9,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 102, 102].  Tensor sizes: [1, 1, 0, 102]
2025-03-05 15:22:39.300589 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[1,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[1,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.301223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[10,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[10,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.301863 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[2,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[2,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.302486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[3,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[3,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.303124 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[30,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[30,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.303766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[4,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[4,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.304391 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[5,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[5,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.305016 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[6,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[6,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.305653 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[7,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[7,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.306289 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[8,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[8,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.306919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[9,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 103],"bool"), list[9,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 103, 103].  Tensor sizes: [1, 1, 0, 103]
2025-03-05 15:22:39.307599 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[1,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[1,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.308233 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[10,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[10,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.308882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[2,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[2,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.309775 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[3,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[3,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.310446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[30,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[30,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.311099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[4,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[4,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.311752 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[5,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[5,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.312484 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[6,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[6,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.313072 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[7,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[7,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.313641 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[8,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[8,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.314182 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[9,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 104],"bool"), list[9,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 104, 104].  Tensor sizes: [1, 1, 0, 104]
2025-03-05 15:22:39.314735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[1,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[1,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.315272 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[10,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[10,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.316033 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[2,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[2,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.316690 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[3,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[3,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.317319 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[4,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[4,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.318000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[5,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[5,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.318637 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[6,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[6,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.319265 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[7,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[7,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.319945 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[8,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[8,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.320568 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[9,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 105],"bool"), list[9,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 105, 105].  Tensor sizes: [1, 1, 0, 105]
2025-03-05 15:22:39.321203 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[1,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[1,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.321842 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[10,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[10,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.322473 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[2,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[2,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.323167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[3,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[3,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.323807 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[30,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[30,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.324427 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[4,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[4,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.325050 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[5,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[5,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.325675 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[6,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[6,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.326443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[7,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[7,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.327026 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[8,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[8,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.327575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[9,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 106],"bool"), list[9,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 106, 106].  Tensor sizes: [1, 1, 0, 106]
2025-03-05 15:22:39.328174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[1,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[1,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.328729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[10,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[10,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.329279 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[2,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[2,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.329831 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[3,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[3,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.330367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[4,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[4,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.330929 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[5,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[5,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.331475 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[6,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[6,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.332012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[7,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[7,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.332537 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[8,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[8,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.333091 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[9,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 107],"bool"), list[9,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 107, 107].  Tensor sizes: [1, 1, 0, 107]
2025-03-05 15:22:39.333636 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[1,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[1,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.334165 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[10,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[10,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.334702 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[2,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[2,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.335239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[3,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[3,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.335785 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[30,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[30,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.336335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[4,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[4,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.336885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[5,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[5,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.337429 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[6,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[6,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.337975 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[7,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[7,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.338574 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[8,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[8,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.339127 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[9,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 108],"bool"), list[9,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 108, 108].  Tensor sizes: [1, 1, 0, 108]
2025-03-05 15:22:39.339680 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,1,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,1,109,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.340569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,10,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,10,109,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.341228 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.341860 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,11,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,11,109,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.342470 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,12,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,12,109,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.343466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,13,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,13,109,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.344163 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,14,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,14,109,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.344860 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,15,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,15,109,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.345578 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,16,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,16,109,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.346231 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,17,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,17,109,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.346882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,18,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,18,109,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.347517 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,19,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,19,109,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.348202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,2,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,2,109,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.348981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,20,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,20,109,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.349609 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,21,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,21,109,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.350226 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,22,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,22,109,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.350829 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,23,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,23,109,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.351419 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,24,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,24,109,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.352081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,25,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,25,109,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.352676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,26,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,26,109,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.353263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,27,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,27,109,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.353875 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,28,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,28,109,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.354466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,29,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,29,109,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.355077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,3,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,3,109,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.355688 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,30,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,30,109,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.356281 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,31,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,31,109,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.356977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,32,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,32,109,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.357711 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,33,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,33,109,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.358546 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,34,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,34,109,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.359225 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,35,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,35,109,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.359977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,36,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,36,109,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.360658 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,37,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,37,109,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.361283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,38,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,38,109,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.361881 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,39,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,39,109,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.362447 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,4,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,4,109,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.362991 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,40,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,40,109,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.363515 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,41,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,41,109,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.364066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,42,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,42,109,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.364599 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,43,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,43,109,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.365123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,44,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,44,109,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.365646 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,45,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,45,109,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.366162 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,46,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,46,109,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.366697 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,47,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,47,109,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.367281 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,48,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,48,109,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.368084 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,49,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,49,109,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.368739 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,5,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,5,109,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.369358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,50,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,50,109,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.369997 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,51,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,51,109,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.370615 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,52,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,52,109,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.371216 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,53,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,53,109,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.371843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,54,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,54,109,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.372446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,55,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,55,109,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.373066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,56,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,56,109,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.373680 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,57,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,57,109,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.374273 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,58,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,58,109,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.374875 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,59,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,59,109,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.375485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,6,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,6,109,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.376104 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,7,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,7,109,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.376747 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,8,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,8,109,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.377355 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,9,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[1,8,9,109,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.377964 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[10,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[10,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.378569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[2,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[2,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.379188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[3,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[3,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.379813 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[30,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[30,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.380436 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[4,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[4,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.381050 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[5,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[5,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.381697 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[6,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[6,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.382298 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[7,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[7,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.382919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[8,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[8,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.383520 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[9,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 109],"bool"), list[9,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 109, 109].  Tensor sizes: [1, 1, 0, 109]
2025-03-05 15:22:39.384142 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[1,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[1,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.384752 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[10,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[10,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.385349 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[14,4,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[14,4,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [14, 4, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.385962 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[14,4,3,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[14,4,3,10,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [14, 4, 3, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.386553 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[2,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[2,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.387154 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[3,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[3,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.387758 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[4,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[4,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.388358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[5,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[5,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.388976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[6,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[6,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.389592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[7,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[7,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.390197 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[8,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[8,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.390800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[9,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 10],"bool"), list[9,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 10, 10].  Tensor sizes: [1, 1, 0, 10]
2025-03-05 15:22:39.391392 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[1,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[1,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.392036 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[10,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[10,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.392648 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[2,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[2,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.393235 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[3,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[3,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.393829 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[30,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[30,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.394423 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[4,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[4,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.395038 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[5,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[5,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.395647 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[6,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[6,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.396250 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[7,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[7,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.396852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[8,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[8,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.397441 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[9,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 110],"bool"), list[9,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 110, 110].  Tensor sizes: [1, 1, 0, 110]
2025-03-05 15:22:39.398041 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[1,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[1,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.398676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[10,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[10,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.399278 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[2,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[2,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.399887 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[3,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[3,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.400490 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[30,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[30,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.401099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[4,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[4,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.401702 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[5,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[5,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.402297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[6,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[6,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.402908 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[7,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[7,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.403494 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[8,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[8,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.404107 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[9,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 111],"bool"), list[9,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 111, 111].  Tensor sizes: [1, 1, 0, 111]
2025-03-05 15:22:39.404723 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[1,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[1,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.405317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[10,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[10,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.405920 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[2,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[2,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.406514 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[3,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[3,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.407121 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[30,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[30,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.407733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[4,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[4,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.408384 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[5,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[5,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.409043 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[6,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[6,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.409657 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[7,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[7,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.410266 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[8,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[8,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.410861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[9,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 112],"bool"), list[9,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 112, 112].  Tensor sizes: [1, 1, 0, 112]
2025-03-05 15:22:39.411456 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,1,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,1,113,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.412144 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,10,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,10,113,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.412764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,100,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,100,113,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.413367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,101,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,101,113,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.413985 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,102,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,102,113,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.414613 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,103,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,103,113,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.415338 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,104,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,104,113,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.415998 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,105,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,105,113,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.416556 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,106,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,106,113,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.417106 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,107,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,107,113,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.417643 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,108,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,108,113,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.418168 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,109,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,109,113,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.418695 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,11,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,11,113,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.419206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,110,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,110,113,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.419728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.420236 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,12,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,12,113,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.420767 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,13,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,13,113,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.421305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,14,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,14,113,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.422549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,15,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,15,113,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.423395 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,16,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,16,113,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.424039 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,17,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,17,113,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.424638 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,18,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,18,113,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.425179 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,19,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,19,113,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.425726 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,2,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,2,113,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.426265 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,20,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,20,113,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.426811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,21,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,21,113,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.427341 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,22,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,22,113,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.427865 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,23,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,23,113,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.428393 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,24,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,24,113,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.428933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,25,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,25,113,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.429456 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,26,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,26,113,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.430017 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,27,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,27,113,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.430573 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,28,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,28,113,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.431123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,29,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,29,113,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.431680 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,3,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,3,113,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.432204 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,30,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,30,113,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.432731 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,31,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,31,113,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.433244 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,32,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,32,113,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.433766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,33,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,33,113,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.434299 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,34,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,34,113,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.434833 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,35,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,35,113,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.435350 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,36,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,36,113,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.435879 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,37,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,37,113,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.436405 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,38,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,38,113,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.436935 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,39,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,39,113,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.437475 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,4,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,4,113,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.438043 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,40,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,40,113,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.438572 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,41,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,41,113,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.439206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,42,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,42,113,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.439799 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,43,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,43,113,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.440417 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,44,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,44,113,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.440960 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,45,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,45,113,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.441501 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,46,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,46,113,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.442051 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,47,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,47,113,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.442604 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,48,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,48,113,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.443123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,49,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,49,113,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.443655 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,5,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,5,113,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.444184 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,50,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,50,113,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.444792 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,51,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,51,113,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.445324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,52,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,52,113,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.445847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,53,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,53,113,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.446362 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,54,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,54,113,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.446885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,55,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,55,113,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.447404 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,56,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,56,113,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.447935 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,57,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,57,113,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.448462 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,58,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,58,113,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.449983 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,59,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,59,113,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.450521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,6,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,6,113,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.451061 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,60,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,60,113,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.451611 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,61,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,61,113,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.452149 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,62,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,62,113,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.452681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,63,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,63,113,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.453209 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,64,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,64,113,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.453739 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,65,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,65,113,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.454263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,66,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,66,113,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.454789 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,67,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,67,113,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.455305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,68,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,68,113,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.455852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,69,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,69,113,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.456375 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,7,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,7,113,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.456908 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,70,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,70,113,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.457431 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,71,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,71,113,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.458006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,72,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,72,113,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.458538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,73,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,73,113,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.459076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,74,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,74,113,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.459614 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,75,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,75,113,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.460143 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,76,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,76,113,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.460666 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,77,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,77,113,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.461180 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,78,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,78,113,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.461705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,79,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,79,113,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.462219 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,8,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,8,113,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.462730 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,80,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,80,113,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.463234 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,81,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,81,113,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.463747 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,82,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,82,113,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.464253 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,83,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,83,113,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.464800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,84,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,84,113,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.465358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,85,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,85,113,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.465890 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,86,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,86,113,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.466403 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,87,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,87,113,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.466926 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,88,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,88,113,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.467450 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,89,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,89,113,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.467983 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,9,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,9,113,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.468496 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,90,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,90,113,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.469025 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,91,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,91,113,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.469552 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,92,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,92,113,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.470082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,93,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,93,113,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.470611 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,94,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,94,113,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.471123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,95,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,95,113,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.471633 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,96,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,96,113,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.472151 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,97,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,97,113,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.472669 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,98,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,98,113,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.473183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,99,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[1,8,99,113,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.473706 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[10,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[10,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.474215 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[2,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[2,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.474736 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[3,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[3,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.475245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[30,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[30,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.475782 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[4,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[4,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.476312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[5,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[5,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.476834 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[6,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[6,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.477355 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[7,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[7,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.477874 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[8,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[8,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.478485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[9,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 113],"bool"), list[9,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 113, 113].  Tensor sizes: [1, 1, 0, 113]
2025-03-05 15:22:39.479115 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[1,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[1,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.479660 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[10,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[10,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.480185 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[2,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[2,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.480711 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[3,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[3,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.481232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[30,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[30,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.481755 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[4,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[4,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.482281 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[5,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[5,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.482811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[6,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[6,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.483406 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[7,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[7,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.483969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[8,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[8,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.484525 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[9,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 114],"bool"), list[9,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 114, 114].  Tensor sizes: [1, 1, 0, 114]
2025-03-05 15:22:39.485099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[1,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[1,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.485757 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[10,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[10,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.486390 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[2,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[2,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.487022 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[3,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[3,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.487572 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[30,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[30,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.488132 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[4,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[4,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.488665 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[5,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[5,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.489220 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[6,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[6,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.489779 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[7,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[7,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.490324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[8,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[8,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.490877 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[9,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 115],"bool"), list[9,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 115, 115].  Tensor sizes: [1, 1, 0, 115]
2025-03-05 15:22:39.491416 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[1,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[1,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.491970 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[10,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[10,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.492514 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[2,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[2,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.493070 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[3,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[3,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.493628 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[30,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[30,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.494173 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[4,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[4,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.494722 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[5,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[5,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.495267 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[6,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[6,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.495823 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[7,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[7,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.496373 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[8,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[8,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.496924 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[9,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 116],"bool"), list[9,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 116, 116].  Tensor sizes: [1, 1, 0, 116]
2025-03-05 15:22:39.497470 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[1,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[1,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.498026 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[10,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[10,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.498564 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[2,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[2,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.499120 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[3,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[3,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.499672 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[30,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[30,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.500743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[4,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[4,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.501408 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[5,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[5,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.502113 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[6,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[6,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.502757 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[7,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[7,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.503385 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[8,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[8,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.504008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[9,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 117],"bool"), list[9,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 117, 117].  Tensor sizes: [1, 1, 0, 117]
2025-03-05 15:22:39.504626 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[1,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[1,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.505237 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[10,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[10,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.505932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[2,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[2,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.506807 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[3,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[3,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.507568 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[30,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[30,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.508379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[4,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[4,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.509130 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[5,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[5,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.509909 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[6,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[6,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.510750 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[7,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[7,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.511433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[8,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[8,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.512079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[9,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 118],"bool"), list[9,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 118, 118].  Tensor sizes: [1, 1, 0, 118]
2025-03-05 15:22:39.512712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[1,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[1,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.513335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[10,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[10,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.513985 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[2,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[2,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.514624 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[3,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[3,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.515256 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[30,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[30,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.515898 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[4,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[4,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.516521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[5,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[5,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.517454 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[6,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[6,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.518076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[7,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[7,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.518752 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[8,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[8,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.519381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[9,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 119],"bool"), list[9,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 119, 119].  Tensor sizes: [1, 1, 0, 119]
2025-03-05 15:22:39.520006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[1,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[1,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.520678 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[10,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[10,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.521253 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[2,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[2,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.521948 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[3,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[3,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.522569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[4,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[4,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.523199 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[5,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[5,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.523759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[6,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[6,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.524273 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[7,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[7,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.524794 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[8,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[8,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.525448 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[9,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 11],"bool"), list[9,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 11, 11].  Tensor sizes: [1, 1, 0, 11]
2025-03-05 15:22:39.526072 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[1,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[1,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.526838 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[10,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[10,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.527382 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[2,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[2,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.527929 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[3,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[3,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.528440 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[30,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[30,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.528966 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[4,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[4,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.529488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[5,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[5,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.530012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[6,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[6,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.530518 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[7,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[7,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.531135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[8,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 120],"bool"), list[8,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 120, 120].  Tensor sizes: [1, 1, 0, 120]
2025-03-05 15:22:39.531697 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[1,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[1,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.532518 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[10,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[10,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.533311 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[2,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[2,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.534196 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[3,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[3,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.534858 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[30,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[30,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.535488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[4,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[4,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.536118 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[5,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[5,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.536734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[6,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[6,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.537335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[7,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[7,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.537964 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[8,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 121],"bool"), list[8,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 121, 121].  Tensor sizes: [1, 1, 0, 121]
2025-03-05 15:22:39.538570 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[1,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[1,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.539255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[10,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[10,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.539910 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[2,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[2,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.540515 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[3,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[3,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.541143 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[4,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[4,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.541770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[5,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[5,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.542392 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[6,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[6,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.543029 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[7,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[7,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.543574 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[8,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 122],"bool"), list[8,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 122, 122].  Tensor sizes: [1, 1, 0, 122]
2025-03-05 15:22:39.544105 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[1,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[1,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.544639 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[10,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[10,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.545166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[2,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[2,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.545692 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[3,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[3,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.546221 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[30,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[30,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.546750 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[4,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[4,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.547273 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[5,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[5,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.547795 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[6,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[6,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.548314 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[7,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[7,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.548878 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[8,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 123],"bool"), list[8,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 123, 123].  Tensor sizes: [1, 1, 0, 123]
2025-03-05 15:22:39.549417 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[1,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[1,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.549953 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[10,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[10,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.550482 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[2,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[2,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.551011 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[3,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[3,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.551545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[30,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[30,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.552079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[4,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[4,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.552603 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[5,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[5,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.553122 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[6,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[6,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.553656 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[7,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[7,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.554194 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[8,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 124],"bool"), list[8,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 124, 124].  Tensor sizes: [1, 1, 0, 124]
2025-03-05 15:22:39.554723 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[1,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[1,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.555235 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[10,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[10,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.555763 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[2,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[2,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.556277 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[3,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[3,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.556808 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[30,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[30,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.557381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[4,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[4,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.557967 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[5,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[5,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.558487 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[6,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[6,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.559008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[7,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[7,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.559546 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[8,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 125],"bool"), list[8,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 125, 125].  Tensor sizes: [1, 1, 0, 125]
2025-03-05 15:22:39.560076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[1,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[1,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.560598 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[10,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[10,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.561118 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[2,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[2,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.561627 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[3,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[3,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.562147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[30,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[30,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.562666 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[4,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[4,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.563183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[5,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[5,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.563708 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[6,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[6,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.564228 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[7,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[7,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.564769 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[8,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 126],"bool"), list[8,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 126, 126].  Tensor sizes: [1, 1, 0, 126]
2025-03-05 15:22:39.565283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[1,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[1,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.565813 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[10,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[10,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.566355 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[2,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[2,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.566883 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[3,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[3,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.567428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[30,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[30,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.567974 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[4,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[4,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.568508 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[5,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[5,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.569038 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[6,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[6,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.569548 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[7,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[7,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.570074 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[8,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 127],"bool"), list[8,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 127, 127].  Tensor sizes: [1, 1, 0, 127]
2025-03-05 15:22:39.570597 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[1,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[1,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.571133 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[10,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[10,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.571698 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[2,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[2,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.572241 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[3,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[3,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.572766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[30,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[30,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.573324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[4,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[4,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.573898 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[5,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[5,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.574426 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[6,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[6,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.574967 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[7,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[7,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.575491 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[8,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 128],"bool"), list[8,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 128, 128].  Tensor sizes: [1, 1, 0, 128]
2025-03-05 15:22:39.576051 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[1,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[1,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.576595 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[10,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[10,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.577125 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[2,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[2,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.577664 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[3,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[3,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.578215 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[30,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[30,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.578753 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[4,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[4,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.579269 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[5,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[5,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.579796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[6,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[6,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.580319 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[7,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[7,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.580892 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[8,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 129],"bool"), list[8,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 129, 129].  Tensor sizes: [1, 1, 0, 129]
2025-03-05 15:22:39.581411 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[1,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[1,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.581933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[10,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[10,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.582453 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[2,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[2,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.582976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[3,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[3,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.583493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[4,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[4,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.584033 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[5,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[5,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.584550 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[6,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[6,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.585083 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[7,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[7,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.585622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[8,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[8,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.586144 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[9,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 12],"bool"), list[9,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 12, 12].  Tensor sizes: [1, 1, 0, 12]
2025-03-05 15:22:39.586699 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[1,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[1,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.587766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[10,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[10,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.588465 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[2,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[2,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.589072 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[3,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[3,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.589642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[30,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[30,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.590211 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[4,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[4,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.590784 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[5,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[5,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.591312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[6,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[6,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.591839 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[7,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[7,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.592349 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[8,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 130],"bool"), list[8,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 130, 130].  Tensor sizes: [1, 1, 0, 130]
2025-03-05 15:22:39.592867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[1,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[1,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.593369 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[10,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[10,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.593884 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[2,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[2,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.594386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[3,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[3,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.594940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[4,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[4,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.595447 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[5,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[5,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.596005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[6,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[6,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.596622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[7,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[7,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.597654 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[8,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 131],"bool"), list[8,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 131, 131].  Tensor sizes: [1, 1, 0, 131]
2025-03-05 15:22:39.598395 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[1,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[1,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.598982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[10,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[10,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.599542 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[2,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[2,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.600096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[3,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[3,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.600643 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[4,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[4,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.601183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[5,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[5,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.601714 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[6,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[6,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.602242 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[7,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[7,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.602843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[8,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 132],"bool"), list[8,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 132, 132].  Tensor sizes: [1, 1, 0, 132]
2025-03-05 15:22:39.603792 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[1,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[1,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.604467 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[10,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[10,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.605109 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[2,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[2,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.605694 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[3,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[3,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.606367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[30,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[30,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.606976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[4,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[4,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.607629 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[5,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[5,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.608224 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[6,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[6,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.608786 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[7,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[7,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.609449 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[8,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 133],"bool"), list[8,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 133, 133].  Tensor sizes: [1, 1, 0, 133]
2025-03-05 15:22:39.610063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[1,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[1,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.610625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[10,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[10,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.611392 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[2,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[2,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.612040 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[3,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[3,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.612692 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[30,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[30,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.613360 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[4,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[4,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.613947 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[5,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[5,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.614503 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[6,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[6,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.615045 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[7,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[7,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.615567 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[8,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 134],"bool"), list[8,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 134, 134].  Tensor sizes: [1, 1, 0, 134]
2025-03-05 15:22:39.616295 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[1,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[1,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.616936 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[10,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[10,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.617555 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[2,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[2,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.618139 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[3,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[3,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.618713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[30,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[30,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.619263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[4,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[4,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.619806 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[5,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[5,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.620327 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[6,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[6,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.620864 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[7,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[7,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.621404 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[8,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 135],"bool"), list[8,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 135, 135].  Tensor sizes: [1, 1, 0, 135]
2025-03-05 15:22:39.622001 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[1,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[1,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.622543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[10,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[10,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.623096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[2,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[2,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.623642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[3,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[3,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.624183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[4,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[4,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.624778 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[5,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[5,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.625329 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[6,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[6,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.625865 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[7,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[7,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.626388 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[8,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 136],"bool"), list[8,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 136, 136].  Tensor sizes: [1, 1, 0, 136]
2025-03-05 15:22:39.626909 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[1,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[1,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.627430 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[10,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[10,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.627965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[2,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[2,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.628483 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[3,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[3,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.629008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[4,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[4,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.629529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[5,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[5,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.630083 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[6,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[6,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.630668 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[7,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[7,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.631202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[8,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 137],"bool"), list[8,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 137, 137].  Tensor sizes: [1, 1, 0, 137]
2025-03-05 15:22:39.631727 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[1,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[1,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.632248 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[10,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[10,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.632801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[2,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[2,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.633329 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[3,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[3,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.633852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[30,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[30,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.634374 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[4,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[4,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.634917 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[5,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[5,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.635439 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[6,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[6,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.635977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[7,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[7,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.636520 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[8,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 138],"bool"), list[8,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 138, 138].  Tensor sizes: [1, 1, 0, 138]
2025-03-05 15:22:39.637051 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[1,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[1,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.637593 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[10,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[10,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.638122 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[2,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[2,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.638673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[3,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[3,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.639206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[30,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[30,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.639793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[4,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[4,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.640331 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[5,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[5,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.640903 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[6,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[6,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.641424 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[7,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[7,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.641971 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[8,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 139],"bool"), list[8,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 139, 139].  Tensor sizes: [1, 1, 0, 139]
2025-03-05 15:22:39.642553 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[1,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[1,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.643092 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[10,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[10,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.643624 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[2,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[2,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.644153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[3,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[3,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.644718 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[4,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[4,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.645243 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[5,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[5,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.645793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[6,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[6,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.646324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[7,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[7,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.646857 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[8,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[8,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.647398 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[9,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 13],"bool"), list[9,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 13, 13].  Tensor sizes: [1, 1, 0, 13]
2025-03-05 15:22:39.648035 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[1,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[1,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.649165 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[10,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[10,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.649890 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[2,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[2,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.650533 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[3,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[3,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.651183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[30,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[30,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.651826 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[4,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[4,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.652554 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[5,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[5,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.653110 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[6,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[6,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.653642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[7,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[7,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.654169 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[8,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 140],"bool"), list[8,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 140, 140].  Tensor sizes: [1, 1, 0, 140]
2025-03-05 15:22:39.654738 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[1,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[1,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.655276 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[10,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[10,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.655839 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[2,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[2,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.656362 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[3,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[3,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.656913 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[30,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[30,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.657433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[4,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[4,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.658000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[5,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[5,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.658540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[6,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[6,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.659103 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[7,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[7,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.659644 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[8,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 141],"bool"), list[8,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 141, 141].  Tensor sizes: [1, 1, 0, 141]
2025-03-05 15:22:39.660165 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[1,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[1,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.660700 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[10,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[10,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.661228 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[2,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[2,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.661761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[3,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[3,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.662298 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[30,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[30,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.662849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[4,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[4,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.663408 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[5,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[5,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.664036 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[6,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[6,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.664557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[7,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[7,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.665099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[8,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 142],"bool"), list[8,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 142, 142].  Tensor sizes: [1, 1, 0, 142]
2025-03-05 15:22:39.665633 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[1,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[1,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.666170 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[10,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[10,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.666711 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[2,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[2,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.667267 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[3,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[3,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.667812 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[4,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[4,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.668352 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[6,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[6,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.668885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[7,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[7,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.669402 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[8,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 143],"bool"), list[8,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 143, 143].  Tensor sizes: [1, 1, 0, 143]
2025-03-05 15:22:39.669930 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[1,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[1,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.670461 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[10,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[10,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.671008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[2,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[2,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.671546 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[3,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[3,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.672082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[30,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[30,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.672635 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[4,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[4,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.673170 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[6,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[6,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.673802 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[7,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[7,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.674709 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[8,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 144],"bool"), list[8,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 144, 144].  Tensor sizes: [1, 1, 0, 144]
2025-03-05 15:22:39.675335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,1,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,1,145,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.675907 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,10,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,10,145,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.676463 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,11,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,11,145,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.678158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,12,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,12,145,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.678732 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,13,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,13,145,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.679263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,14,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,14,145,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.679806 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.680364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,15,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,15,145,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.680903 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,16,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,16,145,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.681435 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,17,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,17,145,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.681982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,18,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,18,145,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.682510 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,19,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,19,145,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.683061 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,2,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,2,145,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.683605 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,20,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,20,145,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.684143 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,21,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,21,145,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.684697 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,22,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,22,145,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.685233 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,23,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,23,145,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.685778 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,24,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,24,145,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.686394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,25,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,25,145,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.686948 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,26,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,26,145,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.687485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,27,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,27,145,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.688028 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,28,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,28,145,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.688565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,29,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,29,145,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.689099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,3,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,3,145,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.689653 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,30,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,30,145,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.690203 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,31,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,31,145,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.690752 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,32,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,32,145,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.691294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,33,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,33,145,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.691855 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,34,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,34,145,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.692423 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,35,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,35,145,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.693013 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,36,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,36,145,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.693557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,37,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,37,145,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.694106 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,38,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,38,145,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.694658 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,39,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,39,145,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.695189 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,4,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,4,145,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.695759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,40,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,40,145,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.696306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,41,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,41,145,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.696856 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,42,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,42,145,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.697412 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,43,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,43,145,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.697963 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,44,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,44,145,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.698500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,45,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,45,145,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.699042 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,46,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,46,145,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.699576 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,47,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,47,145,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.700126 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,48,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,48,145,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.700696 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,49,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,49,145,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.701240 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,5,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,5,145,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.701833 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,50,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,50,145,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.702379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,51,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,51,145,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.702923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,52,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,52,145,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.703451 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,53,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,53,145,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.703985 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,54,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,54,145,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.704516 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,55,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,55,145,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.705053 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,56,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,56,145,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.705599 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,57,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,57,145,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.706150 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,58,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,58,145,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.706702 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,59,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,59,145,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.707241 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,6,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,6,145,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.707773 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,60,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,60,145,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.708301 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,61,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,61,145,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.708841 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,62,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,62,145,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.709375 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,63,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,63,145,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.709924 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,64,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,64,145,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.710451 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,65,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,65,145,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.711010 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,66,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,66,145,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.711633 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,67,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,67,145,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.712183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,68,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,68,145,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.712739 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,69,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,69,145,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.713289 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,7,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,7,145,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.713847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,70,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,70,145,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.714387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,71,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,71,145,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.714922 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,72,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,72,145,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.715459 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,73,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,73,145,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.716005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,74,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,74,145,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.716529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,75,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,75,145,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.717077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,76,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,76,145,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.717620 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,77,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,77,145,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.718167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,78,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,78,145,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.718721 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,79,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,79,145,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.719273 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,8,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,8,145,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.719838 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,80,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,80,145,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.720380 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,81,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,81,145,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.720944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,82,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,82,145,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.721503 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,83,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,83,145,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.722045 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,84,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,84,145,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.722592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,85,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,85,145,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.723130 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,86,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,86,145,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.723734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,87,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,87,145,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.724283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,88,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,88,145,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.724827 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,89,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,89,145,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.725376 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,9,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,9,145,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.725910 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,90,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,90,145,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.726536 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,91,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,91,145,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.727479 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,92,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,92,145,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.728141 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,93,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,93,145,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.728861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,94,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,94,145,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.729528 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,95,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,95,145,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.730186 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,96,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,96,145,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.730846 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,97,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,97,145,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.731480 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,98,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,98,145,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.732577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,99,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[1,8,99,145,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.733255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[10,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[10,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.733919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[2,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[2,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.734730 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[3,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[3,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.735429 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[4,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[4,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.736107 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[6,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[6,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.736783 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[7,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[7,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.737452 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[8,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 145],"bool"), list[8,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 145, 145].  Tensor sizes: [1, 1, 0, 145]
2025-03-05 15:22:39.738127 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[1,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[1,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.738803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[10,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[10,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.739496 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[2,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[2,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.740225 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[3,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[3,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.741066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[4,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[4,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.741797 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[6,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[6,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.742478 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[7,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[7,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.743167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[8,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 146],"bool"), list[8,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 146, 146].  Tensor sizes: [1, 1, 0, 146]
2025-03-05 15:22:39.743847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[1,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[1,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.744517 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[10,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[10,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.745216 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[2,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[2,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.746010 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[3,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[3,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.746792 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[30,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[30,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.747481 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[4,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[4,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.748504 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[6,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[6,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.749397 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[7,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[7,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.750407 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[8,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 147],"bool"), list[8,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 147, 147].  Tensor sizes: [1, 1, 0, 147]
2025-03-05 15:22:39.751150 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[1,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[1,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.751861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[10,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[10,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.752546 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[2,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[2,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.753343 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[3,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[3,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.754056 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[4,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[4,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.754645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[6,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[6,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.755194 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[7,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[7,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.755737 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[8,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 148],"bool"), list[8,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 148, 148].  Tensor sizes: [1, 1, 0, 148]
2025-03-05 15:22:39.756318 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[1,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[1,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.756994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[10,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[10,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.757599 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[2,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[2,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.758146 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[3,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[3,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.758725 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[30,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[30,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.759306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[4,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[4,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.759859 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[6,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[6,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.760467 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[7,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[7,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.761190 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[8,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 149],"bool"), list[8,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 149, 149].  Tensor sizes: [1, 1, 0, 149]
2025-03-05 15:22:39.761770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[1,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[1,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.762307 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[10,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[10,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.762851 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[2,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[2,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.763381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[3,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[3,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.763909 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[4,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[4,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.764445 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[5,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[5,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.764993 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[6,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[6,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.765550 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[7,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[7,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.766087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[8,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[8,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.766618 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[9,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 14],"bool"), list[9,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 14, 14].  Tensor sizes: [1, 1, 0, 14]
2025-03-05 15:22:39.767605 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[1,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[1,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.768202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[10,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[10,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.769045 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[2,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[2,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.769797 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[3,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[3,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.770428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[30,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[30,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.771178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[4,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[4,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.771885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[6,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[6,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.772446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[7,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[7,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.773006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[8,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 150],"bool"), list[8,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 150, 150].  Tensor sizes: [1, 1, 0, 150]
2025-03-05 15:22:39.773555 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[1,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[1,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.774117 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[10,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[10,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.774660 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[2,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[2,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.775186 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[3,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[3,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.775734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[30,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[30,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.776270 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[4,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[4,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.776835 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[6,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[6,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.777380 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[7,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[7,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.777944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[8,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 151],"bool"), list[8,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 151, 151].  Tensor sizes: [1, 1, 0, 151]
2025-03-05 15:22:39.778489 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[1,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[1,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.779039 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[10,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[10,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.779575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[2,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[2,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.780119 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[3,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[3,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.780651 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[4,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[4,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.781188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[6,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[6,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.781731 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[7,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[7,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.782278 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[8,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 152],"bool"), list[8,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 152, 152].  Tensor sizes: [1, 1, 0, 152]
2025-03-05 15:22:39.782824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[1,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[1,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.783359 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[10,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[10,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.783912 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[2,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[2,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.784452 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[3,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[3,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.785000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[4,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[4,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.785529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[6,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[6,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.786083 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[7,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[7,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.786645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[8,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 153],"bool"), list[8,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 153, 153].  Tensor sizes: [1, 1, 0, 153]
2025-03-05 15:22:39.787187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[1,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[1,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.787725 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[10,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[10,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.788253 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[2,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[2,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.788793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[3,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[3,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.789320 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[30,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[30,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.789859 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[4,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[4,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.790401 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[6,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[6,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.790944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[7,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[7,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.791479 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[8,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 154],"bool"), list[8,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 154, 154].  Tensor sizes: [1, 1, 0, 154]
2025-03-05 15:22:39.792018 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[1,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[1,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.792536 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[10,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[10,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.793077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[2,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[2,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.793615 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[3,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[3,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.794155 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[30,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[30,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.794708 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[4,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[4,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.795249 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[6,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[6,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.795817 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[7,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[7,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.796362 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[8,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 155],"bool"), list[8,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 155, 155].  Tensor sizes: [1, 1, 0, 155]
2025-03-05 15:22:39.796899 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[1,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[1,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.797426 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[10,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[10,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.797977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[2,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[2,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.798543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[3,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[3,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.799092 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[4,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[4,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.799619 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[6,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[6,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.800140 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[7,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[7,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.800675 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[8,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 156],"bool"), list[8,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 156, 156].  Tensor sizes: [1, 1, 0, 156]
2025-03-05 15:22:39.801206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,1,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,1,157,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.801735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,10,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,10,157,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.802262 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,100,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,100,157,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.802801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,101,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,101,157,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.803435 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,102,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,102,157,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.804320 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,103,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,103,157,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.804955 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,11,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,11,157,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.805506 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,12,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,12,157,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.806073 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,13,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,13,157,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.806616 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,14,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,14,157,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.807147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,15,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,15,157,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.807704 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.808227 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,16,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,16,157,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.808776 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,17,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,17,157,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.809306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,18,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,18,157,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.809858 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,19,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,19,157,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.810452 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,2,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,2,157,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.811006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,20,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,20,157,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.811538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,21,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,21,157,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.812071 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,22,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,22,157,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.812607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,23,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,23,157,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.813140 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,24,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,24,157,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.813673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,25,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,25,157,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.814201 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,26,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,26,157,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.814750 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,27,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,27,157,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.815282 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,28,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,28,157,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.815881 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,29,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,29,157,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.816432 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,3,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,3,157,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.816979 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,30,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,30,157,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.817544 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,31,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,31,157,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.818097 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,32,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,32,157,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.818645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,33,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,33,157,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.819177 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,34,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,34,157,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.819717 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,35,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,35,157,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.820239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,36,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,36,157,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.820793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,37,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,37,157,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.821332 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,38,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,38,157,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.821863 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,39,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,39,157,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.822386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,4,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,4,157,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.822918 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,40,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,40,157,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.823455 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,41,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,41,157,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.823993 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,42,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,42,157,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.824526 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,43,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,43,157,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.825108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,44,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,44,157,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.825653 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,45,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,45,157,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.826179 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,46,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,46,157,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.826720 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,47,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,47,157,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.827268 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,48,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,48,157,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.827809 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,49,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,49,157,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.828343 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,5,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,5,157,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.828875 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,50,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,50,157,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.829407 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,51,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,51,157,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.829942 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,52,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,52,157,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.830469 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,53,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,53,157,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.831035 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,54,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,54,157,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.831573 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,55,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,55,157,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.832132 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,56,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,56,157,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.832681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,57,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,57,157,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.833242 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,58,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,58,157,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.833777 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,59,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,59,157,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.834312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,6,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,6,157,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.834847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,60,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,60,157,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.835387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,61,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,61,157,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.835939 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,62,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,62,157,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.836479 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,63,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,63,157,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.837016 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,64,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,64,157,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.837673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,65,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,65,157,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.838540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,66,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,66,157,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.839221 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,67,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,67,157,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.839804 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,68,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,68,157,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.840366 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,69,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,69,157,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.840914 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,7,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,7,157,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.841440 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,70,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,70,157,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.841987 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,71,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,71,157,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.842524 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,72,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,72,157,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.843082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,73,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,73,157,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.843626 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,74,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,74,157,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.844166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,75,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,75,157,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.844928 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,76,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,76,157,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.845724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,77,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,77,157,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.846381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,78,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,78,157,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.847041 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,79,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,79,157,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.847713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,8,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,8,157,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.848378 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,80,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,80,157,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.848953 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,81,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,81,157,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.849508 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,82,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,82,157,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.850078 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,83,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,83,157,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.850621 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,84,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,84,157,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.851154 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,85,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,85,157,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.851693 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,86,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,86,157,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.852924 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,87,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,87,157,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.853768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,88,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,88,157,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.854429 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,89,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,89,157,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.855082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,9,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,9,157,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.856066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,90,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,90,157,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.856768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,91,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,91,157,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.857400 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,92,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,92,157,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.858164 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,93,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,93,157,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.858904 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,94,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,94,157,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.859462 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,95,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,95,157,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.860017 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,96,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,96,157,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.860549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,97,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,97,157,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.861099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,98,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,98,157,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.861642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,99,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[1,8,99,157,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.862193 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[10,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[10,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.862733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[2,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[2,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.863293 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[3,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[3,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.863928 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[4,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[4,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.864477 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[6,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[6,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.865019 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[7,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[7,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.865557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[8,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 157],"bool"), list[8,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 157, 157].  Tensor sizes: [1, 1, 0, 157]
2025-03-05 15:22:39.866093 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[1,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[1,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.866629 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[10,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[10,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.867161 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[2,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[2,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.867707 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[3,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[3,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.868242 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[30,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[30,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.868788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[4,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[4,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.869415 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[6,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[6,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.870021 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[7,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[7,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.870563 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[8,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 158],"bool"), list[8,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 158, 158].  Tensor sizes: [1, 1, 0, 158]
2025-03-05 15:22:39.871101 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[1,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[1,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.871632 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[10,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[10,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.872194 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[2,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[2,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.872719 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[3,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[3,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.873226 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[4,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[4,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.873770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[6,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[6,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.874684 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[7,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[7,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.875443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[8,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 159],"bool"), list[8,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 159, 159].  Tensor sizes: [1, 1, 0, 159]
2025-03-05 15:22:39.876027 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[1,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[1,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.876592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[10,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[10,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.877141 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[2,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[2,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.877694 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[3,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[3,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.878251 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[4,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[4,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.878793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[5,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[5,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.879322 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[6,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[6,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.879859 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[7,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[7,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.880381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[8,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[8,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.880994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[9,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 15],"bool"), list[9,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 15, 15].  Tensor sizes: [1, 1, 0, 15]
2025-03-05 15:22:39.881592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[1,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[1,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.882122 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[10,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[10,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.882676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[2,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[2,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.883214 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[3,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[3,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.883751 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[4,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[4,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.884272 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[6,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[6,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.884802 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[7,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[7,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.885338 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[8,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 160],"bool"), list[8,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 160, 160].  Tensor sizes: [1, 1, 0, 160]
2025-03-05 15:22:39.885896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[1,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[1,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.886428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[10,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[10,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.886957 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[2,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[2,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.887492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[3,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[3,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.888031 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[4,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[4,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.888553 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[6,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[6,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.889079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[7,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[7,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.889614 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[8,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 161],"bool"), list[8,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 161, 161].  Tensor sizes: [1, 1, 0, 161]
2025-03-05 15:22:39.890144 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[1,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[1,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.890677 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[10,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[10,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.891211 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[2,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[2,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.891765 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[3,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[3,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.892286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[30,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[30,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.892906 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[4,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[4,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.893938 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[6,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[6,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.894634 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[7,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[7,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.895198 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[8,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 162],"bool"), list[8,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 162, 162].  Tensor sizes: [1, 1, 0, 162]
2025-03-05 15:22:39.895748 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[1,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[1,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.896274 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[10,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[10,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.896800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[2,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[2,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.897324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[3,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[3,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.897849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[30,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[30,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.898418 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[4,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[4,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.898965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[6,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[6,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.899529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[7,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[7,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.900123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[8,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 163],"bool"), list[8,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 163, 163].  Tensor sizes: [1, 1, 0, 163]
2025-03-05 15:22:39.900671 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[1,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[1,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.901191 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[10,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[10,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.901716 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[2,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[2,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.902218 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[30,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[30,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.902743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[4,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[4,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.903262 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[6,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[6,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.903780 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[7,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[7,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.904296 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[8,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 164],"bool"), list[8,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 164, 164].  Tensor sizes: [1, 1, 0, 164]
2025-03-05 15:22:39.904814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[1,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[1,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.905333 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[10,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[10,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.905856 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[2,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[2,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.906697 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[30,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[30,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.907346 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[4,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[4,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.907983 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[6,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[6,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.908617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[7,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[7,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.909315 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[8,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 165],"bool"), list[8,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 165, 165].  Tensor sizes: [1, 1, 0, 165]
2025-03-05 15:22:39.910096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[1,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[1,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.910679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[10,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[10,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.911347 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[2,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[2,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.912159 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[4,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[4,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.912757 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[6,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[6,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.913367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[7,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[7,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.913927 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[8,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 166],"bool"), list[8,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 166, 166].  Tensor sizes: [1, 1, 0, 166]
2025-03-05 15:22:39.914490 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[1,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[1,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.915466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[10,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[10,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.916146 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[2,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[2,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.916812 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[4,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[4,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.917464 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[6,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[6,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.918488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[7,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[7,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.919206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[8,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 167],"bool"), list[8,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 167, 167].  Tensor sizes: [1, 1, 0, 167]
2025-03-05 15:22:39.919885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[1,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[1,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.920521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[10,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[10,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.921146 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[2,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[2,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.921849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[4,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[4,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.922478 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[6,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[6,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.923093 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[7,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[7,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.923720 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[8,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 168],"bool"), list[8,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 168, 168].  Tensor sizes: [1, 1, 0, 168]
2025-03-05 15:22:39.924340 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,1,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,1,169,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.925034 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,10,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,10,169,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.925681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,100,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,100,169,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.926350 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,101,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,101,169,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.926980 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,102,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,102,169,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.927608 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,103,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,103,169,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.928218 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,104,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,104,169,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.928849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,105,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,105,169,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.929456 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,106,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,106,169,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.930066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,107,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,107,169,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.930705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,108,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,108,169,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.931316 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,109,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,109,169,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.932003 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,11,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,11,169,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.932868 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,110,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,110,169,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.933564 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,111,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,111,169,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.934201 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,112,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,112,169,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.934842 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,113,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,113,169,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.935489 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,114,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,114,169,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.936133 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,115,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,115,169,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.936759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,116,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,116,169,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.937361 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,117,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,117,169,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.937965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,118,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,118,169,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.938574 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,119,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,119,169,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.939203 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,12,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,12,169,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.939823 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,120,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,120,169,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.940440 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,121,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,121,169,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.941058 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,122,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,122,169,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.941679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,123,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,123,169,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.942300 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,124,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,124,169,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.942921 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,125,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,125,169,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.943522 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,126,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,126,169,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.944131 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,127,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,127,169,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.944748 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,128,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,128,169,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.945356 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,129,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,129,169,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.945966 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,13,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,13,169,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.946575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,130,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,130,169,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.947232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,131,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,131,169,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.947847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,132,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,132,169,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.948446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,133,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,133,169,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.949079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,134,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,134,169,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.949785 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,135,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,135,169,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.950515 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,136,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,136,169,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.951159 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,137,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,137,169,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.951783 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,138,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,138,169,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.952398 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,139,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,139,169,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.953014 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,14,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,14,169,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.953630 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,140,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,140,169,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.954237 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,141,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,141,169,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.954894 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,142,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,142,169,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.955506 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,143,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,143,169,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.956148 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,144,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,144,169,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.956787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,145,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,145,169,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.957395 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,146,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,146,169,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.958037 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,147,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,147,169,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.958716 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,148,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,148,169,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.959392 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,149,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,149,169,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.960028 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,15,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,15,169,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.960939 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,150,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,150,169,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.961555 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,151,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,151,169,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.962152 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,152,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,152,169,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.962696 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,153,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,153,169,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.963219 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,154,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,154,169,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.963761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,155,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,155,169,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.964294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,156,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,156,169,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.964822 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,157,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,157,169,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.965345 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,158,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,158,169,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.965960 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,159,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,159,169,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 159, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.966498 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,16,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,16,169,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.967076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,160,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,160,169,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 160, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.967607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,161,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,161,169,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 161, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.968137 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,162,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,162,169,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 162, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.968681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,163,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,163,169,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 163, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.969356 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,164,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,164,169,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 164, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.969999 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,165,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,165,169,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 165, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.970741 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,166,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,166,169,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 166, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.971387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,167,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,167,169,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 167, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.972002 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,168,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,168,169,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 168, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.973465 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.974100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,17,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,17,169,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.974639 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,170,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,170,169,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 170, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.975156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,171,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,171,169,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 171, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.975689 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,172,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,172,169,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 172, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.976210 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,173,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,173,169,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 173, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.976739 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,174,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,174,169,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 174, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.977258 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,175,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,175,169,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 175, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.977795 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,176,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,176,169,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 176, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.978312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,177,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,177,169,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 177, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.978842 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,178,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,178,169,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 178, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.979358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,179,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,179,169,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 179, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.979938 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,18,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,18,169,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.980458 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,180,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,180,169,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 180, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.980986 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,181,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,181,169,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 181, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.981671 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,182,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,182,169,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 182, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.982297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,183,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,183,169,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 183, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.982914 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,184,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,184,169,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 184, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.983522 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,185,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,185,169,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 185, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.984158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,186,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,186,169,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 186, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.984779 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,187,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,187,169,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 187, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.985384 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,188,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,188,169,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 188, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.986317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,189,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,189,169,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 189, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.987002 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,19,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,19,169,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.987647 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,190,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,190,169,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 190, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.988321 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,191,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,191,169,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 191, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.988929 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,192,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,192,169,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 192, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.989883 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,193,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,193,169,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 193, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.990684 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,194,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,194,169,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 194, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.991473 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,195,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,195,169,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 195, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.992152 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,196,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,196,169,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 196, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.992872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,197,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,197,169,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 197, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.993494 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,198,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,198,169,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 198, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.994132 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,199,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,199,169,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 199, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.994767 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,2,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,2,169,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.995396 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,20,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,20,169,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.996020 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,200,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,200,169,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 200, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.996644 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,201,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,201,169,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 201, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.997273 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,202,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,202,169,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 202, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.997885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,203,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,203,169,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 203, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.998498 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,204,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,204,169,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 204, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.999118 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,205,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,205,169,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 205, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:39.999756 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,206,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,206,169,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 206, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.000372 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,207,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,207,169,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 207, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.001202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,208,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,208,169,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 208, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.001867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,209,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,209,169,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 209, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.002607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,21,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,21,169,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.003232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,210,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,210,169,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 210, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.003884 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,211,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,211,169,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 211, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.004533 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,212,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,212,169,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 212, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.005305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,213,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,213,169,], ) 
 The expanded size of the tensor (213) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 213, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.005961 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,214,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,214,169,], ) 
 The expanded size of the tensor (214) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 214, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.006592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,215,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,215,169,], ) 
 The expanded size of the tensor (215) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 215, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.007221 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,216,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,216,169,], ) 
 The expanded size of the tensor (216) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 216, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.007849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,217,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,217,169,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 217, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.008456 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,218,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,218,169,], ) 
 The expanded size of the tensor (218) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 218, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.009077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,219,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,219,169,], ) 
 The expanded size of the tensor (219) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 219, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.009700 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,22,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,22,169,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.010340 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,220,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,220,169,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 220, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.011030 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,221,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,221,169,], ) 
 The expanded size of the tensor (221) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 221, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.011721 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,222,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,222,169,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 222, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.012377 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,223,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,223,169,], ) 
 The expanded size of the tensor (223) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 223, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.013009 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,224,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,224,169,], ) 
 The expanded size of the tensor (224) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 224, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.017565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,225,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,225,169,], ) 
 The expanded size of the tensor (225) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 225, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.019059 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,226,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,226,169,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 226, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.019705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,227,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,227,169,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 227, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.020316 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,228,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,228,169,], ) 
 The expanded size of the tensor (228) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 228, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.020932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,229,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,229,169,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 229, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.021535 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,23,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,23,169,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.022145 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,230,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,230,169,], ) 
 The expanded size of the tensor (230) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 230, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.022756 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,231,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,231,169,], ) 
 The expanded size of the tensor (231) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 231, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.023803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,232,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,232,169,], ) 
 The expanded size of the tensor (232) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 232, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.024431 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,233,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,233,169,], ) 
 The expanded size of the tensor (233) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 233, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.025069 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,234,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,234,169,], ) 
 The expanded size of the tensor (234) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 234, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.025765 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,235,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,235,169,], ) 
 The expanded size of the tensor (235) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 235, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.026384 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,236,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,236,169,], ) 
 The expanded size of the tensor (236) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 236, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.027000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,237,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,237,169,], ) 
 The expanded size of the tensor (237) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 237, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.027618 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,238,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,238,169,], ) 
 The expanded size of the tensor (238) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 238, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.028216 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,239,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,239,169,], ) 
 The expanded size of the tensor (239) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 239, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.028847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,24,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,24,169,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.029451 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,240,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,240,169,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 240, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.030063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,241,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,241,169,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 241, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.030678 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,242,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,242,169,], ) 
 The expanded size of the tensor (242) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 242, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.031291 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,243,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,243,169,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 243, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.031976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,244,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,244,169,], ) 
 The expanded size of the tensor (244) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 244, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.032687 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,245,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,245,169,], ) 
 The expanded size of the tensor (245) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 245, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.033325 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,246,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,246,169,], ) 
 The expanded size of the tensor (246) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 246, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.033969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,247,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,247,169,], ) 
 The expanded size of the tensor (247) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 247, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.034577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,248,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,248,169,], ) 
 The expanded size of the tensor (248) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 248, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.035190 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,249,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,249,169,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 249, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.035813 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,25,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,25,169,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.037076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,250,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,250,169,], ) 
 The expanded size of the tensor (250) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 250, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.037804 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,26,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,26,169,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.044063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,27,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,27,169,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.045494 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,28,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,28,169,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.046250 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,29,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,29,169,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.046901 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,3,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,3,169,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.047545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,30,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,30,169,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.048202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,31,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,31,169,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.048912 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,32,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,32,169,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.049527 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,33,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,33,169,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.050151 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,34,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,34,169,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.052179 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,35,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,35,169,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.052874 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,36,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,36,169,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.053541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,37,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,37,169,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.054183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,38,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,38,169,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.054801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,39,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,39,169,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.055409 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,4,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,4,169,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.056007 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,40,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,40,169,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.056636 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,41,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,41,169,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.057260 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,42,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,42,169,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.057919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,43,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,43,169,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.058540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,44,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,44,169,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.059276 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,45,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,45,169,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.059969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,46,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,46,169,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.060510 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,47,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,47,169,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.061058 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,48,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,48,169,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.061607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,49,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,49,169,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.062139 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,5,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,5,169,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.062679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,50,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,50,169,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.063287 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,51,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,51,169,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.063895 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,52,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,52,169,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.064617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,53,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,53,169,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.065275 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,54,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,54,169,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.065923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,55,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,55,169,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.066544 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,56,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,56,169,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.067173 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,57,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,57,169,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.067795 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,58,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,58,169,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.068520 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,59,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,59,169,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.069191 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,6,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,6,169,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.069764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,60,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,60,169,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.070580 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,61,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,61,169,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.071292 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,62,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,62,169,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.071940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,63,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,63,169,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.072577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,64,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,64,169,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.073218 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,65,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,65,169,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.073869 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,66,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,66,169,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.074500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,67,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,67,169,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.075664 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,68,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,68,169,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.076347 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,69,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,69,169,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.076981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,7,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,7,169,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.077814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,70,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,70,169,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.078512 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,71,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,71,169,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.079403 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,72,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,72,169,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.080300 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,73,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,73,169,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.081097 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,74,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,74,169,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.081936 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,75,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,75,169,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.083029 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,76,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,76,169,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.083835 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,77,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,77,169,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.084492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,78,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,78,169,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.085055 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,79,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,79,169,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.085588 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,8,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,8,169,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.086168 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,80,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,80,169,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.086923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,81,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,81,169,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.087635 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,82,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,82,169,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.088282 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,83,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,83,169,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.088824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,84,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,84,169,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.089357 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,85,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,85,169,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.089919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,86,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,86,169,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.090450 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,87,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,87,169,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.090991 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,88,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,88,169,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.091518 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,89,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,89,169,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.092043 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,9,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,9,169,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.092557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,90,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,90,169,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.093084 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,91,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,91,169,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.093598 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,92,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,92,169,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.094118 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,93,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,93,169,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.094637 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,94,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,94,169,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.095145 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,95,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,95,169,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.095670 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,96,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,96,169,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.096195 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,97,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,97,169,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.096715 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,98,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,98,169,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.097278 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,99,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[1,8,99,169,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.097817 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[10,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[10,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.098337 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[2,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[2,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.098858 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[30,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[30,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.099372 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[4,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[4,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.099909 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[6,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[6,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.100421 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[7,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[7,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.100951 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[8,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 169],"bool"), list[8,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 169, 169].  Tensor sizes: [1, 1, 0, 169]
2025-03-05 15:22:40.101468 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[1,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[1,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.101997 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[10,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[10,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.102508 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[2,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[2,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.103020 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[3,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[3,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.103524 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[4,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[4,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.104051 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[5,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[5,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.104575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[6,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[6,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.105149 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[7,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[7,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.105713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[8,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[8,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.106245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[9,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 16],"bool"), list[9,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 16, 16].  Tensor sizes: [1, 1, 0, 16]
2025-03-05 15:22:40.106843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[1,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[1,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.107735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[10,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[10,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.108381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[2,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[2,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.109000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[30,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[30,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.109630 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[4,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[4,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.110233 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[6,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[6,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.110801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[7,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[7,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.111310 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[8,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 170],"bool"), list[8,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 170, 170].  Tensor sizes: [1, 1, 0, 170]
2025-03-05 15:22:40.111854 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[1,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[1,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.112361 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[10,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[10,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.112886 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[2,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[2,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.113428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[30,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[30,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.113976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[4,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[4,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.114483 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[6,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[6,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.115010 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[7,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[7,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.115548 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[8,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 171],"bool"), list[8,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 171, 171].  Tensor sizes: [1, 1, 0, 171]
2025-03-05 15:22:40.116082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[1,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[1,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.116590 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[10,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[10,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.117108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[2,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[2,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.117616 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[30,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[30,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.118129 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[4,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[4,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.118646 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[6,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[6,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.119153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[7,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[7,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.119713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[8,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 172],"bool"), list[8,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 172, 172].  Tensor sizes: [1, 1, 0, 172]
2025-03-05 15:22:40.120454 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[1,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[1,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.121087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[10,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[10,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.121712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[2,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[2,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.122326 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[30,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[30,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.122943 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[4,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[4,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.123542 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[6,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[6,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.124191 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[7,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[7,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.124872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[8,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 173],"bool"), list[8,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 173, 173].  Tensor sizes: [1, 1, 0, 173]
2025-03-05 15:22:40.125495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[1,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[1,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.126111 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[10,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[10,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.126718 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[2,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[2,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.127316 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[4,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[4,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.127908 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[6,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[6,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.128525 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[7,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[7,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.129129 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[8,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 174],"bool"), list[8,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 174, 174].  Tensor sizes: [1, 1, 0, 174]
2025-03-05 15:22:40.129733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[1,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[1,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.130324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[10,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[10,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.131411 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[2,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[2,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.132079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[30,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[30,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.132768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[4,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[4,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.133379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[6,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[6,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.133981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[7,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[7,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.134616 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[8,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 175],"bool"), list[8,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 175, 175].  Tensor sizes: [1, 1, 0, 175]
2025-03-05 15:22:40.135308 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[1,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[1,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.135978 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[10,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[10,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.136578 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[2,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[2,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.137187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[30,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[30,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.137784 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[4,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[4,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.138369 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[6,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[6,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.138976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[7,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[7,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.139592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[8,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 176],"bool"), list[8,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 176, 176].  Tensor sizes: [1, 1, 0, 176]
2025-03-05 15:22:40.140250 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[1,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[1,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.140850 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[10,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[10,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.141442 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[2,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[2,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.142044 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[4,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[4,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.142691 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[6,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[6,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.143302 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[7,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[7,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.143903 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[8,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 177],"bool"), list[8,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 177, 177].  Tensor sizes: [1, 1, 0, 177]
2025-03-05 15:22:40.144496 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[1,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[1,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.145095 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[10,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[10,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.145692 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[2,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[2,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.146294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[4,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[4,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.146914 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[6,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[6,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.147510 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[7,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[7,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.148113 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[8,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 178],"bool"), list[8,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 178, 178].  Tensor sizes: [1, 1, 0, 178]
2025-03-05 15:22:40.148720 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[1,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[1,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.149317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[10,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[10,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.149950 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[2,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[2,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.150547 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[4,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[4,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.151155 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[6,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[6,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.151804 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[7,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[7,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.152415 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[8,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 179],"bool"), list[8,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 179, 179].  Tensor sizes: [1, 1, 0, 179]
2025-03-05 15:22:40.152955 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[1,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[1,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.153495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[10,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[10,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.154036 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[2,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[2,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.154558 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[3,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[3,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.155098 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[30,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[30,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.155643 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[4,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[4,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.156172 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[5,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[5,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.156699 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[6,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[6,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.157214 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[7,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[7,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.157726 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[8,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[8,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.158228 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[9,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 17],"bool"), list[9,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 17, 17].  Tensor sizes: [1, 1, 0, 17]
2025-03-05 15:22:40.158781 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[1,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[1,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.159505 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[10,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[10,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.160147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[2,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[2,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.160768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[4,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[4,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.161381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[6,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[6,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.162048 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[7,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[7,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.162683 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[8,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 180],"bool"), list[8,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 180, 180].  Tensor sizes: [1, 1, 0, 180]
2025-03-05 15:22:40.163285 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[1,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[1,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 181, 181].  Tensor sizes: [1, 1, 0, 181]
2025-03-05 15:22:40.163895 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[10,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[10,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 181, 181].  Tensor sizes: [1, 1, 0, 181]
2025-03-05 15:22:40.164491 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[2,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[2,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 181, 181].  Tensor sizes: [1, 1, 0, 181]
2025-03-05 15:22:40.165099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[30,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[30,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 181, 181].  Tensor sizes: [1, 1, 0, 181]
2025-03-05 15:22:40.165705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[6,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[6,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 181, 181].  Tensor sizes: [1, 1, 0, 181]
2025-03-05 15:22:40.166354 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[8,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 181],"bool"), list[8,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 181, 181].  Tensor sizes: [1, 1, 0, 181]
2025-03-05 15:22:40.166981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[1,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[1,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 182, 182].  Tensor sizes: [1, 1, 0, 182]
2025-03-05 15:22:40.167596 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[10,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[10,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 182, 182].  Tensor sizes: [1, 1, 0, 182]
2025-03-05 15:22:40.168204 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[2,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[2,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 182, 182].  Tensor sizes: [1, 1, 0, 182]
2025-03-05 15:22:40.168804 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[6,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[6,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 182, 182].  Tensor sizes: [1, 1, 0, 182]
2025-03-05 15:22:40.169901 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[8,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 182],"bool"), list[8,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 182, 182].  Tensor sizes: [1, 1, 0, 182]
2025-03-05 15:22:40.170540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[1,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[1,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 183, 183].  Tensor sizes: [1, 1, 0, 183]
2025-03-05 15:22:40.171179 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[10,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[10,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 183, 183].  Tensor sizes: [1, 1, 0, 183]
2025-03-05 15:22:40.171788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[2,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[2,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 183, 183].  Tensor sizes: [1, 1, 0, 183]
2025-03-05 15:22:40.172386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[30,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[30,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 183, 183].  Tensor sizes: [1, 1, 0, 183]
2025-03-05 15:22:40.173040 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[6,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[6,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 183, 183].  Tensor sizes: [1, 1, 0, 183]
2025-03-05 15:22:40.173720 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[8,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 183],"bool"), list[8,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 183, 183].  Tensor sizes: [1, 1, 0, 183]
2025-03-05 15:22:40.174328 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[1,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[1,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 184, 184].  Tensor sizes: [1, 1, 0, 184]
2025-03-05 15:22:40.174943 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[10,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[10,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 184, 184].  Tensor sizes: [1, 1, 0, 184]
2025-03-05 15:22:40.175589 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[2,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[2,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 184, 184].  Tensor sizes: [1, 1, 0, 184]
2025-03-05 15:22:40.180193 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[6,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[6,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 184, 184].  Tensor sizes: [1, 1, 0, 184]
2025-03-05 15:22:40.181479 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[8,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 184],"bool"), list[8,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 184, 184].  Tensor sizes: [1, 1, 0, 184]
2025-03-05 15:22:40.182135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[1,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[1,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 185, 185].  Tensor sizes: [1, 1, 0, 185]
2025-03-05 15:22:40.182867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[10,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[10,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 185, 185].  Tensor sizes: [1, 1, 0, 185]
2025-03-05 15:22:40.183534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[2,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[2,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 185, 185].  Tensor sizes: [1, 1, 0, 185]
2025-03-05 15:22:40.184093 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[6,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[6,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 185, 185].  Tensor sizes: [1, 1, 0, 185]
2025-03-05 15:22:40.184643 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[8,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 185],"bool"), list[8,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 185, 185].  Tensor sizes: [1, 1, 0, 185]
2025-03-05 15:22:40.185174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 186],"bool"), list[1,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 186],"bool"), list[1,8,186,186,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 186, 186].  Tensor sizes: [1, 1, 0, 186]
2025-03-05 15:22:40.185728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 186],"bool"), list[2,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 186],"bool"), list[2,8,186,186,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 186, 186].  Tensor sizes: [1, 1, 0, 186]
2025-03-05 15:22:40.186261 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 186],"bool"), list[8,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 186],"bool"), list[8,8,186,186,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 186, 186].  Tensor sizes: [1, 1, 0, 186]
2025-03-05 15:22:40.186842 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[1,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[1,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 187, 187].  Tensor sizes: [1, 1, 0, 187]
2025-03-05 15:22:40.187383 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[2,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[2,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 187, 187].  Tensor sizes: [1, 1, 0, 187]
2025-03-05 15:22:40.187928 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[30,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[30,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 187, 187].  Tensor sizes: [1, 1, 0, 187]
2025-03-05 15:22:40.188459 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[8,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 187],"bool"), list[8,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 187, 187].  Tensor sizes: [1, 1, 0, 187]
2025-03-05 15:22:40.188984 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 188],"bool"), list[1,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 188],"bool"), list[1,8,188,188,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 188, 188].  Tensor sizes: [1, 1, 0, 188]
2025-03-05 15:22:40.189505 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 188],"bool"), list[2,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 188],"bool"), list[2,8,188,188,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 188, 188].  Tensor sizes: [1, 1, 0, 188]
2025-03-05 15:22:40.190031 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 188],"bool"), list[8,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 188],"bool"), list[8,8,188,188,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 188, 188].  Tensor sizes: [1, 1, 0, 188]
2025-03-05 15:22:40.190554 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[1,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[1,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 189, 189].  Tensor sizes: [1, 1, 0, 189]
2025-03-05 15:22:40.191079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[2,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[2,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 189, 189].  Tensor sizes: [1, 1, 0, 189]
2025-03-05 15:22:40.191620 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[30,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[30,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 189, 189].  Tensor sizes: [1, 1, 0, 189]
2025-03-05 15:22:40.192144 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[8,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 189],"bool"), list[8,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 189, 189].  Tensor sizes: [1, 1, 0, 189]
2025-03-05 15:22:40.192682 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[1,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[1,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.193214 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[10,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[10,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.193757 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[2,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[2,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.194282 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[3,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[3,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.194814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[4,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[4,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.195486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[5,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[5,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.196152 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[6,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[6,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.196816 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[7,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[7,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.197505 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[8,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[8,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.198196 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[9,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 18],"bool"), list[9,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 18, 18].  Tensor sizes: [1, 1, 0, 18]
2025-03-05 15:22:40.198931 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[1,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[1,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 190, 190].  Tensor sizes: [1, 1, 0, 190]
2025-03-05 15:22:40.199607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[2,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[2,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 190, 190].  Tensor sizes: [1, 1, 0, 190]
2025-03-05 15:22:40.200254 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[30,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[30,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 190, 190].  Tensor sizes: [1, 1, 0, 190]
2025-03-05 15:22:40.201105 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[8,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 190],"bool"), list[8,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 190, 190].  Tensor sizes: [1, 1, 0, 190]
2025-03-05 15:22:40.201744 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[1,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[1,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 191, 191].  Tensor sizes: [1, 1, 0, 191]
2025-03-05 15:22:40.202358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[2,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[2,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 191, 191].  Tensor sizes: [1, 1, 0, 191]
2025-03-05 15:22:40.202978 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[30,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[30,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 191, 191].  Tensor sizes: [1, 1, 0, 191]
2025-03-05 15:22:40.203605 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[8,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 191],"bool"), list[8,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 191, 191].  Tensor sizes: [1, 1, 0, 191]
2025-03-05 15:22:40.204206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[1,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[1,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 192, 192].  Tensor sizes: [1, 1, 0, 192]
2025-03-05 15:22:40.204815 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[2,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[2,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 192, 192].  Tensor sizes: [1, 1, 0, 192]
2025-03-05 15:22:40.205415 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[30,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[30,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 192, 192].  Tensor sizes: [1, 1, 0, 192]
2025-03-05 15:22:40.206044 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[8,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 192],"bool"), list[8,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 192, 192].  Tensor sizes: [1, 1, 0, 192]
2025-03-05 15:22:40.206679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[1,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[1,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 193, 193].  Tensor sizes: [1, 1, 0, 193]
2025-03-05 15:22:40.207271 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[2,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[2,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 193, 193].  Tensor sizes: [1, 1, 0, 193]
2025-03-05 15:22:40.207867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[30,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[30,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 193, 193].  Tensor sizes: [1, 1, 0, 193]
2025-03-05 15:22:40.208455 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[8,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 193],"bool"), list[8,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 193, 193].  Tensor sizes: [1, 1, 0, 193]
2025-03-05 15:22:40.209050 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[1,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[1,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 194, 194].  Tensor sizes: [1, 1, 0, 194]
2025-03-05 15:22:40.209656 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[2,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[2,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 194, 194].  Tensor sizes: [1, 1, 0, 194]
2025-03-05 15:22:40.210253 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[30,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[30,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 194, 194].  Tensor sizes: [1, 1, 0, 194]
2025-03-05 15:22:40.210861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[8,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 194],"bool"), list[8,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 194, 194].  Tensor sizes: [1, 1, 0, 194]
2025-03-05 15:22:40.211450 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 195],"bool"), list[1,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 195],"bool"), list[1,8,195,195,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 195, 195].  Tensor sizes: [1, 1, 0, 195]
2025-03-05 15:22:40.212054 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 195],"bool"), list[2,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 195],"bool"), list[2,8,195,195,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 195, 195].  Tensor sizes: [1, 1, 0, 195]
2025-03-05 15:22:40.212664 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 195],"bool"), list[8,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 195],"bool"), list[8,8,195,195,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 195, 195].  Tensor sizes: [1, 1, 0, 195]
2025-03-05 15:22:40.213258 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 196],"bool"), list[1,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 196],"bool"), list[1,8,196,196,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 196, 196].  Tensor sizes: [1, 1, 0, 196]
2025-03-05 15:22:40.213853 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 196],"bool"), list[2,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 196],"bool"), list[2,8,196,196,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 196, 196].  Tensor sizes: [1, 1, 0, 196]
2025-03-05 15:22:40.214443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 196],"bool"), list[8,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 196],"bool"), list[8,8,196,196,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 196, 196].  Tensor sizes: [1, 1, 0, 196]
2025-03-05 15:22:40.215042 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[1,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[1,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 197, 197].  Tensor sizes: [1, 1, 0, 197]
2025-03-05 15:22:40.215648 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[2,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[2,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 197, 197].  Tensor sizes: [1, 1, 0, 197]
2025-03-05 15:22:40.216299 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[30,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[30,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 197, 197].  Tensor sizes: [1, 1, 0, 197]
2025-03-05 15:22:40.217055 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[8,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 197],"bool"), list[8,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 197, 197].  Tensor sizes: [1, 1, 0, 197]
2025-03-05 15:22:40.217687 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[1,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[1,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 198, 198].  Tensor sizes: [1, 1, 0, 198]
2025-03-05 15:22:40.218293 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[2,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[2,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 198, 198].  Tensor sizes: [1, 1, 0, 198]
2025-03-05 15:22:40.218897 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[30,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[30,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 198, 198].  Tensor sizes: [1, 1, 0, 198]
2025-03-05 15:22:40.219507 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[8,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 198],"bool"), list[8,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 198, 198].  Tensor sizes: [1, 1, 0, 198]
2025-03-05 15:22:40.220159 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 199],"bool"), list[1,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 199],"bool"), list[1,8,199,199,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 199, 199].  Tensor sizes: [1, 1, 0, 199]
2025-03-05 15:22:40.220782 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 199],"bool"), list[2,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 199],"bool"), list[2,8,199,199,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 199, 199].  Tensor sizes: [1, 1, 0, 199]
2025-03-05 15:22:40.221490 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 199],"bool"), list[8,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 199],"bool"), list[8,8,199,199,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 199, 199].  Tensor sizes: [1, 1, 0, 199]
2025-03-05 15:22:40.222204 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[1,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[1,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.222836 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[10,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[10,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.223409 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[2,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[2,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.223960 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[3,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[3,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.224487 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[30,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[30,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.225015 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[4,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[4,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.225531 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[5,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[5,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.226074 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[6,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[6,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.226603 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[7,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[7,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.227128 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[8,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[8,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.227658 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[9,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 19],"bool"), list[9,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 19, 19].  Tensor sizes: [1, 1, 0, 19]
2025-03-05 15:22:40.228184 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[1,4,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[1,4,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 4, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.228720 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[1,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[1,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.229235 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[10,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[10,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.229764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[2,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[2,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.230287 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[3,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[3,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.230808 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[4,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[4,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.231324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[5,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[5,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.231885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[6,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[6,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.232418 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[7,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[7,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.232949 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[8,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[8,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.233461 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[9,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"bool"), list[9,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 1, 1].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.233982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"int32"), tuple(10,10,1,10,), )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"int32"), tuple(10,10,1,10,), ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 10, 1, 10].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.234868 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 1],"int64"), tuple(1,4,4,2,), )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 1],"int64"), tuple(1,4,4,2,), ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 4, 4, 2].  Tensor sizes: [1, 1, 0, 1]
2025-03-05 15:22:40.235563 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[1,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[1,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 200, 200].  Tensor sizes: [1, 1, 0, 200]
2025-03-05 15:22:40.236250 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[2,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[2,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 200, 200].  Tensor sizes: [1, 1, 0, 200]
2025-03-05 15:22:40.236923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[30,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[30,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 200, 200].  Tensor sizes: [1, 1, 0, 200]
2025-03-05 15:22:40.237601 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[8,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 200],"bool"), list[8,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 200, 200].  Tensor sizes: [1, 1, 0, 200]
2025-03-05 15:22:40.238223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 201],"bool"), list[1,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 201],"bool"), list[1,8,201,201,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 201, 201].  Tensor sizes: [1, 1, 0, 201]
2025-03-05 15:22:40.238838 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 201],"bool"), list[2,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 201],"bool"), list[2,8,201,201,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 201, 201].  Tensor sizes: [1, 1, 0, 201]
2025-03-05 15:22:40.239457 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 201],"bool"), list[8,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 201],"bool"), list[8,8,201,201,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 201, 201].  Tensor sizes: [1, 1, 0, 201]
2025-03-05 15:22:40.240068 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 202],"bool"), list[1,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 202],"bool"), list[1,8,202,202,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 202, 202].  Tensor sizes: [1, 1, 0, 202]
2025-03-05 15:22:40.240688 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 202],"bool"), list[2,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 202],"bool"), list[2,8,202,202,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 202, 202].  Tensor sizes: [1, 1, 0, 202]
2025-03-05 15:22:40.241338 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 202],"bool"), list[8,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 202],"bool"), list[8,8,202,202,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 202, 202].  Tensor sizes: [1, 1, 0, 202]
2025-03-05 15:22:40.241968 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[1,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[1,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 203, 203].  Tensor sizes: [1, 1, 0, 203]
2025-03-05 15:22:40.242565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[2,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[2,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 203, 203].  Tensor sizes: [1, 1, 0, 203]
2025-03-05 15:22:40.243185 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[30,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[30,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 203, 203].  Tensor sizes: [1, 1, 0, 203]
2025-03-05 15:22:40.243879 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[8,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 203],"bool"), list[8,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 203, 203].  Tensor sizes: [1, 1, 0, 203]
2025-03-05 15:22:40.244473 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 204],"bool"), list[1,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 204],"bool"), list[1,8,204,204,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 204, 204].  Tensor sizes: [1, 1, 0, 204]
2025-03-05 15:22:40.245085 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 204],"bool"), list[2,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 204],"bool"), list[2,8,204,204,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 204, 204].  Tensor sizes: [1, 1, 0, 204]
2025-03-05 15:22:40.245711 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 204],"bool"), list[8,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 204],"bool"), list[8,8,204,204,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 204, 204].  Tensor sizes: [1, 1, 0, 204]
2025-03-05 15:22:40.246305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 205],"bool"), list[1,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 205],"bool"), list[1,8,205,205,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 205, 205].  Tensor sizes: [1, 1, 0, 205]
2025-03-05 15:22:40.246925 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 205],"bool"), list[2,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 205],"bool"), list[2,8,205,205,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 205, 205].  Tensor sizes: [1, 1, 0, 205]
2025-03-05 15:22:40.247514 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 205],"bool"), list[8,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 205],"bool"), list[8,8,205,205,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 205, 205].  Tensor sizes: [1, 1, 0, 205]
2025-03-05 15:22:40.248124 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 206],"bool"), list[1,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 206],"bool"), list[1,8,206,206,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 206, 206].  Tensor sizes: [1, 1, 0, 206]
2025-03-05 15:22:40.248735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 206],"bool"), list[2,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 206],"bool"), list[2,8,206,206,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 206, 206].  Tensor sizes: [1, 1, 0, 206]
2025-03-05 15:22:40.249334 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 206],"bool"), list[8,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 206],"bool"), list[8,8,206,206,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 206, 206].  Tensor sizes: [1, 1, 0, 206]
2025-03-05 15:22:40.249943 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[1,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[1,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 207, 207].  Tensor sizes: [1, 1, 0, 207]
2025-03-05 15:22:40.250534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[2,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[2,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 207, 207].  Tensor sizes: [1, 1, 0, 207]
2025-03-05 15:22:40.251134 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[30,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[30,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 207, 207].  Tensor sizes: [1, 1, 0, 207]
2025-03-05 15:22:40.251745 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[8,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 207],"bool"), list[8,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 207, 207].  Tensor sizes: [1, 1, 0, 207]
2025-03-05 15:22:40.252340 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 208],"bool"), list[1,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 208],"bool"), list[1,8,208,208,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 208, 208].  Tensor sizes: [1, 1, 0, 208]
2025-03-05 15:22:40.252937 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 208],"bool"), list[2,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 208],"bool"), list[2,8,208,208,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 208, 208].  Tensor sizes: [1, 1, 0, 208]
2025-03-05 15:22:40.253546 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 208],"bool"), list[8,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 208],"bool"), list[8,8,208,208,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 208, 208].  Tensor sizes: [1, 1, 0, 208]
2025-03-05 15:22:40.254153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[1,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[1,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 209, 209].  Tensor sizes: [1, 1, 0, 209]
2025-03-05 15:22:40.254748 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[2,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[2,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 209, 209].  Tensor sizes: [1, 1, 0, 209]
2025-03-05 15:22:40.255344 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[30,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[30,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 209, 209].  Tensor sizes: [1, 1, 0, 209]
2025-03-05 15:22:40.255946 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[8,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 209],"bool"), list[8,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 209, 209].  Tensor sizes: [1, 1, 0, 209]
2025-03-05 15:22:40.256532 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[1,4,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[1,4,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 4, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.257237 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[1,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[1,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.257897 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[10,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[10,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.258460 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[2,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[2,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.259004 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[3,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[3,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.261673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[30,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[30,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.262260 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[4,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[4,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.262806 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[5,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[5,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.263339 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[6,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[6,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.263872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[7,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[7,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.264396 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[8,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[8,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.264933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[9,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 20],"bool"), list[9,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 20, 20].  Tensor sizes: [1, 1, 0, 20]
2025-03-05 15:22:40.265600 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 210],"bool"), list[1,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 210],"bool"), list[1,8,210,210,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 210, 210].  Tensor sizes: [1, 1, 0, 210]
2025-03-05 15:22:40.266292 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 210],"bool"), list[30,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 210],"bool"), list[30,8,210,210,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 210, 210].  Tensor sizes: [1, 1, 0, 210]
2025-03-05 15:22:40.266928 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 210],"bool"), list[8,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 210],"bool"), list[8,8,210,210,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 210, 210].  Tensor sizes: [1, 1, 0, 210]
2025-03-05 15:22:40.267539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 211],"bool"), list[1,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 211],"bool"), list[1,8,211,211,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 211, 211].  Tensor sizes: [1, 1, 0, 211]
2025-03-05 15:22:40.268157 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 211],"bool"), list[30,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 211],"bool"), list[30,8,211,211,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 211, 211].  Tensor sizes: [1, 1, 0, 211]
2025-03-05 15:22:40.268773 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 211],"bool"), list[8,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 211],"bool"), list[8,8,211,211,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 211, 211].  Tensor sizes: [1, 1, 0, 211]
2025-03-05 15:22:40.269379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 212],"bool"), list[1,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 212],"bool"), list[1,8,212,212,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 212, 212].  Tensor sizes: [1, 1, 0, 212]
2025-03-05 15:22:40.269977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 212],"bool"), list[30,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 212],"bool"), list[30,8,212,212,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 212, 212].  Tensor sizes: [1, 1, 0, 212]
2025-03-05 15:22:40.270572 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 212],"bool"), list[8,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 212],"bool"), list[8,8,212,212,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 212, 212].  Tensor sizes: [1, 1, 0, 212]
2025-03-05 15:22:40.271174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 213],"bool"), list[1,8,213,213,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 213],"bool"), list[1,8,213,213,], ) 
 The expanded size of the tensor (213) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 213, 213].  Tensor sizes: [1, 1, 0, 213]
2025-03-05 15:22:40.271803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 213],"bool"), list[8,8,213,213,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 213],"bool"), list[8,8,213,213,], ) 
 The expanded size of the tensor (213) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 213, 213].  Tensor sizes: [1, 1, 0, 213]
2025-03-05 15:22:40.272405 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 214],"bool"), list[1,8,214,214,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 214],"bool"), list[1,8,214,214,], ) 
 The expanded size of the tensor (214) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 214, 214].  Tensor sizes: [1, 1, 0, 214]
2025-03-05 15:22:40.273090 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 214],"bool"), list[8,8,214,214,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 214],"bool"), list[8,8,214,214,], ) 
 The expanded size of the tensor (214) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 214, 214].  Tensor sizes: [1, 1, 0, 214]
2025-03-05 15:22:40.273744 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 215],"bool"), list[1,8,215,215,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 215],"bool"), list[1,8,215,215,], ) 
 The expanded size of the tensor (215) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 215, 215].  Tensor sizes: [1, 1, 0, 215]
2025-03-05 15:22:40.274297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 215],"bool"), list[8,8,215,215,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 215],"bool"), list[8,8,215,215,], ) 
 The expanded size of the tensor (215) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 215, 215].  Tensor sizes: [1, 1, 0, 215]
2025-03-05 15:22:40.274837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 216],"bool"), list[1,8,216,216,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 216],"bool"), list[1,8,216,216,], ) 
 The expanded size of the tensor (216) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 216, 216].  Tensor sizes: [1, 1, 0, 216]
2025-03-05 15:22:40.275376 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 216],"bool"), list[8,8,216,216,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 216],"bool"), list[8,8,216,216,], ) 
 The expanded size of the tensor (216) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 216, 216].  Tensor sizes: [1, 1, 0, 216]
2025-03-05 15:22:40.275930 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,1,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,1,217,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.276492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,10,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,10,217,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.277025 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,100,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,100,217,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.277548 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,101,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,101,217,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.278129 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,102,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,102,217,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.278826 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,103,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,103,217,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.279434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,104,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,104,217,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.280042 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,105,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,105,217,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.280645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,106,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,106,217,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.281233 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,107,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,107,217,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.281825 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,108,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,108,217,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.282434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,109,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,109,217,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.283568 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,11,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,11,217,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.284304 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,110,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,110,217,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.284875 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,111,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,111,217,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.285492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,112,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,112,217,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.286048 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,113,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,113,217,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.286622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,114,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,114,217,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.287158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,115,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,115,217,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.287696 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,116,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,116,217,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.288214 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,12,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,12,217,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.288745 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,13,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,13,217,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.289276 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,14,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,14,217,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.289867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,15,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,15,217,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.290414 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,16,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,16,217,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.290936 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,17,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,17,217,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.291447 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,18,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,18,217,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.291970 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,19,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,19,217,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.292485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,2,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,2,217,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.293029 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,20,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,20,217,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.293560 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,21,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,21,217,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.294108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,217,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,217,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 217, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.294641 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,22,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,22,217,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.295179 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,23,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,23,217,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.295713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,24,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,24,217,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.296285 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,25,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,25,217,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.297131 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,26,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,26,217,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.297801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,27,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,27,217,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.298363 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,28,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,28,217,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.298921 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,29,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,29,217,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.299464 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,3,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,3,217,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.300208 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,30,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,30,217,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.300857 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,31,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,31,217,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.301493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,32,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,32,217,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.302119 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,33,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,33,217,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.302749 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,34,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,34,217,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.303353 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,35,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,35,217,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.303957 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,36,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,36,217,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.304649 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,37,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,37,217,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.305269 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,38,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,38,217,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.305922 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,39,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,39,217,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.306611 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,4,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,4,217,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.307177 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,40,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,40,217,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.307739 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,41,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,41,217,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.308266 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,42,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,42,217,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.308811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,43,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,43,217,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.309382 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,44,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,44,217,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.310205 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,45,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,45,217,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.310862 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,46,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,46,217,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.311622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,47,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,47,217,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.312279 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,48,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,48,217,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.312844 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,49,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,49,217,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.313389 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,5,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,5,217,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.313940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,50,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,50,217,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.314503 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,51,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,51,217,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.315045 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,52,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,52,217,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.315628 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,53,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,53,217,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.316275 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,54,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,54,217,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.316935 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,55,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,55,217,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.317610 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,56,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,56,217,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.318238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,57,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,57,217,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.319220 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,58,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,58,217,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.322107 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,59,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,59,217,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.322932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,6,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,6,217,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.323541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,60,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,60,217,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.324155 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,61,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,61,217,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.324754 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,62,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,62,217,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.325305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,63,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,63,217,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.325979 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,64,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,64,217,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.326661 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,65,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,65,217,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.327218 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,66,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,66,217,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.328670 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,67,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,67,217,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.329472 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,68,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,68,217,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.330178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,69,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,69,217,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.331178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,7,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,7,217,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.331994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,70,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,70,217,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.332701 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,71,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,71,217,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.333310 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,72,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,72,217,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.333861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,73,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,73,217,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.334398 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,74,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,74,217,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.334954 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,75,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,75,217,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.335488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,76,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,76,217,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.336283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,77,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,77,217,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.338231 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,78,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,78,217,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.338972 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,79,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,79,217,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.342041 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,8,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,8,217,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.344676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,80,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,80,217,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.345246 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,81,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,81,217,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.345780 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,82,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,82,217,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.346300 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,83,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,83,217,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.346827 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,84,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,84,217,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.347358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,85,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,85,217,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.347875 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,86,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,86,217,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.348380 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,87,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,87,217,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.348917 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,88,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,88,217,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.349493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,89,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,89,217,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.350118 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,9,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,9,217,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.350715 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,90,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,90,217,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.351245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,91,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,91,217,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.351776 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,92,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,92,217,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.352298 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,93,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,93,217,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.352822 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,94,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,94,217,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.353346 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,95,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,95,217,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.353870 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,96,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,96,217,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.354379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,97,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,97,217,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.354911 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,98,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,98,217,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.355592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,99,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[1,8,99,217,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.356267 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[8,8,217,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 217],"bool"), list[8,8,217,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 217, 217].  Tensor sizes: [1, 1, 0, 217]
2025-03-05 15:22:40.356835 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 218],"bool"), list[1,8,218,218,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 218],"bool"), list[1,8,218,218,], ) 
 The expanded size of the tensor (218) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 218, 218].  Tensor sizes: [1, 1, 0, 218]
2025-03-05 15:22:40.357374 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 218],"bool"), list[8,8,218,218,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 218],"bool"), list[8,8,218,218,], ) 
 The expanded size of the tensor (218) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 218, 218].  Tensor sizes: [1, 1, 0, 218]
2025-03-05 15:22:40.357907 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 219],"bool"), list[1,8,219,219,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 219],"bool"), list[1,8,219,219,], ) 
 The expanded size of the tensor (219) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 219, 219].  Tensor sizes: [1, 1, 0, 219]
2025-03-05 15:22:40.358427 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 219],"bool"), list[8,8,219,219,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 219],"bool"), list[8,8,219,219,], ) 
 The expanded size of the tensor (219) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 219, 219].  Tensor sizes: [1, 1, 0, 219]
2025-03-05 15:22:40.358950 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[1,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[1,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.359469 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[10,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[10,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.360046 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[2,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[2,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.360564 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[3,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[3,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.361088 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[30,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[30,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.361611 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[4,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[4,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.362127 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[5,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[5,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.362642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[6,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[6,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.363156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[7,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[7,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.363674 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[8,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[8,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.364194 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[9,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 21],"bool"), list[9,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 21, 21].  Tensor sizes: [1, 1, 0, 21]
2025-03-05 15:22:40.364759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 220],"bool"), list[1,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 220],"bool"), list[1,8,220,220,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 220, 220].  Tensor sizes: [1, 1, 0, 220]
2025-03-05 15:22:40.365509 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 220],"bool"), list[30,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 220],"bool"), list[30,8,220,220,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 220, 220].  Tensor sizes: [1, 1, 0, 220]
2025-03-05 15:22:40.366158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 220],"bool"), list[8,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 220],"bool"), list[8,8,220,220,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 220, 220].  Tensor sizes: [1, 1, 0, 220]
2025-03-05 15:22:40.366770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 221],"bool"), list[1,8,221,221,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 221],"bool"), list[1,8,221,221,], ) 
 The expanded size of the tensor (221) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 221, 221].  Tensor sizes: [1, 1, 0, 221]
2025-03-05 15:22:40.367364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 221],"bool"), list[8,8,221,221,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 221],"bool"), list[8,8,221,221,], ) 
 The expanded size of the tensor (221) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 221, 221].  Tensor sizes: [1, 1, 0, 221]
2025-03-05 15:22:40.367959 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 222],"bool"), list[1,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 222],"bool"), list[1,8,222,222,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 222, 222].  Tensor sizes: [1, 1, 0, 222]
2025-03-05 15:22:40.368601 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 222],"bool"), list[30,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 222],"bool"), list[30,8,222,222,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 222, 222].  Tensor sizes: [1, 1, 0, 222]
2025-03-05 15:22:40.369213 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 222],"bool"), list[8,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 222],"bool"), list[8,8,222,222,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 222, 222].  Tensor sizes: [1, 1, 0, 222]
2025-03-05 15:22:40.369759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 223],"bool"), list[1,8,223,223,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 223],"bool"), list[1,8,223,223,], ) 
 The expanded size of the tensor (223) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 223, 223].  Tensor sizes: [1, 1, 0, 223]
2025-03-05 15:22:40.370306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 223],"bool"), list[8,8,223,223,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 223],"bool"), list[8,8,223,223,], ) 
 The expanded size of the tensor (223) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 223, 223].  Tensor sizes: [1, 1, 0, 223]
2025-03-05 15:22:40.370874 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 224],"bool"), list[1,8,224,224,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 224],"bool"), list[1,8,224,224,], ) 
 The expanded size of the tensor (224) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 224, 224].  Tensor sizes: [1, 1, 0, 224]
2025-03-05 15:22:40.371396 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 224],"bool"), list[8,8,224,224,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 224],"bool"), list[8,8,224,224,], ) 
 The expanded size of the tensor (224) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 224, 224].  Tensor sizes: [1, 1, 0, 224]
2025-03-05 15:22:40.371922 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 225],"bool"), list[1,8,225,225,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 225],"bool"), list[1,8,225,225,], ) 
 The expanded size of the tensor (225) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 225, 225].  Tensor sizes: [1, 1, 0, 225]
2025-03-05 15:22:40.372436 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 225],"bool"), list[8,8,225,225,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 225],"bool"), list[8,8,225,225,], ) 
 The expanded size of the tensor (225) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 225, 225].  Tensor sizes: [1, 1, 0, 225]
2025-03-05 15:22:40.372964 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 226],"bool"), list[1,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 226],"bool"), list[1,8,226,226,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 226, 226].  Tensor sizes: [1, 1, 0, 226]
2025-03-05 15:22:40.373484 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 226],"bool"), list[30,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 226],"bool"), list[30,8,226,226,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 226, 226].  Tensor sizes: [1, 1, 0, 226]
2025-03-05 15:22:40.374010 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 226],"bool"), list[8,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 226],"bool"), list[8,8,226,226,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 226, 226].  Tensor sizes: [1, 1, 0, 226]
2025-03-05 15:22:40.374519 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 227],"bool"), list[1,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 227],"bool"), list[1,8,227,227,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 227, 227].  Tensor sizes: [1, 1, 0, 227]
2025-03-05 15:22:40.375038 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 227],"bool"), list[30,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 227],"bool"), list[30,8,227,227,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 227, 227].  Tensor sizes: [1, 1, 0, 227]
2025-03-05 15:22:40.375541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 227],"bool"), list[8,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 227],"bool"), list[8,8,227,227,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 227, 227].  Tensor sizes: [1, 1, 0, 227]
2025-03-05 15:22:40.376061 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 228],"bool"), list[1,8,228,228,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 228],"bool"), list[1,8,228,228,], ) 
 The expanded size of the tensor (228) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 228, 228].  Tensor sizes: [1, 1, 0, 228]
2025-03-05 15:22:40.376578 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 228],"bool"), list[8,8,228,228,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 228],"bool"), list[8,8,228,228,], ) 
 The expanded size of the tensor (228) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 228, 228].  Tensor sizes: [1, 1, 0, 228]
2025-03-05 15:22:40.377106 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,1,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,1,229,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.377625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,10,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,10,229,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.378136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,100,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,100,229,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.378663 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,101,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,101,229,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.379174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,102,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,102,229,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.379737 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,103,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,103,229,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.380444 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,104,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,104,229,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.381066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,105,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,105,229,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.381674 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,106,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,106,229,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.382276 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,107,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,107,229,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.382878 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,108,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,108,229,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.383472 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,109,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,109,229,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.384115 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,11,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,11,229,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.384794 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,110,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,110,229,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.385409 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,111,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,111,229,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.386006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,112,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,112,229,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.386616 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,113,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,113,229,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.387255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,114,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,114,229,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.387862 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,115,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,115,229,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.388458 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,116,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,116,229,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.389063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,117,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,117,229,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.389659 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,118,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,118,229,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.390249 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,119,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,119,229,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.390847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,12,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,12,229,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.391432 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,120,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,120,229,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.392042 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,121,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,121,229,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.392641 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,122,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,122,229,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.393227 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,123,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,123,229,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.393822 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,124,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,124,229,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.394412 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,125,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,125,229,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.395014 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,126,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,126,229,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.395616 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,127,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,127,229,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.396256 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,128,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,128,229,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.396843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,129,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,129,229,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.397455 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,13,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,13,229,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.398102 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,130,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,130,229,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.398714 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,131,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,131,229,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.399309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,132,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,132,229,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.399940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,133,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,133,229,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.400548 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,134,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,134,229,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.401165 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,135,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,135,229,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.401761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,136,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,136,229,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.402345 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,137,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,137,229,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.402936 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,138,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,138,229,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.403523 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,139,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,139,229,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.404132 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,14,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,14,229,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.404743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,140,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,140,229,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.405334 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,141,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,141,229,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.405951 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,142,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,142,229,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.406543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,143,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,143,229,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.407159 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,144,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,144,229,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.407760 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,145,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,145,229,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.408349 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,146,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,146,229,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.409006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,147,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,147,229,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.409647 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,148,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,148,229,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.410257 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,149,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,149,229,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.410855 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,15,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,15,229,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.411398 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,150,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,150,229,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.411933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,151,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,151,229,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.412471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,152,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,152,229,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.413011 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,153,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,153,229,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.413520 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,154,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,154,229,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.414034 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,155,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,155,229,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.414537 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,156,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,156,229,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.415061 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,157,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,157,229,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.415573 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,158,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,158,229,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.416166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,16,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,16,229,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.416752 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,17,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,17,229,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.418078 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,18,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,18,229,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.418931 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,19,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,19,229,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.426651 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,2,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,2,229,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.427287 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,20,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,20,229,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.427868 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,21,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,21,229,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.428446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,22,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,22,229,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.429003 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,229,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,229,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 229, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.429618 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,23,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,23,229,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.430696 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,24,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,24,229,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.431261 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,25,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,25,229,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.431856 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,26,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,26,229,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.432416 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,27,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,27,229,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.432969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,28,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,28,229,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.433530 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,29,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,29,229,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.434095 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,3,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,3,229,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.434742 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,30,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,30,229,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.435369 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,31,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,31,229,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.435961 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,32,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,32,229,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.436483 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,33,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,33,229,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.437041 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,34,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,34,229,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.437577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,35,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,35,229,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.438103 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,36,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,36,229,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.438630 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,37,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,37,229,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.439166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,38,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,38,229,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.439789 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,39,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,39,229,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.440652 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,4,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,4,229,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.441300 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,40,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,40,229,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.441891 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,41,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,41,229,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.442457 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,42,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,42,229,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.443006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,43,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,43,229,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.443609 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,44,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,44,229,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.444462 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,45,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,45,229,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.445105 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,46,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,46,229,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.445729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,47,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,47,229,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.446326 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,48,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,48,229,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.446976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,49,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,49,229,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.447641 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,5,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,5,229,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.448253 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,50,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,50,229,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.448898 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,51,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,51,229,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.449538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,52,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,52,229,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.450159 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,53,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,53,229,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.450764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,54,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,54,229,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.451358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,55,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,55,229,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.451962 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,56,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,56,229,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.452580 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,57,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,57,229,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.453259 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,58,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,58,229,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.453872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,59,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,59,229,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.454480 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,6,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,6,229,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.455083 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,60,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,60,229,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.455689 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,61,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,61,229,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.456281 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,62,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,62,229,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.456876 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,63,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,63,229,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.457491 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,64,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,64,229,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.458094 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,65,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,65,229,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.458697 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,66,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,66,229,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.459309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,67,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,67,229,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.459924 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,68,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,68,229,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.460574 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,69,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,69,229,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.461216 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,7,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,7,229,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.461766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,70,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,70,229,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.462287 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,71,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,71,229,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.462860 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,72,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,72,229,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.463530 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,73,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,73,229,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.464176 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,74,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,74,229,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.464787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,75,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,75,229,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.465397 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,76,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,76,229,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.466000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,77,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,77,229,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.466613 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,78,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,78,229,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.467221 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,79,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,79,229,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.467817 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,8,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,8,229,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.468420 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,80,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,80,229,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.469589 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,81,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,81,229,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.470312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,82,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,82,229,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.470882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,83,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,83,229,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.471443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,84,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,84,229,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.471995 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,85,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,85,229,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.472549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,86,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,86,229,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.473119 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,87,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,87,229,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.473699 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,88,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,88,229,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.474232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,89,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,89,229,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.474768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,9,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,9,229,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.475451 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,90,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,90,229,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.476082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,91,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,91,229,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.476714 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,92,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,92,229,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.477802 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,93,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,93,229,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.478485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,94,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,94,229,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.479299 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,95,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,95,229,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.480057 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,96,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,96,229,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.480685 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,97,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,97,229,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.481244 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,98,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,98,229,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.481841 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,99,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[1,8,99,229,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.482398 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[8,8,229,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 229],"bool"), list[8,8,229,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 229, 229].  Tensor sizes: [1, 1, 0, 229]
2025-03-05 15:22:40.482939 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[1,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[1,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.483478 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[10,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[10,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.484011 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[2,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[2,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.484538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[3,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[3,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.485083 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[4,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[4,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.485619 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[5,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[5,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.486150 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[6,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[6,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.486719 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[7,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[7,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.487264 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[8,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[8,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.487796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[9,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 22],"bool"), list[9,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 22, 22].  Tensor sizes: [1, 1, 0, 22]
2025-03-05 15:22:40.488390 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 230],"bool"), list[1,8,230,230,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 230],"bool"), list[1,8,230,230,], ) 
 The expanded size of the tensor (230) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 230, 230].  Tensor sizes: [1, 1, 0, 230]
2025-03-05 15:22:40.489330 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 230],"bool"), list[8,8,230,230,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 230],"bool"), list[8,8,230,230,], ) 
 The expanded size of the tensor (230) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 230, 230].  Tensor sizes: [1, 1, 0, 230]
2025-03-05 15:22:40.489989 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 231],"bool"), list[1,8,231,231,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 231],"bool"), list[1,8,231,231,], ) 
 The expanded size of the tensor (231) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 231, 231].  Tensor sizes: [1, 1, 0, 231]
2025-03-05 15:22:40.490539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 231],"bool"), list[8,8,231,231,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 231],"bool"), list[8,8,231,231,], ) 
 The expanded size of the tensor (231) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 231, 231].  Tensor sizes: [1, 1, 0, 231]
2025-03-05 15:22:40.491106 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 232],"bool"), list[1,8,232,232,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 232],"bool"), list[1,8,232,232,], ) 
 The expanded size of the tensor (232) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 232, 232].  Tensor sizes: [1, 1, 0, 232]
2025-03-05 15:22:40.491729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 232],"bool"), list[8,8,232,232,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 232],"bool"), list[8,8,232,232,], ) 
 The expanded size of the tensor (232) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 232, 232].  Tensor sizes: [1, 1, 0, 232]
2025-03-05 15:22:40.492313 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 233],"bool"), list[1,8,233,233,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 233],"bool"), list[1,8,233,233,], ) 
 The expanded size of the tensor (233) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 233, 233].  Tensor sizes: [1, 1, 0, 233]
2025-03-05 15:22:40.492889 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 233],"bool"), list[8,8,233,233,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 233],"bool"), list[8,8,233,233,], ) 
 The expanded size of the tensor (233) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 233, 233].  Tensor sizes: [1, 1, 0, 233]
2025-03-05 15:22:40.493480 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 234],"bool"), list[1,8,234,234,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 234],"bool"), list[1,8,234,234,], ) 
 The expanded size of the tensor (234) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 234, 234].  Tensor sizes: [1, 1, 0, 234]
2025-03-05 15:22:40.494099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 234],"bool"), list[8,8,234,234,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 234],"bool"), list[8,8,234,234,], ) 
 The expanded size of the tensor (234) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 234, 234].  Tensor sizes: [1, 1, 0, 234]
2025-03-05 15:22:40.494729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 235],"bool"), list[1,8,235,235,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 235],"bool"), list[1,8,235,235,], ) 
 The expanded size of the tensor (235) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 235, 235].  Tensor sizes: [1, 1, 0, 235]
2025-03-05 15:22:40.495320 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 235],"bool"), list[8,8,235,235,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 235],"bool"), list[8,8,235,235,], ) 
 The expanded size of the tensor (235) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 235, 235].  Tensor sizes: [1, 1, 0, 235]
2025-03-05 15:22:40.495918 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 236],"bool"), list[1,8,236,236,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 236],"bool"), list[1,8,236,236,], ) 
 The expanded size of the tensor (236) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 236, 236].  Tensor sizes: [1, 1, 0, 236]
2025-03-05 15:22:40.496520 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 236],"bool"), list[8,8,236,236,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 236],"bool"), list[8,8,236,236,], ) 
 The expanded size of the tensor (236) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 236, 236].  Tensor sizes: [1, 1, 0, 236]
2025-03-05 15:22:40.497156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 237],"bool"), list[1,8,237,237,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 237],"bool"), list[1,8,237,237,], ) 
 The expanded size of the tensor (237) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 237, 237].  Tensor sizes: [1, 1, 0, 237]
2025-03-05 15:22:40.497723 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 237],"bool"), list[8,8,237,237,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 237],"bool"), list[8,8,237,237,], ) 
 The expanded size of the tensor (237) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 237, 237].  Tensor sizes: [1, 1, 0, 237]
2025-03-05 15:22:40.498296 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 238],"bool"), list[1,8,238,238,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 238],"bool"), list[1,8,238,238,], ) 
 The expanded size of the tensor (238) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 238, 238].  Tensor sizes: [1, 1, 0, 238]
2025-03-05 15:22:40.498835 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 238],"bool"), list[8,8,238,238,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 238],"bool"), list[8,8,238,238,], ) 
 The expanded size of the tensor (238) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 238, 238].  Tensor sizes: [1, 1, 0, 238]
2025-03-05 15:22:40.499358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 239],"bool"), list[1,8,239,239,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 239],"bool"), list[1,8,239,239,], ) 
 The expanded size of the tensor (239) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 239, 239].  Tensor sizes: [1, 1, 0, 239]
2025-03-05 15:22:40.499889 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 239],"bool"), list[8,8,239,239,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 239],"bool"), list[8,8,239,239,], ) 
 The expanded size of the tensor (239) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 239, 239].  Tensor sizes: [1, 1, 0, 239]
2025-03-05 15:22:40.500421 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[1,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[1,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.500972 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[10,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[10,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.501485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[2,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[2,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.502017 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[3,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[3,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.502527 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[30,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[30,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.503096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[4,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[4,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.503652 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[5,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[5,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.504600 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[6,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[6,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.505448 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[7,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[7,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.506180 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[8,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[8,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.506763 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[9,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 23],"bool"), list[9,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 23, 23].  Tensor sizes: [1, 1, 0, 23]
2025-03-05 15:22:40.507364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 240],"bool"), list[1,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 240],"bool"), list[1,8,240,240,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 240, 240].  Tensor sizes: [1, 1, 0, 240]
2025-03-05 15:22:40.507955 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 240],"bool"), list[30,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 240],"bool"), list[30,8,240,240,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 240, 240].  Tensor sizes: [1, 1, 0, 240]
2025-03-05 15:22:40.508499 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 240],"bool"), list[8,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 240],"bool"), list[8,8,240,240,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 240, 240].  Tensor sizes: [1, 1, 0, 240]
2025-03-05 15:22:40.509040 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,1,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,1,241,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.509575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,10,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,10,241,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.510142 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,100,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,100,241,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.510689 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,101,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,101,241,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.511223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,102,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,102,241,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.511763 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,103,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,103,241,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.512329 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,104,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,104,241,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.512872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,105,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,105,241,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.513414 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,106,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,106,241,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.513965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,107,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,107,241,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.514513 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,108,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,108,241,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.515074 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,109,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,109,241,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.515627 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,11,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,11,241,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.516187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,110,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,110,241,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.516740 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,111,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,111,241,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.517280 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,112,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,112,241,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.517822 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,113,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,113,241,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.518379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,114,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,114,241,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.518918 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,115,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,115,241,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.519478 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,116,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,116,241,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.520036 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,117,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,117,241,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.520571 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,118,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,118,241,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.521162 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,119,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,119,241,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.521696 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,12,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,12,241,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.522255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,120,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,120,241,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.522796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,121,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,121,241,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.523346 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,122,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,122,241,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.523889 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,123,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,123,241,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.524427 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,124,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,124,241,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.524967 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,125,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,125,241,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.525495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,126,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,126,241,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.526063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,127,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,127,241,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.526601 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,128,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,128,241,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.527120 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,129,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,129,241,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.527712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,13,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,13,241,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.528245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,130,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,130,241,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.528799 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,131,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,131,241,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.529328 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,132,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,132,241,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.529886 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,133,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,133,241,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.530445 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,134,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,134,241,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.531021 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,135,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,135,241,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.531551 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,136,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,136,241,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.532096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,137,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,137,241,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.532625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,138,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,138,241,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.533152 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,139,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,139,241,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.533684 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,14,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,14,241,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.534245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,140,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,140,241,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.534786 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,141,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,141,241,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.535343 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,142,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,142,241,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.535874 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,143,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,143,241,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.536400 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,144,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,144,241,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.536988 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,145,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,145,241,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.537527 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,146,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,146,241,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.538074 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,147,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,147,241,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.538634 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,148,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,148,241,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.539174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,149,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,149,241,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.539719 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,15,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,15,241,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.540264 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,150,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,150,241,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.540804 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,151,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,151,241,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.541324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,152,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,152,241,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.541861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,153,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,153,241,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.542386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,154,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,154,241,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.542919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,155,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,155,241,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.543476 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,156,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,156,241,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.544008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,157,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,157,241,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.544545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,158,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,158,241,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.545085 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,159,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,159,241,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 159, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.545637 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,16,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,16,241,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.546168 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,160,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,160,241,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 160, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.546702 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,161,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,161,241,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 161, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.547236 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,162,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,162,241,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 162, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.547764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,163,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,163,241,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 163, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.548290 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,164,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,164,241,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 164, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.548842 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,165,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,165,241,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 165, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.549425 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,166,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,166,241,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 166, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.549969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,167,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,167,241,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 167, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.550493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,168,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,168,241,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 168, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.551022 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,169,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,169,241,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 169, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.551540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,17,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,17,241,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.552081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,170,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,170,241,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 170, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.552624 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,171,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,171,241,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 171, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.553165 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,172,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,172,241,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 172, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.553707 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,173,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,173,241,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 173, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.554224 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,174,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,174,241,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 174, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.554753 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,175,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,175,241,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 175, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.555286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,176,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,176,241,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 176, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.555882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,177,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,177,241,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 177, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.556419 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,178,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,178,241,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 178, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.556959 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,179,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,179,241,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 179, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.557486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,18,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,18,241,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.558022 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,180,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,180,241,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 180, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.558540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,181,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,181,241,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 181, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.559077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,182,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,182,241,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 182, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.559606 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,183,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,183,241,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 183, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.560136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,184,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,184,241,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 184, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.560677 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,185,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,185,241,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 185, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.561254 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,186,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,186,241,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 186, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.561803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,187,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,187,241,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 187, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.562341 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,188,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,188,241,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 188, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.562869 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,189,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,189,241,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 189, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.563391 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,19,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,19,241,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.563971 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,190,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,190,241,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 190, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.564495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,191,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,191,241,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 191, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.565056 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,192,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,192,241,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 192, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.565570 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,193,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,193,241,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 193, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.566099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,2,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,2,241,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.566622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,20,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,20,241,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.567156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,21,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,21,241,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.567687 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,22,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,22,241,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.568217 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,23,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,23,241,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.568761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,24,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,24,241,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.569290 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,241,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 241, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.569816 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,25,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,25,241,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.570351 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,26,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,26,241,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.570909 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,27,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,27,241,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.571427 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,28,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,28,241,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.571964 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,29,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,29,241,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.572485 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,3,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,3,241,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.573031 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,30,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,30,241,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.573566 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,31,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,31,241,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.574095 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,32,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,32,241,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.574637 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,33,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,33,241,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.575167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,34,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,34,241,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.575704 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,35,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,35,241,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.576230 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,36,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,36,241,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.576797 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,37,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,37,241,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.577323 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,38,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,38,241,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.577898 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,39,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,39,241,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.578430 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,4,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,4,241,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.578968 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,40,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,40,241,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.579486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,41,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,41,241,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.580023 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,42,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,42,241,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.580543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,43,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,43,241,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.581067 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,44,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,44,241,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.581580 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,45,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,45,241,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.582110 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,46,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,46,241,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.582692 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,47,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,47,241,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.583232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,48,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,48,241,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.583756 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,49,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,49,241,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.584283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,5,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,5,241,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.584811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,50,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,50,241,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.585346 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,51,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,51,241,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.585876 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,52,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,52,241,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.586378 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,53,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,53,241,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.586908 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,54,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,54,241,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.587463 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,55,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,55,241,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.588008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,56,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,56,241,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.588536 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,57,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,57,241,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.589076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,58,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,58,241,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.589617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,59,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,59,241,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.590144 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,6,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,6,241,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.590681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,60,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,60,241,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.591206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,61,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,61,241,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.591734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,62,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,62,241,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.592247 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,63,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,63,241,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.592778 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,64,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,64,241,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.593290 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,65,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,65,241,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.593826 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,66,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,66,241,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.594345 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,67,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,67,241,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.594882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,68,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,68,241,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.595410 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,69,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,69,241,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.595939 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,7,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,7,241,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.596468 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,70,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,70,241,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.597008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,71,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,71,241,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.597533 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,72,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,72,241,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.598067 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,73,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,73,241,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.598593 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,74,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,74,241,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.599122 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,75,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,75,241,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.599662 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,76,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,76,241,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.600187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,77,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,77,241,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.600717 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,78,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,78,241,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.601249 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,79,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,79,241,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.601793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,8,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,8,241,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.602325 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,80,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,80,241,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.602848 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,81,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,81,241,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.603385 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,82,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,82,241,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.603915 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,83,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,83,241,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.604432 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,84,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,84,241,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.604947 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,85,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,85,241,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.605488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,86,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,86,241,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.606017 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,87,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,87,241,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.606531 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,88,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,88,241,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.607134 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,89,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,89,241,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.607674 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,9,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,9,241,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.608188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,90,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,90,241,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.608719 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,91,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,91,241,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.609255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,92,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,92,241,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.609793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,93,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,93,241,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.610316 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,94,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,94,241,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.610855 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,95,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,95,241,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.611390 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,96,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,96,241,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.611923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,97,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,97,241,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.612439 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,98,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,98,241,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.612978 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,99,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[1,8,99,241,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.613513 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[30,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[30,8,241,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 241, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.614091 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[8,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 241],"bool"), list[8,8,241,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 241, 241].  Tensor sizes: [1, 1, 0, 241]
2025-03-05 15:22:40.614638 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 242],"bool"), list[1,8,242,242,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 242],"bool"), list[1,8,242,242,], ) 
 The expanded size of the tensor (242) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 242, 242].  Tensor sizes: [1, 1, 0, 242]
2025-03-05 15:22:40.615175 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 242],"bool"), list[8,8,242,242,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 242],"bool"), list[8,8,242,242,], ) 
 The expanded size of the tensor (242) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 242, 242].  Tensor sizes: [1, 1, 0, 242]
2025-03-05 15:22:40.615712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 243],"bool"), list[1,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 243],"bool"), list[1,8,243,243,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 243, 243].  Tensor sizes: [1, 1, 0, 243]
2025-03-05 15:22:40.616240 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 243],"bool"), list[30,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 243],"bool"), list[30,8,243,243,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 243, 243].  Tensor sizes: [1, 1, 0, 243]
2025-03-05 15:22:40.616767 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 243],"bool"), list[8,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 243],"bool"), list[8,8,243,243,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 243, 243].  Tensor sizes: [1, 1, 0, 243]
2025-03-05 15:22:40.617297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 244],"bool"), list[1,8,244,244,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 244],"bool"), list[1,8,244,244,], ) 
 The expanded size of the tensor (244) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 244, 244].  Tensor sizes: [1, 1, 0, 244]
2025-03-05 15:22:40.617824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 244],"bool"), list[8,8,244,244,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 244],"bool"), list[8,8,244,244,], ) 
 The expanded size of the tensor (244) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 244, 244].  Tensor sizes: [1, 1, 0, 244]
2025-03-05 15:22:40.618359 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 245],"bool"), list[1,8,245,245,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 245],"bool"), list[1,8,245,245,], ) 
 The expanded size of the tensor (245) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 245, 245].  Tensor sizes: [1, 1, 0, 245]
2025-03-05 15:22:40.618898 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 245],"bool"), list[8,8,245,245,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 245],"bool"), list[8,8,245,245,], ) 
 The expanded size of the tensor (245) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 245, 245].  Tensor sizes: [1, 1, 0, 245]
2025-03-05 15:22:40.619441 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 246],"bool"), list[1,8,246,246,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 246],"bool"), list[1,8,246,246,], ) 
 The expanded size of the tensor (246) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 246, 246].  Tensor sizes: [1, 1, 0, 246]
2025-03-05 15:22:40.619978 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 246],"bool"), list[8,8,246,246,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 246],"bool"), list[8,8,246,246,], ) 
 The expanded size of the tensor (246) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 246, 246].  Tensor sizes: [1, 1, 0, 246]
2025-03-05 15:22:40.621069 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 247],"bool"), list[1,8,247,247,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 247],"bool"), list[1,8,247,247,], ) 
 The expanded size of the tensor (247) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 247, 247].  Tensor sizes: [1, 1, 0, 247]
2025-03-05 15:22:40.621737 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 247],"bool"), list[8,8,247,247,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 247],"bool"), list[8,8,247,247,], ) 
 The expanded size of the tensor (247) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 247, 247].  Tensor sizes: [1, 1, 0, 247]
2025-03-05 15:22:40.622374 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 248],"bool"), list[1,8,248,248,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 248],"bool"), list[1,8,248,248,], ) 
 The expanded size of the tensor (248) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 248, 248].  Tensor sizes: [1, 1, 0, 248]
2025-03-05 15:22:40.623029 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 248],"bool"), list[8,8,248,248,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 248],"bool"), list[8,8,248,248,], ) 
 The expanded size of the tensor (248) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 248, 248].  Tensor sizes: [1, 1, 0, 248]
2025-03-05 15:22:40.623688 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 249],"bool"), list[1,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 249],"bool"), list[1,8,249,249,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 249, 249].  Tensor sizes: [1, 1, 0, 249]
2025-03-05 15:22:40.624324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 249],"bool"), list[30,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 249],"bool"), list[30,8,249,249,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 249, 249].  Tensor sizes: [1, 1, 0, 249]
2025-03-05 15:22:40.624960 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 249],"bool"), list[8,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 249],"bool"), list[8,8,249,249,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 249, 249].  Tensor sizes: [1, 1, 0, 249]
2025-03-05 15:22:40.625602 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[1,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[1,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.626223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[10,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[10,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.626951 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[2,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[2,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.627561 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[3,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[3,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.628191 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[30,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[30,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.628815 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[4,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[4,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.629434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[5,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[5,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.630047 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[6,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[6,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.630667 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[7,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[7,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.631283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[8,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[8,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.631894 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[9,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 24],"bool"), list[9,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 24, 24].  Tensor sizes: [1, 1, 0, 24]
2025-03-05 15:22:40.632521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 250],"bool"), list[1,8,250,250,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 250],"bool"), list[1,8,250,250,], ) 
 The expanded size of the tensor (250) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 250, 250].  Tensor sizes: [1, 1, 0, 250]
2025-03-05 15:22:40.633150 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 250],"bool"), list[8,8,250,250,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 250],"bool"), list[8,8,250,250,], ) 
 The expanded size of the tensor (250) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 250, 250].  Tensor sizes: [1, 1, 0, 250]
2025-03-05 15:22:40.633776 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 251],"bool"), list[8,8,251,251,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 251],"bool"), list[8,8,251,251,], ) 
 The expanded size of the tensor (251) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 251, 251].  Tensor sizes: [1, 1, 0, 251]
2025-03-05 15:22:40.634387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 252],"bool"), list[8,8,252,252,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 252],"bool"), list[8,8,252,252,], ) 
 The expanded size of the tensor (252) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 252, 252].  Tensor sizes: [1, 1, 0, 252]
2025-03-05 15:22:40.635000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 253],"bool"), list[30,8,253,253,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 253],"bool"), list[30,8,253,253,], ) 
 The expanded size of the tensor (253) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 253, 253].  Tensor sizes: [1, 1, 0, 253]
2025-03-05 15:22:40.635672 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 253],"bool"), list[8,8,253,253,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 253],"bool"), list[8,8,253,253,], ) 
 The expanded size of the tensor (253) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 253, 253].  Tensor sizes: [1, 1, 0, 253]
2025-03-05 15:22:40.636286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 254],"bool"), list[8,8,254,254,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 254],"bool"), list[8,8,254,254,], ) 
 The expanded size of the tensor (254) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 254, 254].  Tensor sizes: [1, 1, 0, 254]
2025-03-05 15:22:40.636902 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 255],"bool"), list[8,8,255,255,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 255],"bool"), list[8,8,255,255,], ) 
 The expanded size of the tensor (255) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 255, 255].  Tensor sizes: [1, 1, 0, 255]
2025-03-05 15:22:40.637515 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 256],"bool"), list[8,8,256,256,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 256],"bool"), list[8,8,256,256,], ) 
 The expanded size of the tensor (256) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 256, 256].  Tensor sizes: [1, 1, 0, 256]
2025-03-05 15:22:40.638232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 257],"bool"), list[8,8,257,257,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 257],"bool"), list[8,8,257,257,], ) 
 The expanded size of the tensor (257) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 257, 257].  Tensor sizes: [1, 1, 0, 257]
2025-03-05 15:22:40.638894 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 258],"bool"), list[8,8,258,258,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 258],"bool"), list[8,8,258,258,], ) 
 The expanded size of the tensor (258) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 258, 258].  Tensor sizes: [1, 1, 0, 258]
2025-03-05 15:22:40.639505 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 259],"bool"), list[8,8,259,259,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 259],"bool"), list[8,8,259,259,], ) 
 The expanded size of the tensor (259) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 259, 259].  Tensor sizes: [1, 1, 0, 259]
2025-03-05 15:22:40.640150 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[1,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[1,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.640788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[10,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[10,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.641411 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[2,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[2,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.642059 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[3,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[3,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.642687 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[4,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[4,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.643306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[5,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[5,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.643981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[6,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[6,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.644914 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[7,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[7,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.645480 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[8,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[8,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.646028 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[9,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 25],"bool"), list[9,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 25, 25].  Tensor sizes: [1, 1, 0, 25]
2025-03-05 15:22:40.646562 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 260],"bool"), list[8,8,260,260,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 260],"bool"), list[8,8,260,260,], ) 
 The expanded size of the tensor (260) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 260, 260].  Tensor sizes: [1, 1, 0, 260]
2025-03-05 15:22:40.647100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,1,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,1,261,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.647631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,10,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,10,261,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.648307 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,100,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,100,261,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.648950 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,101,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,101,261,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.649557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,102,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,102,261,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.650177 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,103,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,103,261,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.650869 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,104,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,104,261,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.651530 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,105,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,105,261,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.652184 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,106,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,106,261,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.652815 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,107,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,107,261,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.653431 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,108,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,108,261,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.654122 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,109,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,109,261,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.654761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,11,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,11,261,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.655395 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,110,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,110,261,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.656117 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,111,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,111,261,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.656808 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,112,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,112,261,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.657428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,113,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,113,261,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.658101 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,114,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,114,261,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.658681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,115,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,115,261,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.659209 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,116,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,116,261,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.659740 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,117,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,117,261,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.660251 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,118,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,118,261,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.660770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,119,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,119,261,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.661423 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,12,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,12,261,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.662069 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,120,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,120,261,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.662743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,121,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,121,261,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.663414 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,122,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,122,261,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.664088 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,123,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,123,261,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.664736 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,124,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,124,261,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.665353 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,125,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,125,261,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.666013 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,126,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,126,261,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.666649 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,127,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,127,261,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.667259 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,128,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,128,261,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.667892 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,129,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,129,261,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.668539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,13,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,13,261,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.669181 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,130,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,130,261,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.669802 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,131,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,131,261,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.670413 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,132,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,132,261,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.671038 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,133,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,133,261,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.671684 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,134,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,134,261,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.672320 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,135,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,135,261,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.673010 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,136,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,136,261,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.673748 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,137,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,137,261,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.674409 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,138,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,138,261,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.675079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,139,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,139,261,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.675728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,14,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,14,261,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.676368 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,140,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,140,261,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.677019 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,141,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,141,261,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.677770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,142,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,142,261,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.678976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,143,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,143,261,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.679717 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,144,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,144,261,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.680414 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,145,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,145,261,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.681052 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,146,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,146,261,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.681678 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,147,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,147,261,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.682316 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,148,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,148,261,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.682954 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,149,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,149,261,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.683569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,15,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,15,261,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.684217 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,150,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,150,261,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.684853 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,151,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,151,261,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.685467 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,152,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,152,261,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.686121 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,153,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,153,261,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.686735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,154,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,154,261,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.687332 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,155,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,155,261,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.687944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,156,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,156,261,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.688564 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,157,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,157,261,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.689184 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,158,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,158,261,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.689800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,159,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,159,261,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 159, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.690405 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,16,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,16,261,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.691007 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,160,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,160,261,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 160, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.694188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,161,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,161,261,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 161, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.694875 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,162,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,162,261,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 162, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.695490 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,163,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,163,261,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 163, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.696111 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,164,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,164,261,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 164, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.696732 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,165,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,165,261,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 165, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.697346 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,166,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,166,261,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 166, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.697962 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,167,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,167,261,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 167, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.698566 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,168,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,168,261,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 168, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.699178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,169,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,169,261,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 169, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.699799 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,17,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,17,261,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.700411 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,170,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,170,261,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 170, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.701326 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,171,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,171,261,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 171, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.701972 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,172,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,172,261,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 172, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.702646 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,173,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,173,261,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 173, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.703252 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,174,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,174,261,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 174, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.703869 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,175,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,175,261,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 175, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.704489 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,176,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,176,261,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 176, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.705107 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,177,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,177,261,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 177, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.705857 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,178,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,178,261,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 178, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.706536 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,179,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,179,261,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 179, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.707100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,18,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,18,261,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.707645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,180,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,180,261,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 180, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.708200 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,181,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,181,261,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 181, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.708734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,182,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,182,261,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 182, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.709261 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,183,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,183,261,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 183, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.709842 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,184,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,184,261,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 184, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.710956 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,185,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,185,261,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 185, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.711683 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,186,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,186,261,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 186, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.712261 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,187,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,187,261,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 187, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.712850 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,188,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,188,261,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 188, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.713433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,189,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,189,261,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 189, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.713982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,19,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,19,261,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.714521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,190,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,190,261,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 190, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.715063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,191,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,191,261,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 191, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.715609 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,192,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,192,261,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 192, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.716142 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,193,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,193,261,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 193, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.716712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,194,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,194,261,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 194, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.717336 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,195,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,195,261,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 195, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.717892 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,196,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,196,261,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 196, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.718418 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,197,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,197,261,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 197, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.718961 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,198,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,198,261,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 198, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.719760 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,199,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,199,261,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 199, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.720550 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,2,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,2,261,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.721178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,20,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,20,261,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.721807 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,200,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,200,261,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 200, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.722449 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,201,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,201,261,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 201, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.723065 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,202,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,202,261,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 202, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.723724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,203,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,203,261,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 203, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.724342 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,204,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,204,261,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 204, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.724959 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,205,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,205,261,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 205, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.725569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,206,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,206,261,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 206, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.726174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,207,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,207,261,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 207, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.726774 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,208,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,208,261,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 208, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.727377 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,209,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,209,261,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 209, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.727981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,21,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,21,261,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.728593 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,210,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,210,261,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 210, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.729206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,211,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,211,261,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 211, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.729993 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,212,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,212,261,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 212, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.730662 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,213,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,213,261,], ) 
 The expanded size of the tensor (213) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 213, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.731260 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,214,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,214,261,], ) 
 The expanded size of the tensor (214) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 214, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.731880 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,215,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,215,261,], ) 
 The expanded size of the tensor (215) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 215, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.732536 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,216,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,216,261,], ) 
 The expanded size of the tensor (216) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 216, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.733252 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,217,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,217,261,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 217, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.733932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,218,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,218,261,], ) 
 The expanded size of the tensor (218) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 218, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.734483 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,219,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,219,261,], ) 
 The expanded size of the tensor (219) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 219, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.735042 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,22,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,22,261,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.735633 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,220,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,220,261,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 220, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.736444 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,221,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,221,261,], ) 
 The expanded size of the tensor (221) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 221, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.737158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,222,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,222,261,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 222, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.737863 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,223,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,223,261,], ) 
 The expanded size of the tensor (223) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 223, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.738496 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,224,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,224,261,], ) 
 The expanded size of the tensor (224) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 224, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.739147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,225,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,225,261,], ) 
 The expanded size of the tensor (225) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 225, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.739778 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,226,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,226,261,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 226, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.740394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,227,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,227,261,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 227, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.741011 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,228,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,228,261,], ) 
 The expanded size of the tensor (228) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 228, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.741623 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,229,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,229,261,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 229, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.742216 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,23,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,23,261,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.742849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,230,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,230,261,], ) 
 The expanded size of the tensor (230) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 230, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.743462 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,24,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,24,261,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.744093 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,25,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,25,261,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.744715 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,26,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,26,261,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.745321 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,27,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,27,261,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.745930 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,28,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,28,261,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.746535 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,29,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,29,261,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.747174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,3,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,3,261,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.747822 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,30,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,30,261,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.748460 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,31,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,31,261,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.749088 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,32,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,32,261,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.749696 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,33,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,33,261,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.750315 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,34,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,34,261,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.750942 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,35,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,35,261,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.751547 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,36,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,36,261,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.752160 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,37,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,37,261,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.752839 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,38,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,38,261,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.753443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,39,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,39,261,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.754055 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,4,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,4,261,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.754672 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,40,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,40,261,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.755284 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,41,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,41,261,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.755959 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,42,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,42,261,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.756563 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,43,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,43,261,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.757194 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,44,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,44,261,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.757816 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,45,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,45,261,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.758428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,46,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,46,261,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.759049 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,47,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,47,261,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.759725 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,48,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,48,261,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.760328 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,49,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,49,261,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.760945 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,5,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,5,261,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.761549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,50,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,50,261,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.762157 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,51,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,51,261,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.762759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,52,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,52,261,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.763370 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,53,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,53,261,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.763982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,54,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,54,261,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.764611 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,55,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,55,261,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.765210 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,56,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,56,261,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.765891 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,57,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,57,261,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.766479 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,58,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,58,261,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.767085 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,59,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,59,261,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.767704 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,6,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,6,261,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.768803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,60,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,60,261,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.769460 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,61,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,61,261,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.770183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,62,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,62,261,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.770837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,63,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,63,261,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.771474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,64,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,64,261,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.772092 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,65,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,65,261,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.772795 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,66,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,66,261,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.773407 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,67,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,67,261,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.774012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,68,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,68,261,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.774636 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,69,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,69,261,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.775245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,7,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,7,261,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.775852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,70,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,70,261,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.776463 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,71,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,71,261,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.777092 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,72,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,72,261,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.777729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,73,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,73,261,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.778497 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,74,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,74,261,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.779294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,75,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,75,261,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.780136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,76,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,76,261,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.780851 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,77,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,77,261,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.781514 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,78,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,78,261,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.782158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,79,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,79,261,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.782818 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,8,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,8,261,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.783429 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,80,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,80,261,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.784104 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,81,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,81,261,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.784730 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,82,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,82,261,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.785358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,83,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,83,261,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.785987 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,84,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,84,261,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.786667 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,85,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,85,261,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.787302 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,86,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,86,261,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.787914 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,87,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,87,261,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.788527 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,88,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,88,261,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.789172 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,89,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,89,261,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.789800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,9,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,9,261,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.790433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,90,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,90,261,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.791151 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,91,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,91,261,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.791789 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,92,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,92,261,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.792396 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,93,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,93,261,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.793011 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,94,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,94,261,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.793623 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,95,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,95,261,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.794232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,96,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,96,261,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.794870 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,97,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,97,261,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.795601 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,98,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,98,261,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.796263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,99,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[1,8,99,261,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.796824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[8,8,261,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 261],"bool"), list[8,8,261,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 261, 261].  Tensor sizes: [1, 1, 0, 261]
2025-03-05 15:22:40.797645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 262],"bool"), list[8,8,262,262,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 262],"bool"), list[8,8,262,262,], ) 
 The expanded size of the tensor (262) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 262, 262].  Tensor sizes: [1, 1, 0, 262]
2025-03-05 15:22:40.798318 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 263],"bool"), list[8,8,263,263,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 263],"bool"), list[8,8,263,263,], ) 
 The expanded size of the tensor (263) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 263, 263].  Tensor sizes: [1, 1, 0, 263]
2025-03-05 15:22:40.798896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 264],"bool"), list[30,8,264,264,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 264],"bool"), list[30,8,264,264,], ) 
 The expanded size of the tensor (264) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 264, 264].  Tensor sizes: [1, 1, 0, 264]
2025-03-05 15:22:40.799554 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 264],"bool"), list[8,8,264,264,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 264],"bool"), list[8,8,264,264,], ) 
 The expanded size of the tensor (264) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 264, 264].  Tensor sizes: [1, 1, 0, 264]
2025-03-05 15:22:40.800399 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 265],"bool"), list[8,8,265,265,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 265],"bool"), list[8,8,265,265,], ) 
 The expanded size of the tensor (265) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 265, 265].  Tensor sizes: [1, 1, 0, 265]
2025-03-05 15:22:40.801055 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 266],"bool"), list[8,8,266,266,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 266],"bool"), list[8,8,266,266,], ) 
 The expanded size of the tensor (266) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 266, 266].  Tensor sizes: [1, 1, 0, 266]
2025-03-05 15:22:40.801615 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 267],"bool"), list[8,8,267,267,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 267],"bool"), list[8,8,267,267,], ) 
 The expanded size of the tensor (267) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 267, 267].  Tensor sizes: [1, 1, 0, 267]
2025-03-05 15:22:40.802172 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 268],"bool"), list[30,8,268,268,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 268],"bool"), list[30,8,268,268,], ) 
 The expanded size of the tensor (268) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 268, 268].  Tensor sizes: [1, 1, 0, 268]
2025-03-05 15:22:40.802716 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 268],"bool"), list[8,8,268,268,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 268],"bool"), list[8,8,268,268,], ) 
 The expanded size of the tensor (268) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 268, 268].  Tensor sizes: [1, 1, 0, 268]
2025-03-05 15:22:40.803258 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 269],"bool"), list[8,8,269,269,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 269],"bool"), list[8,8,269,269,], ) 
 The expanded size of the tensor (269) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 269, 269].  Tensor sizes: [1, 1, 0, 269]
2025-03-05 15:22:40.803791 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[1,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[1,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.804312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[10,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[10,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.804896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[2,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[2,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.805811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[3,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[3,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.806477 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[30,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[30,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.807166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[4,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[4,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.807919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[5,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[5,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.808626 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[6,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[6,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.809232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[7,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[7,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.809819 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[8,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[8,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.810386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[9,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 26],"bool"), list[9,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 26, 26].  Tensor sizes: [1, 1, 0, 26]
2025-03-05 15:22:40.810954 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 270],"bool"), list[30,8,270,270,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 270],"bool"), list[30,8,270,270,], ) 
 The expanded size of the tensor (270) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 270, 270].  Tensor sizes: [1, 1, 0, 270]
2025-03-05 15:22:40.811500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 270],"bool"), list[8,8,270,270,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 270],"bool"), list[8,8,270,270,], ) 
 The expanded size of the tensor (270) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 270, 270].  Tensor sizes: [1, 1, 0, 270]
2025-03-05 15:22:40.812109 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 271],"bool"), list[8,8,271,271,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 271],"bool"), list[8,8,271,271,], ) 
 The expanded size of the tensor (271) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 271, 271].  Tensor sizes: [1, 1, 0, 271]
2025-03-05 15:22:40.812661 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 272],"bool"), list[8,8,272,272,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 272],"bool"), list[8,8,272,272,], ) 
 The expanded size of the tensor (272) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 272, 272].  Tensor sizes: [1, 1, 0, 272]
2025-03-05 15:22:40.813207 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 273],"bool"), list[8,8,273,273,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 273],"bool"), list[8,8,273,273,], ) 
 The expanded size of the tensor (273) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 273, 273].  Tensor sizes: [1, 1, 0, 273]
2025-03-05 15:22:40.813753 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 274],"bool"), list[30,8,274,274,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 274],"bool"), list[30,8,274,274,], ) 
 The expanded size of the tensor (274) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 274, 274].  Tensor sizes: [1, 1, 0, 274]
2025-03-05 15:22:40.814296 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 274],"bool"), list[8,8,274,274,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 274],"bool"), list[8,8,274,274,], ) 
 The expanded size of the tensor (274) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 274, 274].  Tensor sizes: [1, 1, 0, 274]
2025-03-05 15:22:40.814851 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 275],"bool"), list[8,8,275,275,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 275],"bool"), list[8,8,275,275,], ) 
 The expanded size of the tensor (275) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 275, 275].  Tensor sizes: [1, 1, 0, 275]
2025-03-05 15:22:40.815381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 276],"bool"), list[30,8,276,276,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 276],"bool"), list[30,8,276,276,], ) 
 The expanded size of the tensor (276) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 276, 276].  Tensor sizes: [1, 1, 0, 276]
2025-03-05 15:22:40.815928 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 276],"bool"), list[8,8,276,276,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 276],"bool"), list[8,8,276,276,], ) 
 The expanded size of the tensor (276) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 276, 276].  Tensor sizes: [1, 1, 0, 276]
2025-03-05 15:22:40.816471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 277],"bool"), list[30,8,277,277,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 277],"bool"), list[30,8,277,277,], ) 
 The expanded size of the tensor (277) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 277, 277].  Tensor sizes: [1, 1, 0, 277]
2025-03-05 15:22:40.817041 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 277],"bool"), list[8,8,277,277,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 277],"bool"), list[8,8,277,277,], ) 
 The expanded size of the tensor (277) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 277, 277].  Tensor sizes: [1, 1, 0, 277]
2025-03-05 15:22:40.817569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 278],"bool"), list[8,8,278,278,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 278],"bool"), list[8,8,278,278,], ) 
 The expanded size of the tensor (278) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 278, 278].  Tensor sizes: [1, 1, 0, 278]
2025-03-05 15:22:40.818136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 279],"bool"), list[8,8,279,279,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 279],"bool"), list[8,8,279,279,], ) 
 The expanded size of the tensor (279) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 279, 279].  Tensor sizes: [1, 1, 0, 279]
2025-03-05 15:22:40.818708 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[1,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[1,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.819230 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[10,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[10,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.819770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[2,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[2,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.820342 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[3,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[3,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.820887 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[4,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[4,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.821434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[5,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[5,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.821993 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[6,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[6,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.822541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[7,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[7,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.823094 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[8,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[8,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.823640 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[9,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 27],"bool"), list[9,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 27, 27].  Tensor sizes: [1, 1, 0, 27]
2025-03-05 15:22:40.824279 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 280],"bool"), list[8,8,280,280,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 280],"bool"), list[8,8,280,280,], ) 
 The expanded size of the tensor (280) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 280, 280].  Tensor sizes: [1, 1, 0, 280]
2025-03-05 15:22:40.825178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 281],"bool"), list[8,8,281,281,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 281],"bool"), list[8,8,281,281,], ) 
 The expanded size of the tensor (281) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 281, 281].  Tensor sizes: [1, 1, 0, 281]
2025-03-05 15:22:40.825840 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 282],"bool"), list[8,8,282,282,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 282],"bool"), list[8,8,282,282,], ) 
 The expanded size of the tensor (282) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 282, 282].  Tensor sizes: [1, 1, 0, 282]
2025-03-05 15:22:40.826553 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 283],"bool"), list[8,8,283,283,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 283],"bool"), list[8,8,283,283,], ) 
 The expanded size of the tensor (283) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 283, 283].  Tensor sizes: [1, 1, 0, 283]
2025-03-05 15:22:40.827223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 284],"bool"), list[8,8,284,284,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 284],"bool"), list[8,8,284,284,], ) 
 The expanded size of the tensor (284) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 284, 284].  Tensor sizes: [1, 1, 0, 284]
2025-03-05 15:22:40.827854 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 285],"bool"), list[8,8,285,285,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 285],"bool"), list[8,8,285,285,], ) 
 The expanded size of the tensor (285) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 285, 285].  Tensor sizes: [1, 1, 0, 285]
2025-03-05 15:22:40.828484 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 286],"bool"), list[8,8,286,286,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 286],"bool"), list[8,8,286,286,], ) 
 The expanded size of the tensor (286) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 286, 286].  Tensor sizes: [1, 1, 0, 286]
2025-03-05 15:22:40.829123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 287],"bool"), list[8,8,287,287,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 287],"bool"), list[8,8,287,287,], ) 
 The expanded size of the tensor (287) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 287, 287].  Tensor sizes: [1, 1, 0, 287]
2025-03-05 15:22:40.829751 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 288],"bool"), list[8,8,288,288,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 288],"bool"), list[8,8,288,288,], ) 
 The expanded size of the tensor (288) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 288, 288].  Tensor sizes: [1, 1, 0, 288]
2025-03-05 15:22:40.830372 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 289],"bool"), list[8,8,289,289,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 289],"bool"), list[8,8,289,289,], ) 
 The expanded size of the tensor (289) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 289, 289].  Tensor sizes: [1, 1, 0, 289]
2025-03-05 15:22:40.831039 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[1,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[1,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.831701 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[10,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[10,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.832322 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[2,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[2,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.832950 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[3,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[3,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.833571 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[30,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[30,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.834211 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[4,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[4,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.834834 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[5,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[5,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.835474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[6,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[6,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.836105 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[7,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[7,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.836660 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[8,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[8,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.837199 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[9,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 28],"bool"), list[9,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 28, 28].  Tensor sizes: [1, 1, 0, 28]
2025-03-05 15:22:40.837772 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 290],"bool"), list[8,8,290,290,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 290],"bool"), list[8,8,290,290,], ) 
 The expanded size of the tensor (290) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 290, 290].  Tensor sizes: [1, 1, 0, 290]
2025-03-05 15:22:40.838468 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 291],"bool"), list[8,8,291,291,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 291],"bool"), list[8,8,291,291,], ) 
 The expanded size of the tensor (291) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 291, 291].  Tensor sizes: [1, 1, 0, 291]
2025-03-05 15:22:40.839178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 292],"bool"), list[8,8,292,292,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 292],"bool"), list[8,8,292,292,], ) 
 The expanded size of the tensor (292) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 292, 292].  Tensor sizes: [1, 1, 0, 292]
2025-03-05 15:22:40.839801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 293],"bool"), list[30,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 293],"bool"), list[30,8,293,293,], ) 
 The expanded size of the tensor (293) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 293, 293].  Tensor sizes: [1, 1, 0, 293]
2025-03-05 15:22:40.840352 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 293],"bool"), list[8,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 293],"bool"), list[8,8,293,293,], ) 
 The expanded size of the tensor (293) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 293, 293].  Tensor sizes: [1, 1, 0, 293]
2025-03-05 15:22:40.840884 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 298],"bool"), list[30,8,298,298,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 298],"bool"), list[30,8,298,298,], ) 
 The expanded size of the tensor (298) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 298, 298].  Tensor sizes: [1, 1, 0, 298]
2025-03-05 15:22:40.841408 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[1,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[1,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.841934 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[10,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[10,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.842453 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[2,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[2,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.842984 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[3,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[3,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.843513 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[30,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[30,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.844046 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[4,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[4,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.844556 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[5,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[5,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.845080 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[6,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[6,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.845644 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[7,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[7,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.846849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[8,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[8,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.847712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[9,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 29],"bool"), list[9,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 29, 29].  Tensor sizes: [1, 1, 0, 29]
2025-03-05 15:22:40.848398 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[1,4,1,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[1,4,1,2,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 4, 1, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.849051 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[1,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[1,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.849716 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[10,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[10,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.850356 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[2,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[2,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.850982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[3,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[3,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.851600 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[4,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[4,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.852220 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[5,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[5,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.852837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[6,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[6,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.853446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[7,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[7,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.854063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[8,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[8,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.854670 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[9,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 2],"bool"), list[9,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 2, 2].  Tensor sizes: [1, 1, 0, 2]
2025-03-05 15:22:40.855266 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 302],"bool"), list[30,8,302,302,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 302],"bool"), list[30,8,302,302,], ) 
 The expanded size of the tensor (302) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 302, 302].  Tensor sizes: [1, 1, 0, 302]
2025-03-05 15:22:40.855876 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 307],"bool"), list[30,8,307,307,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 307],"bool"), list[30,8,307,307,], ) 
 The expanded size of the tensor (307) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 307, 307].  Tensor sizes: [1, 1, 0, 307]
2025-03-05 15:22:40.856473 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[1,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[1,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.857133 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[10,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[10,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.857777 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[2,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[2,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.858401 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[3,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[3,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.859013 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[30,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[30,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.859631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[4,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[4,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.860241 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[5,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[5,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.860849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[6,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[6,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.861504 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[7,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[7,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.862165 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[8,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[8,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.862794 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[9,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 30],"bool"), list[9,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 30, 30].  Tensor sizes: [1, 1, 0, 30]
2025-03-05 15:22:40.863403 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[1,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[1,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.864012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[10,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[10,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.864671 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[2,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[2,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.865332 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[3,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[3,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.865962 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[30,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[30,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.866623 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[4,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[4,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.867248 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[5,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[5,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.867865 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[6,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[6,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.868491 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[7,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[7,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.869119 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[8,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[8,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.869746 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[9,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 31],"bool"), list[9,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 31, 31].  Tensor sizes: [1, 1, 0, 31]
2025-03-05 15:22:40.870345 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[1,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[1,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.871032 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[10,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[10,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.871650 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[2,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[2,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.872270 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[3,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[3,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.872895 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[30,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[30,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.873501 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[4,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[4,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.874116 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[5,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[5,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.874731 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[6,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[6,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.875351 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[7,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[7,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.875963 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[8,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[8,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.876625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[9,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 32],"bool"), list[9,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 32, 32].  Tensor sizes: [1, 1, 0, 32]
2025-03-05 15:22:40.877251 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 336],"bool"), list[30,8,336,336,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 336],"bool"), list[30,8,336,336,], ) 
 The expanded size of the tensor (336) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 336, 336].  Tensor sizes: [1, 1, 0, 336]
2025-03-05 15:22:40.877957 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 339],"bool"), list[30,8,339,339,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 339],"bool"), list[30,8,339,339,], ) 
 The expanded size of the tensor (339) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 339, 339].  Tensor sizes: [1, 1, 0, 339]
2025-03-05 15:22:40.878575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[1,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[1,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.879189 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[10,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[10,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.879814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[2,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[2,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.880443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[3,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[3,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.881076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[30,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[30,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.881688 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[4,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[4,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.882345 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[5,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[5,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.882979 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[6,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[6,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.883604 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[7,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[7,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.884215 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[8,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[8,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.884880 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[9,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 33],"bool"), list[9,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 33, 33].  Tensor sizes: [1, 1, 0, 33]
2025-03-05 15:22:40.885504 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[1,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[1,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.886133 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[10,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[10,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.886768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[2,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[2,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.887383 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[3,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[3,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.887994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[30,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[30,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.888617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[4,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[4,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.889238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[5,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[5,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.889859 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[6,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[6,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.890477 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[7,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[7,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.891097 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[8,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[8,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.891716 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[9,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 34],"bool"), list[9,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 34, 34].  Tensor sizes: [1, 1, 0, 34]
2025-03-05 15:22:40.892318 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 355],"bool"), list[30,8,355,355,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 355],"bool"), list[30,8,355,355,], ) 
 The expanded size of the tensor (355) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 355, 355].  Tensor sizes: [1, 1, 0, 355]
2025-03-05 15:22:40.892942 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[1,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[1,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.893560 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[10,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[10,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.894190 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[2,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[2,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.894814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[3,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[3,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.895506 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[30,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[30,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.896217 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[4,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[4,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.896856 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[5,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[5,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.897471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[6,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[6,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.898156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[7,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[7,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.898803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[8,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[8,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.899434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[9,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 35],"bool"), list[9,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 35, 35].  Tensor sizes: [1, 1, 0, 35]
2025-03-05 15:22:40.900078 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 369],"bool"), list[30,8,369,369,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 369],"bool"), list[30,8,369,369,], ) 
 The expanded size of the tensor (369) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 369, 369].  Tensor sizes: [1, 1, 0, 369]
2025-03-05 15:22:40.900715 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[1,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[1,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.901342 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[10,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[10,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.901998 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[2,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[2,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.902633 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[3,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[3,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.903236 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[30,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[30,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.903846 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[4,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[4,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.904511 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[5,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[5,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.905219 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[6,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[6,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.905876 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[7,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[7,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.906493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[8,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[8,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.907096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[9,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 36],"bool"), list[9,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 36, 36].  Tensor sizes: [1, 1, 0, 36]
2025-03-05 15:22:40.907708 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[1,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[1,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.908320 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[10,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[10,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.908926 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[2,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[2,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.909524 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[3,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[3,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.910158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[4,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[4,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.910824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[5,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[5,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.911541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[6,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[6,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.912192 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[7,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[7,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.912845 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[8,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[8,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.913407 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[9,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 37],"bool"), list[9,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 37, 37].  Tensor sizes: [1, 1, 0, 37]
2025-03-05 15:22:40.914002 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,1,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,1,385,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.914735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,10,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,10,385,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.915351 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,100,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,100,385,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.915977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,101,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,101,385,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.916529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,102,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,102,385,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.917080 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,103,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,103,385,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.917616 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,104,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,104,385,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.918169 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,105,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,105,385,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.918766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,106,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,106,385,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.919286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,107,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,107,385,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.919815 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,108,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,108,385,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.920326 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,109,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,109,385,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.920858 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,11,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,11,385,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.921383 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,110,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,110,385,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.921937 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,111,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,111,385,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.922488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,112,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,112,385,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.923015 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,113,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,113,385,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.923527 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,114,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,114,385,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.924425 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,115,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,115,385,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.925263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,116,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,116,385,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.925868 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,117,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,117,385,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.926432 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,118,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,118,385,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.926985 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,119,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,119,385,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.927512 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,12,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,12,385,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.928046 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,120,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,120,385,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.928597 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,121,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,121,385,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.929130 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,122,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,122,385,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.929660 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,123,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,123,385,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.930186 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,124,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,124,385,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.930723 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,125,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,125,385,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.931243 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,126,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,126,385,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.931854 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,127,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,127,385,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.932789 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,128,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,128,385,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.933459 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,129,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,129,385,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.934121 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,13,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,13,385,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.935155 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,130,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,130,385,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.935790 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,131,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,131,385,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.936381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,132,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,132,385,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.936957 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,133,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,133,385,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.937515 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,134,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,134,385,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.938122 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,135,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,135,385,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.938695 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,136,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,136,385,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.939239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,137,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,137,385,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.939780 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,138,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,138,385,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.940323 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,139,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,139,385,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.940871 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,14,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,14,385,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.941407 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,140,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,140,385,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.941961 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,141,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,141,385,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.942523 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,142,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,142,385,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.943077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,143,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,143,385,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.943621 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,144,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,144,385,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.944163 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,145,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,145,385,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.944727 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,146,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,146,385,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.945292 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,147,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,147,385,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.945847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,148,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,148,385,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.946379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,149,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,149,385,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.946942 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,15,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,15,385,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.947493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,150,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,150,385,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.948039 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,151,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,151,385,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.948578 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,152,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,152,385,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.949121 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,153,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,153,385,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.949666 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,154,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,154,385,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.950215 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,155,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,155,385,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.950813 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,156,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,156,385,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.951365 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,157,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,157,385,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.951912 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,158,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,158,385,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.952474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,159,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,159,385,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 159, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.953015 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,16,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,16,385,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.953550 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,160,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,160,385,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 160, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.954090 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,161,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,161,385,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 161, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.954634 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,162,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,162,385,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 162, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.955202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,163,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,163,385,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 163, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.955743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,164,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,164,385,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 164, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.956265 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,165,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,165,385,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 165, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.956797 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,166,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,166,385,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 166, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.957327 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,167,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,167,385,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 167, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.957872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,168,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,168,385,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 168, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.958394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,169,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,169,385,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 169, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.958931 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,17,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,17,385,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.959457 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,170,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,170,385,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 170, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.960010 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,171,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,171,385,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 171, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.960911 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,172,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,172,385,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 172, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.961571 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,173,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,173,385,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 173, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.962214 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,174,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,174,385,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 174, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.962848 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,175,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,175,385,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 175, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.963534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,176,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,176,385,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 176, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.964181 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,177,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,177,385,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 177, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.964813 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,178,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,178,385,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 178, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.965441 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,179,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,179,385,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 179, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.966108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,18,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,18,385,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.966767 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,180,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,180,385,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 180, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.967387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,181,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,181,385,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 181, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.968009 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,182,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,182,385,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 182, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.968650 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,183,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,183,385,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 183, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.969265 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,184,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,184,385,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 184, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.969881 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,185,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,185,385,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 185, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.970488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,186,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,186,385,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 186, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.971108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,187,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,187,385,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 187, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.971728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,188,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,188,385,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 188, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.972352 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,189,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,189,385,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 189, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.972988 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,19,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,19,385,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.973609 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,190,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,190,385,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 190, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.974222 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,191,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,191,385,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 191, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.974852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,192,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,192,385,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 192, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.975791 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,2,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,2,385,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.976439 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,20,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,20,385,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.977166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,21,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,21,385,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.977754 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,22,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,22,385,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.978310 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,23,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,23,385,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.978882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,24,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,24,385,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.979419 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,25,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,25,385,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.980035 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,26,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,26,385,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.980594 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,27,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,27,385,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.981145 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,28,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,28,385,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.981683 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,29,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,29,385,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.982232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,3,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,3,385,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.982777 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,30,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,30,385,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.983305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,31,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,31,385,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.983848 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,32,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,32,385,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.984378 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,33,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,33,385,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.984923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,34,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,34,385,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.985463 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,35,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,35,385,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.986183 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,36,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,36,385,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.986829 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,37,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,37,385,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.987508 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,38,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,38,385,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.988154 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,39,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,39,385,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.988796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,4,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,4,385,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.989438 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,40,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,40,385,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.990078 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,41,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,41,385,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.990706 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,42,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,42,385,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.991312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,43,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,43,385,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.991935 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,44,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,44,385,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.992543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,45,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,45,385,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.993153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,46,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,46,385,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.993789 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,47,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,47,385,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.994415 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,48,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,48,385,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.995049 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,49,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,49,385,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.995672 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,5,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,5,385,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.996305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,50,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,50,385,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.996923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,51,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,51,385,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.997759 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,52,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,52,385,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.998347 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,53,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,53,385,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.998901 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,54,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,54,385,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:40.999438 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,55,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,55,385,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.000030 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,56,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,56,385,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.000748 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,57,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,57,385,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.001386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,58,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,58,385,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.002000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,59,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,59,385,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.002621 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,6,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,6,385,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.003334 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,60,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,60,385,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.004006 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,61,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,61,385,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.004661 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,62,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,62,385,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.005317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,63,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,63,385,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.005997 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,64,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,64,385,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.006728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,65,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,65,385,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.007404 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,66,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,66,385,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.008038 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,67,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,67,385,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.008676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,68,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,68,385,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.009294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,69,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,69,385,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.009915 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,7,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,7,385,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.010591 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,70,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,70,385,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.011258 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,71,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,71,385,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.011918 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,72,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,72,385,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.012555 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,73,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,73,385,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.013202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,74,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,74,385,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.013879 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,75,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,75,385,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.014517 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,76,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,76,385,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.015160 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,77,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,77,385,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.015800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,78,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,78,385,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.016448 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,79,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,79,385,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.017094 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,8,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,8,385,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.017753 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,80,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,80,385,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.018373 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,81,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,81,385,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.018990 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,82,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,82,385,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.019944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,83,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,83,385,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.020516 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,84,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,84,385,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.021082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,85,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,85,385,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.021698 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,86,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,86,385,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.022239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,87,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,87,385,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.022787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,88,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,88,385,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.023338 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,89,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,89,385,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.023885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,9,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,9,385,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.024435 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,90,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,90,385,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.024982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,91,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,91,385,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.025529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,92,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,92,385,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.026146 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,93,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,93,385,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.026701 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,94,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,94,385,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.027228 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,95,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,95,385,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.027771 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,96,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,96,385,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.028302 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,97,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,97,385,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.028839 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,98,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,98,385,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.029364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,99,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 385],"bool"), list[1,8,99,385,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 385].  Tensor sizes: [1, 1, 0, 385]
2025-03-05 15:22:41.029921 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[1,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[1,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.030462 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[10,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[10,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.031012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[2,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[2,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.031540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[3,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[3,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.032111 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[4,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[4,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.032640 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[5,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[5,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.033167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[6,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[6,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.033712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[7,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[7,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.034238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[8,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[8,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.034772 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[9,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 38],"bool"), list[9,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 38, 38].  Tensor sizes: [1, 1, 0, 38]
2025-03-05 15:22:41.035313 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[1,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[1,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.035847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[10,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[10,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.036395 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[2,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[2,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.036932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[3,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[3,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.037469 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[30,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[30,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.038000 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[4,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[4,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.038529 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[5,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[5,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.039079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[6,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[6,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.039608 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[7,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[7,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.040134 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[8,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[8,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.040688 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[9,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 39],"bool"), list[9,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 39, 39].  Tensor sizes: [1, 1, 0, 39]
2025-03-05 15:22:41.041211 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[1,4,1,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[1,4,1,3,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 4, 1, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.041741 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[1,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[1,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.042269 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[10,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[10,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.042797 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[2,4,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[2,4,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 4, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.043344 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[2,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[2,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.043878 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[3,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[3,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.044404 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[4,4,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[4,4,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 4, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.044940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[4,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[4,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.045468 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[5,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[5,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.045990 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[6,4,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[6,4,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 4, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.046520 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[6,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[6,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.047065 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[7,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[7,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.047610 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[8,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[8,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.048166 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[9,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 3],"bool"), list[9,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 3, 3].  Tensor sizes: [1, 1, 0, 3]
2025-03-05 15:22:41.048704 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[1,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[1,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.049259 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[10,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[10,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.049796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[2,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[2,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.050312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[3,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[3,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.050873 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[4,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[4,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.051406 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[5,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[5,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.056469 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[6,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[6,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.057187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[7,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[7,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.057788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[8,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[8,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.058312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[9,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 40],"bool"), list[9,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 40, 40].  Tensor sizes: [1, 1, 0, 40]
2025-03-05 15:22:41.058863 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[1,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[1,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.059430 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[10,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[10,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.059976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[2,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[2,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.060500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[3,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[3,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.061052 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[4,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[4,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.061589 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[5,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[5,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.062119 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[6,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[6,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.062677 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[7,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[7,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.063202 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[8,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[8,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.063732 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[9,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 41],"bool"), list[9,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 41, 41].  Tensor sizes: [1, 1, 0, 41]
2025-03-05 15:22:41.064248 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[1,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[1,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.064809 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[10,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[10,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.065336 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[2,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[2,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.065870 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[3,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[3,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.066397 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[30,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[30,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.066944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[4,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[4,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.067473 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[5,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[5,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.068005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[6,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[6,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.068533 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[7,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[7,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.069071 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[8,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[8,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.069595 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[9,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 42],"bool"), list[9,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 42, 42].  Tensor sizes: [1, 1, 0, 42]
2025-03-05 15:22:41.070111 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[1,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[1,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.070724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[10,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[10,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.071886 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[2,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[2,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.072506 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[3,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[3,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.073087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[30,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[30,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.073743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[4,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[4,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.074306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[5,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[5,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.074853 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[6,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[6,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.075385 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[7,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[7,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.075927 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[8,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[8,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.076462 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[9,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 43],"bool"), list[9,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 43, 43].  Tensor sizes: [1, 1, 0, 43]
2025-03-05 15:22:41.077005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[1,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[1,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.077544 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[10,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[10,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.078088 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[2,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[2,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.078630 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[3,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[3,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.079167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[30,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[30,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.079769 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[4,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[4,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.080301 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[5,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[5,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.080849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[6,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[6,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.081394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[7,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[7,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.081937 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[8,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[8,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.082471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[9,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 44],"bool"), list[9,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 44, 44].  Tensor sizes: [1, 1, 0, 44]
2025-03-05 15:22:41.083216 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 457],"bool"), list[30,8,457,457,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 457],"bool"), list[30,8,457,457,], ) 
 The expanded size of the tensor (457) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 457, 457].  Tensor sizes: [1, 1, 0, 457]
2025-03-05 15:22:41.083984 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[1,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[1,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.084665 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[10,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[10,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.085336 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[2,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[2,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.086005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[3,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[3,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.086572 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[4,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[4,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.087178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[5,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[5,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.087724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[6,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[6,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.088244 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[7,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[7,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.088994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[8,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[8,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.089661 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[9,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 45],"bool"), list[9,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 45, 45].  Tensor sizes: [1, 1, 0, 45]
2025-03-05 15:22:41.090192 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[1,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[1,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.090727 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[10,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[10,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.091263 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[2,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[2,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.091955 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[3,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[3,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.092673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[30,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[30,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.093198 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[4,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[4,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.093724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[5,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[5,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.094261 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[6,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[6,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.094788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[7,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[7,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.095309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[8,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[8,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.095844 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[9,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 46],"bool"), list[9,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 46, 46].  Tensor sizes: [1, 1, 0, 46]
2025-03-05 15:22:41.096375 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 477],"bool"), list[30,8,477,477,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 477],"bool"), list[30,8,477,477,], ) 
 The expanded size of the tensor (477) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 477, 477].  Tensor sizes: [1, 1, 0, 477]
2025-03-05 15:22:41.096917 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[1,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[1,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.097446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[10,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[10,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.097989 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[2,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[2,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.098531 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[3,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[3,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.099070 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[30,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[30,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.099577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[4,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[4,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.100108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[5,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[5,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.100644 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[6,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[6,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.101167 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[7,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[7,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.101801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[8,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[8,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.102495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[9,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 47],"bool"), list[9,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 47, 47].  Tensor sizes: [1, 1, 0, 47]
2025-03-05 15:22:41.103091 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[1,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[1,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.103821 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[10,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[10,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.104509 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[2,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[2,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.105257 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[3,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[3,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.106020 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[30,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[30,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.106796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[4,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[4,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.107576 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[5,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[5,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.108307 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[6,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[6,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.109023 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[7,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[7,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.109700 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[8,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[8,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.110348 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[9,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 48],"bool"), list[9,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 48, 48].  Tensor sizes: [1, 1, 0, 48]
2025-03-05 15:22:41.110936 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 498],"bool"), list[30,8,498,498,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 498],"bool"), list[30,8,498,498,], ) 
 The expanded size of the tensor (498) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 498, 498].  Tensor sizes: [1, 1, 0, 498]
2025-03-05 15:22:41.111610 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[1,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[1,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.112252 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[10,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[10,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.112925 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[2,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[2,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.113551 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[3,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[3,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.114198 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[30,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[30,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.114880 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[4,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[4,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.115603 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[5,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[5,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.116304 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[6,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[6,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.116951 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[7,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[7,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.117645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[8,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[8,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.118374 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[9,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 49],"bool"), list[9,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 49, 49].  Tensor sizes: [1, 1, 0, 49]
2025-03-05 15:22:41.119034 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[1,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[1,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.119800 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[10,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[10,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.120514 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[2,4,1,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[2,4,1,4,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 4, 1, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.121300 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[2,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[2,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.122032 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[3,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[3,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.122806 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[4,4,1,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[4,4,1,4,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 4, 1, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.123476 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[4,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[4,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.124147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[5,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[5,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.124804 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[6,4,1,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[6,4,1,4,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 4, 1, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.125411 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[6,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[6,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.126034 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[7,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[7,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.126774 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[8,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[8,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.127496 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[9,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 4],"bool"), list[9,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 4, 4].  Tensor sizes: [1, 1, 0, 4]
2025-03-05 15:22:41.128159 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[1,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[1,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.128729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[10,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[10,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.129314 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[2,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[2,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.130081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[3,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[3,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.130739 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[30,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[30,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.131409 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[4,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[4,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.132037 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[5,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[5,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.132575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[6,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[6,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.133113 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[7,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[7,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.133640 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[8,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[8,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.134168 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[9,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 50],"bool"), list[9,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 50, 50].  Tensor sizes: [1, 1, 0, 50]
2025-03-05 15:22:41.134699 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[1,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[1,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.135232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[10,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[10,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.135763 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[2,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[2,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.136269 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[3,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[3,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.136798 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[4,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[4,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.137317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[5,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[5,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.137850 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[6,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[6,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.138400 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[7,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[7,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.138965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[8,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[8,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.139497 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[9,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 51],"bool"), list[9,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 51, 51].  Tensor sizes: [1, 1, 0, 51]
2025-03-05 15:22:41.140061 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[1,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[1,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.140590 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[10,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[10,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.141107 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[2,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[2,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.141625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[3,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[3,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.142135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[30,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[30,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.142654 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[4,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[4,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.143157 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[5,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[5,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.144249 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[6,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[6,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.144970 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[7,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[7,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.145614 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[8,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[8,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.146236 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[9,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 52],"bool"), list[9,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 52, 52].  Tensor sizes: [1, 1, 0, 52]
2025-03-05 15:22:41.146959 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[1,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[1,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.147652 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[10,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[10,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.149014 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[2,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[2,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.149725 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[3,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[3,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.150379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[30,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[30,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.151023 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[4,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[4,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.151671 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[5,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[5,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.152394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[6,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[6,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.153046 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[7,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[7,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.153712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[8,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[8,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.154338 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[9,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 53],"bool"), list[9,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 53, 53].  Tensor sizes: [1, 1, 0, 53]
2025-03-05 15:22:41.154985 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[1,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[1,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.155626 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[10,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[10,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.156250 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[2,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[2,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.156874 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[3,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[3,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.157502 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[30,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[30,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.158136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[4,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[4,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.158761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[5,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[5,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.159377 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[6,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[6,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.159998 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[7,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[7,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.160631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[8,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[8,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.161274 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[9,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 54],"bool"), list[9,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 54, 54].  Tensor sizes: [1, 1, 0, 54]
2025-03-05 15:22:41.161896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[1,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[1,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.162509 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[10,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[10,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.163131 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[2,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[2,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.163788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[3,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[3,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.164393 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[30,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[30,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.165009 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[4,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[4,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.165722 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[5,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[5,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.166381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[6,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[6,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.166950 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[7,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[7,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.167539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[8,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[8,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.168130 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[9,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 55],"bool"), list[9,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 55, 55].  Tensor sizes: [1, 1, 0, 55]
2025-03-05 15:22:41.168692 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[1,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[1,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.169218 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[10,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[10,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.169758 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[2,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[2,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.173420 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[3,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[3,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.174001 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[30,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[30,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.174545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[4,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[4,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.175090 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[5,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[5,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.175641 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[6,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[6,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.176208 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[7,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[7,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.176758 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[8,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[8,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.177297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[9,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 56],"bool"), list[9,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 56, 56].  Tensor sizes: [1, 1, 0, 56]
2025-03-05 15:22:41.177835 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[1,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[1,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.178364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[10,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[10,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.178961 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[2,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[2,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.179496 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[3,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[3,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.180044 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[30,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[30,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.180589 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[4,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[4,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.181141 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[5,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[5,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.181682 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[6,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[6,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.182211 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[7,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[7,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.182749 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[8,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[8,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.183306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[9,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 57],"bool"), list[9,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 57, 57].  Tensor sizes: [1, 1, 0, 57]
2025-03-05 15:22:41.183850 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[1,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[1,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.184407 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[10,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[10,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.184953 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[2,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[2,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.185475 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[3,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[3,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.186008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[4,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[4,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.186538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[5,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[5,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.187072 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[6,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[6,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.187608 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[7,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[7,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.188156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[8,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[8,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.188712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[9,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 58],"bool"), list[9,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 58, 58].  Tensor sizes: [1, 1, 0, 58]
2025-03-05 15:22:41.189245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[1,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[1,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.189825 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[10,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[10,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.190358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[2,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[2,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.190903 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[3,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[3,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.191434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[30,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[30,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.191984 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[4,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[4,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.192500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[5,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[5,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.193038 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[6,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[6,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.193550 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[7,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[7,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.194086 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[8,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[8,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.194623 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[9,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 59],"bool"), list[9,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 59, 59].  Tensor sizes: [1, 1, 0, 59]
2025-03-05 15:22:41.195154 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[1,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[1,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.195705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[10,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[10,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.196239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[2,4,1,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[2,4,1,5,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 4, 1, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.196787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[2,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[2,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.197327 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[3,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[3,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.197866 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[4,4,1,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[4,4,1,5,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 4, 1, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.198399 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[4,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[4,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.198990 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[5,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[5,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.199545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[6,4,1,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[6,4,1,5,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 4, 1, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.200089 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[6,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[6,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.200631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[7,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[7,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.201162 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[8,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[8,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.201705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[9,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 5],"bool"), list[9,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 5, 5].  Tensor sizes: [1, 1, 0, 5]
2025-03-05 15:22:41.202256 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[1,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[1,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.202791 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[10,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[10,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.203317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[2,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[2,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.203859 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[3,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[3,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.204865 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[4,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[4,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.205547 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[5,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[5,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.206180 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[6,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[6,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.206791 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[7,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[7,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.207592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[8,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[8,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.208391 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[9,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 60],"bool"), list[9,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 60, 60].  Tensor sizes: [1, 1, 0, 60]
2025-03-05 15:22:41.208989 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,1,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,1,61,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.209528 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,10,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,10,61,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.210089 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,100,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,100,61,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.210658 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,101,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,101,61,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.211205 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,102,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,102,61,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.211747 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,103,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,103,61,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.212294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,104,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,104,61,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.212828 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,105,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,105,61,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.213348 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,106,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,106,61,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.213867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,107,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,107,61,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.214394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,108,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,108,61,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.214988 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,109,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,109,61,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.215512 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,11,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,11,61,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.216100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,110,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,110,61,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.216618 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,111,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,111,61,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.217138 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,112,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,112,61,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.217663 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,113,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,113,61,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.218181 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,114,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,114,61,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.218695 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,115,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,115,61,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.219206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,116,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,116,61,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.219728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,117,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,117,61,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.220254 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,118,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,118,61,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.220786 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,119,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,119,61,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.221332 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,12,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,12,61,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.221871 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,120,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,120,61,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.222391 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,121,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,121,61,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.222972 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,122,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,122,61,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.223493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,123,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,123,61,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.224026 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,124,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,124,61,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.224557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,125,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,125,61,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.225124 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,13,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,13,61,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.225672 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,14,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,14,61,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.226210 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,15,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,15,61,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.226749 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,16,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,16,61,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.227290 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,17,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,17,61,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.227887 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,18,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,18,61,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.228463 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,19,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,19,61,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.229008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,2,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,2,61,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.229539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,20,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,20,61,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.230096 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,21,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,21,61,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.230638 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,22,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,22,61,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.231235 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,23,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,23,61,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.231788 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,24,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,24,61,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.232339 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,25,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,25,61,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.232895 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,26,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,26,61,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.233491 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,27,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,27,61,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.234091 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,28,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,28,61,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.234666 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,29,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,29,61,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.235218 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,3,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,3,61,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.235772 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,30,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,30,61,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.236317 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,31,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,31,61,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.236883 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,32,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,32,61,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.237444 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,33,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,33,61,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.238064 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,34,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,34,61,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.238630 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,35,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,35,61,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.239173 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,36,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,36,61,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.239740 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,37,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,37,61,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.240309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,38,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,38,61,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.240891 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,39,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,39,61,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.241428 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,4,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,4,61,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.241988 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,40,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,40,61,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.242543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,41,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,41,61,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.243087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,42,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,42,61,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.243620 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,43,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,43,61,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.244152 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,44,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,44,61,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.244868 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,45,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,45,61,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.245416 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,46,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,46,61,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.245958 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,47,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,47,61,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.246677 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,48,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,48,61,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.247375 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,49,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,49,61,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.248110 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,5,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,5,61,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.248734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,50,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,50,61,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.249480 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,51,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,51,61,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.250143 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,52,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,52,61,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.250721 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,53,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,53,61,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.251278 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,54,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,54,61,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.251841 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,55,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,55,61,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.252390 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,56,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,56,61,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.252933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,57,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,57,61,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.253466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,58,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,58,61,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.253994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,59,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,59,61,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.254500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,6,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,6,61,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.255029 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,60,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,60,61,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.255669 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.256204 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,62,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,62,61,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.256740 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,63,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,63,61,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.257257 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,64,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,64,61,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.257787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,65,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,65,61,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.258304 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,66,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,66,61,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.258829 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,67,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,67,61,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.259356 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,68,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,68,61,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.259932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,69,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,69,61,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.260746 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,7,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,7,61,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.261370 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,70,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,70,61,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.262064 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,71,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,71,61,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.262681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,72,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,72,61,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.263333 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,73,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,73,61,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.263971 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,74,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,74,61,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.264534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,75,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,75,61,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.265076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,76,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,76,61,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.265607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,77,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,77,61,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.266141 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,78,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,78,61,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.266712 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,79,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,79,61,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.267288 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,8,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,8,61,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.267866 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,80,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,80,61,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.268446 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,81,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,81,61,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.268975 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,82,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,82,61,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.269492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,83,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,83,61,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.270653 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,84,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,84,61,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.271369 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,85,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,85,61,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.271962 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,86,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,86,61,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.272535 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,87,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,87,61,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.273114 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,88,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,88,61,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.273679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,89,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,89,61,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.274230 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,9,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,9,61,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.274782 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,90,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,90,61,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.275326 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,91,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,91,61,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.275885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,92,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,92,61,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.276426 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,93,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,93,61,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.276978 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,94,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,94,61,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.277607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,95,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,95,61,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.278158 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,96,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,96,61,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.278709 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,97,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,97,61,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.279239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,98,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,98,61,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.279803 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,99,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[1,8,99,61,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.280328 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[10,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[10,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.280861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[2,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[2,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.281381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[3,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[3,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.281926 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[30,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[30,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.282454 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[4,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[4,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.283154 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[5,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[5,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.283843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[6,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[6,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.284470 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[7,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[7,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.285099 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[8,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[8,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.285724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[9,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 61],"bool"), list[9,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 61, 61].  Tensor sizes: [1, 1, 0, 61]
2025-03-05 15:22:41.286330 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[1,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[1,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.286977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[10,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[10,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.287609 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[2,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[2,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.288215 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[3,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[3,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.288846 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[30,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[30,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.289480 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[4,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[4,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.290112 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[5,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[5,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.290738 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[6,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[6,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.291353 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[7,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[7,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.292007 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[8,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[8,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.292634 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[9,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 62],"bool"), list[9,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 62, 62].  Tensor sizes: [1, 1, 0, 62]
2025-03-05 15:22:41.293238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[1,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[1,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.293876 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[10,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[10,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.294492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[2,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[2,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.295120 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[3,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[3,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.295746 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[30,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[30,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.296422 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[4,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[4,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.297026 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[5,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[5,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.297634 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[6,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[6,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.298455 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[7,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[7,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.299133 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[8,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[8,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.299768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[9,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 63],"bool"), list[9,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 63, 63].  Tensor sizes: [1, 1, 0, 63]
2025-03-05 15:22:41.300395 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[1,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[1,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.301009 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[10,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[10,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.301631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[2,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[2,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.302247 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[3,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[3,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.302858 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[30,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[30,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.303466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[4,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[4,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.304100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[5,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[5,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.304698 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[6,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[6,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.305223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[7,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[7,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.305766 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[8,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[8,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.306294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[9,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 64],"bool"), list[9,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 64, 64].  Tensor sizes: [1, 1, 0, 64]
2025-03-05 15:22:41.306818 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,1,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,1,65,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.307342 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,10,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,10,65,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.307871 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,100,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,100,65,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.308391 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,101,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,101,65,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.308920 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,11,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,11,65,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.309436 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,12,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,12,65,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.309973 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,13,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,13,65,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.310493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,14,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,14,65,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.311005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,15,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,15,65,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.311519 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,16,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,16,65,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.312100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,17,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,17,65,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.312625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,18,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,18,65,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.313137 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,19,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,19,65,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.313667 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,2,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,2,65,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.314196 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,20,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,20,65,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.314722 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,21,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,21,65,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.315306 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,22,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,22,65,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.316052 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,23,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,23,65,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.316710 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,24,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,24,65,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.317373 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,25,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,25,65,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.318505 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,26,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,26,65,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.319237 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,27,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,27,65,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.319896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,28,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,28,65,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.320537 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,29,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,29,65,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.321344 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,3,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,3,65,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.322020 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,30,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,30,65,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.322589 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,31,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,31,65,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.323142 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,32,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,32,65,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.323691 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,33,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,33,65,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.324235 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,34,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,34,65,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.324833 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,35,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,35,65,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.325386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,36,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,36,65,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.325933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,37,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,37,65,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.326457 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,38,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,38,65,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.327024 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,39,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,39,65,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.327567 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,4,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,4,65,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.328109 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,40,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,40,65,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.328647 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,41,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,41,65,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.329188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,42,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,42,65,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.329722 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,43,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,43,65,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.330245 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,44,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,44,65,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.330837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,45,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,45,65,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.331364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,46,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,46,65,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.331923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,47,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,47,65,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.332452 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,48,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,48,65,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.332996 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,49,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,49,65,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.333525 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,5,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,5,65,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.334082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,50,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,50,65,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.334618 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,51,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,51,65,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.335134 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,52,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,52,65,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.335663 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,53,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,53,65,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.336189 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,54,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,54,65,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.336733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,55,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,55,65,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.337267 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,56,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,56,65,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.337801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,57,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,57,65,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.338329 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,58,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,58,65,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.338856 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,59,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,59,65,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.339383 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,6,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,6,65,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.339917 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,60,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,60,65,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.340449 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,61,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,61,65,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.341057 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,62,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,62,65,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.341617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,63,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,63,65,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.342169 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,64,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,64,65,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.342730 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.343261 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,66,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,66,65,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.343787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,67,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,67,65,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.344301 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,68,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,68,65,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.344826 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,69,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,69,65,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.345332 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,7,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,7,65,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.345867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,70,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,70,65,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.346399 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,71,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,71,65,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.346929 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,72,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,72,65,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.347449 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,73,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,73,65,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.348023 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,74,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,74,65,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.348544 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,75,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,75,65,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.349114 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,76,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,76,65,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.349654 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,77,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,77,65,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.350185 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,78,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,78,65,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.350728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,79,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,79,65,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.351250 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,8,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,8,65,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.351787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,80,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,80,65,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.352301 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,81,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,81,65,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.352824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,82,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,82,65,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.353344 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,83,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,83,65,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.353900 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,84,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,84,65,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.354424 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,85,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,85,65,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.354949 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,86,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,86,65,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.355474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,87,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,87,65,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.355996 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,88,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,88,65,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.356510 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,89,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,89,65,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.357116 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,9,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,9,65,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.357656 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,90,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,90,65,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.358181 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,91,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,91,65,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.358720 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,92,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,92,65,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.359275 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,93,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,93,65,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.359872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,94,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,94,65,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.360386 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,95,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,95,65,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.360907 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,96,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,96,65,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.361431 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,97,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,97,65,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.361955 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,98,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,98,65,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.362490 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,99,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[1,8,99,65,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.363019 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[10,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[10,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.363540 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[2,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[2,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.364069 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[3,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[3,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.364622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[4,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[4,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.365157 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[5,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[5,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.365686 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[6,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[6,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.366210 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[7,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[7,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.366757 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[8,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[8,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.367290 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[9,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 65],"bool"), list[9,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 65, 65].  Tensor sizes: [1, 1, 0, 65]
2025-03-05 15:22:41.367841 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[1,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[1,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.368370 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[10,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[10,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.368896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[2,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[2,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.369423 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[3,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[3,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.369949 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[30,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[30,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.370471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[4,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[4,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.370995 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[5,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[5,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.371513 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[6,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[6,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.372036 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[7,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[7,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.372549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[8,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[8,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.373081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[9,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 66],"bool"), list[9,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 66, 66].  Tensor sizes: [1, 1, 0, 66]
2025-03-05 15:22:41.373676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[1,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[1,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.374264 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[10,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[10,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.374878 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[2,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[2,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.375417 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[3,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[3,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.375961 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[30,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[30,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.376486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[4,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[4,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.377012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[5,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[5,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.377535 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[6,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[6,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.378074 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[7,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[7,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.378603 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[8,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[8,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.379136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[9,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 67],"bool"), list[9,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 67, 67].  Tensor sizes: [1, 1, 0, 67]
2025-03-05 15:22:41.379679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[1,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[1,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.380221 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[10,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[10,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.380764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[2,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[2,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.381294 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[3,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[3,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.381837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[30,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[30,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.382365 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[4,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[4,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.382919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[5,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[5,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.383460 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[6,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[6,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.384135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[7,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[7,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.385144 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[8,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[8,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.385846 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[9,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 68],"bool"), list[9,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 68, 68].  Tensor sizes: [1, 1, 0, 68]
2025-03-05 15:22:41.386489 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,1,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,1,69,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.387058 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,10,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,10,69,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.387597 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,100,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,100,69,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.388125 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,101,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,101,69,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.388931 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,102,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,102,69,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.389700 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,103,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,103,69,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.390335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,104,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,104,69,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.391016 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,105,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,105,69,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.391651 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,106,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,106,69,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.392268 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,107,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,107,69,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.392896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,108,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,108,69,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.393503 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,109,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,109,69,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.394112 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,11,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,11,69,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.394744 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,110,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,110,69,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.395347 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,111,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,111,69,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.395954 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,112,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,112,69,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.396575 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,113,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,113,69,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.397204 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,114,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,114,69,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.397826 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,115,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,115,69,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.398433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,12,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,12,69,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.399055 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,13,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,13,69,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.399668 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,14,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,14,69,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.400278 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,15,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,15,69,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.400901 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,16,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,16,69,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.401554 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,17,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,17,69,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.402184 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,18,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,18,69,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.402796 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,19,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,19,69,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.403406 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,2,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,2,69,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.404087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,20,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,20,69,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.404884 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,21,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,21,69,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.405508 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,22,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,22,69,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.406137 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,23,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,23,69,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.406770 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,24,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,24,69,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.407381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,25,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,25,69,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.408032 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,26,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,26,69,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.408704 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,27,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,27,69,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.409310 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,28,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,28,69,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.409940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,29,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,29,69,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.410541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,3,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,3,69,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.411182 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,30,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,30,69,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.411821 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,31,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,31,69,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.412357 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,32,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,32,69,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.412901 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,33,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,33,69,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.413466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,34,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,34,69,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.414012 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,35,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,35,69,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.414534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,36,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,36,69,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.415067 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,37,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,37,69,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.415606 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,38,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,38,69,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.416127 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,39,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,39,69,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.416643 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,4,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,4,69,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.417763 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,40,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,40,69,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.418545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,41,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,41,69,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.419256 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,42,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,42,69,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.419917 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,43,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,43,69,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.420545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,44,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,44,69,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.421168 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,45,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,45,69,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.421780 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,46,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,46,69,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.422380 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,47,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,47,69,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.422997 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,48,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,48,69,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.424238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,49,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,49,69,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.425021 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,5,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,5,69,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.425707 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,50,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,50,69,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.426343 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,51,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,51,69,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.427014 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,52,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,52,69,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.427690 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,53,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,53,69,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.428305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,54,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,54,69,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.428935 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,55,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,55,69,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.429543 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,56,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,56,69,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.430154 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,57,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,57,69,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.430851 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,58,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,58,69,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.431476 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,59,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,59,69,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.432087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,6,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,6,69,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.432691 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,60,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,60,69,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.433284 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,61,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,61,69,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.433882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,62,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,62,69,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.434471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,63,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,63,69,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.435077 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,64,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,64,69,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.435690 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,65,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,65,69,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.436284 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,66,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,66,69,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.436934 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,67,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,67,69,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.437546 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,68,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,68,69,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.438164 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.438776 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,7,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,7,69,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.439370 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,70,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,70,69,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.440015 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,71,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,71,69,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.440632 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,72,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,72,69,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.441223 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,73,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,73,69,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.441843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,74,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,74,69,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.442454 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,75,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,75,69,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.443060 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,76,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,76,69,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.443673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,77,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,77,69,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.444272 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,78,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,78,69,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.444894 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,79,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,79,69,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.445499 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,8,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,8,69,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.446108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,80,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,80,69,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.446709 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,81,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,81,69,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.447315 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,82,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,82,69,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.447957 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,83,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,83,69,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.448547 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,84,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,84,69,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.449152 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,85,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,85,69,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.449830 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,86,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,86,69,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.450432 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,87,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,87,69,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.451063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,88,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,88,69,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.451711 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,89,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,89,69,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.452319 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,9,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,9,69,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.452925 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,90,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,90,69,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.453541 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,91,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,91,69,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.454149 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,92,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,92,69,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.454747 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,93,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,93,69,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.455336 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,94,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,94,69,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.455935 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,95,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,95,69,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.456538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,96,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,96,69,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.457143 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,97,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,97,69,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.457750 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,98,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,98,69,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.458366 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,99,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[1,8,99,69,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.458994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[10,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[10,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.459666 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[2,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[2,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.460309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[3,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[3,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.461062 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[30,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[30,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.461715 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[4,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[4,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.462346 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[5,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[5,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.462968 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[6,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[6,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.463566 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[7,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[7,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.464203 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[8,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[8,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.464823 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[9,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 69],"bool"), list[9,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 69, 69].  Tensor sizes: [1, 1, 0, 69]
2025-03-05 15:22:41.465426 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[1,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[1,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.466958 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[10,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[10,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.467854 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[2,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[2,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.468602 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[3,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[3,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.469318 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[4,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[4,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.470025 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[5,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[5,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.470724 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[6,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[6,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.471383 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[7,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[7,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.472081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[8,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[8,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.472769 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[9,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 6],"bool"), list[9,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 6, 6].  Tensor sizes: [1, 1, 0, 6]
2025-03-05 15:22:41.473442 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[1,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[1,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.474135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[10,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[10,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.474824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[2,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[2,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.475495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[3,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[3,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.476176 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[30,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[30,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.476819 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[4,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[4,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.477517 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[5,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[5,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.478172 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[6,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[6,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.478871 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[7,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[7,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.479549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[8,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[8,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.480278 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[9,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 70],"bool"), list[9,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 70, 70].  Tensor sizes: [1, 1, 0, 70]
2025-03-05 15:22:41.480958 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[1,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[1,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.481532 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[10,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[10,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.482072 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[2,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[2,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.482605 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[3,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[3,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.483128 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[30,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[30,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.483729 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[4,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[4,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.484511 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[5,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[5,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.485461 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[6,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[6,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.486208 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[7,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[7,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.486871 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[8,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[8,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.487493 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[9,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 71],"bool"), list[9,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 71, 71].  Tensor sizes: [1, 1, 0, 71]
2025-03-05 15:22:41.488115 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[1,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[1,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.488757 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[10,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[10,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.489357 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[2,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[2,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.489966 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[3,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[3,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.490572 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[30,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[30,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.491206 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[4,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[4,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.491814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[5,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[5,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.492422 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[6,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[6,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.493097 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[7,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[7,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.493710 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[8,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[8,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.500474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[9,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 72],"bool"), list[9,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 72, 72].  Tensor sizes: [1, 1, 0, 72]
2025-03-05 15:22:41.504324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,1,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,1,73,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.505004 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,10,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,10,73,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.505642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,100,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,100,73,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.506254 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,101,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,101,73,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.506872 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,102,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,102,73,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.507486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,103,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,103,73,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.508125 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,104,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,104,73,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.508743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,105,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,105,73,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.509810 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,106,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,106,73,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.510612 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,107,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,107,73,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.511331 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,108,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,108,73,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.511896 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,109,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,109,73,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.512436 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,11,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,11,73,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.512998 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,110,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,110,73,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.513619 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,111,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,111,73,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.514387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,112,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,112,73,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.515022 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,113,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,113,73,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.515649 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,114,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,114,73,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.516380 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,115,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,115,73,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.517045 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,116,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,116,73,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.517933 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,117,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,117,73,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.518735 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,12,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,12,73,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.519513 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,13,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,13,73,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.520293 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,14,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,14,73,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.521063 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,15,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,15,73,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.521840 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,16,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,16,73,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.522604 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,17,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,17,73,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.523756 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,18,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,18,73,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.529941 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,19,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,19,73,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.531028 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,2,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,2,73,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.532397 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,20,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,20,73,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.533079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,21,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,21,73,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.533722 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,22,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,22,73,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.534455 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,23,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,23,73,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.535073 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,24,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,24,73,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.535721 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,25,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,25,73,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.536837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,26,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,26,73,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.537570 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,27,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,27,73,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.538229 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,28,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,28,73,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.538807 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,29,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,29,73,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.539381 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,3,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,3,73,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.540007 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,30,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,30,73,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.540618 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,31,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,31,73,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.541191 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,32,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,32,73,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.541852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,33,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,33,73,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.544283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,34,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,34,73,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.545090 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,35,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,35,73,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.545785 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,36,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,36,73,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.546475 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,37,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,37,73,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.547153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,38,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,38,73,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.547799 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,39,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,39,73,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.548414 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,4,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,4,73,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.552225 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,40,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,40,73,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.552953 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,41,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,41,73,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.553592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,42,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,42,73,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.554229 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,43,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,43,73,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.557030 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,44,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,44,73,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.558091 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,45,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,45,73,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.558717 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,46,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,46,73,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.559313 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,47,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,47,73,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.559927 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,48,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,48,73,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.560527 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,49,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,49,73,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.561148 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,5,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,5,73,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.561768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,50,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,50,73,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.562378 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,51,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,51,73,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.562988 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,52,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,52,73,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.563590 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,53,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,53,73,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.564181 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,54,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,54,73,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.564780 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,55,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,55,73,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.565375 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,56,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,56,73,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.565977 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,57,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,57,73,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.566577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,58,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,58,73,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.567180 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,59,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,59,73,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.567793 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,6,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,6,73,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.568392 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,60,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,60,73,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.569002 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,61,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,61,73,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.569608 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,62,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,62,73,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.570207 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,63,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,63,73,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.570814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,64,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,64,73,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.571652 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,65,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,65,73,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.572327 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,66,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,66,73,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.572958 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,67,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,67,73,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.573755 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,68,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,68,73,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.574410 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,69,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,69,73,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.575073 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,7,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,7,73,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.575700 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,70,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,70,73,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.576329 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,71,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,71,73,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.576968 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,72,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,72,73,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.577645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.578385 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,74,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,74,73,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.585284 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,75,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,75,73,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.586126 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,76,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,76,73,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.586801 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,77,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,77,73,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.587422 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,78,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,78,73,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.588087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,79,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,79,73,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.588727 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,8,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,8,73,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.589364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,80,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,80,73,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.590011 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,81,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,81,73,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.590673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,82,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,82,73,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.591288 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,83,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,83,73,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.591919 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,84,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,84,73,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.592548 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,85,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,85,73,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.593182 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,86,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,86,73,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.593825 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,87,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,87,73,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.594488 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,88,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,88,73,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.595129 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,89,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,89,73,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.595774 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,9,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,9,73,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.596463 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,90,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,90,73,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.597388 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,91,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,91,73,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.598056 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,92,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,92,73,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.598761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,93,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,93,73,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.599425 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,94,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,94,73,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.600064 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,95,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,95,73,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.602681 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,96,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,96,73,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.603313 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,97,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,97,73,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.603945 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,98,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,98,73,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.604596 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,99,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[1,8,99,73,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.605231 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[10,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[10,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.605882 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[2,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[2,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.606495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[3,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[3,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.607193 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[30,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[30,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.607823 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[4,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[4,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.608422 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[5,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[5,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.609050 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[6,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[6,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.609690 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[7,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[7,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.610286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[8,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[8,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.610920 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[9,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 73],"bool"), list[9,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 73, 73].  Tensor sizes: [1, 1, 0, 73]
2025-03-05 15:22:41.611522 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[1,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[1,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.612146 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[10,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[10,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.612791 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[2,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[2,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.613393 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[3,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[3,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.614009 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[30,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[30,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.614654 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[4,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[4,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.615258 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[5,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[5,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.615865 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[6,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[6,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.616460 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[7,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[7,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.617078 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[8,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[8,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.621092 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[9,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 74],"bool"), list[9,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 74, 74].  Tensor sizes: [1, 1, 0, 74]
2025-03-05 15:22:41.621749 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[1,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[1,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.622359 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[10,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[10,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.622983 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[2,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[2,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.623576 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[3,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[3,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.624178 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[30,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[30,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.624798 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[4,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[4,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.625915 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[5,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[5,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.626537 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[6,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[6,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.627147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[7,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[7,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.627746 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[8,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[8,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.628635 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[9,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 75],"bool"), list[9,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 75, 75].  Tensor sizes: [1, 1, 0, 75]
2025-03-05 15:22:41.629401 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[1,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[1,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.630234 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[10,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[10,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.630907 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[2,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[2,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.631631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[3,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[3,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.632326 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[30,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[30,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.633018 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[4,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[4,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.633727 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[5,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[5,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.634388 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[6,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[6,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.635025 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[7,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[7,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.635673 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[8,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[8,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.636283 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[9,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 76],"bool"), list[9,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 76, 76].  Tensor sizes: [1, 1, 0, 76]
2025-03-05 15:22:41.636861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[1,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[1,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.637564 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[10,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[10,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.638150 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[2,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[2,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.638713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[3,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[3,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.639265 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[30,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[30,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.639824 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[4,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[4,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.640387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[5,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[5,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.640957 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[6,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[6,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.641500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[7,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[7,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.642086 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[8,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[8,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.642635 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[9,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 77],"bool"), list[9,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 77, 77].  Tensor sizes: [1, 1, 0, 77]
2025-03-05 15:22:41.643187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[1,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[1,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.643774 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[10,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[10,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.644371 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[2,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[2,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.644923 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[3,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[3,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.645452 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[30,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[30,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.645987 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[4,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[4,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.646516 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[5,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[5,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.647073 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[6,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[6,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.647632 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[7,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[7,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.648153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[8,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[8,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.648701 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[9,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 78],"bool"), list[9,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 78, 78].  Tensor sizes: [1, 1, 0, 78]
2025-03-05 15:22:41.649232 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[1,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[1,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.649761 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[10,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[10,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.650279 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[2,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[2,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.650790 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[3,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[3,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.651319 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[30,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[30,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.651846 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[4,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[4,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.652371 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[5,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[5,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.652902 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[6,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[6,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.653451 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[7,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[7,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.653976 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[8,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[8,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.654492 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[9,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 79],"bool"), list[9,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 79, 79].  Tensor sizes: [1, 1, 0, 79]
2025-03-05 15:22:41.655019 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[1,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[1,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.655538 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[10,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[10,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.656065 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[14,4,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[14,4,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [14, 4, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.656635 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[2,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[2,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.657173 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[3,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[3,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.657721 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[4,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[4,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.658271 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[5,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[5,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.658887 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[6,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[6,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.659433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[7,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[7,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.659973 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[8,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[8,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.660512 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[9,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 7],"bool"), list[9,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 7, 7].  Tensor sizes: [1, 1, 0, 7]
2025-03-05 15:22:41.661079 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[1,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[1,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.661617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[10,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[10,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.662147 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[2,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[2,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.662733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[3,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[3,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.663255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[30,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[30,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.663787 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[4,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[4,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.664318 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[5,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[5,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.664839 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[6,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[6,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.665359 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[7,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[7,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.665891 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[8,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[8,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.666405 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[9,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 80],"bool"), list[9,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 80, 80].  Tensor sizes: [1, 1, 0, 80]
2025-03-05 15:22:41.666934 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[1,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[1,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.667460 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[10,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[10,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.667997 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[2,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[2,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.668511 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[3,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[3,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.669043 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[30,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[30,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.669567 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[4,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[4,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.670107 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[5,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[5,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.670633 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[6,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[6,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.671155 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[7,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[7,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.671687 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[8,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[8,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.672197 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[9,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 81],"bool"), list[9,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 81, 81].  Tensor sizes: [1, 1, 0, 81]
2025-03-05 15:22:41.672719 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[1,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[1,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.673242 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[10,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[10,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.673772 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[2,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[2,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.674309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[3,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[3,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.674879 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[30,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[30,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.675403 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[4,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[4,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.675928 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[5,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[5,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.676445 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[6,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[6,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.676972 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[7,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[7,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.677486 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[8,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[8,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.678009 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[9,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 82],"bool"), list[9,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 82, 82].  Tensor sizes: [1, 1, 0, 82]
2025-03-05 15:22:41.678521 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[1,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[1,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.679043 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[10,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[10,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.679558 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[2,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[2,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.680082 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[3,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[3,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.680609 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[30,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[30,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.681123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[4,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[4,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.681645 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[5,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[5,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.682222 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[6,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[6,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.682876 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[7,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[7,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.683474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[8,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[8,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.684076 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[9,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 83],"bool"), list[9,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 83, 83].  Tensor sizes: [1, 1, 0, 83]
2025-03-05 15:22:41.684625 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[1,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[1,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.685155 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[10,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[10,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.685689 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[2,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[2,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.686211 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[3,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[3,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.686742 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[30,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[30,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.687267 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[4,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[4,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.688021 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[5,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[5,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.688743 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[6,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[6,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.689375 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[7,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[7,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.689997 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[8,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[8,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.690622 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[9,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 84],"bool"), list[9,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 84, 84].  Tensor sizes: [1, 1, 0, 84]
2025-03-05 15:22:41.691265 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,1,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,1,85,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.691849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,10,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,10,85,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.692433 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,100,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,100,85,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 100, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.693019 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,101,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,101,85,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 101, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.693569 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,102,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,102,85,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 102, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.694120 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,103,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,103,85,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 103, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.694699 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,104,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,104,85,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 104, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.695240 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,105,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,105,85,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 105, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.695794 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,106,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,106,85,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 106, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.696316 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,107,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,107,85,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 107, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.696847 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,108,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,108,85,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 108, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.697394 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,109,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,109,85,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 109, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.697945 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,11,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,11,85,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.698500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,110,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,110,85,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 110, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.699041 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,111,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,111,85,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 111, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.699557 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,112,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,112,85,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 112, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.700371 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,113,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,113,85,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 113, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.701083 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,114,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,114,85,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 114, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.701638 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,115,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,115,85,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 115, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.702226 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,116,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,116,85,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 116, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.702773 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,117,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,117,85,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 117, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.703297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,118,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,118,85,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 118, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.703826 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,119,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,119,85,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 119, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.704391 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,12,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,12,85,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.704924 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,120,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,120,85,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 120, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.705447 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,121,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,121,85,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 121, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.705989 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,122,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,122,85,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 122, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.706500 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,123,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,123,85,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 123, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.707021 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,124,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,124,85,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 124, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.707526 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,125,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,125,85,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 125, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.708046 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,126,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,126,85,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 126, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.708551 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,127,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,127,85,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 127, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.709064 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,128,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,128,85,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 128, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.709644 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,129,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,129,85,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 129, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.710503 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,13,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,13,85,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.711130 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,130,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,130,85,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 130, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.711750 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,131,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,131,85,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 131, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.712351 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,132,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,132,85,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 132, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.712956 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,133,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,133,85,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 133, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.713550 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,134,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,134,85,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 134, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.714153 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,135,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,135,85,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 135, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.714756 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,136,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,136,85,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 136, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.715367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,137,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,137,85,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 137, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.715994 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,138,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,138,85,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 138, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.716530 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,139,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,139,85,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 139, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.717091 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,14,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,14,85,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.717660 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,140,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,140,85,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 140, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.718185 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,141,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,141,85,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 141, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.718719 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,142,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,142,85,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 142, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.719238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,143,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,143,85,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 143, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.719768 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,144,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,144,85,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 144, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.720293 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,145,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,145,85,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 145, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.720812 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,146,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,146,85,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 146, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.721323 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,147,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,147,85,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 147, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.721837 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,148,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,148,85,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 148, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.722369 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,149,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,149,85,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 149, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.722891 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,15,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,15,85,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.723404 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,150,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,150,85,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 150, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.723921 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,151,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,151,85,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 151, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.724441 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,152,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,152,85,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 152, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.724965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,153,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,153,85,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 153, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.725475 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,154,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,154,85,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 154, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.725990 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,155,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,155,85,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 155, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.726534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,156,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,156,85,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 156, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.727131 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,157,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,157,85,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 157, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.727840 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,158,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,158,85,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 158, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.728461 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,159,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,159,85,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 159, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.729084 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,16,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,16,85,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.729721 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,160,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,160,85,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 160, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.730335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,161,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,161,85,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 161, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.730979 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,162,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,162,85,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 162, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.731565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,163,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,163,85,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 163, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.732227 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,164,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,164,85,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 164, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.732956 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,165,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,165,85,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 165, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.733648 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,166,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,166,85,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 166, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.734226 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,167,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,167,85,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 167, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.734777 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,168,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,168,85,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 168, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.735322 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,169,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,169,85,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 169, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.735852 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,17,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,17,85,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.736393 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,170,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,170,85,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 170, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.737028 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,171,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,171,85,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 171, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.737565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,172,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,172,85,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 172, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.738100 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,173,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,173,85,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 173, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.738620 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,174,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,174,85,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 174, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.739143 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,175,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,175,85,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 175, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.739670 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,18,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,18,85,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.740182 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,19,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,19,85,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.740695 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,2,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,2,85,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.741200 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,20,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,20,85,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.741714 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,21,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,21,85,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.742226 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,22,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,22,85,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.742754 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,23,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,23,85,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.743288 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,24,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,24,85,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.743814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,25,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,25,85,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.744329 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,26,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,26,85,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.744945 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,27,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,27,85,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.745675 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,28,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,28,85,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.746305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,29,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,29,85,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.746912 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,3,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,3,85,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.747515 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,30,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,30,85,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.748136 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,31,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,31,85,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.748741 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,32,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,32,85,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.749472 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,33,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,33,85,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.750113 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,34,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,34,85,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.750653 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,35,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,35,85,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.751181 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,36,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,36,85,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.751709 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,37,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,37,85,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.752239 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,38,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,38,85,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.752762 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,39,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,39,85,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.753277 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,4,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,4,85,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.753798 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,40,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,40,85,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.754319 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,41,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,41,85,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.754843 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,42,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,42,85,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.755364 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,43,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,43,85,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.755892 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,44,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,44,85,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.756406 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,45,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,45,85,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.756989 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,46,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,46,85,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.757494 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,47,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,47,85,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.758885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,48,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,48,85,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.759534 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,49,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,49,85,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.760089 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,5,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,5,85,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.760612 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,50,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,50,85,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.761126 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,51,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,51,85,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.761642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,52,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,52,85,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.762163 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,53,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,53,85,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.762671 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,54,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,54,85,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.763234 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,55,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,55,85,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.763950 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,56,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,56,85,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.764568 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,57,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,57,85,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.765174 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,58,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,58,85,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.765767 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,59,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,59,85,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.766370 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,6,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,6,85,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.766965 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,60,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,60,85,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.767565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,61,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,61,85,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.768471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,62,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,62,85,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.769125 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,63,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,63,85,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.770427 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,64,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,64,85,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.771113 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,65,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,65,85,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.771733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,66,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,66,85,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.772464 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,67,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,67,85,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.773087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,68,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,68,85,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.774139 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,69,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,69,85,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.774747 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,7,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,7,85,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.775285 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,70,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,70,85,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.775811 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,71,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,71,85,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.776335 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,72,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,72,85,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.776860 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,73,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,73,85,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.777376 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,74,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,74,85,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.777907 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,75,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,75,85,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.778427 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,76,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,76,85,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.778940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,77,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,77,85,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.779438 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,78,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,78,85,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.780189 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,79,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,79,85,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.780849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,8,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,8,85,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.781468 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,80,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,80,85,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.782233 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,81,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,81,85,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.782865 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,82,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,82,85,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.783507 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,83,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,83,85,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.784215 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,84,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,84,85,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.784836 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.785477 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,86,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,86,85,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.786132 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,87,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,87,85,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.786752 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,88,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,88,85,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.787397 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,89,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,89,85,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.788056 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,9,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,9,85,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.788679 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,90,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,90,85,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.789275 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,91,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,91,85,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.789870 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,92,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,92,85,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.790481 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,93,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,93,85,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.791089 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,94,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,94,85,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.791686 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,95,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,95,85,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.792285 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,96,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,96,85,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.792891 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,97,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,97,85,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.793474 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,98,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,98,85,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.794361 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,99,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[1,8,99,85,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.795053 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[10,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[10,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.795676 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[2,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[2,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.796212 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[3,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[3,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.796764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[30,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[30,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.797341 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[4,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[4,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.797885 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[5,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[5,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.798461 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[6,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[6,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.799013 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[7,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[7,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.799549 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[8,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[8,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.800081 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[9,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 85],"bool"), list[9,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 85, 85].  Tensor sizes: [1, 1, 0, 85]
2025-03-05 15:22:41.800593 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[1,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[1,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.801109 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[10,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[10,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.801624 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[2,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[2,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.802194 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[3,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[3,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.802881 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[30,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[30,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.803481 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[4,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[4,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.804087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[5,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[5,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.804701 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[6,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[6,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.805303 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[7,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[7,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.805967 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[8,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[8,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.806555 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[9,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 86],"bool"), list[9,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 86, 86].  Tensor sizes: [1, 1, 0, 86]
2025-03-05 15:22:41.807087 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[1,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[1,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.807665 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[10,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[10,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.808188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[2,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[2,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.808710 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[3,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[3,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.809237 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[30,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[30,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.809764 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[4,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[4,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.810287 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[5,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[5,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.810805 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[6,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[6,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.811340 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[7,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[7,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.811868 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[8,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[8,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.812431 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[9,8,87,87,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 87],"bool"), list[9,8,87,87,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 87, 87].  Tensor sizes: [1, 1, 0, 87]
2025-03-05 15:22:41.812956 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[1,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[1,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.813467 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[10,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[10,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.813981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[2,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[2,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.814495 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[3,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[3,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.815008 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[30,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[30,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.815507 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[4,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[4,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.816027 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[5,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[5,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.816602 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[6,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[6,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.817132 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[7,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[7,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.817734 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[8,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[8,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.822678 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[9,8,88,88,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 88],"bool"), list[9,8,88,88,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 88, 88].  Tensor sizes: [1, 1, 0, 88]
2025-03-05 15:22:41.823443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[1,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[1,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.824135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[10,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[10,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.825437 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[2,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[2,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.826066 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[3,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[3,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.827271 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[4,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[4,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.827859 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[5,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[5,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.828413 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[6,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[6,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.829350 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[7,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[7,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.829938 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[8,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[8,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.830536 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[9,8,89,89,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 89],"bool"), list[9,8,89,89,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 89, 89].  Tensor sizes: [1, 1, 0, 89]
2025-03-05 15:22:41.831114 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[1,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[1,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.831730 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[10,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[10,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.832286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[14,4,1,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[14,4,1,8,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [14, 4, 1, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.832849 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[14,4,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[14,4,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [14, 4, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.833399 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[2,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[2,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.833940 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[3,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[3,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.834473 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[4,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[4,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.835031 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[5,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[5,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.835576 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[6,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[6,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.836129 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[7,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[7,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.836686 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[8,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[8,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.837266 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[9,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 8],"bool"), list[9,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 8, 8].  Tensor sizes: [1, 1, 0, 8]
2025-03-05 15:22:41.837814 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[1,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[1,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.838366 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[10,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[10,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.838904 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[2,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[2,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.839455 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[3,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[3,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.839995 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[30,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[30,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.840539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[4,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[4,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.841103 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[5,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[5,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.841703 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[6,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[6,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.842255 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[7,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[7,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.842815 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[8,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[8,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.843361 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[9,8,90,90,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 90],"bool"), list[9,8,90,90,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 90, 90].  Tensor sizes: [1, 1, 0, 90]
2025-03-05 15:22:41.843915 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[1,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[1,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.844476 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[10,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[10,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.845043 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[2,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[2,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.845607 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[3,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[3,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.846156 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[30,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[30,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.846713 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[4,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[4,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.847286 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[5,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[5,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.847866 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[6,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[6,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.848419 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[7,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[7,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.848982 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[8,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[8,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.849532 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[9,8,91,91,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 91],"bool"), list[9,8,91,91,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 91, 91].  Tensor sizes: [1, 1, 0, 91]
2025-03-05 15:22:41.850119 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[1,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[1,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.850710 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[10,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[10,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.851276 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[2,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[2,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.851827 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[3,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[3,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.852371 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[30,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[30,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.852925 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[4,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[4,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.853466 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[5,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[5,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.854090 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[6,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[6,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.854685 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[7,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[7,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.855238 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[8,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[8,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.855799 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[9,8,92,92,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 92],"bool"), list[9,8,92,92,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 92, 92].  Tensor sizes: [1, 1, 0, 92]
2025-03-05 15:22:41.856347 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[1,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[1,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.856900 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[10,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[10,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.857504 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[2,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[2,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.858058 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[3,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[3,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.858615 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[30,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[30,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.859188 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[4,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[4,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.859751 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[5,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[5,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.860297 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[6,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[6,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.860844 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[7,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[7,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.861405 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[8,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[8,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.861974 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[9,8,93,93,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 93],"bool"), list[9,8,93,93,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 93, 93].  Tensor sizes: [1, 1, 0, 93]
2025-03-05 15:22:41.862518 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[1,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[1,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.863089 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[10,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[10,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.863650 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[2,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[2,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.864210 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[3,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[3,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.864765 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[30,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[30,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.865309 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[4,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[4,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.865911 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[5,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[5,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.866464 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[6,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[6,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.867023 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[7,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[7,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.867566 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[8,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[8,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.868135 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[9,8,94,94,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 94],"bool"), list[9,8,94,94,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 94, 94].  Tensor sizes: [1, 1, 0, 94]
2025-03-05 15:22:41.868706 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[1,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[1,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.869264 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[10,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[10,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.869815 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[2,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[2,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.870379 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[3,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[3,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.870925 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[30,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[30,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.871477 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[4,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[4,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.872019 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[5,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[5,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.872556 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[6,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[6,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.873577 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[7,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[7,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.874273 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[8,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[8,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.874915 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[9,8,95,95,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 95],"bool"), list[9,8,95,95,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 95, 95].  Tensor sizes: [1, 1, 0, 95]
2025-03-05 15:22:41.875487 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[1,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[1,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.876039 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[10,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[10,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.876574 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[2,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[2,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.877116 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[3,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[3,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.877664 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[30,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[30,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.878207 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[4,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[4,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.878798 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[5,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[5,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.879388 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[6,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[6,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.879966 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[7,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[7,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.880506 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[8,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[8,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.881078 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[9,8,96,96,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 96],"bool"), list[9,8,96,96,], ) 
 The expanded size of the tensor (96) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 96, 96].  Tensor sizes: [1, 1, 0, 96]
2025-03-05 15:22:41.881635 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,1,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,1,97,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 1, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.882187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,10,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,10,97,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 10, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.882778 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,11,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,11,97,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 11, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.883339 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,12,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,12,97,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 12, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.883899 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,13,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,13,97,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 13, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.884443 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,14,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,14,97,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 14, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.884986 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,15,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,15,97,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 15, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.885514 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,16,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,16,97,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 16, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.886049 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,17,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,17,97,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 17, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.886615 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,18,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,18,97,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 18, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.887161 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,19,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,19,97,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 19, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.887705 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,2,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,2,97,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 2, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.888253 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,20,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,20,97,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 20, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.888795 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,21,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,21,97,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 21, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.889324 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,22,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,22,97,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 22, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.889867 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,23,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,23,97,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 23, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.890405 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,24,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,24,97,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 24, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.890944 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,25,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,25,97,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 25, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.891471 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,26,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,26,97,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 26, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.892025 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,27,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,27,97,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 27, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.892565 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,28,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,28,97,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 28, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.893123 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,29,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,29,97,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 29, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.893660 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,3,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,3,97,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 3, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.894234 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,30,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,30,97,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 30, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.894781 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,31,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,31,97,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 31, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.895342 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,32,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,32,97,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 32, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.895883 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,33,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,33,97,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 33, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.896432 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,34,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,34,97,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 34, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.897005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,35,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,35,97,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 35, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.897539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,36,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,36,97,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 36, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.898088 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,37,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,37,97,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 37, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.898639 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,38,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,38,97,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 38, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.899171 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,39,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,39,97,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 39, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.899728 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,4,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,4,97,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 4, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.900270 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,40,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,40,97,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 40, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.900820 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,41,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,41,97,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 41, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.901358 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,42,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,42,97,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 42, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.901899 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,43,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,43,97,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 43, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.902436 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,44,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,44,97,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 44, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.902981 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,45,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,45,97,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 45, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.903519 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,46,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,46,97,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 46, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.904067 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,47,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,47,97,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 47, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.904617 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,48,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,48,97,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 48, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.905161 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,49,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,49,97,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 49, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.905754 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,5,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,5,97,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 5, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.906305 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,50,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,50,97,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 50, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.906845 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,51,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,51,97,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 51, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.907368 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,52,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,52,97,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 52, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.907908 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,53,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,53,97,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 53, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.908436 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,54,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,54,97,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 54, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.908999 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,55,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,55,97,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 55, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.909555 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,56,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,56,97,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 56, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.910103 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,57,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,57,97,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 57, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.910642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,58,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,58,97,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 58, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.911187 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,59,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,59,97,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 59, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.911744 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,6,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,6,97,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 6, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.912272 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,60,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,60,97,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 60, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.912829 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,61,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,61,97,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 61, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.913367 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,62,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,62,97,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 62, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.913945 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,63,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,63,97,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 63, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.915032 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,64,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,64,97,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 64, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.915748 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,65,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,65,97,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 65, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.916412 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,66,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,66,97,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 66, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.917177 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,67,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,67,97,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 67, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.917861 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,68,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,68,97,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 68, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.918545 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,69,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,69,97,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 69, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.919234 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,7,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,7,97,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 7, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.919969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,70,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,70,97,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 70, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.920631 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,71,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,71,97,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 71, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.921303 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,72,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,72,97,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 72, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.921963 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,73,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,73,97,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 73, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.922621 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,74,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,74,97,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 74, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.923281 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,75,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,75,97,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 75, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.923932 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,76,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,76,97,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 76, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.924595 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,77,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,77,97,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 77, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.925240 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,78,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,78,97,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 78, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.925902 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,79,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,79,97,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 79, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.926539 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,8,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,8,97,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 8, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.927190 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,80,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,80,97,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 80, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.927822 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,81,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,81,97,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 81, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.928451 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,82,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,82,97,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 82, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.929290 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,83,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,83,97,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 83, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.929969 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,84,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,84,97,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 84, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.930678 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,85,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,85,97,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 85, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.931351 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,86,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,86,97,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 86, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.932013 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,87,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,87,97,], ) 
 The expanded size of the tensor (87) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 87, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.932659 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,88,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,88,97,], ) 
 The expanded size of the tensor (88) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 88, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.933380 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,89,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,89,97,], ) 
 The expanded size of the tensor (89) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 89, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.934108 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,9,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,9,97,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.934691 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,90,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,90,97,], ) 
 The expanded size of the tensor (90) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 90, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.935242 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,91,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,91,97,], ) 
 The expanded size of the tensor (91) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 91, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.935782 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,92,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,92,97,], ) 
 The expanded size of the tensor (92) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 92, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.936311 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,93,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,93,97,], ) 
 The expanded size of the tensor (93) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 93, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.936841 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,94,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,94,97,], ) 
 The expanded size of the tensor (94) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 94, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.937357 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,95,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,95,97,], ) 
 The expanded size of the tensor (95) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 95, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.937893 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[1,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.938411 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[10,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[10,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.938942 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[2,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[2,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.939464 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[3,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[3,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.940005 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[30,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[30,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.940544 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[4,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[4,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.941070 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[5,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[5,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.941604 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[6,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[6,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.942116 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[7,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[7,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.942688 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[8,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[8,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.943266 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[9,8,97,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 97],"bool"), list[9,8,97,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 97, 97].  Tensor sizes: [1, 1, 0, 97]
2025-03-05 15:22:41.943809 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[1,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[1,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.944341 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[10,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[10,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.944905 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[2,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[2,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.945434 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[3,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[3,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.945996 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[30,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[30,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.946567 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[4,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[4,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.947102 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[5,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[5,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.947642 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[6,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[6,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.948180 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[7,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[7,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.948733 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[8,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[8,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.949385 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[9,8,98,98,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 98],"bool"), list[9,8,98,98,], ) 
 The expanded size of the tensor (98) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 98, 98].  Tensor sizes: [1, 1, 0, 98]
2025-03-05 15:22:41.949959 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[1,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[1,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.950499 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[10,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[10,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.951053 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[2,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[2,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.951592 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[3,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[3,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.952134 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[30,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[30,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [30, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.952669 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[4,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[4,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.953189 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[5,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[5,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.953715 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[6,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[6,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.954227 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[7,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[7,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.954772 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[8,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[8,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.955312 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[9,8,99,99,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 99],"bool"), list[9,8,99,99,], ) 
 The expanded size of the tensor (99) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 99, 99].  Tensor sizes: [1, 1, 0, 99]
2025-03-05 15:22:41.955839 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[1,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[1,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.956387 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[10,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[10,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [10, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.956908 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[2,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[2,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [2, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.957430 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[3,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[3,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.957943 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[4,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[4,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.958445 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[5,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[5,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [5, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.958960 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[6,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[6,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [6, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.959479 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[7,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[7,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [7, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.960004 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[8,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[8,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [8, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.960508 test begin: paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[9,8,9,9,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0, 9],"bool"), list[9,8,9,9,], ) 
 The expanded size of the tensor (9) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [9, 8, 9, 9].  Tensor sizes: [1, 1, 0, 9]
2025-03-05 15:22:41.961033 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,24276,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,24276,], ) 
 The expanded size of the tensor (24276) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 24276].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.961567 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,27216,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,27216,], ) 
 The expanded size of the tensor (27216) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 27216].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.962125 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,30324,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,30324,], ) 
 The expanded size of the tensor (30324) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 30324].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.962706 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,33600,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,33600,], ) 
 The expanded size of the tensor (33600) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 33600].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.963210 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,37044,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,37044,], ) 
 The expanded size of the tensor (37044) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 37044].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.963729 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,40656,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,40656,], ) 
 The expanded size of the tensor (40656) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 40656].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.964227 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,44436,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,44436,], ) 
 The expanded size of the tensor (44436) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 44436].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.964756 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,48384,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,48384,], ) 
 The expanded size of the tensor (48384) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 48384].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.965274 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,52500,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,52500,], ) 
 The expanded size of the tensor (52500) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 52500].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.965791 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,56784,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,56784,], ) 
 The expanded size of the tensor (56784) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 56784].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.966304 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,65856,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,65856,], ) 
 The expanded size of the tensor (65856) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 65856].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.966825 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,70644,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,70644,], ) 
 The expanded size of the tensor (70644) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 70644].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.967336 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,75600,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[1,1,75600,], ) 
 The expanded size of the tensor (75600) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 1, 75600].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.967845 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[4,5,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[4,5,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 5, 6].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.968357 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"float64"), list[4,5,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"float64"), list[4,5,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [4, 5, 6].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.968881 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"int64"), tuple(1,4,4,), )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"int64"), tuple(1,4,4,), ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [1, 4, 4].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.969493 test begin: paddle.broadcast_to(Tensor([1, 1, 0],"int64"), tuple(3,2,3,), )

[torch error] paddle.broadcast_to(Tensor([1, 1, 0],"int64"), tuple(3,2,3,), ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 2.  Target sizes: [3, 2, 3].  Tensor sizes: [1, 1, 0]
2025-03-05 15:22:41.974449 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,4,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,4,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 4, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.979478 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,4,1,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,4,1,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 4, 1, 2].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.981974 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,4,1,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,4,1,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 4, 1, 3].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.982670 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.983331 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 109].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.983990 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 113].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.984677 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 145].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.985445 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 157].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.986209 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 169].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.987237 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 217].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.987926 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 229].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.988563 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 241].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.989229 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 261].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.989873 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 385].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.990554 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 61].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.991205 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 65].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.991791 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 69].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.992328 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 73].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.992867 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 85].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.993383 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[1,8,1,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 1, 97].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.993925 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[10,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[10,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.994453 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[14,4,1,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[14,4,1,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [14, 4, 1, 8].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.994981 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[2,4,1,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[2,4,1,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 4, 1, 4].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.995523 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[2,4,1,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[2,4,1,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 4, 1, 5].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.996058 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[2,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[2,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.996568 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[3,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[3,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.997093 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[4,4,1,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[4,4,1,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 4, 1, 4].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.997616 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[4,4,1,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[4,4,1,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 4, 1, 5].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.998137 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[4,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[4,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.998656 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[5,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[5,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.999172 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[6,4,1,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[6,4,1,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 4, 1, 4].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:41.999694 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[6,4,1,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[6,4,1,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 4, 1, 5].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.000202 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[6,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[6,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.000712 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[7,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[7,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.001222 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[8,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[8,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.001743 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[9,8,1,1,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"bool"), list[9,8,1,1,], ) 
 The expanded size of the tensor (1) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 1, 1].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.002542 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"int32"), tuple(10,10,1,10,), )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"int32"), tuple(10,10,1,10,), ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 10, 1, 10].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.003211 test begin: paddle.broadcast_to(Tensor([1, 1, 1, 0],"int64"), tuple(1,4,4,2,), )

[torch error] paddle.broadcast_to(Tensor([1, 1, 1, 0],"int64"), tuple(1,4,4,2,), ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 4, 4, 2].  Tensor sizes: [1, 1, 1, 0]
2025-03-05 15:22:42.003798 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.004373 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 109].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.005206 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 113].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.005863 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 145].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.006527 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 157].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.007198 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 169].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.007825 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 217].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.008436 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 229].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.009093 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 241].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.009732 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 261].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.010338 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 385].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.011010 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 61].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.011622 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 65].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.012234 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 69].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.012839 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 73].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.013434 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 85].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.014049 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[1,8,10,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 10, 97].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.014662 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[10,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[10,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.015256 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[14,4,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[14,4,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [14, 4, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.015883 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[2,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[2,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.016490 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[3,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[3,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.017138 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[4,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[4,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.017754 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[5,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[5,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.018350 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[6,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[6,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.018961 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[7,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[7,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.019554 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[8,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[8,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.020159 test begin: paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[9,8,10,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 10, 0],"bool"), list[9,8,10,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 10, 10].  Tensor sizes: [1, 1, 10, 0]
2025-03-05 15:22:42.020762 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.021357 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 113].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.021964 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 157].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.022556 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 169].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.023222 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 217].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.023856 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 229].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.024500 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 241].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.025129 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 261].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.025736 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 385].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.026359 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 61].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.026988 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 65].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.027607 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 69].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.028223 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 73].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.028851 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[1,8,100,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 100, 85].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.029495 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[10,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[10,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.030139 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[2,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[2,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.030770 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[3,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[3,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.031385 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[30,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[30,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.032000 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[4,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[4,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.032602 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[5,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[5,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.033574 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[6,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[6,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.034268 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[7,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[7,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.034902 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[8,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[8,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.035513 test begin: paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[9,8,100,100,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 100, 0],"bool"), list[9,8,100,100,], ) 
 The expanded size of the tensor (100) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 100, 100].  Tensor sizes: [1, 1, 100, 0]
2025-03-05 15:22:42.036126 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.036744 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 113].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.037358 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 157].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.037974 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 169].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.038577 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 217].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.039186 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 229].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.039793 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 241].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.040384 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 261].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.041021 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 385].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.041632 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 61].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.042234 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 65].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.042836 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 69].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.043442 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 73].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.044054 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[1,8,101,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 101, 85].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.044670 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[10,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[10,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.045275 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[2,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[2,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.045875 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[3,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[3,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.046484 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[30,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[30,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.047087 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[4,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[4,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.047690 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[5,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[5,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.048284 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[6,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[6,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.048880 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[7,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[7,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.049462 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[8,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[8,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.050062 test begin: paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[9,8,101,101,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 101, 0],"bool"), list[9,8,101,101,], ) 
 The expanded size of the tensor (101) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 101, 101].  Tensor sizes: [1, 1, 101, 0]
2025-03-05 15:22:42.050694 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.051299 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 113].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.051892 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 157].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.052525 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 169].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.053138 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 217].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.053734 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 229].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.054326 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 241].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.054951 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 261].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.055548 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 385].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.056166 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 61].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.056765 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 69].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.057353 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 73].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.057948 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[1,8,102,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 102, 85].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.058551 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[10,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[10,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.059152 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[2,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[2,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.059756 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[3,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[3,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.060342 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[30,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[30,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.060940 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[4,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[4,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.061524 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[5,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[5,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.062155 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[6,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[6,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.062763 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[7,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[7,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.063358 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[8,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[8,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.063946 test begin: paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[9,8,102,102,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 102, 0],"bool"), list[9,8,102,102,], ) 
 The expanded size of the tensor (102) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 102, 102].  Tensor sizes: [1, 1, 102, 0]
2025-03-05 15:22:42.064528 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.065151 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 113].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.065746 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 157].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.066338 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 169].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.066933 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 217].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.067512 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 229].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.068162 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 241].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.068752 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 261].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.069332 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 385].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.069965 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 61].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.070570 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 69].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.071196 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 73].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.071805 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[1,8,103,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 103, 85].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.072394 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[10,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[10,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.072989 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[2,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[2,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.073607 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[3,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[3,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.074207 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[30,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[30,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.074806 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[4,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[4,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.075412 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[5,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[5,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.076006 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[6,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[6,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.076602 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[7,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[7,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.077205 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[8,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[8,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.077799 test begin: paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[9,8,103,103,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 103, 0],"bool"), list[9,8,103,103,], ) 
 The expanded size of the tensor (103) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 103, 103].  Tensor sizes: [1, 1, 103, 0]
2025-03-05 15:22:42.078410 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.079009 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 113].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.079666 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 169].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.080276 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 217].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.080901 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 229].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.081502 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 241].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.082103 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 261].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.082719 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 385].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.083349 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 61].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.083962 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 69].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.084563 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 73].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.085188 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[1,8,104,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 104, 85].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.085798 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[10,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[10,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.086441 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[2,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[2,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.087075 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[3,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[3,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.087695 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[30,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[30,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.088752 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[4,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[4,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.089430 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[5,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[5,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.090074 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[6,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[6,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.090787 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[7,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[7,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.091411 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[8,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[8,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.092014 test begin: paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[9,8,104,104,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 104, 0],"bool"), list[9,8,104,104,], ) 
 The expanded size of the tensor (104) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 104, 104].  Tensor sizes: [1, 1, 104, 0]
2025-03-05 15:22:42.092686 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.093314 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 113].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.093928 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 169].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.094531 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 217].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.095142 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 229].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.095774 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 241].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.096382 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 261].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.097079 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 385].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.097684 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 61].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.098270 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 69].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.098859 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 73].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.099464 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[1,8,105,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 105, 85].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.100082 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[10,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[10,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.100692 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[2,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[2,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.101286 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[3,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[3,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.101895 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[4,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[4,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.102637 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[5,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[5,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.103302 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[6,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[6,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.103869 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[7,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[7,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.104414 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[8,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[8,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.104980 test begin: paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[9,8,105,105,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 105, 0],"bool"), list[9,8,105,105,], ) 
 The expanded size of the tensor (105) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 105, 105].  Tensor sizes: [1, 1, 105, 0]
2025-03-05 15:22:42.105526 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.106074 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 113].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.106612 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 169].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.107139 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 217].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.107670 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 229].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.108231 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 241].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.108761 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 261].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.109278 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 385].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.109803 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 61].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.110321 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 69].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.110843 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 73].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.111363 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[1,8,106,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 106, 85].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.111873 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[10,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[10,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.112394 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[2,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[2,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.112962 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[3,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[3,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.113479 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[30,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[30,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.114010 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[4,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[4,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.114520 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[5,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[5,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.115035 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[6,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[6,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.115561 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[7,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[7,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.116096 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[8,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[8,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.116616 test begin: paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[9,8,106,106,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 106, 0],"bool"), list[9,8,106,106,], ) 
 The expanded size of the tensor (106) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 106, 106].  Tensor sizes: [1, 1, 106, 0]
2025-03-05 15:22:42.117148 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.117709 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 113].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.118404 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 169].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.119035 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 217].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.119638 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 229].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.120238 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 241].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.120836 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 261].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.121426 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 385].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.122033 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 61].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.122627 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 69].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.123214 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 73].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.123830 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[1,8,107,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 107, 85].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.124426 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[10,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[10,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.125043 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[2,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[2,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.125673 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[3,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[3,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.126617 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[4,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[4,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.127360 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[5,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[5,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.127997 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[6,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[6,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.128626 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[7,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[7,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.129221 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[8,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[8,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.129846 test begin: paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[9,8,107,107,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 107, 0],"bool"), list[9,8,107,107,], ) 
 The expanded size of the tensor (107) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 107, 107].  Tensor sizes: [1, 1, 107, 0]
2025-03-05 15:22:42.130495 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.131123 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 113].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.131733 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 169].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.132345 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 217].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.132970 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 229].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.133570 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 241].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.134179 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 261].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.134786 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 385].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.135385 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 61].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.135979 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 69].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.136629 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 73].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.137243 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[1,8,108,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 108, 85].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.137879 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[10,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[10,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.138478 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[2,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[2,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.139080 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[3,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[3,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.139699 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[30,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[30,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.140294 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[4,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[4,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.140890 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[5,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[5,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.141474 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[6,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[6,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.142091 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[7,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[7,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.142810 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[8,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[8,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.143440 test begin: paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[9,8,108,108,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 108, 0],"bool"), list[9,8,108,108,], ) 
 The expanded size of the tensor (108) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 108, 108].  Tensor sizes: [1, 1, 108, 0]
2025-03-05 15:22:42.144027 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.144555 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 113].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.145090 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 169].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.145628 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 217].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.146197 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 229].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.146724 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 241].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.147230 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 261].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.147744 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 385].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.148417 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 61].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.149060 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 69].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.149722 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 73].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.150338 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[1,8,109,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 109, 85].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.150957 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[10,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[10,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.151567 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[2,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[2,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.152177 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[3,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[3,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.152801 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[30,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[30,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.153403 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[4,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[4,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.154016 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[5,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[5,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.154641 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[6,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[6,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.155161 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[7,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[7,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.155718 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[8,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[8,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.156390 test begin: paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[9,8,109,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 109, 0],"bool"), list[9,8,109,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 109, 109].  Tensor sizes: [1, 1, 109, 0]
2025-03-05 15:22:42.157002 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 109].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.157636 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.158236 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 113].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.158845 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 145].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.159519 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 157].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.160168 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 169].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.160816 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 217].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.161427 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 229].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.162061 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 241].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.162675 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 261].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.163282 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 385].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.163883 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 61].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.164480 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 65].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.165088 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 69].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.165705 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 73].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.166312 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 85].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.166943 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[1,8,11,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 11, 97].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.167554 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[10,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[10,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.168159 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[2,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[2,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.168760 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[3,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[3,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.169348 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[4,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[4,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.169996 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[5,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[5,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.170616 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[6,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[6,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.171215 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[7,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[7,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.171813 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[8,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[8,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.172391 test begin: paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[9,8,11,11,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 11, 0],"bool"), list[9,8,11,11,], ) 
 The expanded size of the tensor (11) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 11, 11].  Tensor sizes: [1, 1, 11, 0]
2025-03-05 15:22:42.173000 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.173605 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 113].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.174233 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 169].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.174850 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 217].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.175522 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 229].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.176131 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 241].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.176736 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 261].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.177387 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 385].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.177991 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 61].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.178601 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 69].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.179192 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 73].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.179795 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[1,8,110,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 110, 85].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.180413 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[10,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[10,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.186458 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[2,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[2,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.188811 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[3,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[3,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.189459 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[30,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[30,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.190097 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[4,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[4,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.190719 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[5,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[5,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.191317 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[6,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[6,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.192385 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[7,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[7,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.193039 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[8,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[8,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.193669 test begin: paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[9,8,110,110,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 110, 0],"bool"), list[9,8,110,110,], ) 
 The expanded size of the tensor (110) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 110, 110].  Tensor sizes: [1, 1, 110, 0]
2025-03-05 15:22:42.194331 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.194974 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 169].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.195633 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 217].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.196387 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 229].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.197037 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 241].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.197655 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 261].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.198338 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 385].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.199019 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 61].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.199650 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 69].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.200259 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 73].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.200864 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[1,8,111,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 111, 85].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.201457 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[10,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[10,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.202149 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[2,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[2,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.202793 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[3,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[3,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.203422 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[30,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[30,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.204060 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[4,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[4,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.204676 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[5,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[5,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.205290 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[6,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[6,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.205900 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[7,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[7,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.206506 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[8,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[8,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.207212 test begin: paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[9,8,111,111,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 111, 0],"bool"), list[9,8,111,111,], ) 
 The expanded size of the tensor (111) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 111, 111].  Tensor sizes: [1, 1, 111, 0]
2025-03-05 15:22:42.207905 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.208460 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 169].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.209009 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 217].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.209558 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 229].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.210104 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 241].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.210640 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 261].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.211167 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 385].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.211701 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 61].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.212219 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 69].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.212763 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 73].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.213304 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[1,8,112,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 112, 85].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.213845 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[10,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[10,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.214381 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[2,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[2,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.214917 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[3,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[3,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.215450 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[30,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[30,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.215993 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[4,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[4,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.216523 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[5,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[5,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.217140 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[6,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[6,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.217714 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[7,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[7,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.218242 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[8,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[8,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.218777 test begin: paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[9,8,112,112,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 112, 0],"bool"), list[9,8,112,112,], ) 
 The expanded size of the tensor (112) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 112, 112].  Tensor sizes: [1, 1, 112, 0]
2025-03-05 15:22:42.219303 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.219881 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 169].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.220410 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 217].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.220938 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 229].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.221458 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 241].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.221995 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 261].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.222513 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 385].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.223042 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 61].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.223561 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 69].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.224089 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 73].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.224612 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[1,8,113,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 113, 85].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.225128 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[10,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[10,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.225654 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[2,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[2,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.226169 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[3,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[3,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.226726 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[30,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[30,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.227317 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[4,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[4,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.227868 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[5,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[5,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.228402 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[6,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[6,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.228930 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[7,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[7,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.229458 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[8,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[8,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.229996 test begin: paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[9,8,113,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 113, 0],"bool"), list[9,8,113,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 113, 113].  Tensor sizes: [1, 1, 113, 0]
2025-03-05 15:22:42.230520 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.231053 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 169].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.231578 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 217].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.232116 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 229].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.232682 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 241].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.233203 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 261].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.233768 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 385].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.234288 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 61].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.234838 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 69].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.235363 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 73].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.235885 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[1,8,114,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 114, 85].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.236430 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[10,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[10,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.236963 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[2,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[2,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.237491 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[3,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[3,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.238049 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[30,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[30,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.238568 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[4,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[4,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.239096 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[5,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[5,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.239634 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[6,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[6,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.240160 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[7,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[7,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.240691 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[8,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[8,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.241226 test begin: paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[9,8,114,114,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 114, 0],"bool"), list[9,8,114,114,], ) 
 The expanded size of the tensor (114) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 114, 114].  Tensor sizes: [1, 1, 114, 0]
2025-03-05 15:22:42.241750 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.242273 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 169].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.242802 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 217].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.243319 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 229].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.243843 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 241].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.244368 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 261].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.244893 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 385].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.245413 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 61].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.245942 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 69].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.246456 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 73].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.246977 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[1,8,115,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 115, 85].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.247493 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[10,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[10,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.248075 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[2,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[2,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.248602 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[3,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[3,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.249127 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[30,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[30,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.249651 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[4,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[4,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.250166 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[5,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[5,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.250695 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[6,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[6,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.251204 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[7,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[7,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.251732 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[8,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[8,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.252258 test begin: paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[9,8,115,115,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 115, 0],"bool"), list[9,8,115,115,], ) 
 The expanded size of the tensor (115) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 115, 115].  Tensor sizes: [1, 1, 115, 0]
2025-03-05 15:22:42.252792 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.253313 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 169].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.253836 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 217].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.254355 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 229].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.254877 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 241].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.255394 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 261].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.255913 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 385].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.256442 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 61].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.256967 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 73].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.257489 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[1,8,116,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 116, 85].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.258019 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[10,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[10,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.258532 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[2,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[2,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.259119 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[3,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[3,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.260247 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[30,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[30,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.260990 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[4,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[4,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.261657 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[5,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[5,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.262276 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[6,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[6,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.262820 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[7,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[7,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.263359 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[8,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[8,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.263880 test begin: paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[9,8,116,116,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 116, 0],"bool"), list[9,8,116,116,], ) 
 The expanded size of the tensor (116) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 116, 116].  Tensor sizes: [1, 1, 116, 0]
2025-03-05 15:22:42.264409 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.264925 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 169].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.265443 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 229].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.265963 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 241].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.266479 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 261].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.266989 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 385].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.267495 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 61].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.268013 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 73].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.268538 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[1,8,117,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 117, 85].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.269074 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[10,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[10,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.269591 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[2,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[2,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.270135 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[3,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[3,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.270660 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[30,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[30,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.271173 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[4,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[4,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.271733 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[5,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[5,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.272256 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[6,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[6,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.272949 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[7,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[7,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.273599 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[8,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[8,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.274219 test begin: paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[9,8,117,117,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 117, 0],"bool"), list[9,8,117,117,], ) 
 The expanded size of the tensor (117) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 117, 117].  Tensor sizes: [1, 1, 117, 0]
2025-03-05 15:22:42.274844 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.275459 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 169].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.276269 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 229].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.276934 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 241].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.277573 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 261].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.278237 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 385].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.278866 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 61].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.279510 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[1,8,118,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 118, 85].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.280166 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[10,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[10,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.280788 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[2,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[2,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.281398 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[3,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[3,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.282007 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[30,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[30,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.282636 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[4,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[4,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.283249 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[5,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[5,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.283857 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[6,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[6,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.284475 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[7,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[7,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.285107 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[8,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[8,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.285722 test begin: paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[9,8,118,118,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 118, 0],"bool"), list[9,8,118,118,], ) 
 The expanded size of the tensor (118) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 118, 118].  Tensor sizes: [1, 1, 118, 0]
2025-03-05 15:22:42.286334 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.286952 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 169].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.287576 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 229].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.288199 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 241].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.288812 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 261].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.289433 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 385].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.290055 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 61].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.290666 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[1,8,119,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 119, 85].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.291283 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[10,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[10,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.291884 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[2,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[2,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.292484 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[3,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[3,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.293108 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[30,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[30,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.293762 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[4,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[4,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.294374 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[5,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[5,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.294995 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[6,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[6,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.295609 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[7,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[7,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.296212 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[8,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[8,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.296818 test begin: paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[9,8,119,119,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 119, 0],"bool"), list[9,8,119,119,], ) 
 The expanded size of the tensor (119) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 119, 119].  Tensor sizes: [1, 1, 119, 0]
2025-03-05 15:22:42.297417 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 109].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.298037 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 113].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.298649 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.299262 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 145].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.299892 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 157].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.300507 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 169].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.301152 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 217].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.301812 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 229].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.302430 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 241].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.303052 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 261].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.303675 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 385].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.304347 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 61].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.304976 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 65].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.305610 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 69].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.306215 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 73].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.306824 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 85].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.307427 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[1,8,12,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 12, 97].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.308025 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[10,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[10,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.308650 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[2,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[2,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.309264 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[3,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[3,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.309876 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[4,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[4,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.310473 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[5,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[5,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.311081 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[6,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[6,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.311688 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[7,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[7,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.312303 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[8,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[8,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.312909 test begin: paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[9,8,12,12,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 12, 0],"bool"), list[9,8,12,12,], ) 
 The expanded size of the tensor (12) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 12, 12].  Tensor sizes: [1, 1, 12, 0]
2025-03-05 15:22:42.313514 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.314121 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 169].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.314734 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 229].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.315363 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 241].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.315989 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 261].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.316607 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 385].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.317222 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 61].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.317839 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[1,8,120,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 120, 85].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.318457 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[10,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[10,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.319079 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[2,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[2,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.319705 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[3,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[3,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.320323 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[30,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[30,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.320944 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[4,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[4,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.321560 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[5,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[5,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.322180 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[6,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[6,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.322802 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[7,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[7,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.323418 test begin: paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[8,8,120,120,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 120, 0],"bool"), list[8,8,120,120,], ) 
 The expanded size of the tensor (120) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 120, 120].  Tensor sizes: [1, 1, 120, 0]
2025-03-05 15:22:42.324113 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.324757 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 169].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.325376 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 229].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.325987 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 241].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.326610 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 261].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.327219 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 385].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.327897 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 61].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.328747 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[1,8,121,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 121, 85].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.329367 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[10,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[10,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.330028 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[2,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[2,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.330649 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[3,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[3,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.331260 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[30,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[30,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.331864 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[4,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[4,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.332458 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[5,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[5,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.333137 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[6,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[6,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.333773 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[7,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[7,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.334394 test begin: paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[8,8,121,121,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 121, 0],"bool"), list[8,8,121,121,], ) 
 The expanded size of the tensor (121) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 121, 121].  Tensor sizes: [1, 1, 121, 0]
2025-03-05 15:22:42.335141 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.335756 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 169].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.336296 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 229].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.336816 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 241].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.337331 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 261].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.337844 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 385].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.338366 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 61].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.338884 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[1,8,122,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 122, 85].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.339401 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[10,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[10,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.339923 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[2,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[2,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.340432 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[3,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[3,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.340948 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[4,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[4,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.341458 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[5,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[5,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.341969 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[6,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[6,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.342472 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[7,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[7,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.342984 test begin: paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[8,8,122,122,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 122, 0],"bool"), list[8,8,122,122,], ) 
 The expanded size of the tensor (122) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 122, 122].  Tensor sizes: [1, 1, 122, 0]
2025-03-05 15:22:42.343493 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.344013 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 169].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.344524 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 229].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.345056 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 241].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.345618 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 261].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.346338 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 385].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.346977 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 61].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.347607 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[1,8,123,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 123, 85].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.348240 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[10,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[10,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.348855 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[2,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[2,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.349496 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[3,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[3,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.350349 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[30,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[30,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.351059 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[4,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[4,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.351713 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[5,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[5,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.352321 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[6,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[6,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.352943 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[7,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[7,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.353561 test begin: paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[8,8,123,123,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 123, 0],"bool"), list[8,8,123,123,], ) 
 The expanded size of the tensor (123) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 123, 123].  Tensor sizes: [1, 1, 123, 0]
2025-03-05 15:22:42.354167 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.354775 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 169].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.355400 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 229].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.356024 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 241].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.356634 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 261].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.357229 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 385].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.357902 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 61].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.358535 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[1,8,124,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 124, 85].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.359546 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[10,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[10,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.360221 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[2,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[2,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.360891 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[3,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[3,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.361568 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[30,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[30,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.362265 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[4,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[4,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.362884 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[5,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[5,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.363498 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[6,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[6,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.364187 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[7,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[7,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.364811 test begin: paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[8,8,124,124,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 124, 0],"bool"), list[8,8,124,124,], ) 
 The expanded size of the tensor (124) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 124, 124].  Tensor sizes: [1, 1, 124, 0]
2025-03-05 15:22:42.365489 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.366126 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 169].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.366725 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 229].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.367320 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 241].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.367925 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 261].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.368523 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 385].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.369136 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 61].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.369739 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[1,8,125,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 125, 85].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.370329 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[10,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[10,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.370932 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[2,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[2,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.371524 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[3,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[3,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.372197 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[30,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[30,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.372829 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[4,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[4,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.373435 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[5,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[5,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.374043 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[6,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[6,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.374657 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[7,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[7,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.375260 test begin: paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[8,8,125,125,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 125, 0],"bool"), list[8,8,125,125,], ) 
 The expanded size of the tensor (125) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 125, 125].  Tensor sizes: [1, 1, 125, 0]
2025-03-05 15:22:42.375864 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.376452 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 169].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.377048 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 229].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.377637 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 241].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.378230 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 261].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.378852 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 385].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.379442 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[1,8,126,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 126, 85].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.380052 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[10,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[10,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.380656 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[2,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[2,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.381255 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[3,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[3,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.381860 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[30,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[30,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.382457 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[4,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[4,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.383057 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[5,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[5,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.383653 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[6,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[6,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.384704 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[7,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[7,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.388870 test begin: paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[8,8,126,126,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 126, 0],"bool"), list[8,8,126,126,], ) 
 The expanded size of the tensor (126) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 126, 126].  Tensor sizes: [1, 1, 126, 0]
2025-03-05 15:22:42.390309 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.390987 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 169].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.391627 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 229].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.392250 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 241].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.392902 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 261].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.393508 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 385].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.394122 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[1,8,127,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 127, 85].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.394723 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[10,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[10,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.401700 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[2,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[2,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.402349 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[3,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[3,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.402968 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[30,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[30,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.403597 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[4,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[4,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.404205 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[5,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[5,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.404814 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[6,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[6,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.405423 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[7,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[7,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.406058 test begin: paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[8,8,127,127,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 127, 0],"bool"), list[8,8,127,127,], ) 
 The expanded size of the tensor (127) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 127, 127].  Tensor sizes: [1, 1, 127, 0]
2025-03-05 15:22:42.406672 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.407414 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 169].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.408158 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 229].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.408725 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 241].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.409265 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 261].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.409825 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 385].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.410363 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[1,8,128,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 128, 85].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.410901 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[10,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[10,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.411419 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[2,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[2,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.411950 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[3,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[3,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.412529 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[30,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[30,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.413230 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[4,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[4,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.413849 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[5,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[5,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.414445 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[6,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[6,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.415079 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[7,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[7,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.415689 test begin: paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[8,8,128,128,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 128, 0],"bool"), list[8,8,128,128,], ) 
 The expanded size of the tensor (128) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 128, 128].  Tensor sizes: [1, 1, 128, 0]
2025-03-05 15:22:42.416290 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.416885 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 169].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.417483 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 229].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.418098 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 241].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.418706 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 261].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.419303 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 385].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.419924 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[1,8,129,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 129, 85].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.420523 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[10,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[10,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.421131 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[2,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[2,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.421745 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[3,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[3,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.422352 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[30,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[30,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.423727 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[4,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[4,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.424413 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[5,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[5,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.425085 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[6,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[6,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.425769 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[7,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[7,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.427003 test begin: paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[8,8,129,129,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 129, 0],"bool"), list[8,8,129,129,], ) 
 The expanded size of the tensor (129) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 129, 129].  Tensor sizes: [1, 1, 129, 0]
2025-03-05 15:22:42.427700 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 109].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.428389 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 113].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.429010 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.429640 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 145].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.430261 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 157].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.430926 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 169].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.431542 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 217].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.432180 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 229].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.432799 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 241].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.433447 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 261].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.434058 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 385].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.434712 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 61].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.435494 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 65].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.436128 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 69].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.437025 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 73].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.437658 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 85].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.438274 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[1,8,13,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 13, 97].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.438915 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[10,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[10,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.439519 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[2,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[2,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.440122 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[3,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[3,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.440724 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[4,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[4,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.441314 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[5,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[5,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.441927 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[6,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[6,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.445555 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[7,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[7,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.446252 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[8,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[8,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.446853 test begin: paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[9,8,13,13,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 13, 0],"bool"), list[9,8,13,13,], ) 
 The expanded size of the tensor (13) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 13, 13].  Tensor sizes: [1, 1, 13, 0]
2025-03-05 15:22:42.447433 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.448024 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 169].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.448613 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 229].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.449211 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 241].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.449823 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 261].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.450413 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 385].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.451018 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[1,8,130,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 130, 85].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.451619 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[10,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[10,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.452246 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[2,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[2,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.452856 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[3,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[3,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.453446 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[30,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[30,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.454059 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[4,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[4,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.454747 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[5,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[5,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.455640 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[6,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[6,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.456376 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[7,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[7,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.457027 test begin: paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[8,8,130,130,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 130, 0],"bool"), list[8,8,130,130,], ) 
 The expanded size of the tensor (130) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 130, 130].  Tensor sizes: [1, 1, 130, 0]
2025-03-05 15:22:42.457898 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.458570 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 169].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.459222 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 229].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.459933 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 241].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.460648 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 261].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.461270 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 385].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.461928 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[1,8,131,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 131, 85].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.462545 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[10,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[10,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.463150 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[2,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[2,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.463852 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[3,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[3,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.464547 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[4,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[4,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.465184 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[5,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[5,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.465794 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[6,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[6,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.466399 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[7,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[7,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.467108 test begin: paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[8,8,131,131,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 131, 0],"bool"), list[8,8,131,131,], ) 
 The expanded size of the tensor (131) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 131, 131].  Tensor sizes: [1, 1, 131, 0]
2025-03-05 15:22:42.467783 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.468404 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 169].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.469010 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 229].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.469635 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 241].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.470280 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 261].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.470936 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 385].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.473502 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[1,8,132,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 132, 85].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.474535 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[10,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[10,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.475201 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[2,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[2,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.475851 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[3,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[3,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.476562 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[4,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[4,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.477218 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[5,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[5,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.477894 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[6,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[6,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.478515 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[7,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[7,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.479140 test begin: paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[8,8,132,132,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 132, 0],"bool"), list[8,8,132,132,], ) 
 The expanded size of the tensor (132) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 132, 132].  Tensor sizes: [1, 1, 132, 0]
2025-03-05 15:22:42.479746 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.480373 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 169].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.480981 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 229].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.481608 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 241].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.482240 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 261].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.482939 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 385].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.483634 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[1,8,133,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 133, 85].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.484307 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[10,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[10,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.484937 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[2,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[2,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.485553 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[3,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[3,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.486155 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[30,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[30,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.486775 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[4,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[4,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.487375 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[5,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[5,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.487998 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[6,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[6,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.488603 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[7,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[7,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.489199 test begin: paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[8,8,133,133,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 133, 0],"bool"), list[8,8,133,133,], ) 
 The expanded size of the tensor (133) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 133, 133].  Tensor sizes: [1, 1, 133, 0]
2025-03-05 15:22:42.489857 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.490461 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 169].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.491077 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 229].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.491699 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 241].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.492295 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 261].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.492915 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 385].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.493512 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[1,8,134,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 134, 85].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.494122 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[10,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[10,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.494726 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[2,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[2,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.495346 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[3,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[3,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.495969 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[30,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[30,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.496607 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[4,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[4,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.497207 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[5,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[5,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.498242 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[6,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[6,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.499006 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[7,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[7,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.499601 test begin: paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[8,8,134,134,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 134, 0],"bool"), list[8,8,134,134,], ) 
 The expanded size of the tensor (134) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 134, 134].  Tensor sizes: [1, 1, 134, 0]
2025-03-05 15:22:42.500222 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.500875 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 169].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.501524 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 229].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.502561 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 241].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.503161 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 261].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.503735 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 385].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.504273 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[1,8,135,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 135, 85].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.504815 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[10,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[10,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.505433 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[2,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[2,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.505968 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[3,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[3,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.506492 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[30,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[30,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.507015 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[4,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[4,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.507560 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[5,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[5,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.508098 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[6,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[6,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.508622 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[7,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[7,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.509135 test begin: paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[8,8,135,135,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 135, 0],"bool"), list[8,8,135,135,], ) 
 The expanded size of the tensor (135) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 135, 135].  Tensor sizes: [1, 1, 135, 0]
2025-03-05 15:22:42.509666 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.510178 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 169].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.510696 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 229].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.511204 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 241].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.511708 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 261].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.512226 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 385].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.512737 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[1,8,136,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 136, 85].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.513233 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[10,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[10,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.513741 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[2,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[2,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.514241 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[3,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[3,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.514757 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[4,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[4,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.515278 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[5,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[5,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.515801 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[6,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[6,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.516317 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[7,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[7,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.516863 test begin: paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[8,8,136,136,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 136, 0],"bool"), list[8,8,136,136,], ) 
 The expanded size of the tensor (136) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 136, 136].  Tensor sizes: [1, 1, 136, 0]
2025-03-05 15:22:42.517422 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.518039 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 169].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.518567 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 229].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.519109 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 241].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.519632 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 261].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.520145 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 385].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.520689 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[1,8,137,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 137, 85].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.521200 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[10,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[10,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.521721 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[2,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[2,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.522258 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[3,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[3,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.522856 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[4,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[4,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.523389 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[5,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[5,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.523926 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[6,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[6,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.524550 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[7,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[7,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.525121 test begin: paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[8,8,137,137,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 137, 0],"bool"), list[8,8,137,137,], ) 
 The expanded size of the tensor (137) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 137, 137].  Tensor sizes: [1, 1, 137, 0]
2025-03-05 15:22:42.525710 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.526241 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 169].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.526793 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 229].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.527321 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 241].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.527852 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 261].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.528389 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 385].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.528923 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[1,8,138,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 138, 85].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.529455 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[10,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[10,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.529996 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[2,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[2,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.530569 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[3,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[3,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.531119 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[30,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[30,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.531670 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[4,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[4,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.532320 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[5,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[5,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.532905 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[6,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[6,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.533436 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[7,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[7,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.533989 test begin: paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[8,8,138,138,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 138, 0],"bool"), list[8,8,138,138,], ) 
 The expanded size of the tensor (138) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 138, 138].  Tensor sizes: [1, 1, 138, 0]
2025-03-05 15:22:42.534510 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.535033 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 169].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.535545 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 229].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.536111 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 241].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.536656 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 261].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.537174 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 385].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.537711 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[1,8,139,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 139, 85].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.538244 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[10,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[10,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.538819 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[2,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[2,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.539343 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[3,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[3,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.539873 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[30,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[30,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.540387 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[4,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[4,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.540911 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[5,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[5,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.541426 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[6,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[6,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.541962 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[7,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[7,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.542481 test begin: paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[8,8,139,139,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 139, 0],"bool"), list[8,8,139,139,], ) 
 The expanded size of the tensor (139) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 139, 139].  Tensor sizes: [1, 1, 139, 0]
2025-03-05 15:22:42.543041 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 109].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.543640 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 113].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.544204 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.544821 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 145].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.545347 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 157].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.545883 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 169].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.546403 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 217].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.547006 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 229].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.548171 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 241].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.548764 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 261].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.549335 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 385].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.549907 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 61].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.550431 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 65].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.550957 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 69].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.551477 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 73].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.552012 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 85].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.552526 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[1,8,14,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 14, 97].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.553048 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[10,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[10,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.553561 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[2,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[2,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.554090 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[3,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[3,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.554622 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[4,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[4,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.555139 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[5,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[5,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.555671 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[6,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[6,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.556181 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[7,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[7,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.556764 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[8,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[8,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.557274 test begin: paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[9,8,14,14,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 14, 0],"bool"), list[9,8,14,14,], ) 
 The expanded size of the tensor (14) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 14, 14].  Tensor sizes: [1, 1, 14, 0]
2025-03-05 15:22:42.557793 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.558298 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 169].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.558803 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 229].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.559333 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 241].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.559944 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 261].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.560489 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 385].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.561030 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[1,8,140,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 140, 85].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.561573 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[10,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[10,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.562135 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[2,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[2,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.562704 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[3,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[3,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.563229 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[30,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[30,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.566422 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[4,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[4,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.566964 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[5,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[5,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.567476 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[6,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[6,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.568001 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[7,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[7,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.569049 test begin: paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[8,8,140,140,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 140, 0],"bool"), list[8,8,140,140,], ) 
 The expanded size of the tensor (140) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 140, 140].  Tensor sizes: [1, 1, 140, 0]
2025-03-05 15:22:42.569799 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.570423 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 169].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.571002 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 229].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.571544 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 241].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.572129 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 261].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.572670 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 385].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.573261 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[1,8,141,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 141, 85].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.574218 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[10,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[10,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.575355 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[2,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[2,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.576088 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[3,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[3,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.576674 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[30,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[30,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.577230 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[4,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[4,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.577803 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[5,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[5,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.578354 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[6,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[6,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.578898 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[7,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[7,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.579427 test begin: paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[8,8,141,141,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 141, 0],"bool"), list[8,8,141,141,], ) 
 The expanded size of the tensor (141) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 141, 141].  Tensor sizes: [1, 1, 141, 0]
2025-03-05 15:22:42.580036 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.580572 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 169].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.581133 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 229].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.581668 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 241].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.582201 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 261].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.582734 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 385].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.583264 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[1,8,142,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 142, 85].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.583818 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[10,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[10,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.584368 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[2,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[2,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.584914 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[3,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[3,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.585518 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[30,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[30,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.586076 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[4,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[4,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.586612 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[5,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[5,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.587206 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[6,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[6,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.587763 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[7,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[7,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.588310 test begin: paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[8,8,142,142,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 142, 0],"bool"), list[8,8,142,142,], ) 
 The expanded size of the tensor (142) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 142, 142].  Tensor sizes: [1, 1, 142, 0]
2025-03-05 15:22:42.588848 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.589381 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 169].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.589913 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 229].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.590430 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 241].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.590973 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 261].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.591567 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 385].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.592439 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[1,8,143,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 143, 85].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.593162 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[10,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[10,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.593781 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[2,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[2,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.594323 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[3,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[3,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.594859 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[4,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[4,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.595385 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[6,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[6,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.595919 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[7,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[7,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.596489 test begin: paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[8,8,143,143,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 143, 0],"bool"), list[8,8,143,143,], ) 
 The expanded size of the tensor (143) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 143, 143].  Tensor sizes: [1, 1, 143, 0]
2025-03-05 15:22:42.597072 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.597617 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 169].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.598140 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 229].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.598666 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 241].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.599192 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 261].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.599712 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 385].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.600229 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[1,8,144,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 144, 85].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.600753 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[10,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[10,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.601258 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[2,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[2,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.601779 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[3,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[3,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.602297 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[30,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[30,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.602874 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[4,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[4,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.603418 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[6,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[6,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.603950 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[7,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[7,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.604465 test begin: paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[8,8,144,144,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 144, 0],"bool"), list[8,8,144,144,], ) 
 The expanded size of the tensor (144) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 144, 144].  Tensor sizes: [1, 1, 144, 0]
2025-03-05 15:22:42.604995 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.605508 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 169].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.606105 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 229].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.606629 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 241].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.607151 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 261].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.607674 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 385].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.608193 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[1,8,145,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 145, 85].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.608769 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[10,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[10,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.609653 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[2,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[2,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.610335 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[3,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[3,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.611041 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[4,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[4,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.611638 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[6,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[6,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.612178 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[7,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[7,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.612706 test begin: paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[8,8,145,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 145, 0],"bool"), list[8,8,145,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 145, 145].  Tensor sizes: [1, 1, 145, 0]
2025-03-05 15:22:42.613218 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.613752 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 169].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.614275 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 229].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.614789 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 241].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.615305 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 261].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.615845 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 385].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.616367 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[1,8,146,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 146, 85].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.616893 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[10,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[10,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.617395 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[2,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[2,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.617911 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[3,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[3,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.618427 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[4,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[4,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.618944 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[6,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[6,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.619465 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[7,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[7,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.619980 test begin: paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[8,8,146,146,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 146, 0],"bool"), list[8,8,146,146,], ) 
 The expanded size of the tensor (146) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 146, 146].  Tensor sizes: [1, 1, 146, 0]
2025-03-05 15:22:42.620567 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.621089 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 169].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.621724 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 229].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.622983 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 241].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.623780 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 261].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.624445 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 385].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.625077 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[1,8,147,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 147, 85].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.625631 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[10,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[10,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.626182 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[2,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[2,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.626722 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[3,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[3,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.627298 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[30,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[30,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.628188 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[4,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[4,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.628855 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[6,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[6,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.629470 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[7,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[7,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.630058 test begin: paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[8,8,147,147,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 147, 0],"bool"), list[8,8,147,147,], ) 
 The expanded size of the tensor (147) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 147, 147].  Tensor sizes: [1, 1, 147, 0]
2025-03-05 15:22:42.630606 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.631134 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 169].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.631661 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 229].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.632189 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 241].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.632720 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 261].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.633235 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 385].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.633761 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[1,8,148,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 148, 85].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.634300 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[10,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[10,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.634857 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[2,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[2,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.635534 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[3,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[3,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.636157 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[4,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[4,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.636802 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[6,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[6,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.637421 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[7,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[7,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.637995 test begin: paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[8,8,148,148,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 148, 0],"bool"), list[8,8,148,148,], ) 
 The expanded size of the tensor (148) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 148, 148].  Tensor sizes: [1, 1, 148, 0]
2025-03-05 15:22:42.638516 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.639089 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 169].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.639851 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 229].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.640456 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 241].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.641017 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 261].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.641560 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 385].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.642173 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[1,8,149,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 149, 85].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.642732 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[10,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[10,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.643258 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[2,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[2,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.643795 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[3,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[3,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.644322 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[30,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[30,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.644866 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[4,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[4,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.645474 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[6,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[6,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.646453 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[7,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[7,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.647150 test begin: paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[8,8,149,149,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 149, 0],"bool"), list[8,8,149,149,], ) 
 The expanded size of the tensor (149) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 149, 149].  Tensor sizes: [1, 1, 149, 0]
2025-03-05 15:22:42.647801 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 109].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.648445 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 113].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.649063 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 145].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.649691 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.650259 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 157].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.650831 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 169].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.651491 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 217].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.652152 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 229].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.652733 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 241].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.653365 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 261].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.653943 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 385].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.654512 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 61].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.655078 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 65].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.655733 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 69].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.656344 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 73].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.657040 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 85].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.657657 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[1,8,15,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 15, 97].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.658230 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[10,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[10,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.658779 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[2,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[2,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.659300 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[3,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[3,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.659824 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[4,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[4,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.660426 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[5,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[5,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.661085 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[6,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[6,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.661728 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[7,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[7,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.662347 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[8,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[8,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.662904 test begin: paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[9,8,15,15,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 15, 0],"bool"), list[9,8,15,15,], ) 
 The expanded size of the tensor (15) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 15, 15].  Tensor sizes: [1, 1, 15, 0]
2025-03-05 15:22:42.663465 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.664106 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 169].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.664734 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 229].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.665372 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 241].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.666017 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 261].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.666655 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 385].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.667275 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[1,8,150,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 150, 85].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.668104 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[10,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[10,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.668913 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[2,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[2,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.669538 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[3,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[3,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.670408 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[30,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[30,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.671047 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[4,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[4,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.671684 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[6,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[6,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.672440 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[7,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[7,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.673110 test begin: paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[8,8,150,150,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 150, 0],"bool"), list[8,8,150,150,], ) 
 The expanded size of the tensor (150) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 150, 150].  Tensor sizes: [1, 1, 150, 0]
2025-03-05 15:22:42.673802 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.674381 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 169].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.681646 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 229].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.682888 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 241].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.683427 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 261].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.683971 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 385].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.684526 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[1,8,151,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 151, 85].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.685064 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[10,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[10,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.685673 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[2,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[2,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.686208 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[3,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[3,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.686755 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[30,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[30,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.687876 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[4,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[4,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.688481 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[6,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[6,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.689032 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[7,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[7,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.689597 test begin: paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[8,8,151,151,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 151, 0],"bool"), list[8,8,151,151,], ) 
 The expanded size of the tensor (151) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 151, 151].  Tensor sizes: [1, 1, 151, 0]
2025-03-05 15:22:42.690122 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.690759 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 169].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.691279 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 229].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.691890 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 241].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.693255 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 261].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.694103 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 385].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.694820 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[1,8,152,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 152, 85].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.695513 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[10,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[10,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.696210 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[2,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[2,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.696866 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[3,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[3,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.697485 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[4,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[4,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.698140 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[6,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[6,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.698805 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[7,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[7,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.699422 test begin: paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[8,8,152,152,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 152, 0],"bool"), list[8,8,152,152,], ) 
 The expanded size of the tensor (152) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 152, 152].  Tensor sizes: [1, 1, 152, 0]
2025-03-05 15:22:42.700060 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.700742 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 169].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.701414 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 229].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.702088 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 241].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.702673 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 261].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.703218 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 385].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.703843 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[1,8,153,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 153, 85].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.704399 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[10,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[10,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.704933 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[2,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[2,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.705500 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[3,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[3,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.706180 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[4,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[4,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.706750 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[6,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[6,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.707312 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[7,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[7,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.707876 test begin: paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[8,8,153,153,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 153, 0],"bool"), list[8,8,153,153,], ) 
 The expanded size of the tensor (153) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 153, 153].  Tensor sizes: [1, 1, 153, 0]
2025-03-05 15:22:42.708411 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.708952 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 169].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.709479 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 229].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.710010 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 241].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.710532 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 261].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.711062 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 385].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.711617 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[1,8,154,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 154, 85].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.712140 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[10,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[10,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.712670 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[2,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[2,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.713222 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[3,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[3,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.713818 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[30,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[30,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.714345 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[4,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[4,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.714876 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[6,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[6,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.715407 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[7,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[7,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.716053 test begin: paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[8,8,154,154,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 154, 0],"bool"), list[8,8,154,154,], ) 
 The expanded size of the tensor (154) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 154, 154].  Tensor sizes: [1, 1, 154, 0]
2025-03-05 15:22:42.716645 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.717182 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 169].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.717799 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 229].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.718379 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 241].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.718995 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 261].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.719564 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 385].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.720166 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[1,8,155,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 155, 85].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.720739 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[10,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[10,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.721288 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[2,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[2,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.721848 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[3,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[3,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.722399 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[30,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[30,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.723004 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[4,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[4,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.723556 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[6,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[6,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.724113 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[7,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[7,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.724682 test begin: paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[8,8,155,155,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 155, 0],"bool"), list[8,8,155,155,], ) 
 The expanded size of the tensor (155) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 155, 155].  Tensor sizes: [1, 1, 155, 0]
2025-03-05 15:22:42.725229 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.725867 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 169].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.726528 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 229].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.727147 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 241].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.727679 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 261].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.728764 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 385].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.729503 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[1,8,156,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 156, 85].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.730304 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[10,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[10,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.731312 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[2,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[2,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.732000 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[3,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[3,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.732827 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[4,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[4,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.733535 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[6,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[6,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.734258 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[7,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[7,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.734908 test begin: paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[8,8,156,156,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 156, 0],"bool"), list[8,8,156,156,], ) 
 The expanded size of the tensor (156) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 156, 156].  Tensor sizes: [1, 1, 156, 0]
2025-03-05 15:22:42.735511 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.736128 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 169].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.736762 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 229].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.737386 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 241].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.738006 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 261].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.738894 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 385].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.739517 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[1,8,157,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 157, 85].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.740137 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[10,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[10,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.740762 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[2,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[2,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.741379 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[3,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[3,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.742004 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[4,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[4,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.742633 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[6,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[6,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.743315 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[7,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[7,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.743935 test begin: paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[8,8,157,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 157, 0],"bool"), list[8,8,157,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 157, 157].  Tensor sizes: [1, 1, 157, 0]
2025-03-05 15:22:42.744543 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.745173 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 169].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.745788 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 229].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.746385 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 241].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.746993 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 261].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.747731 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 385].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.748396 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[1,8,158,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 158, 85].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.748956 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[10,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[10,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.749506 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[2,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[2,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.750078 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[3,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[3,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.750708 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[30,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[30,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.751394 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[4,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[4,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.752031 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[6,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[6,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.752571 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[7,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[7,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.753176 test begin: paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[8,8,158,158,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 158, 0],"bool"), list[8,8,158,158,], ) 
 The expanded size of the tensor (158) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 158, 158].  Tensor sizes: [1, 1, 158, 0]
2025-03-05 15:22:42.753719 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.754269 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 159, 169].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.754813 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 159, 241].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.755350 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 159, 261].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.755904 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 159, 385].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.756437 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[1,8,159,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 159, 85].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.756971 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[10,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[10,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.757491 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[2,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[2,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.758016 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[3,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[3,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.758540 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[4,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[4,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.759079 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[6,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[6,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.759606 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[7,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[7,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.760146 test begin: paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[8,8,159,159,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 159, 0],"bool"), list[8,8,159,159,], ) 
 The expanded size of the tensor (159) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 159, 159].  Tensor sizes: [1, 1, 159, 0]
2025-03-05 15:22:42.760683 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 109].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.761216 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 113].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.761763 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 145].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.762327 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 157].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.762868 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.763386 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 169].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.763917 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 217].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.764443 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 229].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.765003 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 241].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.765544 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 261].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.766122 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 385].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.766671 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 61].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.767250 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 65].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.767876 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 69].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.768786 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 73].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.769452 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 85].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.770049 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[1,8,16,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 16, 97].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.771060 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[10,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[10,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.771761 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[2,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[2,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.772388 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[3,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[3,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.773070 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[4,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[4,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.773718 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[5,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[5,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.774354 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[6,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[6,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.774960 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[7,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[7,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.776160 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[8,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[8,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.776934 test begin: paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[9,8,16,16,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 16, 0],"bool"), list[9,8,16,16,], ) 
 The expanded size of the tensor (16) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 16, 16].  Tensor sizes: [1, 1, 16, 0]
2025-03-05 15:22:42.777686 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.778379 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 160, 169].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.778999 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 160, 241].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.779542 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 160, 261].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.780119 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 160, 385].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.780680 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[1,8,160,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 160, 85].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.781222 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[10,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[10,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.781763 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[2,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[2,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.782296 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[3,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[3,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.782836 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[4,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[4,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.783374 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[6,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[6,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.783915 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[7,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[7,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.784443 test begin: paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[8,8,160,160,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 160, 0],"bool"), list[8,8,160,160,], ) 
 The expanded size of the tensor (160) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 160, 160].  Tensor sizes: [1, 1, 160, 0]
2025-03-05 15:22:42.784980 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.785497 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 161, 169].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.786068 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 161, 241].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.786578 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 161, 261].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.787111 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 161, 385].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.787692 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[1,8,161,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 161, 85].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.788507 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[10,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[10,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.789158 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[2,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[2,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.789825 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[3,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[3,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.790573 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[4,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[4,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.791344 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[6,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[6,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.792104 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[7,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[7,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.792800 test begin: paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[8,8,161,161,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 161, 0],"bool"), list[8,8,161,161,], ) 
 The expanded size of the tensor (161) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 161, 161].  Tensor sizes: [1, 1, 161, 0]
2025-03-05 15:22:42.793428 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.793985 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 162, 169].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.794516 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 162, 241].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.796082 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 162, 261].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.796662 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 162, 385].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.797184 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[1,8,162,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 162, 85].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.797711 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[10,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[10,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.798226 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[2,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[2,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.798739 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[3,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[3,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.799299 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[30,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[30,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.799828 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[4,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[4,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.800333 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[6,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[6,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.800842 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[7,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[7,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.801361 test begin: paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[8,8,162,162,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 162, 0],"bool"), list[8,8,162,162,], ) 
 The expanded size of the tensor (162) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 162, 162].  Tensor sizes: [1, 1, 162, 0]
2025-03-05 15:22:42.801884 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.802400 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 163, 169].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.802997 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 163, 241].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.803510 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 163, 261].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.804051 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 163, 385].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.804556 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[1,8,163,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 163, 85].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.805086 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[10,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[10,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.805606 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[2,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[2,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.806117 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[3,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[3,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.806693 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[30,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[30,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.807544 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[4,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[4,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.808205 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[6,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[6,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.808842 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[7,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[7,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.809450 test begin: paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[8,8,163,163,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 163, 0],"bool"), list[8,8,163,163,], ) 
 The expanded size of the tensor (163) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 163, 163].  Tensor sizes: [1, 1, 163, 0]
2025-03-05 15:22:42.810075 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.810737 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 164, 169].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.811349 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 164, 241].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.812004 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 164, 261].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.812748 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 164, 385].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.813400 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[1,8,164,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 164, 85].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.814060 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[10,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[10,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.814688 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[2,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[2,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.815301 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[30,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[30,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.815906 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[4,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[4,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.816504 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[6,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[6,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.817112 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[7,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[7,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.817732 test begin: paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[8,8,164,164,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 164, 0],"bool"), list[8,8,164,164,], ) 
 The expanded size of the tensor (164) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 164, 164].  Tensor sizes: [1, 1, 164, 0]
2025-03-05 15:22:42.818328 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.818936 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 165, 169].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.819720 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 165, 241].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.820324 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 165, 261].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.820932 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 165, 385].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.821524 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[1,8,165,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 165, 85].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.822146 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[10,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[10,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.822771 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[2,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[2,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.823368 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[30,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[30,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.824548 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[4,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[4,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.825317 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[6,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[6,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.826260 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[7,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[7,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.827181 test begin: paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[8,8,165,165,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 165, 0],"bool"), list[8,8,165,165,], ) 
 The expanded size of the tensor (165) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 165, 165].  Tensor sizes: [1, 1, 165, 0]
2025-03-05 15:22:42.827876 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.828495 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 166, 169].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.829092 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 166, 241].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.829645 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 166, 261].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.830179 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 166, 385].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.830713 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[1,8,166,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 166, 85].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.831249 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[10,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[10,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.832387 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[2,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[2,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.832990 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[4,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[4,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.833519 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[6,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[6,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.834049 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[7,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[7,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.834617 test begin: paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[8,8,166,166,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 166, 0],"bool"), list[8,8,166,166,], ) 
 The expanded size of the tensor (166) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 166, 166].  Tensor sizes: [1, 1, 166, 0]
2025-03-05 15:22:42.835144 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.835665 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 167, 169].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.836179 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 167, 241].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.836775 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 167, 261].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.837305 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 167, 385].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.837835 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[1,8,167,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 167, 85].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.838469 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[10,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[10,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.839016 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[2,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[2,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.839544 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[4,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[4,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.840068 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[6,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[6,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.840766 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[7,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[7,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.841392 test begin: paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[8,8,167,167,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 167, 0],"bool"), list[8,8,167,167,], ) 
 The expanded size of the tensor (167) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 167, 167].  Tensor sizes: [1, 1, 167, 0]
2025-03-05 15:22:42.842115 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.842796 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 168, 169].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.844026 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 168, 241].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.844695 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 168, 261].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.845523 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 168, 385].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.846089 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[1,8,168,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 168, 85].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.846748 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[10,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[10,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.847424 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[2,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[2,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.848045 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[4,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[4,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.849212 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[6,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[6,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.850016 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[7,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[7,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.850649 test begin: paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[8,8,168,168,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 168, 0],"bool"), list[8,8,168,168,], ) 
 The expanded size of the tensor (168) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 168, 168].  Tensor sizes: [1, 1, 168, 0]
2025-03-05 15:22:42.851199 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.851727 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 169, 241].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.852255 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 169, 261].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.852814 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 169, 385].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.853344 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[1,8,169,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 169, 85].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.853887 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[10,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[10,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.854433 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[2,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[2,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.854968 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[30,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[30,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.855495 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[4,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[4,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.856018 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[6,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[6,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.856538 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[7,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[7,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.857062 test begin: paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[8,8,169,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 169, 0],"bool"), list[8,8,169,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 169, 169].  Tensor sizes: [1, 1, 169, 0]
2025-03-05 15:22:42.857575 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 109].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.858112 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 113].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.858635 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 145].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.859156 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 157].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.859683 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 169].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.860226 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.860790 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 217].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.861350 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 229].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.861878 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 241].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.862401 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 261].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.862923 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 385].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.863441 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 61].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.863969 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 65].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.864489 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 69].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.865119 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 73].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.866233 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 85].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.867048 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[1,8,17,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 17, 97].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.867887 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[10,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[10,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.868657 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[2,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[2,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.869602 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[3,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[3,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.870270 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[30,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[30,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.870908 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[4,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[4,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.871462 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[5,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[5,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.872007 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[6,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[6,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.872675 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[7,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[7,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.873329 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[8,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[8,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.873939 test begin: paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[9,8,17,17,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 17, 0],"bool"), list[9,8,17,17,], ) 
 The expanded size of the tensor (17) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 17, 17].  Tensor sizes: [1, 1, 17, 0]
2025-03-05 15:22:42.874481 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 170, 169].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.875053 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.875620 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 170, 241].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.876225 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 170, 261].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.876754 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 170, 385].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.877269 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[1,8,170,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 170, 85].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.877977 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[10,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[10,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.878530 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[2,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[2,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.879079 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[30,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[30,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.879656 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[4,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[4,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.880228 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[6,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[6,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.880784 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[7,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[7,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.881314 test begin: paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[8,8,170,170,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 170, 0],"bool"), list[8,8,170,170,], ) 
 The expanded size of the tensor (170) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 170, 170].  Tensor sizes: [1, 1, 170, 0]
2025-03-05 15:22:42.881878 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 171, 169].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.882557 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.883182 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 171, 241].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.883807 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 171, 261].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.884332 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 171, 385].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.884874 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[1,8,171,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 171, 85].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.885436 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[10,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[10,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.886375 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[2,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[2,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.886977 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[30,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[30,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.887541 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[4,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[4,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.888129 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[6,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[6,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.888716 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[7,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[7,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.889552 test begin: paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[8,8,171,171,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 171, 0],"bool"), list[8,8,171,171,], ) 
 The expanded size of the tensor (171) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 171, 171].  Tensor sizes: [1, 1, 171, 0]
2025-03-05 15:22:42.890106 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 172, 169].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.890725 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.891268 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 172, 241].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.891835 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 172, 261].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.892350 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 172, 385].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.892959 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[1,8,172,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 172, 85].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.893505 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[10,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[10,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.894085 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[2,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[2,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.894654 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[30,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[30,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.895231 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[4,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[4,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.895804 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[6,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[6,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.897069 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[7,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[7,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.897858 test begin: paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[8,8,172,172,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 172, 0],"bool"), list[8,8,172,172,], ) 
 The expanded size of the tensor (172) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 172, 172].  Tensor sizes: [1, 1, 172, 0]
2025-03-05 15:22:42.898515 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 173, 169].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.899201 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.899812 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 173, 241].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.900388 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 173, 261].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.900953 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 173, 385].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.901493 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[1,8,173,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 173, 85].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.902041 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[10,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[10,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.902605 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[2,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[2,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.903155 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[30,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[30,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.903732 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[4,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[4,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.904295 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[6,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[6,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.904865 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[7,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[7,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.905460 test begin: paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[8,8,173,173,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 173, 0],"bool"), list[8,8,173,173,], ) 
 The expanded size of the tensor (173) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 173, 173].  Tensor sizes: [1, 1, 173, 0]
2025-03-05 15:22:42.906104 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 174, 169].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.906691 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.907224 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 174, 241].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.907767 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 174, 261].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.908349 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 174, 385].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.908936 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[1,8,174,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 174, 85].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.909474 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[10,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[10,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.910045 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[2,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[2,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.910632 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[4,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[4,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.911176 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[6,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[6,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.911770 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[7,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[7,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.912809 test begin: paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[8,8,174,174,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 174, 0],"bool"), list[8,8,174,174,], ) 
 The expanded size of the tensor (174) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 174, 174].  Tensor sizes: [1, 1, 174, 0]
2025-03-05 15:22:42.913357 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 175, 169].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.913894 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.914421 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 175, 241].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.914977 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 175, 261].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.915761 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 175, 385].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.916450 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[1,8,175,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 175, 85].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.917088 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[10,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[10,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.917716 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[2,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[2,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.918635 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[30,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[30,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.919333 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[4,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[4,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.919948 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[6,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[6,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.920999 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[7,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[7,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.921685 test begin: paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[8,8,175,175,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 175, 0],"bool"), list[8,8,175,175,], ) 
 The expanded size of the tensor (175) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 175, 175].  Tensor sizes: [1, 1, 175, 0]
2025-03-05 15:22:42.922295 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 176, 169].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.922956 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.925642 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 176, 241].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.926421 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 176, 261].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.927333 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[1,8,176,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 176, 385].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.928013 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[10,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[10,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.928556 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[2,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[2,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.929087 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[30,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[30,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.929609 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[4,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[4,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.930854 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[6,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[6,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.931651 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[7,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[7,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.932258 test begin: paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[8,8,176,176,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 176, 0],"bool"), list[8,8,176,176,], ) 
 The expanded size of the tensor (176) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 176, 176].  Tensor sizes: [1, 1, 176, 0]
2025-03-05 15:22:42.932825 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 177, 169].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.933375 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.933937 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 177, 241].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.934538 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 177, 261].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.935091 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[1,8,177,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 177, 385].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.935623 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[10,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[10,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.936152 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[2,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[2,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.936715 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[4,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[4,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.937232 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[6,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[6,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.937766 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[7,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[7,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.938287 test begin: paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[8,8,177,177,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 177, 0],"bool"), list[8,8,177,177,], ) 
 The expanded size of the tensor (177) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 177, 177].  Tensor sizes: [1, 1, 177, 0]
2025-03-05 15:22:42.938808 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 178, 169].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.939327 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.939876 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 178, 241].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.940402 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 178, 261].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.940925 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[1,8,178,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 178, 385].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.941442 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[10,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[10,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.941970 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[2,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[2,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.942484 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[4,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[4,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.943012 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[6,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[6,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.943530 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[7,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[7,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.944058 test begin: paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[8,8,178,178,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 178, 0],"bool"), list[8,8,178,178,], ) 
 The expanded size of the tensor (178) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 178, 178].  Tensor sizes: [1, 1, 178, 0]
2025-03-05 15:22:42.944597 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 179, 169].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.945115 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.945646 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 179, 241].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.946180 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 179, 261].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.946708 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[1,8,179,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 179, 385].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.947234 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[10,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[10,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.947763 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[2,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[2,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.948280 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[4,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[4,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.948817 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[6,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[6,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.949340 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[7,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[7,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.949851 test begin: paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[8,8,179,179,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 179, 0],"bool"), list[8,8,179,179,], ) 
 The expanded size of the tensor (179) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 179, 179].  Tensor sizes: [1, 1, 179, 0]
2025-03-05 15:22:42.950361 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 109].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.950887 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 113].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.951417 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 145].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.951975 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 157].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.952489 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 169].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.953018 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.953531 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 217].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.954059 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 229].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.954569 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 241].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.955152 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 261].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.955686 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 385].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.956207 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 61].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.956731 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 65].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.957254 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 69].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.957779 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 73].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.958299 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 85].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.958822 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[1,8,18,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 18, 97].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.959333 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[10,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[10,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.959865 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[2,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[2,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.960378 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[3,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[3,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.960972 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[4,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[4,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.961952 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[5,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[5,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.962606 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[6,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[6,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.963187 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[7,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[7,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.963740 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[8,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[8,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.964273 test begin: paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[9,8,18,18,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 18, 0],"bool"), list[9,8,18,18,], ) 
 The expanded size of the tensor (18) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 18, 18].  Tensor sizes: [1, 1, 18, 0]
2025-03-05 15:22:42.964827 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 180, 169].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.965348 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.965867 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 180, 241].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.966385 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 180, 261].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.966905 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[1,8,180,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 180, 385].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.967426 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[10,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[10,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.968008 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[2,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[2,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.968523 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[4,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[4,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.969052 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[6,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[6,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.969566 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[7,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[7,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.970093 test begin: paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[8,8,180,180,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 180, 0],"bool"), list[8,8,180,180,], ) 
 The expanded size of the tensor (180) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 180, 180].  Tensor sizes: [1, 1, 180, 0]
2025-03-05 15:22:42.970615 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 181, 169].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.971142 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 181, 181].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.971657 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 181, 241].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.972167 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 181, 261].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.972691 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[1,8,181,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 181, 385].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.973210 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[10,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[10,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 181, 181].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.973735 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[2,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[2,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 181, 181].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.974259 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[30,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[30,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 181, 181].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.974855 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[6,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[6,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 181, 181].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.975373 test begin: paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[8,8,181,181,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 181, 0],"bool"), list[8,8,181,181,], ) 
 The expanded size of the tensor (181) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 181, 181].  Tensor sizes: [1, 1, 181, 0]
2025-03-05 15:22:42.975904 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 182, 169].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.976478 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 182, 182].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.977006 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 182, 241].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.977523 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 182, 261].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.978126 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[1,8,182,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 182, 385].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.979063 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[10,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[10,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 182, 182].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.979725 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[2,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[2,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 182, 182].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.980346 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[6,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[6,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 182, 182].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.980991 test begin: paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[8,8,182,182,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 182, 0],"bool"), list[8,8,182,182,], ) 
 The expanded size of the tensor (182) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 182, 182].  Tensor sizes: [1, 1, 182, 0]
2025-03-05 15:22:42.981750 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 183, 169].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.982440 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 183, 183].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.983149 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 183, 241].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.983728 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 183, 261].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.984301 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[1,8,183,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 183, 385].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.984841 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[10,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[10,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 183, 183].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.985362 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[2,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[2,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 183, 183].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.985898 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[30,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[30,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 183, 183].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.986446 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[6,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[6,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 183, 183].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.986987 test begin: paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[8,8,183,183,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 183, 0],"bool"), list[8,8,183,183,], ) 
 The expanded size of the tensor (183) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 183, 183].  Tensor sizes: [1, 1, 183, 0]
2025-03-05 15:22:42.987493 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 184, 169].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.988019 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 184, 184].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.988532 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 184, 241].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.989447 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 184, 261].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.990203 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[1,8,184,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 184, 385].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.990792 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[10,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[10,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 184, 184].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.991343 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[2,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[2,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 184, 184].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.991892 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[6,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[6,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 184, 184].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.992420 test begin: paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[8,8,184,184,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 184, 0],"bool"), list[8,8,184,184,], ) 
 The expanded size of the tensor (184) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 184, 184].  Tensor sizes: [1, 1, 184, 0]
2025-03-05 15:22:42.992972 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 185, 169].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.993506 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 185, 185].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.994063 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 185, 241].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.994572 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 185, 261].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.995104 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[1,8,185,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 185, 385].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.995633 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[10,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[10,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 185, 185].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.996168 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[2,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[2,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 185, 185].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.996720 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[6,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[6,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 185, 185].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.997249 test begin: paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[8,8,185,185,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 185, 0],"bool"), list[8,8,185,185,], ) 
 The expanded size of the tensor (185) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 185, 185].  Tensor sizes: [1, 1, 185, 0]
2025-03-05 15:22:42.997799 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 186, 169].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:42.998399 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,186,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 186, 186].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:42.998942 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 186, 241].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:42.999472 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 186, 261].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:42.999998 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[1,8,186,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 186, 385].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:43.000525 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[2,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[2,8,186,186,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 186, 186].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:43.001113 test begin: paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[8,8,186,186,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 186, 0],"bool"), list[8,8,186,186,], ) 
 The expanded size of the tensor (186) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 186, 186].  Tensor sizes: [1, 1, 186, 0]
2025-03-05 15:22:43.001639 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 187, 169].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.002178 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 187, 187].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.002701 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 187, 241].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.003211 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 187, 261].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.003737 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[1,8,187,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 187, 385].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.004265 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[2,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[2,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 187, 187].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.004788 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[30,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[30,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 187, 187].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.005314 test begin: paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[8,8,187,187,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 187, 0],"bool"), list[8,8,187,187,], ) 
 The expanded size of the tensor (187) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 187, 187].  Tensor sizes: [1, 1, 187, 0]
2025-03-05 15:22:43.005837 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 188, 169].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.006358 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,188,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 188, 188].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.006955 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 188, 241].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.007489 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 188, 261].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.008091 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[1,8,188,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 188, 385].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.008637 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[2,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[2,8,188,188,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 188, 188].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.009170 test begin: paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[8,8,188,188,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 188, 0],"bool"), list[8,8,188,188,], ) 
 The expanded size of the tensor (188) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 188, 188].  Tensor sizes: [1, 1, 188, 0]
2025-03-05 15:22:43.009703 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 189, 169].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.010228 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 189, 189].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.010756 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 189, 241].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.011278 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 189, 261].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.011798 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[1,8,189,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 189, 385].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.012315 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[2,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[2,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 189, 189].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.012835 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[30,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[30,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 189, 189].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.013365 test begin: paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[8,8,189,189,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 189, 0],"bool"), list[8,8,189,189,], ) 
 The expanded size of the tensor (189) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 189, 189].  Tensor sizes: [1, 1, 189, 0]
2025-03-05 15:22:43.013891 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 109].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.014414 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 113].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.014970 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 145].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.015511 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 157].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.016049 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 169].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.016601 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.017126 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 217].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.017657 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 229].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.018192 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 241].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.018816 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 261].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.019376 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 385].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.019916 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 61].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.020460 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 65].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.021038 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 69].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.021556 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 73].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.022085 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 85].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.022608 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[1,8,19,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 19, 97].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.023126 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[10,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[10,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.023659 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[2,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[2,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.024184 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[3,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[3,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.024716 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[30,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[30,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.025230 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[4,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[4,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.025752 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[5,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[5,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.026274 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[6,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[6,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.026792 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[7,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[7,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.027309 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[8,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[8,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.027831 test begin: paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[9,8,19,19,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 19, 0],"bool"), list[9,8,19,19,], ) 
 The expanded size of the tensor (19) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 19, 19].  Tensor sizes: [1, 1, 19, 0]
2025-03-05 15:22:43.028350 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 190, 169].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.028944 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 190, 190].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.029479 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 190, 241].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.031544 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 190, 261].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.032106 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[1,8,190,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 190, 385].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.032703 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[2,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[2,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 190, 190].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.033317 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[30,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[30,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 190, 190].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.033866 test begin: paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[8,8,190,190,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 190, 0],"bool"), list[8,8,190,190,], ) 
 The expanded size of the tensor (190) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 190, 190].  Tensor sizes: [1, 1, 190, 0]
2025-03-05 15:22:43.034407 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 191, 169].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.034981 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 191, 191].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.035504 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 191, 241].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.036031 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 191, 261].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.036540 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[1,8,191,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 191, 385].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.037058 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[2,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[2,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 191, 191].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.037570 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[30,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[30,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 191, 191].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.038115 test begin: paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[8,8,191,191,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 191, 0],"bool"), list[8,8,191,191,], ) 
 The expanded size of the tensor (191) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 191, 191].  Tensor sizes: [1, 1, 191, 0]
2025-03-05 15:22:43.038637 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 192, 169].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.039198 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 192, 192].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.039756 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 192, 241].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.040288 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 192, 261].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.040831 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[1,8,192,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 192, 385].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.041346 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[2,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[2,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 192, 192].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.041866 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[30,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[30,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 192, 192].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.042392 test begin: paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[8,8,192,192,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 192, 0],"bool"), list[8,8,192,192,], ) 
 The expanded size of the tensor (192) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 192, 192].  Tensor sizes: [1, 1, 192, 0]
2025-03-05 15:22:43.042941 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 193, 169].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.043576 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 193, 193].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.044155 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 193, 241].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.044706 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[1,8,193,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 193, 261].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.045228 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[2,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[2,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 193, 193].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.045755 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[30,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[30,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 193, 193].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.046298 test begin: paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[8,8,193,193,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 193, 0],"bool"), list[8,8,193,193,], ) 
 The expanded size of the tensor (193) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 193, 193].  Tensor sizes: [1, 1, 193, 0]
2025-03-05 15:22:43.046826 test begin: paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[1,8,194,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[1,8,194,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 194, 169].  Tensor sizes: [1, 1, 194, 0]
2025-03-05 15:22:43.048062 test begin: paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[1,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[1,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 194, 194].  Tensor sizes: [1, 1, 194, 0]
2025-03-05 15:22:43.048871 test begin: paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[1,8,194,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[1,8,194,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 194, 261].  Tensor sizes: [1, 1, 194, 0]
2025-03-05 15:22:43.049640 test begin: paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[2,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[2,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 194, 194].  Tensor sizes: [1, 1, 194, 0]
2025-03-05 15:22:43.050749 test begin: paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[30,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[30,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 194, 194].  Tensor sizes: [1, 1, 194, 0]
2025-03-05 15:22:43.051445 test begin: paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[8,8,194,194,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 194, 0],"bool"), list[8,8,194,194,], ) 
 The expanded size of the tensor (194) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 194, 194].  Tensor sizes: [1, 1, 194, 0]
2025-03-05 15:22:43.052204 test begin: paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[1,8,195,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[1,8,195,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 195, 169].  Tensor sizes: [1, 1, 195, 0]
2025-03-05 15:22:43.052899 test begin: paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[1,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[1,8,195,195,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 195, 195].  Tensor sizes: [1, 1, 195, 0]
2025-03-05 15:22:43.053488 test begin: paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[1,8,195,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[1,8,195,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 195, 261].  Tensor sizes: [1, 1, 195, 0]
2025-03-05 15:22:43.054106 test begin: paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[2,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[2,8,195,195,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 195, 195].  Tensor sizes: [1, 1, 195, 0]
2025-03-05 15:22:43.054675 test begin: paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[8,8,195,195,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 195, 0],"bool"), list[8,8,195,195,], ) 
 The expanded size of the tensor (195) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 195, 195].  Tensor sizes: [1, 1, 195, 0]
2025-03-05 15:22:43.055203 test begin: paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[1,8,196,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[1,8,196,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 196, 169].  Tensor sizes: [1, 1, 196, 0]
2025-03-05 15:22:43.055745 test begin: paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[1,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[1,8,196,196,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 196, 196].  Tensor sizes: [1, 1, 196, 0]
2025-03-05 15:22:43.056270 test begin: paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[1,8,196,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[1,8,196,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 196, 261].  Tensor sizes: [1, 1, 196, 0]
2025-03-05 15:22:43.056810 test begin: paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[2,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[2,8,196,196,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 196, 196].  Tensor sizes: [1, 1, 196, 0]
2025-03-05 15:22:43.057378 test begin: paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[8,8,196,196,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 196, 0],"bool"), list[8,8,196,196,], ) 
 The expanded size of the tensor (196) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 196, 196].  Tensor sizes: [1, 1, 196, 0]
2025-03-05 15:22:43.057924 test begin: paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[1,8,197,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[1,8,197,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 197, 169].  Tensor sizes: [1, 1, 197, 0]
2025-03-05 15:22:43.058462 test begin: paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[1,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[1,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 197, 197].  Tensor sizes: [1, 1, 197, 0]
2025-03-05 15:22:43.059039 test begin: paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[1,8,197,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[1,8,197,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 197, 261].  Tensor sizes: [1, 1, 197, 0]
2025-03-05 15:22:43.059573 test begin: paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[2,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[2,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 197, 197].  Tensor sizes: [1, 1, 197, 0]
2025-03-05 15:22:43.060157 test begin: paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[30,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[30,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 197, 197].  Tensor sizes: [1, 1, 197, 0]
2025-03-05 15:22:43.060720 test begin: paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[8,8,197,197,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 197, 0],"bool"), list[8,8,197,197,], ) 
 The expanded size of the tensor (197) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 197, 197].  Tensor sizes: [1, 1, 197, 0]
2025-03-05 15:22:43.061264 test begin: paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[1,8,198,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[1,8,198,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 198, 169].  Tensor sizes: [1, 1, 198, 0]
2025-03-05 15:22:43.061813 test begin: paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[1,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[1,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 198, 198].  Tensor sizes: [1, 1, 198, 0]
2025-03-05 15:22:43.062375 test begin: paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[1,8,198,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[1,8,198,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 198, 261].  Tensor sizes: [1, 1, 198, 0]
2025-03-05 15:22:43.062928 test begin: paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[2,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[2,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 198, 198].  Tensor sizes: [1, 1, 198, 0]
2025-03-05 15:22:43.063471 test begin: paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[30,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[30,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 198, 198].  Tensor sizes: [1, 1, 198, 0]
2025-03-05 15:22:43.064017 test begin: paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[8,8,198,198,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 198, 0],"bool"), list[8,8,198,198,], ) 
 The expanded size of the tensor (198) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 198, 198].  Tensor sizes: [1, 1, 198, 0]
2025-03-05 15:22:43.064544 test begin: paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[1,8,199,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[1,8,199,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 199, 169].  Tensor sizes: [1, 1, 199, 0]
2025-03-05 15:22:43.065077 test begin: paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[1,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[1,8,199,199,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 199, 199].  Tensor sizes: [1, 1, 199, 0]
2025-03-05 15:22:43.065640 test begin: paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[1,8,199,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[1,8,199,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 199, 261].  Tensor sizes: [1, 1, 199, 0]
2025-03-05 15:22:43.066167 test begin: paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[2,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[2,8,199,199,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 199, 199].  Tensor sizes: [1, 1, 199, 0]
2025-03-05 15:22:43.066701 test begin: paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[8,8,199,199,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 199, 0],"bool"), list[8,8,199,199,], ) 
 The expanded size of the tensor (199) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 199, 199].  Tensor sizes: [1, 1, 199, 0]
2025-03-05 15:22:43.067249 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 109].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.067895 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 113].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.069032 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 145].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.069711 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 157].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.070277 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 169].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.070844 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.071399 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 217].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.072016 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 229].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.072825 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 241].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.073433 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 261].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.073995 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 385].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.074548 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 61].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.075579 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 65].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.076142 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 69].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.076776 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 73].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.077409 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 85].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.078016 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[1,8,2,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 2, 97].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.078706 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[10,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[10,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.079382 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[2,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[2,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.080151 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[3,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[3,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.080734 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[4,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[4,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.081322 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[5,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[5,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.081938 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[6,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[6,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.082532 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[7,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[7,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.083077 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[8,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[8,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.083934 test begin: paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[9,8,2,2,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 2, 0],"bool"), list[9,8,2,2,], ) 
 The expanded size of the tensor (2) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 2, 2].  Tensor sizes: [1, 1, 2, 0]
2025-03-05 15:22:43.084573 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,4,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,4,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 4, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.085213 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 109].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.085954 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 113].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.086643 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 145].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.087692 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 157].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.088255 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 169].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.088852 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.089401 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 217].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.089982 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 229].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.090566 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 241].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.091124 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 261].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.091666 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 385].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.092199 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 61].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.092746 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 65].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.093277 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 69].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.093862 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 73].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.094457 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 85].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.095038 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[1,8,20,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 20, 97].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.095630 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[10,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[10,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.101215 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[2,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[2,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.103900 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[3,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[3,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.104475 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[30,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[30,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.105020 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[4,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[4,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.105540 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[5,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[5,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.106065 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[6,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[6,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.106575 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[7,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[7,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.107110 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[8,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[8,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.107948 test begin: paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[9,8,20,20,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 20, 0],"bool"), list[9,8,20,20,], ) 
 The expanded size of the tensor (20) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 20, 20].  Tensor sizes: [1, 1, 20, 0]
2025-03-05 15:22:43.108763 test begin: paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[1,8,200,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[1,8,200,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 200, 169].  Tensor sizes: [1, 1, 200, 0]
2025-03-05 15:22:43.109541 test begin: paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[1,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[1,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 200, 200].  Tensor sizes: [1, 1, 200, 0]
2025-03-05 15:22:43.110122 test begin: paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[1,8,200,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[1,8,200,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 200, 261].  Tensor sizes: [1, 1, 200, 0]
2025-03-05 15:22:43.110656 test begin: paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[2,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[2,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 200, 200].  Tensor sizes: [1, 1, 200, 0]
2025-03-05 15:22:43.111200 test begin: paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[30,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[30,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 200, 200].  Tensor sizes: [1, 1, 200, 0]
2025-03-05 15:22:43.111898 test begin: paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[8,8,200,200,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 200, 0],"bool"), list[8,8,200,200,], ) 
 The expanded size of the tensor (200) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 200, 200].  Tensor sizes: [1, 1, 200, 0]
2025-03-05 15:22:43.112570 test begin: paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[1,8,201,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[1,8,201,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 201, 169].  Tensor sizes: [1, 1, 201, 0]
2025-03-05 15:22:43.114018 test begin: paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[1,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[1,8,201,201,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 201, 201].  Tensor sizes: [1, 1, 201, 0]
2025-03-05 15:22:43.114620 test begin: paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[1,8,201,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[1,8,201,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 201, 261].  Tensor sizes: [1, 1, 201, 0]
2025-03-05 15:22:43.115223 test begin: paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[2,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[2,8,201,201,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 201, 201].  Tensor sizes: [1, 1, 201, 0]
2025-03-05 15:22:43.116269 test begin: paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[8,8,201,201,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 201, 0],"bool"), list[8,8,201,201,], ) 
 The expanded size of the tensor (201) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 201, 201].  Tensor sizes: [1, 1, 201, 0]
2025-03-05 15:22:43.116976 test begin: paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[1,8,202,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[1,8,202,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 202, 169].  Tensor sizes: [1, 1, 202, 0]
2025-03-05 15:22:43.117775 test begin: paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[1,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[1,8,202,202,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 202, 202].  Tensor sizes: [1, 1, 202, 0]
2025-03-05 15:22:43.118429 test begin: paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[1,8,202,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[1,8,202,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 202, 261].  Tensor sizes: [1, 1, 202, 0]
2025-03-05 15:22:43.119101 test begin: paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[2,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[2,8,202,202,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 202, 202].  Tensor sizes: [1, 1, 202, 0]
2025-03-05 15:22:43.119771 test begin: paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[8,8,202,202,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 202, 0],"bool"), list[8,8,202,202,], ) 
 The expanded size of the tensor (202) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 202, 202].  Tensor sizes: [1, 1, 202, 0]
2025-03-05 15:22:43.120330 test begin: paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[1,8,203,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[1,8,203,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 203, 169].  Tensor sizes: [1, 1, 203, 0]
2025-03-05 15:22:43.120871 test begin: paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[1,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[1,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 203, 203].  Tensor sizes: [1, 1, 203, 0]
2025-03-05 15:22:43.121409 test begin: paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[1,8,203,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[1,8,203,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 203, 261].  Tensor sizes: [1, 1, 203, 0]
2025-03-05 15:22:43.121933 test begin: paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[2,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[2,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 203, 203].  Tensor sizes: [1, 1, 203, 0]
2025-03-05 15:22:43.122443 test begin: paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[30,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[30,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 203, 203].  Tensor sizes: [1, 1, 203, 0]
2025-03-05 15:22:43.122968 test begin: paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[8,8,203,203,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 203, 0],"bool"), list[8,8,203,203,], ) 
 The expanded size of the tensor (203) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 203, 203].  Tensor sizes: [1, 1, 203, 0]
2025-03-05 15:22:43.123481 test begin: paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[1,8,204,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[1,8,204,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 204, 169].  Tensor sizes: [1, 1, 204, 0]
2025-03-05 15:22:43.129098 test begin: paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[1,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[1,8,204,204,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 204, 204].  Tensor sizes: [1, 1, 204, 0]
2025-03-05 15:22:43.130156 test begin: paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[1,8,204,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[1,8,204,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 204, 261].  Tensor sizes: [1, 1, 204, 0]
2025-03-05 15:22:43.130720 test begin: paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[2,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[2,8,204,204,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 204, 204].  Tensor sizes: [1, 1, 204, 0]
2025-03-05 15:22:43.131823 test begin: paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[8,8,204,204,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 204, 0],"bool"), list[8,8,204,204,], ) 
 The expanded size of the tensor (204) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 204, 204].  Tensor sizes: [1, 1, 204, 0]
2025-03-05 15:22:43.132490 test begin: paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[1,8,205,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[1,8,205,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 205, 169].  Tensor sizes: [1, 1, 205, 0]
2025-03-05 15:22:43.133074 test begin: paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[1,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[1,8,205,205,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 205, 205].  Tensor sizes: [1, 1, 205, 0]
2025-03-05 15:22:43.135709 test begin: paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[1,8,205,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[1,8,205,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 205, 261].  Tensor sizes: [1, 1, 205, 0]
2025-03-05 15:22:43.136535 test begin: paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[2,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[2,8,205,205,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 205, 205].  Tensor sizes: [1, 1, 205, 0]
2025-03-05 15:22:43.137078 test begin: paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[8,8,205,205,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 205, 0],"bool"), list[8,8,205,205,], ) 
 The expanded size of the tensor (205) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 205, 205].  Tensor sizes: [1, 1, 205, 0]
2025-03-05 15:22:43.139224 test begin: paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[1,8,206,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[1,8,206,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 206, 169].  Tensor sizes: [1, 1, 206, 0]
2025-03-05 15:22:43.139823 test begin: paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[1,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[1,8,206,206,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 206, 206].  Tensor sizes: [1, 1, 206, 0]
2025-03-05 15:22:43.140975 test begin: paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[1,8,206,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[1,8,206,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 206, 261].  Tensor sizes: [1, 1, 206, 0]
2025-03-05 15:22:43.141706 test begin: paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[2,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[2,8,206,206,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 206, 206].  Tensor sizes: [1, 1, 206, 0]
2025-03-05 15:22:43.142330 test begin: paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[8,8,206,206,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 206, 0],"bool"), list[8,8,206,206,], ) 
 The expanded size of the tensor (206) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 206, 206].  Tensor sizes: [1, 1, 206, 0]
2025-03-05 15:22:43.143042 test begin: paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[1,8,207,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[1,8,207,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 207, 169].  Tensor sizes: [1, 1, 207, 0]
2025-03-05 15:22:43.143679 test begin: paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[1,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[1,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 207, 207].  Tensor sizes: [1, 1, 207, 0]
2025-03-05 15:22:43.144630 test begin: paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[1,8,207,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[1,8,207,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 207, 261].  Tensor sizes: [1, 1, 207, 0]
2025-03-05 15:22:43.145686 test begin: paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[2,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[2,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 207, 207].  Tensor sizes: [1, 1, 207, 0]
2025-03-05 15:22:43.146828 test begin: paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[30,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[30,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 207, 207].  Tensor sizes: [1, 1, 207, 0]
2025-03-05 15:22:43.147545 test begin: paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[8,8,207,207,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 207, 0],"bool"), list[8,8,207,207,], ) 
 The expanded size of the tensor (207) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 207, 207].  Tensor sizes: [1, 1, 207, 0]
2025-03-05 15:22:43.148247 test begin: paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[1,8,208,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[1,8,208,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 208, 169].  Tensor sizes: [1, 1, 208, 0]
2025-03-05 15:22:43.148863 test begin: paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[1,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[1,8,208,208,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 208, 208].  Tensor sizes: [1, 1, 208, 0]
2025-03-05 15:22:43.149411 test begin: paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[1,8,208,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[1,8,208,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 208, 261].  Tensor sizes: [1, 1, 208, 0]
2025-03-05 15:22:43.149972 test begin: paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[2,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[2,8,208,208,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 208, 208].  Tensor sizes: [1, 1, 208, 0]
2025-03-05 15:22:43.150547 test begin: paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[8,8,208,208,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 208, 0],"bool"), list[8,8,208,208,], ) 
 The expanded size of the tensor (208) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 208, 208].  Tensor sizes: [1, 1, 208, 0]
2025-03-05 15:22:43.151113 test begin: paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[1,8,209,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[1,8,209,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 209, 169].  Tensor sizes: [1, 1, 209, 0]
2025-03-05 15:22:43.151665 test begin: paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[1,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[1,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 209, 209].  Tensor sizes: [1, 1, 209, 0]
2025-03-05 15:22:43.152188 test begin: paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[1,8,209,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[1,8,209,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 209, 261].  Tensor sizes: [1, 1, 209, 0]
2025-03-05 15:22:43.152904 test begin: paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[2,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[2,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 209, 209].  Tensor sizes: [1, 1, 209, 0]
2025-03-05 15:22:43.153541 test begin: paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[30,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[30,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 209, 209].  Tensor sizes: [1, 1, 209, 0]
2025-03-05 15:22:43.154194 test begin: paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[8,8,209,209,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 209, 0],"bool"), list[8,8,209,209,], ) 
 The expanded size of the tensor (209) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 209, 209].  Tensor sizes: [1, 1, 209, 0]
2025-03-05 15:22:43.154851 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 109].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.155473 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 113].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.162053 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 145].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.162958 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 157].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.163545 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 169].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.164126 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.164790 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 217].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.165321 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 229].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.165863 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 241].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.166415 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 261].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.166947 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 385].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.167484 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 61].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.168028 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 65].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.168630 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 69].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.169160 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 73].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.169698 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 85].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.170261 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[1,8,21,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 21, 97].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.173475 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[10,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[10,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.174078 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[2,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[2,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.174659 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[3,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[3,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.175207 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[30,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[30,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.175744 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[4,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[4,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.176263 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[5,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[5,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.176804 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[6,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[6,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.177382 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[7,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[7,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.177914 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[8,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[8,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.178512 test begin: paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[9,8,21,21,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 21, 0],"bool"), list[9,8,21,21,], ) 
 The expanded size of the tensor (21) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 21, 21].  Tensor sizes: [1, 1, 21, 0]
2025-03-05 15:22:43.179073 test begin: paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[1,8,210,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[1,8,210,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 210, 169].  Tensor sizes: [1, 1, 210, 0]
2025-03-05 15:22:43.179648 test begin: paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[1,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[1,8,210,210,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 210, 210].  Tensor sizes: [1, 1, 210, 0]
2025-03-05 15:22:43.180208 test begin: paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[1,8,210,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[1,8,210,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 210, 261].  Tensor sizes: [1, 1, 210, 0]
2025-03-05 15:22:43.180755 test begin: paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[30,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[30,8,210,210,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 210, 210].  Tensor sizes: [1, 1, 210, 0]
2025-03-05 15:22:43.181343 test begin: paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[8,8,210,210,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 210, 0],"bool"), list[8,8,210,210,], ) 
 The expanded size of the tensor (210) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 210, 210].  Tensor sizes: [1, 1, 210, 0]
2025-03-05 15:22:43.182070 test begin: paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[1,8,211,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[1,8,211,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 211, 169].  Tensor sizes: [1, 1, 211, 0]
2025-03-05 15:22:43.182684 test begin: paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[1,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[1,8,211,211,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 211, 211].  Tensor sizes: [1, 1, 211, 0]
2025-03-05 15:22:43.183252 test begin: paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[1,8,211,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[1,8,211,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 211, 261].  Tensor sizes: [1, 1, 211, 0]
2025-03-05 15:22:43.183796 test begin: paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[30,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[30,8,211,211,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 211, 211].  Tensor sizes: [1, 1, 211, 0]
2025-03-05 15:22:43.184328 test begin: paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[8,8,211,211,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 211, 0],"bool"), list[8,8,211,211,], ) 
 The expanded size of the tensor (211) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 211, 211].  Tensor sizes: [1, 1, 211, 0]
2025-03-05 15:22:43.184865 test begin: paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[1,8,212,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[1,8,212,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 212, 169].  Tensor sizes: [1, 1, 212, 0]
2025-03-05 15:22:43.185388 test begin: paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[1,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[1,8,212,212,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 212, 212].  Tensor sizes: [1, 1, 212, 0]
2025-03-05 15:22:43.185950 test begin: paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[1,8,212,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[1,8,212,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 212, 261].  Tensor sizes: [1, 1, 212, 0]
2025-03-05 15:22:43.186471 test begin: paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[30,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[30,8,212,212,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 212, 212].  Tensor sizes: [1, 1, 212, 0]
2025-03-05 15:22:43.186999 test begin: paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[8,8,212,212,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 212, 0],"bool"), list[8,8,212,212,], ) 
 The expanded size of the tensor (212) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 212, 212].  Tensor sizes: [1, 1, 212, 0]
2025-03-05 15:22:43.187521 test begin: paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[1,8,213,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[1,8,213,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 213, 169].  Tensor sizes: [1, 1, 213, 0]
2025-03-05 15:22:43.188117 test begin: paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[1,8,213,213,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[1,8,213,213,], ) 
 The expanded size of the tensor (213) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 213, 213].  Tensor sizes: [1, 1, 213, 0]
2025-03-05 15:22:43.188652 test begin: paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[1,8,213,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[1,8,213,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 213, 261].  Tensor sizes: [1, 1, 213, 0]
2025-03-05 15:22:43.189349 test begin: paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[8,8,213,213,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 213, 0],"bool"), list[8,8,213,213,], ) 
 The expanded size of the tensor (213) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 213, 213].  Tensor sizes: [1, 1, 213, 0]
2025-03-05 15:22:43.190019 test begin: paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[1,8,214,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[1,8,214,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 214, 169].  Tensor sizes: [1, 1, 214, 0]
2025-03-05 15:22:43.190696 test begin: paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[1,8,214,214,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[1,8,214,214,], ) 
 The expanded size of the tensor (214) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 214, 214].  Tensor sizes: [1, 1, 214, 0]
2025-03-05 15:22:43.191368 test begin: paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[1,8,214,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[1,8,214,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 214, 261].  Tensor sizes: [1, 1, 214, 0]
2025-03-05 15:22:43.192041 test begin: paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[8,8,214,214,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 214, 0],"bool"), list[8,8,214,214,], ) 
 The expanded size of the tensor (214) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 214, 214].  Tensor sizes: [1, 1, 214, 0]
2025-03-05 15:22:43.192572 test begin: paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[1,8,215,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[1,8,215,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 215, 169].  Tensor sizes: [1, 1, 215, 0]
2025-03-05 15:22:43.193107 test begin: paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[1,8,215,215,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[1,8,215,215,], ) 
 The expanded size of the tensor (215) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 215, 215].  Tensor sizes: [1, 1, 215, 0]
2025-03-05 15:22:43.193649 test begin: paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[1,8,215,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[1,8,215,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 215, 261].  Tensor sizes: [1, 1, 215, 0]
2025-03-05 15:22:43.194194 test begin: paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[8,8,215,215,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 215, 0],"bool"), list[8,8,215,215,], ) 
 The expanded size of the tensor (215) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 215, 215].  Tensor sizes: [1, 1, 215, 0]
2025-03-05 15:22:43.194750 test begin: paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[1,8,216,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[1,8,216,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 216, 169].  Tensor sizes: [1, 1, 216, 0]
2025-03-05 15:22:43.195286 test begin: paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[1,8,216,216,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[1,8,216,216,], ) 
 The expanded size of the tensor (216) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 216, 216].  Tensor sizes: [1, 1, 216, 0]
2025-03-05 15:22:43.195838 test begin: paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[1,8,216,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[1,8,216,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 216, 261].  Tensor sizes: [1, 1, 216, 0]
2025-03-05 15:22:43.196361 test begin: paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[8,8,216,216,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 216, 0],"bool"), list[8,8,216,216,], ) 
 The expanded size of the tensor (216) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 216, 216].  Tensor sizes: [1, 1, 216, 0]
2025-03-05 15:22:43.196877 test begin: paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[1,8,217,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[1,8,217,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 217, 169].  Tensor sizes: [1, 1, 217, 0]
2025-03-05 15:22:43.197392 test begin: paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[1,8,217,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[1,8,217,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 217, 217].  Tensor sizes: [1, 1, 217, 0]
2025-03-05 15:22:43.197913 test begin: paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[1,8,217,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[1,8,217,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 217, 261].  Tensor sizes: [1, 1, 217, 0]
2025-03-05 15:22:43.198434 test begin: paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[8,8,217,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 217, 0],"bool"), list[8,8,217,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 217, 217].  Tensor sizes: [1, 1, 217, 0]
2025-03-05 15:22:43.198997 test begin: paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[1,8,218,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[1,8,218,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 218, 169].  Tensor sizes: [1, 1, 218, 0]
2025-03-05 15:22:43.199516 test begin: paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[1,8,218,218,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[1,8,218,218,], ) 
 The expanded size of the tensor (218) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 218, 218].  Tensor sizes: [1, 1, 218, 0]
2025-03-05 15:22:43.200039 test begin: paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[1,8,218,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[1,8,218,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 218, 261].  Tensor sizes: [1, 1, 218, 0]
2025-03-05 15:22:43.200554 test begin: paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[8,8,218,218,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 218, 0],"bool"), list[8,8,218,218,], ) 
 The expanded size of the tensor (218) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 218, 218].  Tensor sizes: [1, 1, 218, 0]
2025-03-05 15:22:43.201078 test begin: paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[1,8,219,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[1,8,219,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 219, 169].  Tensor sizes: [1, 1, 219, 0]
2025-03-05 15:22:43.201600 test begin: paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[1,8,219,219,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[1,8,219,219,], ) 
 The expanded size of the tensor (219) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 219, 219].  Tensor sizes: [1, 1, 219, 0]
2025-03-05 15:22:43.202141 test begin: paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[1,8,219,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[1,8,219,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 219, 261].  Tensor sizes: [1, 1, 219, 0]
2025-03-05 15:22:43.202776 test begin: paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[8,8,219,219,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 219, 0],"bool"), list[8,8,219,219,], ) 
 The expanded size of the tensor (219) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 219, 219].  Tensor sizes: [1, 1, 219, 0]
2025-03-05 15:22:43.203363 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 109].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.203899 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 113].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.204431 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 145].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.204966 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 157].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.205482 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 169].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.206012 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 217].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.206527 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.207055 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 229].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.207573 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 241].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.208113 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 261].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.208631 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 385].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.209161 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 61].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.209685 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 65].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.210190 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 69].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.210710 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 73].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.211220 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 85].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.211778 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[1,8,22,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 22, 97].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.212295 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[10,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[10,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.212833 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[2,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[2,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.213351 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[3,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[3,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.213880 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[4,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[4,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.214457 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[5,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[5,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.215056 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[6,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[6,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.215617 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[7,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[7,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.216152 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[8,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[8,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.216676 test begin: paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[9,8,22,22,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 22, 0],"bool"), list[9,8,22,22,], ) 
 The expanded size of the tensor (22) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 22, 22].  Tensor sizes: [1, 1, 22, 0]
2025-03-05 15:22:43.217207 test begin: paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[1,8,220,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[1,8,220,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 220, 169].  Tensor sizes: [1, 1, 220, 0]
2025-03-05 15:22:43.217813 test begin: paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[1,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[1,8,220,220,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 220, 220].  Tensor sizes: [1, 1, 220, 0]
2025-03-05 15:22:43.218384 test begin: paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[1,8,220,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[1,8,220,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 220, 261].  Tensor sizes: [1, 1, 220, 0]
2025-03-05 15:22:43.218978 test begin: paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[30,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[30,8,220,220,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 220, 220].  Tensor sizes: [1, 1, 220, 0]
2025-03-05 15:22:43.219603 test begin: paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[8,8,220,220,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 220, 0],"bool"), list[8,8,220,220,], ) 
 The expanded size of the tensor (220) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 220, 220].  Tensor sizes: [1, 1, 220, 0]
2025-03-05 15:22:43.220271 test begin: paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[1,8,221,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[1,8,221,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 221, 169].  Tensor sizes: [1, 1, 221, 0]
2025-03-05 15:22:43.220834 test begin: paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[1,8,221,221,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[1,8,221,221,], ) 
 The expanded size of the tensor (221) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 221, 221].  Tensor sizes: [1, 1, 221, 0]
2025-03-05 15:22:43.221395 test begin: paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[1,8,221,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[1,8,221,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 221, 261].  Tensor sizes: [1, 1, 221, 0]
2025-03-05 15:22:43.221942 test begin: paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[8,8,221,221,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 221, 0],"bool"), list[8,8,221,221,], ) 
 The expanded size of the tensor (221) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 221, 221].  Tensor sizes: [1, 1, 221, 0]
2025-03-05 15:22:43.222499 test begin: paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[1,8,222,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[1,8,222,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 222, 169].  Tensor sizes: [1, 1, 222, 0]
2025-03-05 15:22:43.223155 test begin: paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[1,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[1,8,222,222,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 222, 222].  Tensor sizes: [1, 1, 222, 0]
2025-03-05 15:22:43.223711 test begin: paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[1,8,222,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[1,8,222,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 222, 261].  Tensor sizes: [1, 1, 222, 0]
2025-03-05 15:22:43.224255 test begin: paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[30,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[30,8,222,222,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 222, 222].  Tensor sizes: [1, 1, 222, 0]
2025-03-05 15:22:43.224800 test begin: paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[8,8,222,222,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 222, 0],"bool"), list[8,8,222,222,], ) 
 The expanded size of the tensor (222) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 222, 222].  Tensor sizes: [1, 1, 222, 0]
2025-03-05 15:22:43.225402 test begin: paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[1,8,223,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[1,8,223,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 223, 169].  Tensor sizes: [1, 1, 223, 0]
2025-03-05 15:22:43.226368 test begin: paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[1,8,223,223,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[1,8,223,223,], ) 
 The expanded size of the tensor (223) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 223, 223].  Tensor sizes: [1, 1, 223, 0]
2025-03-05 15:22:43.227017 test begin: paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[1,8,223,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[1,8,223,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 223, 261].  Tensor sizes: [1, 1, 223, 0]
2025-03-05 15:22:43.227662 test begin: paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[8,8,223,223,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 223, 0],"bool"), list[8,8,223,223,], ) 
 The expanded size of the tensor (223) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 223, 223].  Tensor sizes: [1, 1, 223, 0]
2025-03-05 15:22:43.228280 test begin: paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[1,8,224,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[1,8,224,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 224, 169].  Tensor sizes: [1, 1, 224, 0]
2025-03-05 15:22:43.228903 test begin: paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[1,8,224,224,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[1,8,224,224,], ) 
 The expanded size of the tensor (224) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 224, 224].  Tensor sizes: [1, 1, 224, 0]
2025-03-05 15:22:43.229522 test begin: paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[1,8,224,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[1,8,224,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 224, 261].  Tensor sizes: [1, 1, 224, 0]
2025-03-05 15:22:43.230181 test begin: paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[8,8,224,224,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 224, 0],"bool"), list[8,8,224,224,], ) 
 The expanded size of the tensor (224) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 224, 224].  Tensor sizes: [1, 1, 224, 0]
2025-03-05 15:22:43.230806 test begin: paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[1,8,225,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[1,8,225,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 225, 169].  Tensor sizes: [1, 1, 225, 0]
2025-03-05 15:22:43.231409 test begin: paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[1,8,225,225,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[1,8,225,225,], ) 
 The expanded size of the tensor (225) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 225, 225].  Tensor sizes: [1, 1, 225, 0]
2025-03-05 15:22:43.232026 test begin: paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[1,8,225,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[1,8,225,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 225, 261].  Tensor sizes: [1, 1, 225, 0]
2025-03-05 15:22:43.232639 test begin: paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[8,8,225,225,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 225, 0],"bool"), list[8,8,225,225,], ) 
 The expanded size of the tensor (225) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 225, 225].  Tensor sizes: [1, 1, 225, 0]
2025-03-05 15:22:43.233237 test begin: paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[1,8,226,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[1,8,226,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 226, 169].  Tensor sizes: [1, 1, 226, 0]
2025-03-05 15:22:43.233877 test begin: paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[1,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[1,8,226,226,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 226, 226].  Tensor sizes: [1, 1, 226, 0]
2025-03-05 15:22:43.235138 test begin: paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[1,8,226,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[1,8,226,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 226, 261].  Tensor sizes: [1, 1, 226, 0]
2025-03-05 15:22:43.235952 test begin: paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[30,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[30,8,226,226,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 226, 226].  Tensor sizes: [1, 1, 226, 0]
2025-03-05 15:22:43.236657 test begin: paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[8,8,226,226,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 226, 0],"bool"), list[8,8,226,226,], ) 
 The expanded size of the tensor (226) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 226, 226].  Tensor sizes: [1, 1, 226, 0]
2025-03-05 15:22:43.237207 test begin: paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[1,8,227,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[1,8,227,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 227, 169].  Tensor sizes: [1, 1, 227, 0]
2025-03-05 15:22:43.237745 test begin: paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[1,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[1,8,227,227,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 227, 227].  Tensor sizes: [1, 1, 227, 0]
2025-03-05 15:22:43.238285 test begin: paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[1,8,227,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[1,8,227,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 227, 261].  Tensor sizes: [1, 1, 227, 0]
2025-03-05 15:22:43.238822 test begin: paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[30,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[30,8,227,227,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 227, 227].  Tensor sizes: [1, 1, 227, 0]
2025-03-05 15:22:43.239341 test begin: paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[8,8,227,227,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 227, 0],"bool"), list[8,8,227,227,], ) 
 The expanded size of the tensor (227) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 227, 227].  Tensor sizes: [1, 1, 227, 0]
2025-03-05 15:22:43.239864 test begin: paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[1,8,228,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[1,8,228,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 228, 169].  Tensor sizes: [1, 1, 228, 0]
2025-03-05 15:22:43.240384 test begin: paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[1,8,228,228,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[1,8,228,228,], ) 
 The expanded size of the tensor (228) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 228, 228].  Tensor sizes: [1, 1, 228, 0]
2025-03-05 15:22:43.240914 test begin: paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[1,8,228,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[1,8,228,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 228, 261].  Tensor sizes: [1, 1, 228, 0]
2025-03-05 15:22:43.241426 test begin: paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[8,8,228,228,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 228, 0],"bool"), list[8,8,228,228,], ) 
 The expanded size of the tensor (228) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 228, 228].  Tensor sizes: [1, 1, 228, 0]
2025-03-05 15:22:43.241946 test begin: paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[1,8,229,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[1,8,229,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 229, 169].  Tensor sizes: [1, 1, 229, 0]
2025-03-05 15:22:43.242463 test begin: paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[1,8,229,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[1,8,229,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 229, 229].  Tensor sizes: [1, 1, 229, 0]
2025-03-05 15:22:43.242994 test begin: paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[1,8,229,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[1,8,229,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 229, 261].  Tensor sizes: [1, 1, 229, 0]
2025-03-05 15:22:43.243507 test begin: paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[8,8,229,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 229, 0],"bool"), list[8,8,229,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 229, 229].  Tensor sizes: [1, 1, 229, 0]
2025-03-05 15:22:43.244028 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 109].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.244593 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 113].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.245828 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 145].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.246574 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 157].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.247158 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 169].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.247747 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 217].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.248290 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 229].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.248845 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.249378 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 241].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.249909 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 261].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.250434 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 385].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.250959 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 61].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.251497 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 65].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.252023 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 69].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.252669 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 73].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.253254 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 85].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.253817 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[1,8,23,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 23, 97].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.254343 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[10,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[10,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.254878 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[2,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[2,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.255407 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[3,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[3,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.255928 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[30,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[30,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.256500 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[4,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[4,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.257040 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[5,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[5,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.257560 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[6,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[6,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.258110 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[7,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[7,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.258639 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[8,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[8,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.259162 test begin: paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[9,8,23,23,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 23, 0],"bool"), list[9,8,23,23,], ) 
 The expanded size of the tensor (23) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 23, 23].  Tensor sizes: [1, 1, 23, 0]
2025-03-05 15:22:43.259684 test begin: paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[1,8,230,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[1,8,230,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 230, 169].  Tensor sizes: [1, 1, 230, 0]
2025-03-05 15:22:43.260198 test begin: paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[1,8,230,230,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[1,8,230,230,], ) 
 The expanded size of the tensor (230) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 230, 230].  Tensor sizes: [1, 1, 230, 0]
2025-03-05 15:22:43.260732 test begin: paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[1,8,230,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[1,8,230,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 230, 261].  Tensor sizes: [1, 1, 230, 0]
2025-03-05 15:22:43.261244 test begin: paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[8,8,230,230,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 230, 0],"bool"), list[8,8,230,230,], ) 
 The expanded size of the tensor (230) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 230, 230].  Tensor sizes: [1, 1, 230, 0]
2025-03-05 15:22:43.261762 test begin: paddle.broadcast_to(Tensor([1, 1, 231, 0],"bool"), list[1,8,231,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 231, 0],"bool"), list[1,8,231,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 231, 169].  Tensor sizes: [1, 1, 231, 0]
2025-03-05 15:22:43.262337 test begin: paddle.broadcast_to(Tensor([1, 1, 231, 0],"bool"), list[1,8,231,231,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 231, 0],"bool"), list[1,8,231,231,], ) 
 The expanded size of the tensor (231) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 231, 231].  Tensor sizes: [1, 1, 231, 0]
2025-03-05 15:22:43.263190 test begin: paddle.broadcast_to(Tensor([1, 1, 231, 0],"bool"), list[8,8,231,231,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 231, 0],"bool"), list[8,8,231,231,], ) 
 The expanded size of the tensor (231) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 231, 231].  Tensor sizes: [1, 1, 231, 0]
2025-03-05 15:22:43.263803 test begin: paddle.broadcast_to(Tensor([1, 1, 232, 0],"bool"), list[1,8,232,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 232, 0],"bool"), list[1,8,232,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 232, 169].  Tensor sizes: [1, 1, 232, 0]
2025-03-05 15:22:43.264359 test begin: paddle.broadcast_to(Tensor([1, 1, 232, 0],"bool"), list[1,8,232,232,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 232, 0],"bool"), list[1,8,232,232,], ) 
 The expanded size of the tensor (232) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 232, 232].  Tensor sizes: [1, 1, 232, 0]
2025-03-05 15:22:43.264953 test begin: paddle.broadcast_to(Tensor([1, 1, 232, 0],"bool"), list[8,8,232,232,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 232, 0],"bool"), list[8,8,232,232,], ) 
 The expanded size of the tensor (232) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 232, 232].  Tensor sizes: [1, 1, 232, 0]
2025-03-05 15:22:43.265487 test begin: paddle.broadcast_to(Tensor([1, 1, 233, 0],"bool"), list[1,8,233,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 233, 0],"bool"), list[1,8,233,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 233, 169].  Tensor sizes: [1, 1, 233, 0]
2025-03-05 15:22:43.266020 test begin: paddle.broadcast_to(Tensor([1, 1, 233, 0],"bool"), list[1,8,233,233,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 233, 0],"bool"), list[1,8,233,233,], ) 
 The expanded size of the tensor (233) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 233, 233].  Tensor sizes: [1, 1, 233, 0]
2025-03-05 15:22:43.266546 test begin: paddle.broadcast_to(Tensor([1, 1, 233, 0],"bool"), list[8,8,233,233,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 233, 0],"bool"), list[8,8,233,233,], ) 
 The expanded size of the tensor (233) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 233, 233].  Tensor sizes: [1, 1, 233, 0]
2025-03-05 15:22:43.267086 test begin: paddle.broadcast_to(Tensor([1, 1, 234, 0],"bool"), list[1,8,234,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 234, 0],"bool"), list[1,8,234,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 234, 169].  Tensor sizes: [1, 1, 234, 0]
2025-03-05 15:22:43.267604 test begin: paddle.broadcast_to(Tensor([1, 1, 234, 0],"bool"), list[1,8,234,234,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 234, 0],"bool"), list[1,8,234,234,], ) 
 The expanded size of the tensor (234) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 234, 234].  Tensor sizes: [1, 1, 234, 0]
2025-03-05 15:22:43.268119 test begin: paddle.broadcast_to(Tensor([1, 1, 234, 0],"bool"), list[8,8,234,234,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 234, 0],"bool"), list[8,8,234,234,], ) 
 The expanded size of the tensor (234) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 234, 234].  Tensor sizes: [1, 1, 234, 0]
2025-03-05 15:22:43.268646 test begin: paddle.broadcast_to(Tensor([1, 1, 235, 0],"bool"), list[1,8,235,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 235, 0],"bool"), list[1,8,235,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 235, 169].  Tensor sizes: [1, 1, 235, 0]
2025-03-05 15:22:43.269156 test begin: paddle.broadcast_to(Tensor([1, 1, 235, 0],"bool"), list[1,8,235,235,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 235, 0],"bool"), list[1,8,235,235,], ) 
 The expanded size of the tensor (235) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 235, 235].  Tensor sizes: [1, 1, 235, 0]
2025-03-05 15:22:43.269678 test begin: paddle.broadcast_to(Tensor([1, 1, 235, 0],"bool"), list[8,8,235,235,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 235, 0],"bool"), list[8,8,235,235,], ) 
 The expanded size of the tensor (235) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 235, 235].  Tensor sizes: [1, 1, 235, 0]
2025-03-05 15:22:43.270243 test begin: paddle.broadcast_to(Tensor([1, 1, 236, 0],"bool"), list[1,8,236,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 236, 0],"bool"), list[1,8,236,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 236, 169].  Tensor sizes: [1, 1, 236, 0]
2025-03-05 15:22:43.270774 test begin: paddle.broadcast_to(Tensor([1, 1, 236, 0],"bool"), list[1,8,236,236,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 236, 0],"bool"), list[1,8,236,236,], ) 
 The expanded size of the tensor (236) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 236, 236].  Tensor sizes: [1, 1, 236, 0]
2025-03-05 15:22:43.271290 test begin: paddle.broadcast_to(Tensor([1, 1, 236, 0],"bool"), list[8,8,236,236,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 236, 0],"bool"), list[8,8,236,236,], ) 
 The expanded size of the tensor (236) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 236, 236].  Tensor sizes: [1, 1, 236, 0]
2025-03-05 15:22:43.271817 test begin: paddle.broadcast_to(Tensor([1, 1, 237, 0],"bool"), list[1,8,237,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 237, 0],"bool"), list[1,8,237,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 237, 169].  Tensor sizes: [1, 1, 237, 0]
2025-03-05 15:22:43.272336 test begin: paddle.broadcast_to(Tensor([1, 1, 237, 0],"bool"), list[1,8,237,237,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 237, 0],"bool"), list[1,8,237,237,], ) 
 The expanded size of the tensor (237) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 237, 237].  Tensor sizes: [1, 1, 237, 0]
2025-03-05 15:22:43.272872 test begin: paddle.broadcast_to(Tensor([1, 1, 237, 0],"bool"), list[8,8,237,237,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 237, 0],"bool"), list[8,8,237,237,], ) 
 The expanded size of the tensor (237) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 237, 237].  Tensor sizes: [1, 1, 237, 0]
2025-03-05 15:22:43.273396 test begin: paddle.broadcast_to(Tensor([1, 1, 238, 0],"bool"), list[1,8,238,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 238, 0],"bool"), list[1,8,238,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 238, 169].  Tensor sizes: [1, 1, 238, 0]
2025-03-05 15:22:43.273916 test begin: paddle.broadcast_to(Tensor([1, 1, 238, 0],"bool"), list[1,8,238,238,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 238, 0],"bool"), list[1,8,238,238,], ) 
 The expanded size of the tensor (238) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 238, 238].  Tensor sizes: [1, 1, 238, 0]
2025-03-05 15:22:43.274425 test begin: paddle.broadcast_to(Tensor([1, 1, 238, 0],"bool"), list[8,8,238,238,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 238, 0],"bool"), list[8,8,238,238,], ) 
 The expanded size of the tensor (238) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 238, 238].  Tensor sizes: [1, 1, 238, 0]
2025-03-05 15:22:43.274945 test begin: paddle.broadcast_to(Tensor([1, 1, 239, 0],"bool"), list[1,8,239,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 239, 0],"bool"), list[1,8,239,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 239, 169].  Tensor sizes: [1, 1, 239, 0]
2025-03-05 15:22:43.275469 test begin: paddle.broadcast_to(Tensor([1, 1, 239, 0],"bool"), list[1,8,239,239,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 239, 0],"bool"), list[1,8,239,239,], ) 
 The expanded size of the tensor (239) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 239, 239].  Tensor sizes: [1, 1, 239, 0]
2025-03-05 15:22:43.276000 test begin: paddle.broadcast_to(Tensor([1, 1, 239, 0],"bool"), list[8,8,239,239,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 239, 0],"bool"), list[8,8,239,239,], ) 
 The expanded size of the tensor (239) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 239, 239].  Tensor sizes: [1, 1, 239, 0]
2025-03-05 15:22:43.276511 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 109].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.277033 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 113].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.277540 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 145].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.278103 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 157].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.278634 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 169].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.279217 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 217].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.280024 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 229].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.280696 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.281300 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 241].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.281936 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 261].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.282530 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 385].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.283142 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 61].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.283745 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 65].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.284340 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 69].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.284936 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 73].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.285534 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 85].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.286150 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[1,8,24,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 24, 97].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.286750 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[10,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[10,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.287351 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[2,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[2,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.287982 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[3,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[3,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.288578 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[30,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[30,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.289192 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[4,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[4,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.289823 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[5,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[5,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.290429 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[6,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[6,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.291038 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[7,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[7,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.291643 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[8,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[8,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.292234 test begin: paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[9,8,24,24,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 24, 0],"bool"), list[9,8,24,24,], ) 
 The expanded size of the tensor (24) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 24, 24].  Tensor sizes: [1, 1, 24, 0]
2025-03-05 15:22:43.292831 test begin: paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[1,8,240,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[1,8,240,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 240, 169].  Tensor sizes: [1, 1, 240, 0]
2025-03-05 15:22:43.293423 test begin: paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[1,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[1,8,240,240,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 240, 240].  Tensor sizes: [1, 1, 240, 0]
2025-03-05 15:22:43.294040 test begin: paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[30,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[30,8,240,240,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 240, 240].  Tensor sizes: [1, 1, 240, 0]
2025-03-05 15:22:43.294662 test begin: paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[8,8,240,240,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 240, 0],"bool"), list[8,8,240,240,], ) 
 The expanded size of the tensor (240) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 240, 240].  Tensor sizes: [1, 1, 240, 0]
2025-03-05 15:22:43.295276 test begin: paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[1,8,241,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[1,8,241,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 241, 169].  Tensor sizes: [1, 1, 241, 0]
2025-03-05 15:22:43.295920 test begin: paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[1,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[1,8,241,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 241, 241].  Tensor sizes: [1, 1, 241, 0]
2025-03-05 15:22:43.296648 test begin: paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[30,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[30,8,241,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 241, 241].  Tensor sizes: [1, 1, 241, 0]
2025-03-05 15:22:43.297273 test begin: paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[8,8,241,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 241, 0],"bool"), list[8,8,241,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 241, 241].  Tensor sizes: [1, 1, 241, 0]
2025-03-05 15:22:43.297886 test begin: paddle.broadcast_to(Tensor([1, 1, 242, 0],"bool"), list[1,8,242,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 242, 0],"bool"), list[1,8,242,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 242, 169].  Tensor sizes: [1, 1, 242, 0]
2025-03-05 15:22:43.298498 test begin: paddle.broadcast_to(Tensor([1, 1, 242, 0],"bool"), list[1,8,242,242,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 242, 0],"bool"), list[1,8,242,242,], ) 
 The expanded size of the tensor (242) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 242, 242].  Tensor sizes: [1, 1, 242, 0]
2025-03-05 15:22:43.299110 test begin: paddle.broadcast_to(Tensor([1, 1, 242, 0],"bool"), list[8,8,242,242,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 242, 0],"bool"), list[8,8,242,242,], ) 
 The expanded size of the tensor (242) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 242, 242].  Tensor sizes: [1, 1, 242, 0]
2025-03-05 15:22:43.299805 test begin: paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[1,8,243,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[1,8,243,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 243, 169].  Tensor sizes: [1, 1, 243, 0]
2025-03-05 15:22:43.300579 test begin: paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[1,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[1,8,243,243,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 243, 243].  Tensor sizes: [1, 1, 243, 0]
2025-03-05 15:22:43.304910 test begin: paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[30,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[30,8,243,243,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 243, 243].  Tensor sizes: [1, 1, 243, 0]
2025-03-05 15:22:43.305704 test begin: paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[8,8,243,243,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 243, 0],"bool"), list[8,8,243,243,], ) 
 The expanded size of the tensor (243) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 243, 243].  Tensor sizes: [1, 1, 243, 0]
2025-03-05 15:22:43.306370 test begin: paddle.broadcast_to(Tensor([1, 1, 244, 0],"bool"), list[1,8,244,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 244, 0],"bool"), list[1,8,244,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 244, 169].  Tensor sizes: [1, 1, 244, 0]
2025-03-05 15:22:43.307016 test begin: paddle.broadcast_to(Tensor([1, 1, 244, 0],"bool"), list[1,8,244,244,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 244, 0],"bool"), list[1,8,244,244,], ) 
 The expanded size of the tensor (244) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 244, 244].  Tensor sizes: [1, 1, 244, 0]
2025-03-05 15:22:43.307655 test begin: paddle.broadcast_to(Tensor([1, 1, 244, 0],"bool"), list[8,8,244,244,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 244, 0],"bool"), list[8,8,244,244,], ) 
 The expanded size of the tensor (244) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 244, 244].  Tensor sizes: [1, 1, 244, 0]
2025-03-05 15:22:43.308480 test begin: paddle.broadcast_to(Tensor([1, 1, 245, 0],"bool"), list[1,8,245,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 245, 0],"bool"), list[1,8,245,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 245, 169].  Tensor sizes: [1, 1, 245, 0]
2025-03-05 15:22:43.309174 test begin: paddle.broadcast_to(Tensor([1, 1, 245, 0],"bool"), list[1,8,245,245,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 245, 0],"bool"), list[1,8,245,245,], ) 
 The expanded size of the tensor (245) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 245, 245].  Tensor sizes: [1, 1, 245, 0]
2025-03-05 15:22:43.309885 test begin: paddle.broadcast_to(Tensor([1, 1, 245, 0],"bool"), list[8,8,245,245,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 245, 0],"bool"), list[8,8,245,245,], ) 
 The expanded size of the tensor (245) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 245, 245].  Tensor sizes: [1, 1, 245, 0]
2025-03-05 15:22:43.310437 test begin: paddle.broadcast_to(Tensor([1, 1, 246, 0],"bool"), list[1,8,246,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 246, 0],"bool"), list[1,8,246,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 246, 169].  Tensor sizes: [1, 1, 246, 0]
2025-03-05 15:22:43.310991 test begin: paddle.broadcast_to(Tensor([1, 1, 246, 0],"bool"), list[1,8,246,246,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 246, 0],"bool"), list[1,8,246,246,], ) 
 The expanded size of the tensor (246) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 246, 246].  Tensor sizes: [1, 1, 246, 0]
2025-03-05 15:22:43.311559 test begin: paddle.broadcast_to(Tensor([1, 1, 246, 0],"bool"), list[8,8,246,246,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 246, 0],"bool"), list[8,8,246,246,], ) 
 The expanded size of the tensor (246) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 246, 246].  Tensor sizes: [1, 1, 246, 0]
2025-03-05 15:22:43.312110 test begin: paddle.broadcast_to(Tensor([1, 1, 247, 0],"bool"), list[1,8,247,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 247, 0],"bool"), list[1,8,247,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 247, 169].  Tensor sizes: [1, 1, 247, 0]
2025-03-05 15:22:43.312663 test begin: paddle.broadcast_to(Tensor([1, 1, 247, 0],"bool"), list[1,8,247,247,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 247, 0],"bool"), list[1,8,247,247,], ) 
 The expanded size of the tensor (247) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 247, 247].  Tensor sizes: [1, 1, 247, 0]
2025-03-05 15:22:43.313191 test begin: paddle.broadcast_to(Tensor([1, 1, 247, 0],"bool"), list[8,8,247,247,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 247, 0],"bool"), list[8,8,247,247,], ) 
 The expanded size of the tensor (247) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 247, 247].  Tensor sizes: [1, 1, 247, 0]
2025-03-05 15:22:43.314456 test begin: paddle.broadcast_to(Tensor([1, 1, 248, 0],"bool"), list[1,8,248,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 248, 0],"bool"), list[1,8,248,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 248, 169].  Tensor sizes: [1, 1, 248, 0]
2025-03-05 15:22:43.315066 test begin: paddle.broadcast_to(Tensor([1, 1, 248, 0],"bool"), list[1,8,248,248,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 248, 0],"bool"), list[1,8,248,248,], ) 
 The expanded size of the tensor (248) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 248, 248].  Tensor sizes: [1, 1, 248, 0]
2025-03-05 15:22:43.315631 test begin: paddle.broadcast_to(Tensor([1, 1, 248, 0],"bool"), list[8,8,248,248,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 248, 0],"bool"), list[8,8,248,248,], ) 
 The expanded size of the tensor (248) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 248, 248].  Tensor sizes: [1, 1, 248, 0]
2025-03-05 15:22:43.316165 test begin: paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[1,8,249,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[1,8,249,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 249, 169].  Tensor sizes: [1, 1, 249, 0]
2025-03-05 15:22:43.316710 test begin: paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[1,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[1,8,249,249,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 249, 249].  Tensor sizes: [1, 1, 249, 0]
2025-03-05 15:22:43.317343 test begin: paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[30,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[30,8,249,249,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 249, 249].  Tensor sizes: [1, 1, 249, 0]
2025-03-05 15:22:43.317943 test begin: paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[8,8,249,249,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 249, 0],"bool"), list[8,8,249,249,], ) 
 The expanded size of the tensor (249) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 249, 249].  Tensor sizes: [1, 1, 249, 0]
2025-03-05 15:22:43.318728 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 109].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.319319 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 113].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.320447 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 145].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.321024 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 157].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.321570 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 169].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.322131 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 217].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.322742 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 229].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.323419 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 241].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.323956 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.324484 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 261].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.325042 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 385].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.325565 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 61].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.326807 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 65].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.327987 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 69].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.328644 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 73].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.329200 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 85].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.329732 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[1,8,25,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 25, 97].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.330246 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[10,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[10,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.330779 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[2,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[2,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.331683 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[3,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[3,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.332356 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[4,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[4,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.333027 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[5,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[5,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.333774 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[6,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[6,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.334400 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[7,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[7,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.335041 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[8,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[8,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.336214 test begin: paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[9,8,25,25,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 25, 0],"bool"), list[9,8,25,25,], ) 
 The expanded size of the tensor (25) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 25, 25].  Tensor sizes: [1, 1, 25, 0]
2025-03-05 15:22:43.336896 test begin: paddle.broadcast_to(Tensor([1, 1, 250, 0],"bool"), list[1,8,250,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 250, 0],"bool"), list[1,8,250,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 250, 169].  Tensor sizes: [1, 1, 250, 0]
2025-03-05 15:22:43.337549 test begin: paddle.broadcast_to(Tensor([1, 1, 250, 0],"bool"), list[1,8,250,250,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 250, 0],"bool"), list[1,8,250,250,], ) 
 The expanded size of the tensor (250) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 250, 250].  Tensor sizes: [1, 1, 250, 0]
2025-03-05 15:22:43.338186 test begin: paddle.broadcast_to(Tensor([1, 1, 250, 0],"bool"), list[8,8,250,250,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 250, 0],"bool"), list[8,8,250,250,], ) 
 The expanded size of the tensor (250) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 250, 250].  Tensor sizes: [1, 1, 250, 0]
2025-03-05 15:22:43.338812 test begin: paddle.broadcast_to(Tensor([1, 1, 251, 0],"bool"), list[8,8,251,251,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 251, 0],"bool"), list[8,8,251,251,], ) 
 The expanded size of the tensor (251) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 251, 251].  Tensor sizes: [1, 1, 251, 0]
2025-03-05 15:22:43.339397 test begin: paddle.broadcast_to(Tensor([1, 1, 252, 0],"bool"), list[8,8,252,252,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 252, 0],"bool"), list[8,8,252,252,], ) 
 The expanded size of the tensor (252) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 252, 252].  Tensor sizes: [1, 1, 252, 0]
2025-03-05 15:22:43.339989 test begin: paddle.broadcast_to(Tensor([1, 1, 253, 0],"bool"), list[30,8,253,253,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 253, 0],"bool"), list[30,8,253,253,], ) 
 The expanded size of the tensor (253) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 253, 253].  Tensor sizes: [1, 1, 253, 0]
2025-03-05 15:22:43.340634 test begin: paddle.broadcast_to(Tensor([1, 1, 253, 0],"bool"), list[8,8,253,253,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 253, 0],"bool"), list[8,8,253,253,], ) 
 The expanded size of the tensor (253) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 253, 253].  Tensor sizes: [1, 1, 253, 0]
2025-03-05 15:22:43.341239 test begin: paddle.broadcast_to(Tensor([1, 1, 254, 0],"bool"), list[8,8,254,254,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 254, 0],"bool"), list[8,8,254,254,], ) 
 The expanded size of the tensor (254) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 254, 254].  Tensor sizes: [1, 1, 254, 0]
2025-03-05 15:22:43.341845 test begin: paddle.broadcast_to(Tensor([1, 1, 255, 0],"bool"), list[8,8,255,255,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 255, 0],"bool"), list[8,8,255,255,], ) 
 The expanded size of the tensor (255) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 255, 255].  Tensor sizes: [1, 1, 255, 0]
2025-03-05 15:22:43.342482 test begin: paddle.broadcast_to(Tensor([1, 1, 256, 0],"bool"), list[8,8,256,256,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 256, 0],"bool"), list[8,8,256,256,], ) 
 The expanded size of the tensor (256) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 256, 256].  Tensor sizes: [1, 1, 256, 0]
2025-03-05 15:22:43.343132 test begin: paddle.broadcast_to(Tensor([1, 1, 257, 0],"bool"), list[8,8,257,257,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 257, 0],"bool"), list[8,8,257,257,], ) 
 The expanded size of the tensor (257) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 257, 257].  Tensor sizes: [1, 1, 257, 0]
2025-03-05 15:22:43.343759 test begin: paddle.broadcast_to(Tensor([1, 1, 258, 0],"bool"), list[8,8,258,258,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 258, 0],"bool"), list[8,8,258,258,], ) 
 The expanded size of the tensor (258) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 258, 258].  Tensor sizes: [1, 1, 258, 0]
2025-03-05 15:22:43.344373 test begin: paddle.broadcast_to(Tensor([1, 1, 259, 0],"bool"), list[8,8,259,259,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 259, 0],"bool"), list[8,8,259,259,], ) 
 The expanded size of the tensor (259) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 259, 259].  Tensor sizes: [1, 1, 259, 0]
2025-03-05 15:22:43.344972 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 109].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.345572 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 113].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.346191 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 145].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.346799 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 157].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.347402 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 169].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.348051 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 217].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.348689 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 229].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.349279 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 241].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.350941 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.351552 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 261].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.352195 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 385].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.352803 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 61].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.353419 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 65].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.354044 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 69].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.354671 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 73].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.356007 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 85].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.356939 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[1,8,26,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 26, 97].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.357853 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[10,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[10,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.358532 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[2,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[2,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.359107 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[3,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[3,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.359692 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[30,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[30,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.360214 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[4,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[4,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.360745 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[5,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[5,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.365202 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[6,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[6,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.366749 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[7,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[7,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.367298 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[8,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[8,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.367839 test begin: paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[9,8,26,26,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 26, 0],"bool"), list[9,8,26,26,], ) 
 The expanded size of the tensor (26) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 26, 26].  Tensor sizes: [1, 1, 26, 0]
2025-03-05 15:22:43.368368 test begin: paddle.broadcast_to(Tensor([1, 1, 260, 0],"bool"), list[8,8,260,260,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 260, 0],"bool"), list[8,8,260,260,], ) 
 The expanded size of the tensor (260) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 260, 260].  Tensor sizes: [1, 1, 260, 0]
2025-03-05 15:22:43.368896 test begin: paddle.broadcast_to(Tensor([1, 1, 261, 0],"bool"), list[8,8,261,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 261, 0],"bool"), list[8,8,261,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 261, 261].  Tensor sizes: [1, 1, 261, 0]
2025-03-05 15:22:43.369466 test begin: paddle.broadcast_to(Tensor([1, 1, 262, 0],"bool"), list[8,8,262,262,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 262, 0],"bool"), list[8,8,262,262,], ) 
 The expanded size of the tensor (262) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 262, 262].  Tensor sizes: [1, 1, 262, 0]
2025-03-05 15:22:43.370286 test begin: paddle.broadcast_to(Tensor([1, 1, 263, 0],"bool"), list[8,8,263,263,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 263, 0],"bool"), list[8,8,263,263,], ) 
 The expanded size of the tensor (263) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 263, 263].  Tensor sizes: [1, 1, 263, 0]
2025-03-05 15:22:43.370923 test begin: paddle.broadcast_to(Tensor([1, 1, 264, 0],"bool"), list[30,8,264,264,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 264, 0],"bool"), list[30,8,264,264,], ) 
 The expanded size of the tensor (264) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 264, 264].  Tensor sizes: [1, 1, 264, 0]
2025-03-05 15:22:43.371710 test begin: paddle.broadcast_to(Tensor([1, 1, 264, 0],"bool"), list[8,8,264,264,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 264, 0],"bool"), list[8,8,264,264,], ) 
 The expanded size of the tensor (264) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 264, 264].  Tensor sizes: [1, 1, 264, 0]
2025-03-05 15:22:43.372321 test begin: paddle.broadcast_to(Tensor([1, 1, 265, 0],"bool"), list[8,8,265,265,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 265, 0],"bool"), list[8,8,265,265,], ) 
 The expanded size of the tensor (265) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 265, 265].  Tensor sizes: [1, 1, 265, 0]
2025-03-05 15:22:43.372921 test begin: paddle.broadcast_to(Tensor([1, 1, 266, 0],"bool"), list[8,8,266,266,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 266, 0],"bool"), list[8,8,266,266,], ) 
 The expanded size of the tensor (266) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 266, 266].  Tensor sizes: [1, 1, 266, 0]
2025-03-05 15:22:43.373718 test begin: paddle.broadcast_to(Tensor([1, 1, 267, 0],"bool"), list[8,8,267,267,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 267, 0],"bool"), list[8,8,267,267,], ) 
 The expanded size of the tensor (267) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 267, 267].  Tensor sizes: [1, 1, 267, 0]
2025-03-05 15:22:43.374424 test begin: paddle.broadcast_to(Tensor([1, 1, 268, 0],"bool"), list[30,8,268,268,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 268, 0],"bool"), list[30,8,268,268,], ) 
 The expanded size of the tensor (268) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 268, 268].  Tensor sizes: [1, 1, 268, 0]
2025-03-05 15:22:43.375052 test begin: paddle.broadcast_to(Tensor([1, 1, 268, 0],"bool"), list[8,8,268,268,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 268, 0],"bool"), list[8,8,268,268,], ) 
 The expanded size of the tensor (268) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 268, 268].  Tensor sizes: [1, 1, 268, 0]
2025-03-05 15:22:43.375612 test begin: paddle.broadcast_to(Tensor([1, 1, 269, 0],"bool"), list[8,8,269,269,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 269, 0],"bool"), list[8,8,269,269,], ) 
 The expanded size of the tensor (269) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 269, 269].  Tensor sizes: [1, 1, 269, 0]
2025-03-05 15:22:43.376156 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 109].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.376689 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 113].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.377214 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 145].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.377740 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 157].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.378253 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 169].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.378787 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 217].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.379311 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 229].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.379832 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 241].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.380363 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 261].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.380883 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.381399 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 385].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.381995 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 61].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.382591 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 65].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.383423 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 69].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.384160 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 73].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.384997 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 85].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.385573 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[1,8,27,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 27, 97].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.386132 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[10,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[10,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.386667 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[2,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[2,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.387198 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[3,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[3,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.387737 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[4,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[4,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.388331 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[5,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[5,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.389035 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[6,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[6,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.389646 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[7,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[7,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.390341 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[8,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[8,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.390957 test begin: paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[9,8,27,27,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 27, 0],"bool"), list[9,8,27,27,], ) 
 The expanded size of the tensor (27) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 27, 27].  Tensor sizes: [1, 1, 27, 0]
2025-03-05 15:22:43.391568 test begin: paddle.broadcast_to(Tensor([1, 1, 270, 0],"bool"), list[30,8,270,270,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 270, 0],"bool"), list[30,8,270,270,], ) 
 The expanded size of the tensor (270) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 270, 270].  Tensor sizes: [1, 1, 270, 0]
2025-03-05 15:22:43.392258 test begin: paddle.broadcast_to(Tensor([1, 1, 270, 0],"bool"), list[8,8,270,270,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 270, 0],"bool"), list[8,8,270,270,], ) 
 The expanded size of the tensor (270) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 270, 270].  Tensor sizes: [1, 1, 270, 0]
2025-03-05 15:22:43.392915 test begin: paddle.broadcast_to(Tensor([1, 1, 271, 0],"bool"), list[8,8,271,271,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 271, 0],"bool"), list[8,8,271,271,], ) 
 The expanded size of the tensor (271) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 271, 271].  Tensor sizes: [1, 1, 271, 0]
2025-03-05 15:22:43.393511 test begin: paddle.broadcast_to(Tensor([1, 1, 272, 0],"bool"), list[8,8,272,272,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 272, 0],"bool"), list[8,8,272,272,], ) 
 The expanded size of the tensor (272) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 272, 272].  Tensor sizes: [1, 1, 272, 0]
2025-03-05 15:22:43.394132 test begin: paddle.broadcast_to(Tensor([1, 1, 273, 0],"bool"), list[8,8,273,273,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 273, 0],"bool"), list[8,8,273,273,], ) 
 The expanded size of the tensor (273) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 273, 273].  Tensor sizes: [1, 1, 273, 0]
2025-03-05 15:22:43.394763 test begin: paddle.broadcast_to(Tensor([1, 1, 274, 0],"bool"), list[30,8,274,274,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 274, 0],"bool"), list[30,8,274,274,], ) 
 The expanded size of the tensor (274) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 274, 274].  Tensor sizes: [1, 1, 274, 0]
2025-03-05 15:22:43.395433 test begin: paddle.broadcast_to(Tensor([1, 1, 274, 0],"bool"), list[8,8,274,274,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 274, 0],"bool"), list[8,8,274,274,], ) 
 The expanded size of the tensor (274) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 274, 274].  Tensor sizes: [1, 1, 274, 0]
2025-03-05 15:22:43.396094 test begin: paddle.broadcast_to(Tensor([1, 1, 275, 0],"bool"), list[8,8,275,275,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 275, 0],"bool"), list[8,8,275,275,], ) 
 The expanded size of the tensor (275) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 275, 275].  Tensor sizes: [1, 1, 275, 0]
2025-03-05 15:22:43.396710 test begin: paddle.broadcast_to(Tensor([1, 1, 276, 0],"bool"), list[30,8,276,276,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 276, 0],"bool"), list[30,8,276,276,], ) 
 The expanded size of the tensor (276) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 276, 276].  Tensor sizes: [1, 1, 276, 0]
2025-03-05 15:22:43.397379 test begin: paddle.broadcast_to(Tensor([1, 1, 276, 0],"bool"), list[8,8,276,276,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 276, 0],"bool"), list[8,8,276,276,], ) 
 The expanded size of the tensor (276) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 276, 276].  Tensor sizes: [1, 1, 276, 0]
2025-03-05 15:22:43.397977 test begin: paddle.broadcast_to(Tensor([1, 1, 277, 0],"bool"), list[30,8,277,277,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 277, 0],"bool"), list[30,8,277,277,], ) 
 The expanded size of the tensor (277) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 277, 277].  Tensor sizes: [1, 1, 277, 0]
2025-03-05 15:22:43.398603 test begin: paddle.broadcast_to(Tensor([1, 1, 277, 0],"bool"), list[8,8,277,277,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 277, 0],"bool"), list[8,8,277,277,], ) 
 The expanded size of the tensor (277) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 277, 277].  Tensor sizes: [1, 1, 277, 0]
2025-03-05 15:22:43.399202 test begin: paddle.broadcast_to(Tensor([1, 1, 278, 0],"bool"), list[8,8,278,278,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 278, 0],"bool"), list[8,8,278,278,], ) 
 The expanded size of the tensor (278) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 278, 278].  Tensor sizes: [1, 1, 278, 0]
2025-03-05 15:22:43.399803 test begin: paddle.broadcast_to(Tensor([1, 1, 279, 0],"bool"), list[8,8,279,279,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 279, 0],"bool"), list[8,8,279,279,], ) 
 The expanded size of the tensor (279) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 279, 279].  Tensor sizes: [1, 1, 279, 0]
2025-03-05 15:22:43.400453 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 109].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.401111 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 113].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.401720 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 145].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.402316 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 157].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.402917 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 169].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.403522 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 217].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.404122 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 229].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.404725 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 241].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.405311 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 261].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.405909 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.406500 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 385].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.407148 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 61].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.407753 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 65].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.408350 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 69].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.408947 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 73].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.409877 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 85].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.410552 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[1,8,28,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 28, 97].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.411210 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[10,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[10,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.411810 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[2,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[2,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.412393 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[3,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[3,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.412982 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[30,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[30,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.413578 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[4,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[4,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.414181 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[5,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[5,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.414782 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[6,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[6,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.415371 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[7,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[7,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.415975 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[8,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[8,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.416558 test begin: paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[9,8,28,28,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 28, 0],"bool"), list[9,8,28,28,], ) 
 The expanded size of the tensor (28) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 28, 28].  Tensor sizes: [1, 1, 28, 0]
2025-03-05 15:22:43.417154 test begin: paddle.broadcast_to(Tensor([1, 1, 280, 0],"bool"), list[8,8,280,280,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 280, 0],"bool"), list[8,8,280,280,], ) 
 The expanded size of the tensor (280) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 280, 280].  Tensor sizes: [1, 1, 280, 0]
2025-03-05 15:22:43.417745 test begin: paddle.broadcast_to(Tensor([1, 1, 281, 0],"bool"), list[8,8,281,281,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 281, 0],"bool"), list[8,8,281,281,], ) 
 The expanded size of the tensor (281) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 281, 281].  Tensor sizes: [1, 1, 281, 0]
2025-03-05 15:22:43.418335 test begin: paddle.broadcast_to(Tensor([1, 1, 282, 0],"bool"), list[8,8,282,282,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 282, 0],"bool"), list[8,8,282,282,], ) 
 The expanded size of the tensor (282) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 282, 282].  Tensor sizes: [1, 1, 282, 0]
2025-03-05 15:22:43.418925 test begin: paddle.broadcast_to(Tensor([1, 1, 283, 0],"bool"), list[8,8,283,283,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 283, 0],"bool"), list[8,8,283,283,], ) 
 The expanded size of the tensor (283) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 283, 283].  Tensor sizes: [1, 1, 283, 0]
2025-03-05 15:22:43.419506 test begin: paddle.broadcast_to(Tensor([1, 1, 284, 0],"bool"), list[8,8,284,284,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 284, 0],"bool"), list[8,8,284,284,], ) 
 The expanded size of the tensor (284) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 284, 284].  Tensor sizes: [1, 1, 284, 0]
2025-03-05 15:22:43.420108 test begin: paddle.broadcast_to(Tensor([1, 1, 285, 0],"bool"), list[8,8,285,285,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 285, 0],"bool"), list[8,8,285,285,], ) 
 The expanded size of the tensor (285) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 285, 285].  Tensor sizes: [1, 1, 285, 0]
2025-03-05 15:22:43.420701 test begin: paddle.broadcast_to(Tensor([1, 1, 286, 0],"bool"), list[8,8,286,286,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 286, 0],"bool"), list[8,8,286,286,], ) 
 The expanded size of the tensor (286) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 286, 286].  Tensor sizes: [1, 1, 286, 0]
2025-03-05 15:22:43.421340 test begin: paddle.broadcast_to(Tensor([1, 1, 287, 0],"bool"), list[8,8,287,287,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 287, 0],"bool"), list[8,8,287,287,], ) 
 The expanded size of the tensor (287) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 287, 287].  Tensor sizes: [1, 1, 287, 0]
2025-03-05 15:22:43.422073 test begin: paddle.broadcast_to(Tensor([1, 1, 288, 0],"bool"), list[8,8,288,288,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 288, 0],"bool"), list[8,8,288,288,], ) 
 The expanded size of the tensor (288) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 288, 288].  Tensor sizes: [1, 1, 288, 0]
2025-03-05 15:22:43.422774 test begin: paddle.broadcast_to(Tensor([1, 1, 289, 0],"bool"), list[8,8,289,289,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 289, 0],"bool"), list[8,8,289,289,], ) 
 The expanded size of the tensor (289) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 289, 289].  Tensor sizes: [1, 1, 289, 0]
2025-03-05 15:22:43.423381 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 109].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.424036 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 113].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.424705 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 145].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.425314 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 157].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.426025 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 169].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.426643 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 217].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.427244 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 229].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.427845 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 241].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.428438 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 261].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.429034 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.429640 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 385].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.430227 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 61].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.430894 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 65].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.431501 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 69].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.432134 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 73].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.432738 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 85].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.433365 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[1,8,29,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 29, 97].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.433983 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[10,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[10,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.434570 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[2,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[2,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.435169 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[3,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[3,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.435790 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[30,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[30,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.436443 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[4,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[4,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.437103 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[5,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[5,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.437718 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[6,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[6,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.438328 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[7,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[7,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.438930 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[8,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[8,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.439522 test begin: paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[9,8,29,29,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 29, 0],"bool"), list[9,8,29,29,], ) 
 The expanded size of the tensor (29) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 29, 29].  Tensor sizes: [1, 1, 29, 0]
2025-03-05 15:22:43.440124 test begin: paddle.broadcast_to(Tensor([1, 1, 290, 0],"bool"), list[8,8,290,290,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 290, 0],"bool"), list[8,8,290,290,], ) 
 The expanded size of the tensor (290) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 290, 290].  Tensor sizes: [1, 1, 290, 0]
2025-03-05 15:22:43.440774 test begin: paddle.broadcast_to(Tensor([1, 1, 291, 0],"bool"), list[8,8,291,291,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 291, 0],"bool"), list[8,8,291,291,], ) 
 The expanded size of the tensor (291) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 291, 291].  Tensor sizes: [1, 1, 291, 0]
2025-03-05 15:22:43.441375 test begin: paddle.broadcast_to(Tensor([1, 1, 292, 0],"bool"), list[8,8,292,292,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 292, 0],"bool"), list[8,8,292,292,], ) 
 The expanded size of the tensor (292) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 292, 292].  Tensor sizes: [1, 1, 292, 0]
2025-03-05 15:22:43.441995 test begin: paddle.broadcast_to(Tensor([1, 1, 293, 0],"bool"), list[30,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 293, 0],"bool"), list[30,8,293,293,], ) 
 The expanded size of the tensor (293) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 293, 293].  Tensor sizes: [1, 1, 293, 0]
2025-03-05 15:22:43.442592 test begin: paddle.broadcast_to(Tensor([1, 1, 293, 0],"bool"), list[8,8,293,293,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 293, 0],"bool"), list[8,8,293,293,], ) 
 The expanded size of the tensor (293) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 293, 293].  Tensor sizes: [1, 1, 293, 0]
2025-03-05 15:22:43.443227 test begin: paddle.broadcast_to(Tensor([1, 1, 298, 0],"bool"), list[30,8,298,298,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 298, 0],"bool"), list[30,8,298,298,], ) 
 The expanded size of the tensor (298) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 298, 298].  Tensor sizes: [1, 1, 298, 0]
2025-03-05 15:22:43.443852 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 109].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.444447 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 113].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.445056 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 145].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.445652 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 157].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.446244 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 169].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.446841 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 217].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.447427 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 229].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.448035 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 241].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.448630 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 261].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.449222 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.449829 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 385].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.450420 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 61].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.451022 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 65].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.451613 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 69].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.452200 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 73].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.452789 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 85].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.453376 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[1,8,3,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 3, 97].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.453955 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[10,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[10,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.454535 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[14,4,3,10,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[14,4,3,10,], ) 
 The expanded size of the tensor (10) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [14, 4, 3, 10].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.455186 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[2,4,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[2,4,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 4, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.455778 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[2,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[2,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.456353 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[3,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[3,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.456954 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[4,4,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[4,4,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 4, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.457623 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[4,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[4,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.458216 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[5,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[5,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.458840 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[6,4,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[6,4,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 4, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.459436 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[6,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[6,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.460043 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[7,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[7,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.460692 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[8,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[8,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.461283 test begin: paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[9,8,3,3,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 3, 0],"bool"), list[9,8,3,3,], ) 
 The expanded size of the tensor (3) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 3, 3].  Tensor sizes: [1, 1, 3, 0]
2025-03-05 15:22:43.461882 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 109].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.462467 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 113].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.463114 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 145].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.463814 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 157].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.464400 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 169].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.465018 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 217].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.465622 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 229].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.466271 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 241].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.466885 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 261].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.467483 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.468231 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 385].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.468845 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 61].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.469446 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 65].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.470054 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 69].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.470657 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 73].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.471248 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 85].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.471912 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[1,8,30,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 30, 97].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.472508 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[10,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[10,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.473106 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[2,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[2,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.473703 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[3,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[3,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.474294 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[30,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[30,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.474883 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[4,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[4,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.475479 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[5,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[5,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.476085 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[6,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[6,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.476708 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[7,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[7,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.477305 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[8,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[8,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.477906 test begin: paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[9,8,30,30,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 30, 0],"bool"), list[9,8,30,30,], ) 
 The expanded size of the tensor (30) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 30, 30].  Tensor sizes: [1, 1, 30, 0]
2025-03-05 15:22:43.478491 test begin: paddle.broadcast_to(Tensor([1, 1, 302, 0],"bool"), list[30,8,302,302,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 302, 0],"bool"), list[30,8,302,302,], ) 
 The expanded size of the tensor (302) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 302, 302].  Tensor sizes: [1, 1, 302, 0]
2025-03-05 15:22:43.479098 test begin: paddle.broadcast_to(Tensor([1, 1, 307, 0],"bool"), list[30,8,307,307,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 307, 0],"bool"), list[30,8,307,307,], ) 
 The expanded size of the tensor (307) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 307, 307].  Tensor sizes: [1, 1, 307, 0]
2025-03-05 15:22:43.479690 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 109].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.480278 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 113].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.480884 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 145].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.481464 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 157].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.482072 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 169].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.482674 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 217].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.483266 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 229].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.483969 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 241].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.484673 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 261].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.485283 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.485920 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 385].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.486513 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 61].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.487110 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 65].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.487703 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 69].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.488333 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 73].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.488929 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 85].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.489527 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[1,8,31,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 31, 97].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.490241 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[10,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[10,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.490851 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[2,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[2,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.491430 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[3,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[3,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.491987 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[30,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[30,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.492557 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[4,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[4,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.493125 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[5,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[5,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.493668 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[6,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[6,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.494193 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[7,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[7,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.494725 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[8,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[8,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.495241 test begin: paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[9,8,31,31,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 31, 0],"bool"), list[9,8,31,31,], ) 
 The expanded size of the tensor (31) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 31, 31].  Tensor sizes: [1, 1, 31, 0]
2025-03-05 15:22:43.495756 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 109].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.496273 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 113].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.496790 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 145].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.497314 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 157].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.498184 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 169].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.498837 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 217].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.499458 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 229].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.500686 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 241].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.501436 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 261].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.502029 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.502596 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 385].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.503205 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 61].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.503906 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 65].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.504515 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 69].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.505123 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 73].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.505749 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 85].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.506346 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[1,8,32,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 32, 97].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.506969 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[10,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[10,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.507569 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[2,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[2,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.508193 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[3,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[3,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.508803 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[30,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[30,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.509399 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[4,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[4,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.509998 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[5,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[5,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.510603 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[6,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[6,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.511190 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[7,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[7,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.511790 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[8,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[8,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.512390 test begin: paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[9,8,32,32,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 32, 0],"bool"), list[9,8,32,32,], ) 
 The expanded size of the tensor (32) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 32, 32].  Tensor sizes: [1, 1, 32, 0]
2025-03-05 15:22:43.513002 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 109].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.513608 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 113].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.514219 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 145].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.514819 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 157].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.515404 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 169].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.515992 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 217].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.516682 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 229].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.517289 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 241].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.517899 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 261].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.518491 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.519144 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 385].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.519752 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 61].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.520347 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 65].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.520966 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 69].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.521569 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 73].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.522176 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 85].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.522780 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[1,8,33,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 33, 97].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.523374 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[10,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[10,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.523973 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[2,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[2,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.524565 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[3,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[3,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.525161 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[30,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[30,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.525754 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[4,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[4,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.526333 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[5,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[5,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.526953 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[6,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[6,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.527551 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[7,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[7,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.528175 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[8,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[8,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.528776 test begin: paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[9,8,33,33,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 33, 0],"bool"), list[9,8,33,33,], ) 
 The expanded size of the tensor (33) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 33, 33].  Tensor sizes: [1, 1, 33, 0]
2025-03-05 15:22:43.529722 test begin: paddle.broadcast_to(Tensor([1, 1, 336, 0],"bool"), list[30,8,336,336,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 336, 0],"bool"), list[30,8,336,336,], ) 
 The expanded size of the tensor (336) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 336, 336].  Tensor sizes: [1, 1, 336, 0]
2025-03-05 15:22:43.530354 test begin: paddle.broadcast_to(Tensor([1, 1, 339, 0],"bool"), list[30,8,339,339,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 339, 0],"bool"), list[30,8,339,339,], ) 
 The expanded size of the tensor (339) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 339, 339].  Tensor sizes: [1, 1, 339, 0]
2025-03-05 15:22:43.530997 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 109].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.531610 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 113].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.532212 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 145].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.537505 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 157].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.538389 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 169].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.539172 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 217].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.539844 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 229].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.540450 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 241].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.541151 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 261].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.541908 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.542517 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 385].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.543299 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 61].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.544117 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 65].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.544789 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 69].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.545529 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 73].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.546384 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 85].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.547284 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[1,8,34,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 34, 97].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.547992 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[10,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[10,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.549217 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[2,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[2,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.550113 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[3,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[3,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.550805 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[30,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[30,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.551352 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[4,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[4,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.551897 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[5,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[5,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.552434 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[6,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[6,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.553043 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[7,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[7,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.553569 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[8,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[8,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.554104 test begin: paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[9,8,34,34,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 34, 0],"bool"), list[9,8,34,34,], ) 
 The expanded size of the tensor (34) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 34, 34].  Tensor sizes: [1, 1, 34, 0]
2025-03-05 15:22:43.554629 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 109].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.555144 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 113].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.555678 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 145].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.556287 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 157].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.556829 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 169].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.557357 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 217].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.557883 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 229].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.558400 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 241].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.558928 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 261].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.559443 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.559966 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 385].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.560481 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 61].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.561006 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 65].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.561518 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 69].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.562048 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 73].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.562572 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 85].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.563104 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[1,8,35,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 35, 97].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.563672 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[10,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[10,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.564220 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[2,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[2,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.564760 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[3,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[3,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.565276 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[30,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[30,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.565913 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[4,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[4,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.566833 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[5,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[5,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.567541 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[6,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[6,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.568188 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[7,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[7,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.568811 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[8,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[8,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.569422 test begin: paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[9,8,35,35,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 35, 0],"bool"), list[9,8,35,35,], ) 
 The expanded size of the tensor (35) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 35, 35].  Tensor sizes: [1, 1, 35, 0]
2025-03-05 15:22:43.570042 test begin: paddle.broadcast_to(Tensor([1, 1, 355, 0],"bool"), list[30,8,355,355,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 355, 0],"bool"), list[30,8,355,355,], ) 
 The expanded size of the tensor (355) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 355, 355].  Tensor sizes: [1, 1, 355, 0]
2025-03-05 15:22:43.570665 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 109].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.571439 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 113].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.572233 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 145].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.572826 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 157].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.573370 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 169].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.573939 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 217].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.574493 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 229].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.575059 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 241].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.577982 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 261].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.581345 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.581949 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 385].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.582513 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 61].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.584903 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 65].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.585544 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 69].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.586106 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 73].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.586663 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 85].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.587194 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[1,8,36,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 36, 97].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.587735 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[10,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[10,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.588314 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[2,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[2,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.588877 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[3,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[3,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.589419 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[30,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[30,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.589978 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[4,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[4,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.590503 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[5,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[5,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.591034 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[6,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[6,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.591561 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[7,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[7,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.592092 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[8,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[8,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.592645 test begin: paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[9,8,36,36,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 36, 0],"bool"), list[9,8,36,36,], ) 
 The expanded size of the tensor (36) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 36, 36].  Tensor sizes: [1, 1, 36, 0]
2025-03-05 15:22:43.593163 test begin: paddle.broadcast_to(Tensor([1, 1, 369, 0],"bool"), list[30,8,369,369,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 369, 0],"bool"), list[30,8,369,369,], ) 
 The expanded size of the tensor (369) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 369, 369].  Tensor sizes: [1, 1, 369, 0]
2025-03-05 15:22:43.593687 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 109].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.594190 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 113].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.594711 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 145].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.595224 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 157].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.595753 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 169].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.596249 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 217].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.596864 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 229].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.597408 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 241].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.597941 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 261].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.598467 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.598989 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 385].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.599496 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 61].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.600017 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 65].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.600526 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 69].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.601050 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 73].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.601554 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 85].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.602092 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[1,8,37,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 37, 97].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.602604 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[10,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[10,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.603120 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[2,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[2,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.603633 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[3,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[3,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.604138 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[4,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[4,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.604649 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[5,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[5,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.605154 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[6,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[6,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.605672 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[7,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[7,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.606186 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[8,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[8,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.606695 test begin: paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[9,8,37,37,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 37, 0],"bool"), list[9,8,37,37,], ) 
 The expanded size of the tensor (37) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 37, 37].  Tensor sizes: [1, 1, 37, 0]
2025-03-05 15:22:43.607199 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 109].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.607785 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 113].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.608287 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 145].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.608804 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 157].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.609319 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 169].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.609839 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 217].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.610350 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 229].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.610867 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 241].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.611375 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 261].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.611912 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.612425 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 385].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.612999 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 61].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.613645 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 65].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.614243 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 69].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.614819 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 73].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.615396 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 85].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.616000 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[1,8,38,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 38, 97].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.616574 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[10,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[10,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.617167 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[2,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[2,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.617748 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[3,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[3,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.618394 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[4,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[4,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.618979 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[5,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[5,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.619556 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[6,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[6,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.620142 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[7,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[7,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.620730 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[8,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[8,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.621320 test begin: paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[9,8,38,38,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 38, 0],"bool"), list[9,8,38,38,], ) 
 The expanded size of the tensor (38) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 38, 38].  Tensor sizes: [1, 1, 38, 0]
2025-03-05 15:22:43.621900 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 109].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.622481 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 113].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.623070 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 145].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.623656 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 157].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.624234 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 169].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.624809 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 217].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.625386 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 229].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.625965 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 241].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.626531 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 261].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.627107 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 385].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.627735 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.628447 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 61].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.629667 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 65].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.631057 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 69].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.633891 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 73].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.634867 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 85].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.636121 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[1,8,39,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 39, 97].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.636957 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[10,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[10,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.638746 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[2,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[2,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.639451 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[3,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[3,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.640123 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[30,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[30,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.640689 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[4,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[4,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.641220 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[5,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[5,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.641757 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[6,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[6,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.642270 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[7,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[7,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.642797 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[8,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[8,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.643306 test begin: paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[9,8,39,39,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 39, 0],"bool"), list[9,8,39,39,], ) 
 The expanded size of the tensor (39) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 39, 39].  Tensor sizes: [1, 1, 39, 0]
2025-03-05 15:22:43.643827 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 109].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.644345 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 113].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.644902 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 145].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.645415 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 157].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.645933 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 169].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.646439 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 217].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.646978 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 229].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.647483 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 241].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.647998 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 261].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.648510 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 385].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.649087 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.649820 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 61].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.650374 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 65].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.650894 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 69].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.651417 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 73].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.651945 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 85].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.652456 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[1,8,4,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 4, 97].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.652980 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[10,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[10,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.653494 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[2,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[2,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.654014 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[3,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[3,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.654521 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[4,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[4,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.655039 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[5,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[5,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.655547 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[6,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[6,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.656064 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[7,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[7,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.656571 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[8,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[8,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.657096 test begin: paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[9,8,4,4,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 4, 0],"bool"), list[9,8,4,4,], ) 
 The expanded size of the tensor (4) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 4, 4].  Tensor sizes: [1, 1, 4, 0]
2025-03-05 15:22:43.657608 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 109].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.658134 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 113].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.658650 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 145].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.659167 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 157].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.659679 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 169].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.660182 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 217].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.660704 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 229].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.661249 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 241].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.661769 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 261].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.662272 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 385].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.662798 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.663310 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 61].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.663819 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 65].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.664330 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 69].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.664846 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 73].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.667832 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 85].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.668730 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[1,8,40,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 40, 97].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.669335 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[10,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[10,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.669892 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[2,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[2,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.670412 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[3,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[3,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.670938 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[4,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[4,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.671450 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[5,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[5,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.671975 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[6,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[6,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.672487 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[7,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[7,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.673015 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[8,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[8,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.673523 test begin: paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[9,8,40,40,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 40, 0],"bool"), list[9,8,40,40,], ) 
 The expanded size of the tensor (40) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 40, 40].  Tensor sizes: [1, 1, 40, 0]
2025-03-05 15:22:43.674054 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 109].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.674567 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 113].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.675087 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 145].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.675610 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 157].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.676132 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 169].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.676651 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 217].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.677179 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 229].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.677695 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 241].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.678203 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 261].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.678724 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 385].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.679241 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.679771 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 61].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.680354 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 65].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.680906 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 69].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.681427 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 73].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.681946 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 85].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.682467 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[1,8,41,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 41, 97].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.682986 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[10,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[10,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.683492 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[2,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[2,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.684014 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[3,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[3,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.684631 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[4,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[4,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.685418 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[5,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[5,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.686008 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[6,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[6,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.686533 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[7,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[7,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.687059 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[8,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[8,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.687573 test begin: paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[9,8,41,41,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 41, 0],"bool"), list[9,8,41,41,], ) 
 The expanded size of the tensor (41) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 41, 41].  Tensor sizes: [1, 1, 41, 0]
2025-03-05 15:22:43.688105 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 109].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.688613 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 113].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.689129 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 145].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.689643 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 157].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.690157 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 169].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.690707 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 217].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.691223 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 229].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.691739 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 241].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.692258 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 261].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.692837 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 385].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.693362 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.693895 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 61].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.694430 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 65].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.694949 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 69].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.695473 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 73].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.695989 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 85].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.696490 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[1,8,42,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 42, 97].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.697000 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[10,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[10,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.697507 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[2,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[2,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.698028 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[3,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[3,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.698543 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[30,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[30,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.699106 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[4,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[4,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.699615 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[5,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[5,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.700126 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[6,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[6,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.700639 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[7,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[7,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.701200 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[8,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[8,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.701919 test begin: paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[9,8,42,42,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 42, 0],"bool"), list[9,8,42,42,], ) 
 The expanded size of the tensor (42) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 42, 42].  Tensor sizes: [1, 1, 42, 0]
2025-03-05 15:22:43.702451 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 109].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.702955 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 113].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.703453 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 145].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.704004 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 157].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.704521 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 169].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.705044 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 217].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.705555 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 229].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.706081 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 241].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.706597 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 261].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.707116 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 385].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.707633 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.708163 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 61].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.708677 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 65].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.709184 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 69].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.709701 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 73].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.710213 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 85].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.710762 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[1,8,43,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 43, 97].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.711281 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[10,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[10,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.711789 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[2,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[2,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.712891 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[3,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[3,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.713558 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[30,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[30,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.714633 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[4,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[4,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.715236 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[5,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[5,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.715805 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[6,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[6,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.716327 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[7,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[7,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.717019 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[8,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[8,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.717632 test begin: paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[9,8,43,43,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 43, 0],"bool"), list[9,8,43,43,], ) 
 The expanded size of the tensor (43) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 43, 43].  Tensor sizes: [1, 1, 43, 0]
2025-03-05 15:22:43.718156 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 109].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.718681 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 113].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.719257 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 145].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.720294 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 157].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.720886 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 169].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.721428 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 217].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.721968 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 229].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.722497 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 241].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.723021 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 261].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.723533 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 385].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.724082 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.724602 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 61].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.725232 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 65].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.725754 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 69].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.726264 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 73].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.726800 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 85].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.727308 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[1,8,44,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 44, 97].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.727824 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[10,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[10,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.728334 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[2,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[2,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.728853 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[3,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[3,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.729367 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[30,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[30,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.729882 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[4,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[4,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.730392 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[5,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[5,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.730915 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[6,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[6,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.731420 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[7,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[7,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.731935 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[8,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[8,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.732444 test begin: paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[9,8,44,44,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 44, 0],"bool"), list[9,8,44,44,], ) 
 The expanded size of the tensor (44) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 44, 44].  Tensor sizes: [1, 1, 44, 0]
2025-03-05 15:22:43.733068 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 109].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.733679 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 113].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.734269 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 145].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.734864 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 157].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.735448 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 169].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.736044 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 217].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.736563 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 229].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.737096 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 241].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.737616 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 261].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.738134 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 385].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.738738 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.739276 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 61].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.739830 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 65].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.740345 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 69].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.740892 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 73].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.741649 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 85].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.743645 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[1,8,45,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 45, 97].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.744206 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[10,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[10,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.744730 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[2,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[2,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.745256 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[3,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[3,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.745766 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[4,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[4,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.746276 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[5,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[5,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.746792 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[6,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[6,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.747305 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[7,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[7,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.747860 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[8,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[8,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.748361 test begin: paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[9,8,45,45,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 45, 0],"bool"), list[9,8,45,45,], ) 
 The expanded size of the tensor (45) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 45, 45].  Tensor sizes: [1, 1, 45, 0]
2025-03-05 15:22:43.748878 test begin: paddle.broadcast_to(Tensor([1, 1, 457, 0],"bool"), list[30,8,457,457,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 457, 0],"bool"), list[30,8,457,457,], ) 
 The expanded size of the tensor (457) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 457, 457].  Tensor sizes: [1, 1, 457, 0]
2025-03-05 15:22:43.749382 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 109].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.749896 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 113].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.750412 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 145].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.750958 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 157].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.751472 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 169].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.751988 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 217].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.752564 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 229].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.753090 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 241].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.753615 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 261].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.754135 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 385].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.754652 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.755160 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 61].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.755817 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 65].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.756400 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 69].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.756919 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 73].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.757486 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 85].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.758039 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[1,8,46,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 46, 97].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.758560 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[10,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[10,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.759091 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[2,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[2,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.759618 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[3,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[3,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.760129 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[30,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[30,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.760742 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[4,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[4,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.761334 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[5,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[5,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.761852 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[6,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[6,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.762484 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[7,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[7,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.763116 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[8,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[8,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.763658 test begin: paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[9,8,46,46,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 46, 0],"bool"), list[9,8,46,46,], ) 
 The expanded size of the tensor (46) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 46, 46].  Tensor sizes: [1, 1, 46, 0]
2025-03-05 15:22:43.764165 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 109].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.764683 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 113].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.765197 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 145].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.765818 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 157].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.766416 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 169].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.767016 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 217].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.767611 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 229].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.768213 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 241].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.768814 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 261].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.769406 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 385].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.770000 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.770693 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 61].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.771292 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 65].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.771833 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 69].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.772479 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 73].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.773161 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 85].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.773786 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[1,8,47,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 47, 97].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.774386 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[10,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[10,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.774982 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[2,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[2,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.775637 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[3,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[3,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.776234 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[30,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[30,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.776835 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[4,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[4,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.777434 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[5,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[5,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.778092 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[6,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[6,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.778731 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[7,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[7,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.779288 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[8,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[8,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.779858 test begin: paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[9,8,47,47,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 47, 0],"bool"), list[9,8,47,47,], ) 
 The expanded size of the tensor (47) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 47, 47].  Tensor sizes: [1, 1, 47, 0]
2025-03-05 15:22:43.780392 test begin: paddle.broadcast_to(Tensor([1, 1, 477, 0],"bool"), list[30,8,477,477,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 477, 0],"bool"), list[30,8,477,477,], ) 
 The expanded size of the tensor (477) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 477, 477].  Tensor sizes: [1, 1, 477, 0]
2025-03-05 15:22:43.780931 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 109].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.781464 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 113].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.781994 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 145].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.782522 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 157].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.783045 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 169].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.783559 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 217].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.789618 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 229].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.791838 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 241].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.792367 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 261].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.792894 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 385].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.793474 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.794001 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 61].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.794509 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 65].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.795021 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 69].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.795522 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 73].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.796036 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 85].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.796579 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[1,8,48,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 48, 97].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.797193 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[10,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[10,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.798087 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[2,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[2,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.798732 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[3,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[3,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.799343 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[30,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[30,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.799963 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[4,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[4,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.800562 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[5,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[5,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.801179 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[6,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[6,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.801806 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[7,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[7,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.802407 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[8,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[8,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.803005 test begin: paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[9,8,48,48,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 48, 0],"bool"), list[9,8,48,48,], ) 
 The expanded size of the tensor (48) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 48, 48].  Tensor sizes: [1, 1, 48, 0]
2025-03-05 15:22:43.804441 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 109].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.805077 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 113].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.805697 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 145].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.806328 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 157].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.806935 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 169].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.807523 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 217].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.808140 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 229].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.808738 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 241].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.809264 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 261].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.809824 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 385].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.810938 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.811572 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 61].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.812098 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 65].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.812618 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 69].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.813128 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 73].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.813639 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 85].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.814175 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[1,8,49,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 49, 97].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.814686 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[10,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[10,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.815239 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[2,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[2,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.815755 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[3,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[3,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.816278 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[30,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[30,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.816848 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[4,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[4,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.817516 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[5,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[5,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.818674 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[6,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[6,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.819420 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[7,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[7,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.820019 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[8,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[8,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.820593 test begin: paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[9,8,49,49,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 49, 0],"bool"), list[9,8,49,49,], ) 
 The expanded size of the tensor (49) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 49, 49].  Tensor sizes: [1, 1, 49, 0]
2025-03-05 15:22:43.821132 test begin: paddle.broadcast_to(Tensor([1, 1, 498, 0],"bool"), list[30,8,498,498,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 498, 0],"bool"), list[30,8,498,498,], ) 
 The expanded size of the tensor (498) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 498, 498].  Tensor sizes: [1, 1, 498, 0]
2025-03-05 15:22:43.821661 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 109].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.822180 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 113].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.822708 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 145].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.823278 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 157].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.823818 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 169].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.824338 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 217].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.824872 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 229].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.825391 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 241].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.825946 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 261].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.826470 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 385].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.827000 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.827509 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 61].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.828029 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 65].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.828543 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 69].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.829084 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 73].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.830048 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 85].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.830687 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[1,8,5,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 5, 97].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.831438 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[10,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[10,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.832129 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[2,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[2,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.832749 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[3,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[3,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.833372 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[4,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[4,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.833993 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[5,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[5,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.834659 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[6,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[6,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.835324 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[7,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[7,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.835956 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[8,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[8,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.836814 test begin: paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[9,8,5,5,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 5, 0],"bool"), list[9,8,5,5,], ) 
 The expanded size of the tensor (5) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 5, 5].  Tensor sizes: [1, 1, 5, 0]
2025-03-05 15:22:43.837510 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 109].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.838081 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 113].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.838657 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 145].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.839198 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 157].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.839731 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 169].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.840274 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 217].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.840800 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 229].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.841312 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 241].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.841832 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 261].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.842358 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 385].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.842958 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.843469 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 61].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.844005 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 65].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.844536 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 69].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.845065 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 73].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.845630 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 85].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.846168 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[1,8,50,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 50, 97].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.846709 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[10,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[10,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.847222 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[2,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[2,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.847744 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[3,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[3,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.848259 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[30,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[30,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.848782 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[4,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[4,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.849301 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[5,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[5,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.849821 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[6,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[6,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.850346 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[7,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[7,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.850869 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[8,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[8,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.851414 test begin: paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[9,8,50,50,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 50, 0],"bool"), list[9,8,50,50,], ) 
 The expanded size of the tensor (50) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 50, 50].  Tensor sizes: [1, 1, 50, 0]
2025-03-05 15:22:43.851937 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 109].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.852506 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 113].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.853114 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 145].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.853642 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 157].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.854162 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 169].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.854685 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 217].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.855200 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 229].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.855725 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 241].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.856240 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 261].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.856767 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 385].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.857378 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.857921 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 61].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.858445 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 65].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.858990 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 69].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.859510 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 73].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.860056 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 85].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.860577 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[1,8,51,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 51, 97].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.861115 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[10,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[10,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.861629 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[2,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[2,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.862147 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[3,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[3,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.862669 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[4,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[4,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.863186 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[5,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[5,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.863705 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[6,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[6,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.864211 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[7,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[7,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.864733 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[8,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[8,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.865238 test begin: paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[9,8,51,51,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 51, 0],"bool"), list[9,8,51,51,], ) 
 The expanded size of the tensor (51) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 51, 51].  Tensor sizes: [1, 1, 51, 0]
2025-03-05 15:22:43.865752 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 109].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.866282 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 113].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.866798 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 145].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.867307 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 157].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.867823 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 169].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.868345 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 217].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.868872 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 229].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.869411 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 241].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.869934 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 261].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.870459 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 385].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.870985 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.871503 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 61].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.872031 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 65].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.872602 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 69].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.873124 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 73].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.873639 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 85].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.874153 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[1,8,52,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 52, 97].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.874666 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[10,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[10,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.875171 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[2,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[2,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.875685 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[3,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[3,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.876194 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[30,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[30,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.876724 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[4,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[4,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.877232 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[5,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[5,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.877758 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[6,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[6,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.878275 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[7,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[7,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.878788 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[8,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[8,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.879329 test begin: paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[9,8,52,52,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 52, 0],"bool"), list[9,8,52,52,], ) 
 The expanded size of the tensor (52) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 52, 52].  Tensor sizes: [1, 1, 52, 0]
2025-03-05 15:22:43.879953 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 109].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.880484 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 113].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.881015 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 145].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.881526 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 157].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.882057 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 169].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.882599 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 217].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.883152 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 229].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.883672 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 241].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.884174 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 261].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.884694 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 385].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.885204 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.885740 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 61].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.886268 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 65].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.886788 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 69].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.887304 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 73].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.887819 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 85].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.888342 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[1,8,53,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 53, 97].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.888863 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[10,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[10,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.889371 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[2,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[2,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.889889 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[3,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[3,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.890411 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[30,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[30,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.890928 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[4,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[4,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.891438 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[5,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[5,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.891957 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[6,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[6,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.892477 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[7,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[7,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.893014 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[8,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[8,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.893535 test begin: paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[9,8,53,53,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 53, 0],"bool"), list[9,8,53,53,], ) 
 The expanded size of the tensor (53) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 53, 53].  Tensor sizes: [1, 1, 53, 0]
2025-03-05 15:22:43.894117 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 109].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.894668 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 113].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.895193 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 145].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.895721 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 157].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.896228 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 169].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.896747 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 217].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.897268 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 229].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.897793 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 241].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.898306 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 261].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.898849 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 385].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.899366 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.899883 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 61].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.900398 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 65].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.900931 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 69].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.901441 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 73].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.901977 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 85].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.902503 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[1,8,54,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 54, 97].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.903061 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[10,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[10,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.903617 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[2,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[2,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.904156 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[3,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[3,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.904677 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[30,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[30,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.905197 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[4,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[4,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.905713 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[5,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[5,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.906219 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[6,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[6,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.906747 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[7,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[7,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.907262 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[8,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[8,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.907930 test begin: paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[9,8,54,54,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 54, 0],"bool"), list[9,8,54,54,], ) 
 The expanded size of the tensor (54) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 54, 54].  Tensor sizes: [1, 1, 54, 0]
2025-03-05 15:22:43.908452 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 109].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.908980 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 113].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.909480 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 145].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.910011 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 157].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.910514 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 169].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.911034 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 217].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.911543 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 229].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.912063 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 241].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.912571 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 261].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.913106 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 385].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.913617 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.914131 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 61].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.914641 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 65].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.920307 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 69].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.922282 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 73].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.922991 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 85].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.923639 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[1,8,55,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 55, 97].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.924183 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[10,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[10,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.924715 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[2,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[2,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.925299 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[3,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[3,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.926070 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[30,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[30,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.926677 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[4,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[4,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.927212 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[5,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[5,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.927740 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[6,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[6,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.928275 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[7,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[7,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.928808 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[8,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[8,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.929332 test begin: paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[9,8,55,55,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 55, 0],"bool"), list[9,8,55,55,], ) 
 The expanded size of the tensor (55) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 55, 55].  Tensor sizes: [1, 1, 55, 0]
2025-03-05 15:22:43.929892 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 109].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.930430 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 113].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.930958 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 145].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.931487 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 157].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.932021 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 169].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.932610 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 217].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.933151 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 229].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.933706 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 241].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.934228 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 261].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.934772 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 385].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.935286 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.935794 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 61].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.936305 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 65].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.936860 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 69].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.937386 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 73].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.937905 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 85].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.938431 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[1,8,56,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 56, 97].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.938945 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[10,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[10,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.939845 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[2,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[2,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.940496 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[3,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[3,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.941112 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[30,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[30,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.941721 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[4,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[4,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.942403 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[5,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[5,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.943086 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[6,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[6,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.943885 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[7,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[7,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.944509 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[8,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[8,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.945109 test begin: paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[9,8,56,56,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 56, 0],"bool"), list[9,8,56,56,], ) 
 The expanded size of the tensor (56) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 56, 56].  Tensor sizes: [1, 1, 56, 0]
2025-03-05 15:22:43.945717 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 109].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.946250 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 113].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.946775 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 145].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.947292 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 157].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.947814 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 169].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.948334 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 217].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.948857 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 229].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.949361 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 241].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.949871 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 261].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.950388 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 385].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.950906 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.951440 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 61].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.951983 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 65].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.952505 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 69].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.953037 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 73].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.953554 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 85].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.954080 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[1,8,57,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 57, 97].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.954611 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[10,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[10,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.955135 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[2,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[2,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.955653 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[3,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[3,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.956192 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[30,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[30,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.962903 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[4,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[4,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.963463 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[5,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[5,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.964033 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[6,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[6,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.964544 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[7,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[7,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.965075 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[8,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[8,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.965611 test begin: paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[9,8,57,57,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 57, 0],"bool"), list[9,8,57,57,], ) 
 The expanded size of the tensor (57) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 57, 57].  Tensor sizes: [1, 1, 57, 0]
2025-03-05 15:22:43.966186 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 109].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.966932 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 113].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.967545 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 145].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.968140 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 157].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.968676 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 169].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.969199 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 217].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.969735 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 229].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.970255 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 241].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.970788 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 261].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.971301 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 385].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.971828 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.972384 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 61].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.972954 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 65].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.973480 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 69].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.974068 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 73].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.974645 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 85].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.975225 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[1,8,58,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 58, 97].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.975787 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[10,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[10,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.976315 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[2,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[2,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.976846 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[3,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[3,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.977377 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[4,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[4,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.977945 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[5,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[5,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.978499 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[6,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[6,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.979037 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[7,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[7,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.979552 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[8,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[8,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.980076 test begin: paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[9,8,58,58,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 58, 0],"bool"), list[9,8,58,58,], ) 
 The expanded size of the tensor (58) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 58, 58].  Tensor sizes: [1, 1, 58, 0]
2025-03-05 15:22:43.980599 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 109].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.981111 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 113].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.981634 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 145].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.982148 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 157].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.982668 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 169].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.983295 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 217].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.984012 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 229].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.984608 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 241].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.985144 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 261].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.985727 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 385].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.986292 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.986848 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 61].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.987362 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 65].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.987878 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 69].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.988399 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 73].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.988917 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 85].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.989438 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[1,8,59,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 59, 97].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.989959 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[10,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[10,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.990472 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[2,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[2,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.990993 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[3,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[3,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.991500 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[30,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[30,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.992033 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[4,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[4,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.992578 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[5,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[5,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.993113 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[6,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[6,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.993637 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[7,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[7,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.994152 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[8,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[8,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.994680 test begin: paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[9,8,59,59,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 59, 0],"bool"), list[9,8,59,59,], ) 
 The expanded size of the tensor (59) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 59, 59].  Tensor sizes: [1, 1, 59, 0]
2025-03-05 15:22:43.995196 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 109].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.995724 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 113].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.996229 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 145].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.996745 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 157].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.997255 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 169].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.997767 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 217].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.998292 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 229].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.998819 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 241].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.999319 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 261].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:43.999901 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 385].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.000720 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.001337 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 61].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.001968 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 65].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.002569 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 69].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.003170 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 73].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.003770 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 85].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.004402 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[1,8,6,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 6, 97].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.005050 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[10,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[10,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.005814 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[2,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[2,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.006512 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[3,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[3,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.007237 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[4,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[4,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.007939 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[5,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[5,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.009256 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[6,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[6,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.010052 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[7,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[7,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.010776 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[8,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[8,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.011468 test begin: paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[9,8,6,6,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 6, 0],"bool"), list[9,8,6,6,], ) 
 The expanded size of the tensor (6) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 6, 6].  Tensor sizes: [1, 1, 6, 0]
2025-03-05 15:22:44.014487 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 113].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.015357 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 145].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.016087 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 157].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.016787 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 169].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.017504 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 217].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.018185 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 229].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.018878 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 241].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.019600 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 261].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.020244 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 385].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.021054 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.025707 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 61].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.026473 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 65].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.027064 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 69].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.027640 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 73].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.028220 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 85].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.028851 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[1,8,60,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 60, 97].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.029407 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[10,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[10,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.030010 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[2,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[2,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.030613 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[3,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[3,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.031158 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[4,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[4,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.032149 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[5,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[5,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.032824 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[6,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[6,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.033405 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[7,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[7,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.033958 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[8,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[8,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.034523 test begin: paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[9,8,60,60,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 60, 0],"bool"), list[9,8,60,60,], ) 
 The expanded size of the tensor (60) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 60, 60].  Tensor sizes: [1, 1, 60, 0]
2025-03-05 15:22:44.035099 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 113].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.035649 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 145].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.036199 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 157].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.036737 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 169].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.037270 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 217].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.037815 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 229].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.038412 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 241].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.038963 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 261].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.039523 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 385].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.040065 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.040649 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 65].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.041180 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 69].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.041733 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 73].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.042263 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 85].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.042793 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[1,8,61,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 61, 97].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.043324 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[10,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[10,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.043904 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[2,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[2,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.044431 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[3,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[3,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.045002 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[30,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[30,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.045559 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[4,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[4,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.046175 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[5,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[5,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.047049 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[6,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[6,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.047655 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[7,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[7,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.048196 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[8,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[8,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.048734 test begin: paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[9,8,61,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 61, 0],"bool"), list[9,8,61,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 61, 61].  Tensor sizes: [1, 1, 61, 0]
2025-03-05 15:22:44.049251 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 113].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.049777 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 145].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.050318 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 157].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.050855 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 169].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.051834 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 217].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.052530 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 229].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.053188 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 241].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.053819 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 261].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.054459 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 385].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.055060 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 61].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.055596 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.056141 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 65].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.056683 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 69].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.057219 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 73].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.057765 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 85].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.058304 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[1,8,62,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 62, 97].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.058854 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[10,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[10,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.059452 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[2,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[2,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.059998 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[3,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[3,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.060511 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[30,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[30,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.061050 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[4,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[4,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.061563 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[5,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[5,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.062141 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[6,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[6,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.062684 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[7,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[7,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.063197 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[8,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[8,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.063710 test begin: paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[9,8,62,62,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 62, 0],"bool"), list[9,8,62,62,], ) 
 The expanded size of the tensor (62) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 62, 62].  Tensor sizes: [1, 1, 62, 0]
2025-03-05 15:22:44.064305 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 113].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.065336 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 145].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.066019 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 157].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.066643 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 169].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.067259 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 217].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.067867 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 229].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.068455 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 241].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.069049 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 261].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.069645 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 385].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.070321 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 61].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.070988 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.071566 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 65].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.074598 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 69].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.075746 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 73].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.076321 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 85].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.076958 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[1,8,63,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 63, 97].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.077750 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[10,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[10,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.078347 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[2,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[2,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.078910 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[3,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[3,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.079481 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[30,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[30,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.080021 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[4,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[4,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.080542 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[5,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[5,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.081080 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[6,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[6,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.081608 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[7,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[7,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.082150 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[8,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[8,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.082715 test begin: paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[9,8,63,63,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 63, 0],"bool"), list[9,8,63,63,], ) 
 The expanded size of the tensor (63) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 63, 63].  Tensor sizes: [1, 1, 63, 0]
2025-03-05 15:22:44.083242 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 113].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.083784 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 145].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.084299 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 157].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.084823 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 169].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.085335 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 217].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.085873 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 229].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.086390 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 241].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.086911 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 261].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.087429 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 385].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.087949 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 61].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.088532 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.089106 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 65].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.089689 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 69].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.090320 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 73].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.090857 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 85].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.091402 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[1,8,64,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 64, 97].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.092000 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[10,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[10,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.092567 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[2,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[2,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.097991 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[3,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[3,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.099262 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[30,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[30,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.099878 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[4,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[4,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.100484 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[5,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[5,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.101072 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[6,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[6,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.102122 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[7,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[7,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.102801 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[8,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[8,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.103440 test begin: paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[9,8,64,64,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 64, 0],"bool"), list[9,8,64,64,], ) 
 The expanded size of the tensor (64) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 64, 64].  Tensor sizes: [1, 1, 64, 0]
2025-03-05 15:22:44.105888 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 113].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.106425 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 145].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.106970 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 157].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.107507 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 169].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.108097 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 217].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.108624 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 229].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.109150 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 241].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.109696 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 261].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.110217 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 385].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.110836 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 61].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.111380 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.111994 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 69].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.112516 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 73].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.113039 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 85].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.113548 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[1,8,65,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 65, 97].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.114076 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[10,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[10,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.114626 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[2,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[2,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.115162 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[3,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[3,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.115682 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[4,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[4,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.116234 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[5,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[5,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.116758 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[6,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[6,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.117275 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[7,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[7,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.117795 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[8,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[8,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.118313 test begin: paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[9,8,65,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 65, 0],"bool"), list[9,8,65,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 65, 65].  Tensor sizes: [1, 1, 65, 0]
2025-03-05 15:22:44.118838 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 113].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.119358 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 145].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.119896 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 157].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.120410 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 169].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.120970 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 217].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.121499 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 229].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.122033 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 241].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.122547 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 261].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.123075 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 385].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.123604 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 61].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.124131 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 65].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.124745 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.125306 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 69].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.125831 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 73].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.126342 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 85].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.126908 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[1,8,66,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 66, 97].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.127436 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[10,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[10,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.127996 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[2,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[2,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.128527 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[3,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[3,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.129064 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[30,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[30,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.129596 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[4,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[4,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.130107 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[5,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[5,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.130628 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[6,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[6,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.131149 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[7,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[7,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.131761 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[8,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[8,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.132291 test begin: paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[9,8,66,66,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 66, 0],"bool"), list[9,8,66,66,], ) 
 The expanded size of the tensor (66) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 66, 66].  Tensor sizes: [1, 1, 66, 0]
2025-03-05 15:22:44.132842 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 113].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.133354 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 145].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.133879 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 157].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.134402 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 169].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.134908 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 217].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.135420 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 229].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.135937 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 241].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.136455 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 261].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.136974 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 385].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.137481 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 61].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.137997 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 65].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.138504 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.139082 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 69].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.139603 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 73].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.140160 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 85].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.140722 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[1,8,67,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 67, 97].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.141244 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[10,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[10,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.141763 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[2,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[2,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.142270 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[3,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[3,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.142789 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[30,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[30,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.143292 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[4,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[4,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.143808 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[5,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[5,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.144463 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[6,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[6,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.145690 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[7,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[7,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.146354 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[8,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[8,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.147067 test begin: paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[9,8,67,67,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 67, 0],"bool"), list[9,8,67,67,], ) 
 The expanded size of the tensor (67) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 67, 67].  Tensor sizes: [1, 1, 67, 0]
2025-03-05 15:22:44.147735 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 113].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.148350 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 145].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.149439 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 157].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.150156 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 169].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.150803 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 217].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.151374 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 229].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.151936 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 241].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.152460 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 261].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.152984 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 385].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.153493 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 61].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.154103 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 65].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.154656 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.155184 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 69].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.155721 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 73].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.156243 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 85].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.156765 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[1,8,68,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 68, 97].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.157288 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[10,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[10,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.157844 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[2,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[2,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.158357 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[3,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[3,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.158883 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[30,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[30,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.159456 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[4,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[4,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.160007 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[5,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[5,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.160510 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[6,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[6,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.161049 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[7,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[7,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.161553 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[8,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[8,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.162091 test begin: paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[9,8,68,68,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 68, 0],"bool"), list[9,8,68,68,], ) 
 The expanded size of the tensor (68) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 68, 68].  Tensor sizes: [1, 1, 68, 0]
2025-03-05 15:22:44.162609 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 113].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.163193 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 145].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.164058 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 157].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.164697 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 169].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.165324 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 217].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.166131 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 229].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.166749 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 241].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.167327 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 261].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.167894 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 385].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.168474 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 61].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.169055 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 65].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.169579 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.170163 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 73].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.170705 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 85].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.171229 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[1,8,69,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 69, 97].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.171761 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[10,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[10,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.172283 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[2,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[2,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.172805 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[3,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[3,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.173315 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[30,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[30,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.173838 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[4,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[4,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.174360 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[5,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[5,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.174873 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[6,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[6,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.175391 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[7,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[7,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.175909 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[8,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[8,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.176422 test begin: paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[9,8,69,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 69, 0],"bool"), list[9,8,69,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 69, 69].  Tensor sizes: [1, 1, 69, 0]
2025-03-05 15:22:44.176982 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 109].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.177865 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 113].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.178502 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 145].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.179111 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 157].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.179727 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 169].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.180321 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 217].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.180843 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 229].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.181412 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 241].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.182153 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 261].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.182746 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 385].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.183268 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 61].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.183797 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 65].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.184322 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 69].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.184839 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.185349 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 73].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.185872 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 85].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.186393 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[1,8,7,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 7, 97].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.186915 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[10,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[10,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.187445 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[14,4,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[14,4,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [14, 4, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.187970 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[2,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[2,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.188483 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[3,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[3,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.189000 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[4,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[4,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.189510 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[5,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[5,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.190041 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[6,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[6,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.190552 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[7,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[7,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.191122 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[8,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[8,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.191674 test begin: paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[9,8,7,7,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 7, 0],"bool"), list[9,8,7,7,], ) 
 The expanded size of the tensor (7) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 7, 7].  Tensor sizes: [1, 1, 7, 0]
2025-03-05 15:22:44.192182 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 113].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.192702 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 145].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.193214 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 157].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.193735 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 169].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.194240 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 217].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.194768 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 229].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.195321 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 241].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.195865 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 261].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.196371 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 385].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.196895 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 61].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.197406 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 65].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.197957 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 69].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.198967 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.199632 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 73].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.200242 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 85].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.200785 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[1,8,70,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 70, 97].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.201316 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[10,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[10,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.201850 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[2,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[2,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.202370 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[3,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[3,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.202891 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[30,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[30,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.203415 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[4,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[4,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.203984 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[5,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[5,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.204510 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[6,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[6,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.205036 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[7,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[7,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.205543 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[8,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[8,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.206060 test begin: paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[9,8,70,70,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 70, 0],"bool"), list[9,8,70,70,], ) 
 The expanded size of the tensor (70) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 70, 70].  Tensor sizes: [1, 1, 70, 0]
2025-03-05 15:22:44.206588 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 113].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.207107 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 145].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.207673 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 157].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.208195 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 169].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.208717 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 217].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.209233 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 229].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.209775 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 241].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.210288 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 261].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.210812 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 385].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.211342 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 61].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.211875 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 65].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.212427 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 69].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.212948 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.213465 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 73].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.213987 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 85].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.214496 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[1,8,71,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 71, 97].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.215055 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[10,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[10,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.215852 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[2,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[2,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.216442 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[3,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[3,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.216983 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[30,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[30,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.217506 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[4,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[4,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.218031 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[5,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[5,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.218553 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[6,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[6,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.219093 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[7,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[7,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.219623 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[8,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[8,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.220380 test begin: paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[9,8,71,71,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 71, 0],"bool"), list[9,8,71,71,], ) 
 The expanded size of the tensor (71) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 71, 71].  Tensor sizes: [1, 1, 71, 0]
2025-03-05 15:22:44.221017 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 113].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.221537 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 145].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.222078 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 157].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.222600 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 169].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.223119 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 217].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.223649 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 229].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.224156 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 241].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.224672 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 261].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.225282 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 385].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.225911 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 61].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.226449 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 65].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.227053 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 69].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.227702 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.228336 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 73].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.228956 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 85].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.229601 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[1,8,72,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 72, 97].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.230217 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[10,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[10,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.230837 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[2,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[2,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.231466 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[3,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[3,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.232638 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[30,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[30,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.233428 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[4,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[4,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.234119 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[5,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[5,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.234890 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[6,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[6,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.235487 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[7,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[7,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.236029 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[8,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[8,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.236551 test begin: paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[9,8,72,72,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 72, 0],"bool"), list[9,8,72,72,], ) 
 The expanded size of the tensor (72) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 72, 72].  Tensor sizes: [1, 1, 72, 0]
2025-03-05 15:22:44.237086 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 113].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.237626 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 145].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.238151 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 157].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.238667 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 169].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.239180 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 217].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.239707 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 229].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.240219 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 241].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.240732 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 261].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.241239 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 385].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.241757 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 61].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.242262 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 65].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.242777 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 69].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.243285 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.243798 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 85].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.244308 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[1,8,73,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 73, 97].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.244824 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[10,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[10,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.245360 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[2,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[2,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.246033 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[3,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[3,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.246647 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[30,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[30,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.247298 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[4,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[4,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.247946 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[5,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[5,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.248863 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[6,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[6,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.249570 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[7,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[7,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.250230 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[8,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[8,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.250898 test begin: paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[9,8,73,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 73, 0],"bool"), list[9,8,73,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 73, 73].  Tensor sizes: [1, 1, 73, 0]
2025-03-05 15:22:44.251444 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 113].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.252023 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 145].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.252603 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 157].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.253348 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 169].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.253942 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 217].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.254933 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 229].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.255490 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 241].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.256034 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 261].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.256569 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 385].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.257105 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 61].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.257618 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 65].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.258673 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 69].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.259460 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 73].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.260072 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.260631 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 85].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.261189 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[1,8,74,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 74, 97].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.261726 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[10,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[10,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.262239 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[2,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[2,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.262771 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[3,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[3,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.263293 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[30,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[30,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.263834 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[4,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[4,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.264426 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[5,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[5,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.264972 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[6,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[6,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.265492 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[7,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[7,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.266015 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[8,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[8,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.266530 test begin: paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[9,8,74,74,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 74, 0],"bool"), list[9,8,74,74,], ) 
 The expanded size of the tensor (74) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 74, 74].  Tensor sizes: [1, 1, 74, 0]
2025-03-05 15:22:44.267055 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 113].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.267569 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 145].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.268122 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 157].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.268703 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 169].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.269298 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 217].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.269846 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 229].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.270439 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 241].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.271157 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 261].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.271802 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 385].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.272373 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 61].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.272910 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 65].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.273455 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 69].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.273977 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 73].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.274501 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.275156 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 85].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.275736 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[1,8,75,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 75, 97].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.276288 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[10,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[10,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.276811 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[2,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[2,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.277328 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[3,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[3,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.277847 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[30,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[30,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.278353 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[4,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[4,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.278872 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[5,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[5,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.279384 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[6,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[6,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.279918 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[7,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[7,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.280477 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[8,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[8,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.281003 test begin: paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[9,8,75,75,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 75, 0],"bool"), list[9,8,75,75,], ) 
 The expanded size of the tensor (75) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 75, 75].  Tensor sizes: [1, 1, 75, 0]
2025-03-05 15:22:44.281519 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 113].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.282098 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 145].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.282660 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 157].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.283222 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 169].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.283778 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 217].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.284338 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 229].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.284894 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 241].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.285449 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 261].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.286016 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 385].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.286564 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 61].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.287129 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 65].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.287762 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 69].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.291184 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 73].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.291912 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.292534 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 85].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.293179 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[1,8,76,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 76, 97].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.293827 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[10,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[10,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.294433 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[2,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[2,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.295025 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[3,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[3,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.295617 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[30,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[30,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.296218 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[4,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[4,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.296800 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[5,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[5,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.297385 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[6,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[6,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.297976 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[7,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[7,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.298549 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[8,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[8,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.299130 test begin: paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[9,8,76,76,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 76, 0],"bool"), list[9,8,76,76,], ) 
 The expanded size of the tensor (76) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 76, 76].  Tensor sizes: [1, 1, 76, 0]
2025-03-05 15:22:44.299819 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 113].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.304115 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 145].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.305391 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 157].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.306016 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 169].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.306618 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 217].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.307332 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 229].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.307944 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 241].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.308474 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 261].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.311345 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 385].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.312465 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 61].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.313023 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 65].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.313592 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 69].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.314402 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 73].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.315142 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.315770 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 85].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.316311 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[1,8,77,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 77, 97].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.316931 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[10,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[10,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.317781 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[2,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[2,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.318413 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[3,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[3,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.319134 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[30,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[30,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.319802 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[4,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[4,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.320485 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[5,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[5,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.321182 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[6,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[6,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.321770 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[7,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[7,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.322308 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[8,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[8,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.322856 test begin: paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[9,8,77,77,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 77, 0],"bool"), list[9,8,77,77,], ) 
 The expanded size of the tensor (77) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 77, 77].  Tensor sizes: [1, 1, 77, 0]
2025-03-05 15:22:44.323412 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 113].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.323949 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 145].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.324490 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 157].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.325026 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 169].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.325540 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 217].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.326091 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 229].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.326626 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 241].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.327141 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 261].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.327737 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 385].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.328272 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 61].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.328808 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 65].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.329330 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 69].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.329863 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 73].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.330394 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.330955 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 85].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.331527 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[1,8,78,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 78, 97].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.332327 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[10,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[10,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.338450 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[2,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[2,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.339772 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[3,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[3,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.340601 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[30,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[30,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.341315 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[4,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[4,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.343201 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[5,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[5,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.343936 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[6,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[6,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.344554 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[7,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[7,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.345836 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[8,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[8,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.346471 test begin: paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[9,8,78,78,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 78, 0],"bool"), list[9,8,78,78,], ) 
 The expanded size of the tensor (78) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 78, 78].  Tensor sizes: [1, 1, 78, 0]
2025-03-05 15:22:44.347091 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 113].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.347715 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 145].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.348389 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 157].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.349006 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 169].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.349620 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 217].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.350243 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 229].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.350851 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 241].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.351531 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 261].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.352204 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 385].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.352860 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 61].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.354060 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 65].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.354887 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 69].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.355648 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 73].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.356223 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.356875 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 85].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.357458 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[1,8,79,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 79, 97].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.358037 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[10,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[10,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.358563 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[2,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[2,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.359111 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[3,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[3,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.359638 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[30,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[30,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.360159 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[4,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[4,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.360698 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[5,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[5,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.361242 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[6,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[6,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.361841 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[7,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[7,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.362385 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[8,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[8,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.362918 test begin: paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[9,8,79,79,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 79, 0],"bool"), list[9,8,79,79,], ) 
 The expanded size of the tensor (79) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 79, 79].  Tensor sizes: [1, 1, 79, 0]
2025-03-05 15:22:44.363511 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,109,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,109,], ) 
 The expanded size of the tensor (109) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 109].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.364493 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 113].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.365187 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 145].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.365812 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 157].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.366411 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 169].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.367023 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 217].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.367626 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 229].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.368222 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 241].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.368850 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 261].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.369438 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 385].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.370037 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 61].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.370639 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 65].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.371268 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 69].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.371870 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 73].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.372509 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.373108 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 85].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.373703 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[1,8,8,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 8, 97].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.374289 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[10,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[10,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.374879 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[14,4,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[14,4,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [14, 4, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.375518 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[2,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[2,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.376128 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[3,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[3,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.376753 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[4,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[4,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.377343 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[5,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[5,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.377938 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[6,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[6,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.378551 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[7,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[7,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.379150 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[8,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[8,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.379742 test begin: paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[9,8,8,8,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 8, 0],"bool"), list[9,8,8,8,], ) 
 The expanded size of the tensor (8) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 8, 8].  Tensor sizes: [1, 1, 8, 0]
2025-03-05 15:22:44.380338 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 113].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.380935 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 145].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.381518 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 157].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.382158 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 169].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.382771 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 217].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.383369 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 229].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.383984 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 241].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.384595 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 261].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.385181 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 385].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.385783 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 61].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.386370 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 65].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.386967 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 69].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.387552 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 73].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.388177 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.388853 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 85].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.389457 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[1,8,80,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 80, 97].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.390110 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[10,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[10,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.390714 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[2,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[2,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.391293 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[3,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[3,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.391883 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[30,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[30,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.392485 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[4,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[4,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.393094 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[5,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[5,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.393695 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[6,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[6,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.394283 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[7,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[7,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.394912 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[8,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[8,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.395506 test begin: paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[9,8,80,80,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 80, 0],"bool"), list[9,8,80,80,], ) 
 The expanded size of the tensor (80) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 80, 80].  Tensor sizes: [1, 1, 80, 0]
2025-03-05 15:22:44.396121 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 113].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.396738 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 145].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.397431 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 157].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.398103 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 169].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.398691 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 217].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.399249 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 229].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.399788 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 241].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.400315 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 261].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.400900 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 385].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.401458 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 61].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.401996 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 65].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.402514 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 69].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.403055 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 73].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.403572 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.404110 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 85].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.404632 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[1,8,81,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 81, 97].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.405157 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[10,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[10,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.405737 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[2,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[2,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.406288 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[3,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[3,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.406874 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[30,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[30,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.407412 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[4,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[4,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.407940 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[5,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[5,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.408482 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[6,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[6,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.409005 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[7,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[7,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.409542 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[8,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[8,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.410061 test begin: paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[9,8,81,81,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 81, 0],"bool"), list[9,8,81,81,], ) 
 The expanded size of the tensor (81) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 81, 81].  Tensor sizes: [1, 1, 81, 0]
2025-03-05 15:22:44.410569 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 113].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.411095 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 145].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.411615 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 157].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.412145 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 169].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.412678 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 217].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.413196 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 229].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.413719 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 241].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.414248 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 261].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.414835 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 385].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.415355 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 61].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.415873 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 65].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.416381 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 69].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.416901 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 73].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.417420 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.417967 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 85].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.418492 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[1,8,82,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 82, 97].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.419063 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[10,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[10,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.419608 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[2,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[2,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.420140 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[3,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[3,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.420676 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[30,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[30,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.421192 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[4,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[4,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.421713 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[5,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[5,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.422224 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[6,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[6,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.422737 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[7,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[7,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.423257 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[8,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[8,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.423776 test begin: paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[9,8,82,82,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 82, 0],"bool"), list[9,8,82,82,], ) 
 The expanded size of the tensor (82) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 82, 82].  Tensor sizes: [1, 1, 82, 0]
2025-03-05 15:22:44.424284 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 113].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.424801 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 145].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.425311 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 157].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.425836 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 169].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.426347 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 217].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.426898 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 229].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.427430 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 241].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.427951 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 261].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.428474 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 385].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.428996 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 61].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.429496 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 65].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.430548 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 69].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.431181 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 73].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.431794 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.432448 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 85].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.433096 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[1,8,83,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 83, 97].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.433784 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[10,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[10,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.434367 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[2,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[2,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.434962 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[3,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[3,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.435505 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[30,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[30,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.436037 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[4,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[4,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.436559 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[5,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[5,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.437103 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[6,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[6,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.437620 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[7,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[7,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.438142 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[8,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[8,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.438662 test begin: paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[9,8,83,83,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 83, 0],"bool"), list[9,8,83,83,], ) 
 The expanded size of the tensor (83) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 83, 83].  Tensor sizes: [1, 1, 83, 0]
2025-03-05 15:22:44.439224 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 113].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.439847 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 145].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.440471 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 157].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.441023 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 169].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.441534 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 217].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.442052 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 229].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.442561 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 241].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.443075 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 261].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.443590 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 385].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.444103 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 61].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.444692 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 65].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.445206 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 69].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.445716 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 73].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.446220 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.446743 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 85].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.447253 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[1,8,84,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 84, 97].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.447777 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[10,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[10,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.448305 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[2,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[2,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.448839 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[3,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[3,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.449397 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[30,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[30,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.449912 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[4,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[4,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.450419 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[5,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[5,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.450934 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[6,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[6,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.451442 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[7,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[7,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.451987 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[8,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[8,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.452497 test begin: paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[9,8,84,84,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 84, 0],"bool"), list[9,8,84,84,], ) 
 The expanded size of the tensor (84) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 84, 84].  Tensor sizes: [1, 1, 84, 0]
2025-03-05 15:22:44.453041 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 113].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.453563 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 145].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.454148 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 157].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.454682 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 169].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.455211 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 217].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.455746 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 229].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.456401 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 241].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.456995 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 261].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.457538 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 385].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.458132 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 61].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.458703 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 65].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.459278 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 69].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.459841 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 73].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.460424 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.460990 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[1,8,85,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 85, 97].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.462098 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[10,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[10,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.462778 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[2,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[2,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.463382 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[3,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[3,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.463987 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[30,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[30,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.464602 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[4,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[4,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.465283 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[5,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[5,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.465902 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[6,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[6,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.466466 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[7,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[7,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.467030 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[8,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[8,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.467567 test begin: paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[9,8,85,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 85, 0],"bool"), list[9,8,85,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 85, 85].  Tensor sizes: [1, 1, 85, 0]
2025-03-05 15:22:44.468121 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 113].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.468682 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 145].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.469217 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 157].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.469738 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 169].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.470284 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 217].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.470849 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 229].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.471389 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 241].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.471918 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 261].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.472436 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 385].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.476395 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 61].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.477765 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 65].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.478319 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 69].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.478901 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,73,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,73,], ) 
 The expanded size of the tensor (73) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 73].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.479439 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,85,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,85,], ) 
 The expanded size of the tensor (85) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 85].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.479971 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.480480 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,97,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[1,8,86,97,], ) 
 The expanded size of the tensor (97) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 86, 97].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.480995 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[10,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[10,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [10, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.481511 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[2,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[2,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [2, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.482033 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[3,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[3,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [3, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.482538 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[30,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[30,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [30, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.483060 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[4,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[4,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [4, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.483570 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[5,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[5,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [5, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.484303 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[6,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[6,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [6, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.484926 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[7,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[7,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [7, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.485536 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[8,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[8,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [8, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.486147 test begin: paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[9,8,86,86,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 86, 0],"bool"), list[9,8,86,86,], ) 
 The expanded size of the tensor (86) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [9, 8, 86, 86].  Tensor sizes: [1, 1, 86, 0]
2025-03-05 15:22:44.486749 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,113,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,113,], ) 
 The expanded size of the tensor (113) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 113].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.487471 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,145,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,145,], ) 
 The expanded size of the tensor (145) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 145].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.488105 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,157,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,157,], ) 
 The expanded size of the tensor (157) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 157].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.488643 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,169,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,169,], ) 
 The expanded size of the tensor (169) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 169].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.489173 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,217,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,217,], ) 
 The expanded size of the tensor (217) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 217].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.489708 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,229,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,229,], ) 
 The expanded size of the tensor (229) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 229].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.490243 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,241,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,241,], ) 
 The expanded size of the tensor (241) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 241].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.490764 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,261,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,261,], ) 
 The expanded size of the tensor (261) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 261].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.491275 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,385,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,385,], ) 
 The expanded size of the tensor (385) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 385].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.491792 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,61,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,61,], ) 
 The expanded size of the tensor (61) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 61].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.492303 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,65,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,65,], ) 
 The expanded size of the tensor (65) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 65].  Tensor sizes: [1, 1, 87, 0]
2025-03-05 15:22:44.492821 test begin: paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,69,], )

[torch error] paddle.broadcast_to(Tensor([1, 1, 87, 0],"bool"), list[1,8,87,69,], ) 
 The expanded size of the tensor (69) must match the existing size (0) at non-singleton dimension 3.  Target sizes: [1, 8, 87, 69].  Tensor sizes: [1, 1, 87, 0]
Error: Can not import paddle core while this file exists: /usr/local/lib/python3.9/dist-packages/paddle/base/libpaddle.so
KeyboardInterrupt

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest/PaddleAPITest/engine.py", line 1, in <module>
    from tester import TensorConfig, APIConfig, analyse_configs
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/__init__.py", line 1, in <module>
    from .base import APITestBase
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/base.py", line 2, in <module>
    from .api_config import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/__init__.py", line 1, in <module>
    from .config_analyzer import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/config_analyzer.py", line 3, in <module>
    import paddle
  File "/usr/local/lib/python3.9/dist-packages/paddle/__init__.py", line 38, in <module>
    from .base import core  # noqa: F401
  File "/usr/local/lib/python3.9/dist-packages/paddle/base/__init__.py", line 38, in <module>
    from . import (  # noqa: F401
  File "/usr/local/lib/python3.9/dist-packages/paddle/base/backward.py", line 28, in <module>
    from . import core, framework, log_helper, unique_name
  File "/usr/local/lib/python3.9/dist-packages/paddle/base/core.py", line 387, in <module>
    raise e
  File "/usr/local/lib/python3.9/dist-packages/paddle/base/core.py", line 267, in <module>
    from . import libpaddle
ImportError: initialization failed
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest/PaddleAPITest/engine.py", line 1, in <module>
    from tester import TensorConfig, APIConfig, analyse_configs
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/__init__.py", line 1, in <module>
    from .base import APITestBase
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/base.py", line 2, in <module>
    from .api_config import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/__init__.py", line 1, in <module>
    from .config_analyzer import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/config_analyzer.py", line 9, in <module>
    import torch
  File "/usr/local/lib/python3.9/dist-packages/torch/__init__.py", line 367, in <module>
    from torch._C import *  # noqa: F403
  File "<frozen importlib._bootstrap>", line 203, in _lock_unlock_module
KeyboardInterrupt
2025-03-05 15:41:15.177052 test begin: paddle.equal(Tensor([0, 1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )

W0305 15:41:20.478602 139416 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0305 15:41:20.479571 139416 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.equal(Tensor([0, 1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
2025-03-05 15:41:45.798687 test begin: paddle.equal(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )

[Pass] paddle.equal(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
2025-03-05 15:41:45.803085 test begin: paddle.equal(Tensor([0, 1],"float64"), Tensor([114, 1],"float64"), )

[torch error] paddle.equal(Tensor([0, 1],"float64"), Tensor([114, 1],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (114) at non-singleton dimension 0
2025-03-05 15:41:45.804901 test begin: paddle.equal(Tensor([0, 1],"int64"), Tensor([1],"int64"), )

[Pass] paddle.equal(Tensor([0, 1],"int64"), Tensor([1],"int64"), )
2025-03-05 15:41:45.808030 test begin: paddle.equal(Tensor([0, 20],"int32"), 0, )

[Pass] paddle.equal(Tensor([0, 20],"int32"), 0, )
2025-03-05 15:41:45.810457 test begin: paddle.equal(Tensor([0, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([0, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )
2025-03-05 15:41:45.812380 test begin: paddle.equal(Tensor([0, 28, 28],"int32"), Tensor([6, 1, 1],"int32"), )

[torch error] paddle.equal(Tensor([0, 28, 28],"int32"), Tensor([6, 1, 1],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (6) at non-singleton dimension 0
2025-03-05 15:41:45.813504 test begin: paddle.equal(Tensor([0, 7],"int64"), 1, )

[Pass] paddle.equal(Tensor([0, 7],"int64"), 1, )
2025-03-05 15:41:45.815621 test begin: paddle.equal(Tensor([0],"float32"), Tensor([0],"float32"), )

[Pass] paddle.equal(Tensor([0],"float32"), Tensor([0],"float32"), )
2025-03-05 15:41:45.817493 test begin: paddle.equal(Tensor([0],"float32"), Tensor([1],"float32"), )

[Pass] paddle.equal(Tensor([0],"float32"), Tensor([1],"float32"), )
2025-03-05 15:41:45.820904 test begin: paddle.equal(Tensor([0],"int64"), 0, )

[Pass] paddle.equal(Tensor([0],"int64"), 0, )
2025-03-05 15:41:45.823457 test begin: paddle.equal(Tensor([0],"int64"), 1, )

[Pass] paddle.equal(Tensor([0],"int64"), 1, )
2025-03-05 15:41:45.825281 test begin: paddle.equal(Tensor([0],"int64"), 1.0, )

[Pass] paddle.equal(Tensor([0],"int64"), 1.0, )
2025-03-05 15:41:45.827440 test begin: paddle.equal(Tensor([0],"int64"), 10, )

[Pass] paddle.equal(Tensor([0],"int64"), 10, )
2025-03-05 15:41:45.831187 test begin: paddle.equal(Tensor([0],"int64"), 2, )

[Pass] paddle.equal(Tensor([0],"int64"), 2, )
2025-03-05 15:41:45.833389 test begin: paddle.equal(Tensor([0],"int64"), True, )

[Pass] paddle.equal(Tensor([0],"int64"), True, )
2025-03-05 15:41:45.835630 test begin: paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 0, 1],"int32"), )

[Pass] paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 0, 1],"int32"), )
2025-03-05 15:41:45.837563 test begin: paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 1, 1],"int32"), )
2025-03-05 15:41:45.839965 test begin: paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 0],"int32"), )

[Pass] paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 0],"int32"), )
2025-03-05 15:41:45.841703 test begin: paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 1],"int32"), )
2025-03-05 15:41:45.844162 test begin: paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )
2025-03-05 15:41:45.846501 test begin: paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 0, 1],"int32"), )

[torch error] paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 0, 1],"int32"), ) 
 The size of tensor a (28) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:45.847823 test begin: paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 1, 0],"int32"), )

[torch error] paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 1, 0],"int32"), ) 
 The size of tensor a (28) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:45.848773 test begin: paddle.equal(Tensor([10, 0],"int32"), 0, )

[Pass] paddle.equal(Tensor([10, 0],"int32"), 0, )
2025-03-05 15:41:45.851074 test begin: paddle.equal(Tensor([114, 0],"float64"), Tensor([114, 0],"float64"), )

[Pass] paddle.equal(Tensor([114, 0],"float64"), Tensor([114, 0],"float64"), )
2025-03-05 15:41:45.853534 test begin: paddle.equal(Tensor([114, 0],"float64"), Tensor([114, 1],"float64"), )

[Pass] paddle.equal(Tensor([114, 0],"float64"), Tensor([114, 1],"float64"), )
2025-03-05 15:41:45.855851 test begin: paddle.equal(Tensor([114, 1],"float64"), Tensor([0, 1],"float64"), )

[torch error] paddle.equal(Tensor([114, 1],"float64"), Tensor([0, 1],"float64"), ) 
 The size of tensor a (114) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:45.857140 test begin: paddle.equal(Tensor([114, 1],"float64"), Tensor([114, 0],"float64"), )

[Pass] paddle.equal(Tensor([114, 1],"float64"), Tensor([114, 0],"float64"), )
2025-03-05 15:41:45.859935 test begin: paddle.equal(Tensor([1],"float32"), Tensor([0],"float32"), )

[Pass] paddle.equal(Tensor([1],"float32"), Tensor([0],"float32"), )
2025-03-05 15:41:45.863547 test begin: paddle.equal(Tensor([2, 0, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )

[torch error] paddle.equal(Tensor([2, 0, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (6) at non-singleton dimension 1
2025-03-05 15:41:45.865321 test begin: paddle.equal(Tensor([2, 0],"int64"), 1, )

[Pass] paddle.equal(Tensor([2, 0],"int64"), 1, )
2025-03-05 15:41:45.867658 test begin: paddle.equal(Tensor([2, 0],"int64"), Tensor([1],"int64"), )

[Pass] paddle.equal(Tensor([2, 0],"int64"), Tensor([1],"int64"), )
2025-03-05 15:41:45.870018 test begin: paddle.equal(Tensor([2, 1, 0, 8],"int32"), Tensor([6, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([2, 1, 0, 8],"int32"), Tensor([6, 1, 1],"int32"), )
2025-03-05 15:41:45.871552 test begin: paddle.equal(Tensor([2, 1, 8, 0],"int32"), Tensor([6, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([2, 1, 8, 0],"int32"), Tensor([6, 1, 1],"int32"), )
2025-03-05 15:41:45.873178 test begin: paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([0, 1, 1],"int32"), )

[Pass] paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([0, 1, 1],"int32"), )
2025-03-05 15:41:45.874698 test begin: paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 0, 1],"int32"), )

[torch error] paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 0, 1],"int32"), ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:45.876457 test begin: paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 1, 0],"int32"), )

[torch error] paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 1, 0],"int32"), ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:45.877405 test begin: paddle.equal(Tensor([2, 1],"int64"), Tensor([0],"int64"), )

[Pass] paddle.equal(Tensor([2, 1],"int64"), Tensor([0],"int64"), )
2025-03-05 15:41:45.879677 test begin: paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:45.881527 test begin: paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:45.883741 test begin: paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
2025-03-05 15:41:45.885408 test begin: paddle.equal(x=Tensor([0, 1, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 1, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )
2025-03-05 15:41:45.886973 test begin: paddle.equal(x=Tensor([0, 3, 1],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([0, 3, 1],"float64"), y=Tensor([3, 3, 3, 1],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:45.892860 test begin: paddle.equal(x=Tensor([0, 3, 3, 1],"float64"), y=Tensor([3, 3, 1],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 3, 3, 1],"float64"), y=Tensor([3, 3, 1],"float64"), )
2025-03-05 15:41:45.918383 test begin: paddle.equal(x=Tensor([0, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )

[Pass] paddle.equal(x=Tensor([0, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )
2025-03-05 15:41:45.930689 test begin: paddle.equal(x=Tensor([0, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )

[torch error] paddle.equal(x=Tensor([0, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:45.937612 test begin: paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), )
2025-03-05 15:41:45.966708 test begin: paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 3
2025-03-05 15:41:45.970897 test begin: paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 1, 3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:45.971863 test begin: paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 3],"float64"), )
2025-03-05 15:41:45.992804 test begin: paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([3],"float64"), )

[Pass] paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([3],"float64"), )
2025-03-05 15:41:45.994793 test begin: paddle.equal(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )

[Pass] paddle.equal(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
2025-03-05 15:41:45.996716 test begin: paddle.equal(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )

[torch error] paddle.equal(x=Tensor([0],"int64"), y=Tensor([3],"int64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:45.997920 test begin: paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.000833 test begin: paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.003811 test begin: paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
2025-03-05 15:41:46.005523 test begin: paddle.equal(x=Tensor([1, 0, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 0, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )
2025-03-05 15:41:46.007709 test begin: paddle.equal(x=Tensor([1, 0],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 0],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 4
2025-03-05 15:41:46.009072 test begin: paddle.equal(x=Tensor([1, 0],"float64"), y=Tensor([1, 1, 3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 0],"float64"), y=Tensor([1, 1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 3
2025-03-05 15:41:46.009797 test begin: paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.011881 test begin: paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.013722 test begin: paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
2025-03-05 15:41:46.015188 test begin: paddle.equal(x=Tensor([1, 1, 0, 3],"float64"), y=Tensor([1, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 0, 3],"float64"), y=Tensor([1, 3],"float64"), )
2025-03-05 15:41:46.016625 test begin: paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )
2025-03-05 15:41:46.018038 test begin: paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.019837 test begin: paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
2025-03-05 15:41:46.021288 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 1, 0, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 1, 0, 3],"float64"), )
2025-03-05 15:41:46.022768 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 4
2025-03-05 15:41:46.024449 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 4
2025-03-05 15:41:46.030353 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([1, 1, 1, 1, 3, 0],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([1, 1, 1, 1, 3, 0],"float64"), )
2025-03-05 15:41:46.032621 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 5
2025-03-05 15:41:46.033552 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([3, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 5
2025-03-05 15:41:46.034253 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.036343 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:46.037655 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.040037 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.042262 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )
2025-03-05 15:41:46.044444 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 0, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 0, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:46.047465 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 0],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 5
2025-03-05 15:41:46.048347 test begin: paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 0],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 5
2025-03-05 15:41:46.049041 test begin: paddle.equal(x=Tensor([1, 1, 3, 0],"float64"), y=Tensor([1, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 3, 0],"float64"), y=Tensor([1, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 3
2025-03-05 15:41:46.049742 test begin: paddle.equal(x=Tensor([1, 1, 3, 3],"float64"), y=Tensor([0, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 3, 3],"float64"), y=Tensor([0, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:46.050429 test begin: paddle.equal(x=Tensor([1, 1, 3, 3],"float64"), y=Tensor([1, 0],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 1, 3, 3],"float64"), y=Tensor([1, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:46.051118 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.056690 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.061123 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 1, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 1, 3, 3],"float64"), )
2025-03-05 15:41:46.064411 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 3, 3],"float64"), )
2025-03-05 15:41:46.065894 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3, 3],"float64"), )
2025-03-05 15:41:46.067381 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3],"float64"), )
2025-03-05 15:41:46.068869 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 0, 3],"float64"), )

[Pass] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 0, 3],"float64"), )
2025-03-05 15:41:46.070341 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 0],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:46.072273 test begin: paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 3, 0],"float64"), )

[torch error] paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 3, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:46.073354 test begin: paddle.equal(x=Tensor([3, 0, 1],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 0, 1],"float64"), y=Tensor([3, 3, 3, 1],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:46.074318 test begin: paddle.equal(x=Tensor([3, 0, 3, 1],"float64"), y=Tensor([3, 3, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 0, 3, 1],"float64"), y=Tensor([3, 3, 1],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:46.075190 test begin: paddle.equal(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )

[Pass] paddle.equal(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )
2025-03-05 15:41:46.077721 test begin: paddle.equal(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )

[torch error] paddle.equal(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 3, 3],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:46.078740 test begin: paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([1, 0],"float64"), )

[Pass] paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([1, 0],"float64"), )
2025-03-05 15:41:46.080650 test begin: paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([1, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([1, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:46.081573 test begin: paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([3],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:46.082274 test begin: paddle.equal(x=Tensor([3, 3, 0, 1],"float64"), y=Tensor([3, 3, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3, 0, 1],"float64"), y=Tensor([3, 3, 1],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:46.083048 test begin: paddle.equal(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 0],"float32"), )

[Pass] paddle.equal(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 0],"float32"), )
2025-03-05 15:41:46.084811 test begin: paddle.equal(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 3],"float32"), )

[torch error] paddle.equal(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 3],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:46.085802 test begin: paddle.equal(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )

[Pass] paddle.equal(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )
2025-03-05 15:41:46.087624 test begin: paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([0, 3, 3, 1],"float64"), )

[Pass] paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([0, 3, 3, 1],"float64"), )
2025-03-05 15:41:46.090140 test begin: paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 0, 3, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 0, 3, 1],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:46.091667 test begin: paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 3, 0, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 3, 0, 1],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:46.092574 test begin: paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 3, 3, 0],"float64"), )

[Pass] paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 3, 3, 0],"float64"), )
2025-03-05 15:41:46.094475 test begin: paddle.equal(x=Tensor([3, 3, 3, 0],"float64"), y=Tensor([3, 3, 1],"float64"), )

[Pass] paddle.equal(x=Tensor([3, 3, 3, 0],"float64"), y=Tensor([3, 3, 1],"float64"), )
2025-03-05 15:41:46.096051 test begin: paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([0, 3, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([0, 3, 1],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:46.097540 test begin: paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 0, 1],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 0, 1],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:46.098245 test begin: paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 3, 0],"float64"), )

[Pass] paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 3, 0],"float64"), )
2025-03-05 15:41:46.099965 test begin: paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )

[torch error] paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:46.101114 test begin: paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )

[torch error] paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 0, 3],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:46.101860 test begin: paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 0],"float32"), )

[torch error] paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 0],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:46.102552 test begin: paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([0, 3],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([0, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:46.103218 test begin: paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([0],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:46.103889 test begin: paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([1, 0],"float64"), )

[torch error] paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([1, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:46.104625 test begin: paddle.equal(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )

[torch error] paddle.equal(x=Tensor([3],"int64"), y=Tensor([0],"int64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:46.105359 test begin: paddle.erf(Tensor([0, 17],"float64"), )

[Pass] paddle.erf(Tensor([0, 17],"float64"), )
2025-03-05 15:41:46.115764 test begin: paddle.erf(Tensor([0, 2, 3, 5, 4],"float64"), )

[Pass] paddle.erf(Tensor([0, 2, 3, 5, 4],"float64"), )
2025-03-05 15:41:46.118412 test begin: paddle.erf(Tensor([0, 2, 3, 5],"float64"), )

[Pass] paddle.erf(Tensor([0, 2, 3, 5],"float64"), )
2025-03-05 15:41:46.121011 test begin: paddle.erf(Tensor([0, 2, 3],"float64"), )

[Pass] paddle.erf(Tensor([0, 2, 3],"float64"), )
2025-03-05 15:41:46.123422 test begin: paddle.erf(Tensor([0],"float64"), )

[Pass] paddle.erf(Tensor([0],"float64"), )
2025-03-05 15:41:46.126027 test begin: paddle.erf(Tensor([11, 0],"float64"), )

[Pass] paddle.erf(Tensor([11, 0],"float64"), )
2025-03-05 15:41:46.128391 test begin: paddle.erf(Tensor([4, 0, 3, 5, 4],"float64"), )

[Pass] paddle.erf(Tensor([4, 0, 3, 5, 4],"float64"), )
2025-03-05 15:41:46.130781 test begin: paddle.erf(Tensor([4, 0, 3, 5],"float64"), )

[Pass] paddle.erf(Tensor([4, 0, 3, 5],"float64"), )
2025-03-05 15:41:46.133393 test begin: paddle.erf(Tensor([4, 0, 3],"float64"), )

[Pass] paddle.erf(Tensor([4, 0, 3],"float64"), )
2025-03-05 15:41:46.135895 test begin: paddle.erf(Tensor([4, 2, 0, 5, 4],"float64"), )

[Pass] paddle.erf(Tensor([4, 2, 0, 5, 4],"float64"), )
2025-03-05 15:41:46.138621 test begin: paddle.erf(Tensor([4, 2, 0, 5],"float64"), )

[Pass] paddle.erf(Tensor([4, 2, 0, 5],"float64"), )
2025-03-05 15:41:46.141236 test begin: paddle.erf(Tensor([4, 2, 0],"float64"), )

[Pass] paddle.erf(Tensor([4, 2, 0],"float64"), )
2025-03-05 15:41:46.143607 test begin: paddle.erf(Tensor([4, 2, 3, 0, 4],"float64"), )

[Pass] paddle.erf(Tensor([4, 2, 3, 0, 4],"float64"), )
2025-03-05 15:41:46.146261 test begin: paddle.erf(Tensor([4, 2, 3, 0],"float64"), )

[Pass] paddle.erf(Tensor([4, 2, 3, 0],"float64"), )
2025-03-05 15:41:46.148982 test begin: paddle.erf(Tensor([4, 2, 3, 5, 0],"float64"), )

[Pass] paddle.erf(Tensor([4, 2, 3, 5, 0],"float64"), )
2025-03-05 15:41:46.151287 test begin: paddle.erf(x=Tensor([0, 2],"float32"), )

[Pass] paddle.erf(x=Tensor([0, 2],"float32"), )
2025-03-05 15:41:46.153933 test begin: paddle.erf(x=Tensor([0],"float32"), )

[Pass] paddle.erf(x=Tensor([0],"float32"), )
2025-03-05 15:41:46.156168 test begin: paddle.erf(x=Tensor([2, 0],"float32"), )

[Pass] paddle.erf(x=Tensor([2, 0],"float32"), )
2025-03-05 15:41:46.158359 test begin: paddle.erfinv(Tensor([0],"float32"), )

[cuda error] paddle.erfinv(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.160479 test begin: paddle.erfinv(x=Tensor([0, 2, 3, 5, 4],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([0, 2, 3, 5, 4],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.162894 test begin: paddle.erfinv(x=Tensor([0, 2, 3, 5],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([0, 2, 3, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.164906 test begin: paddle.erfinv(x=Tensor([0, 2, 3],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([0, 2, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.166913 test begin: paddle.erfinv(x=Tensor([0, 2],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([0, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.168704 test begin: paddle.erfinv(x=Tensor([0],"float32"), )

[cuda error] paddle.erfinv(x=Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.170370 test begin: paddle.erfinv(x=Tensor([4, 0, 3, 5, 4],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 0, 3, 5, 4],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.172023 test begin: paddle.erfinv(x=Tensor([4, 0, 3, 5],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 0, 3, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.173660 test begin: paddle.erfinv(x=Tensor([4, 0, 3],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 0, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.175341 test begin: paddle.erfinv(x=Tensor([4, 0],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.177011 test begin: paddle.erfinv(x=Tensor([4, 2, 0, 5, 4],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 2, 0, 5, 4],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.178659 test begin: paddle.erfinv(x=Tensor([4, 2, 0, 5],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 2, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.180312 test begin: paddle.erfinv(x=Tensor([4, 2, 0],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 2, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.182044 test begin: paddle.erfinv(x=Tensor([4, 2, 3, 0, 4],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 2, 3, 0, 4],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.183656 test begin: paddle.erfinv(x=Tensor([4, 2, 3, 0],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 2, 3, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.185317 test begin: paddle.erfinv(x=Tensor([4, 2, 3, 5, 0],"float64"), )

[cuda error] paddle.erfinv(x=Tensor([4, 2, 3, 5, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.187200 test begin: paddle.exp(Tensor([0, 1],"float32"), )

[cuda error] paddle.exp(Tensor([0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.189257 test begin: paddle.exp(Tensor([0, 2, 3, 4],"float32"), )

[cuda error] paddle.exp(Tensor([0, 2, 3, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.191149 test begin: paddle.exp(Tensor([0, 2, 3],"float32"), )

[cuda error] paddle.exp(Tensor([0, 2, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.193068 test begin: paddle.exp(Tensor([0, 3, 10, 10, 1],"float32"), )

[cuda error] paddle.exp(Tensor([0, 3, 10, 10, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.194987 test begin: paddle.exp(Tensor([0],"complex64"), )

[cuda error] paddle.exp(Tensor([0],"complex64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.196982 test begin: paddle.exp(Tensor([1, 0, 3, 4],"float32"), )

[cuda error] paddle.exp(Tensor([1, 0, 3, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.198767 test begin: paddle.exp(Tensor([1, 0, 3],"float32"), )

[cuda error] paddle.exp(Tensor([1, 0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.200368 test begin: paddle.exp(Tensor([1, 0],"float32"), )

[cuda error] paddle.exp(Tensor([1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.202028 test begin: paddle.exp(Tensor([1, 2, 0, 4],"float32"), )

[cuda error] paddle.exp(Tensor([1, 2, 0, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.205571 test begin: paddle.exp(Tensor([1, 2, 0],"float32"), )

[cuda error] paddle.exp(Tensor([1, 2, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.207550 test begin: paddle.exp(Tensor([1, 2, 3, 0],"float32"), )

[cuda error] paddle.exp(Tensor([1, 2, 3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.209537 test begin: paddle.exp(Tensor([12, 0, 10, 10, 1],"float32"), )

[cuda error] paddle.exp(Tensor([12, 0, 10, 10, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.211545 test begin: paddle.exp(Tensor([12, 3, 0, 10, 1],"float32"), )

[cuda error] paddle.exp(Tensor([12, 3, 0, 10, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.213381 test begin: paddle.exp(Tensor([12, 3, 10, 0, 1],"float32"), )

[cuda error] paddle.exp(Tensor([12, 3, 10, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.215151 test begin: paddle.exp(Tensor([12, 3, 10, 10, 0],"float32"), )

[cuda error] paddle.exp(Tensor([12, 3, 10, 10, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.217008 test begin: paddle.exp(x=Tensor([0, 3, 3],"float32"), )

[cuda error] paddle.exp(x=Tensor([0, 3, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.218803 test begin: paddle.exp(x=Tensor([3, 0, 3],"float32"), )

[cuda error] paddle.exp(x=Tensor([3, 0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.220592 test begin: paddle.exp(x=Tensor([3, 3, 0],"float32"), )

[cuda error] paddle.exp(x=Tensor([3, 3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.222403 test begin: paddle.expm1(Tensor([0, 16, 32],"complex128"), )

[cuda error] paddle.expm1(Tensor([0, 16, 32],"complex128"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.224434 test begin: paddle.expm1(Tensor([0, 2],"float64"), )

[cuda error] paddle.expm1(Tensor([0, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.226148 test begin: paddle.expm1(Tensor([0],"float32"), )

[cuda error] paddle.expm1(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.227851 test begin: paddle.expm1(Tensor([2, 0],"float64"), )

[cuda error] paddle.expm1(Tensor([2, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.229458 test begin: paddle.expm1(Tensor([8, 0, 32],"complex128"), )

[cuda error] paddle.expm1(Tensor([8, 0, 32],"complex128"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.231067 test begin: paddle.expm1(Tensor([8, 16, 0],"complex128"), )

[cuda error] paddle.expm1(Tensor([8, 16, 0],"complex128"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.232759 test begin: paddle.expm1(x=Tensor([0, 3, 3],"float16"), )

[cuda error] paddle.expm1(x=Tensor([0, 3, 3],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.234504 test begin: paddle.expm1(x=Tensor([0, 6, 6, 6, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([0, 6, 6, 6, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.236114 test begin: paddle.expm1(x=Tensor([0, 6, 6, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([0, 6, 6, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.237761 test begin: paddle.expm1(x=Tensor([0, 6],"float32"), )

[cuda error] paddle.expm1(x=Tensor([0, 6],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.239331 test begin: paddle.expm1(x=Tensor([3, 0, 3],"float16"), )

[cuda error] paddle.expm1(x=Tensor([3, 0, 3],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.240991 test begin: paddle.expm1(x=Tensor([3, 0, 6, 6, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([3, 0, 6, 6, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.242573 test begin: paddle.expm1(x=Tensor([3, 3, 0],"float16"), )

[cuda error] paddle.expm1(x=Tensor([3, 3, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.244193 test begin: paddle.expm1(x=Tensor([3, 6, 0, 6, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([3, 6, 0, 6, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.245795 test begin: paddle.expm1(x=Tensor([3, 6, 6, 0, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([3, 6, 6, 0, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.247455 test begin: paddle.expm1(x=Tensor([3, 6, 6, 6, 0],"float64"), )

[cuda error] paddle.expm1(x=Tensor([3, 6, 6, 6, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.250076 test begin: paddle.expm1(x=Tensor([6, 0, 6, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([6, 0, 6, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.251673 test begin: paddle.expm1(x=Tensor([6, 0],"float32"), )

[cuda error] paddle.expm1(x=Tensor([6, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.253285 test begin: paddle.expm1(x=Tensor([6, 6, 0, 6],"float64"), )

[cuda error] paddle.expm1(x=Tensor([6, 6, 0, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.254932 test begin: paddle.expm1(x=Tensor([6, 6, 6, 0],"float64"), )

[cuda error] paddle.expm1(x=Tensor([6, 6, 6, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:46.256834 test begin: paddle.fft.fft(x=Tensor([0, 3],"complex128"), norm="ortho", )

[torch error] paddle.fft.fft(x=Tensor([0, 3],"complex128"), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.258367 test begin: paddle.fft.fft(x=Tensor([0],"complex128"), )

[torch error] paddle.fft.fft(x=Tensor([0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.259030 test begin: paddle.fft.fft(x=Tensor([0],"complex128"), axis=0, )

[torch error] paddle.fft.fft(x=Tensor([0],"complex128"), axis=0, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.259819 test begin: paddle.fft.fft(x=Tensor([0],"complex128"), n=1, )

[Pass] paddle.fft.fft(x=Tensor([0],"complex128"), n=1, )
2025-03-05 15:41:46.311708 test begin: paddle.fft.fft(x=Tensor([0],"complex128"), norm="forward", )

[torch error] paddle.fft.fft(x=Tensor([0],"complex128"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.312880 test begin: paddle.fft.fft(x=Tensor([0],"complex128"), norm="ortho", )

[torch error] paddle.fft.fft(x=Tensor([0],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.313603 test begin: paddle.fft.fft(x=Tensor([2, 0],"complex128"), norm="ortho", )

[torch error] paddle.fft.fft(x=Tensor([2, 0],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.314230 test begin: paddle.fft.fft2(x=Tensor([0, 2, 4, 2],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([0, 2, 4, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.315108 test begin: paddle.fft.fft2(x=Tensor([0, 2, 4],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([0, 2, 4],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.315805 test begin: paddle.fft.fft2(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.fft2(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.316596 test begin: paddle.fft.fft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), )

[torch error] paddle.fft.fft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.317311 test begin: paddle.fft.fft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )

[torch error] paddle.fft.fft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.318041 test begin: paddle.fft.fft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )

[torch error] paddle.fft.fft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.318778 test begin: paddle.fft.fft2(x=Tensor([0, 4],"float64"), )

[torch error] paddle.fft.fft2(x=Tensor([0, 4],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.319333 test begin: paddle.fft.fft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), )

[torch error] paddle.fft.fft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.319939 test begin: paddle.fft.fft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="forward", )

[torch error] paddle.fft.fft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.320559 test begin: paddle.fft.fft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )

[torch error] paddle.fft.fft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.321188 test begin: paddle.fft.fft2(x=Tensor([2, 0, 4],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([2, 0, 4],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.321744 test begin: paddle.fft.fft2(x=Tensor([2, 0],"float64"), )

[torch error] paddle.fft.fft2(x=Tensor([2, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.322290 test begin: paddle.fft.fft2(x=Tensor([2, 2, 0],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([2, 2, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.323192 test begin: paddle.fft.fft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), )

[torch error] paddle.fft.fft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.323906 test begin: paddle.fft.fft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="forward", )

[torch error] paddle.fft.fft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.324559 test begin: paddle.fft.fft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="ortho", )

[torch error] paddle.fft.fft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.325253 test begin: paddle.fft.fft2(x=Tensor([3, 0, 2, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.fft2(x=Tensor([3, 0, 2, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.326114 test begin: paddle.fft.fft2(x=Tensor([3, 0, 4, 2],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([3, 0, 4, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.326922 test begin: paddle.fft.fft2(x=Tensor([3, 2, 0, 2],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([3, 2, 0, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.327566 test begin: paddle.fft.fft2(x=Tensor([3, 2, 4, 0],"complex128"), )

[torch error] paddle.fft.fft2(x=Tensor([3, 2, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.328184 test begin: paddle.fft.fft2(x=Tensor([3, 3, 0, 2],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.fft2(x=Tensor([3, 3, 0, 2],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.333062 test begin: paddle.fft.fft2(x=Tensor([3, 3, 2, 0],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.fft2(x=Tensor([3, 3, 2, 0],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.336853 test begin: paddle.fft.fftn(Tensor([0, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([0, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.337881 test begin: paddle.fft.fftn(Tensor([0, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([0, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.338695 test begin: paddle.fft.fftn(Tensor([0, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([0, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.339579 test begin: paddle.fft.fftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.340328 test begin: paddle.fft.fftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )

[torch error] paddle.fft.fftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.341003 test begin: paddle.fft.fftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )

[torch error] paddle.fft.fftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.341696 test begin: paddle.fft.fftn(Tensor([0, 4],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([0, 4],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.342278 test begin: paddle.fft.fftn(Tensor([0, 7, 32],"float32"), )

[torch error] paddle.fft.fftn(Tensor([0, 7, 32],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.342772 test begin: paddle.fft.fftn(Tensor([13, 0, 32],"float32"), )

[torch error] paddle.fft.fftn(Tensor([13, 0, 32],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.343283 test begin: paddle.fft.fftn(Tensor([13, 7, 0],"float32"), )

[torch error] paddle.fft.fftn(Tensor([13, 7, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.343767 test begin: paddle.fft.fftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.344346 test begin: paddle.fft.fftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "forward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "forward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.344918 test begin: paddle.fft.fftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "ortho", None, )

[torch error] paddle.fft.fftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "ortho", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.345470 test begin: paddle.fft.fftn(Tensor([2, 0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.346038 test begin: paddle.fft.fftn(Tensor([2, 0],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 0],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.346605 test begin: paddle.fft.fftn(Tensor([2, 2, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 2, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.347175 test begin: paddle.fft.fftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.347798 test begin: paddle.fft.fftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "forward", None, )

[torch error] paddle.fft.fftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "forward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.348386 test begin: paddle.fft.fftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "ortho", None, )

[torch error] paddle.fft.fftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "ortho", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.348969 test begin: paddle.fft.fftn(Tensor([3, 0, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([3, 0, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.349731 test begin: paddle.fft.fftn(Tensor([3, 0, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([3, 0, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.350383 test begin: paddle.fft.fftn(Tensor([3, 2, 0, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([3, 2, 0, 2],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.350971 test begin: paddle.fft.fftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.fftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.351544 test begin: paddle.fft.fftn(Tensor([3, 3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.fftn(Tensor([3, 3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.354497 test begin: paddle.fft.fftn(Tensor([3, 3, 2, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.fftn(Tensor([3, 3, 2, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.356980 test begin: paddle.fft.fftn(x=Tensor([0, 4, 2],"float64"), )

[torch error] paddle.fft.fftn(x=Tensor([0, 4, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.357569 test begin: paddle.fft.fftn(x=Tensor([0, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[Pass] paddle.fft.fftn(x=Tensor([0, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
2025-03-05 15:41:46.362389 test begin: paddle.fft.fftn(x=Tensor([0, 4, 6],"float64"), s=list[1,], )

[torch error] paddle.fft.fftn(x=Tensor([0, 4, 6],"float64"), s=list[1,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.363665 test begin: paddle.fft.fftn(x=Tensor([0, 4, 6],"float64"), s=list[2,4,], )

[torch error] paddle.fft.fftn(x=Tensor([0, 4, 6],"float64"), s=list[2,4,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.364638 test begin: paddle.fft.fftn(x=Tensor([0, 4],"complex128"), norm="forward", )

[torch error] paddle.fft.fftn(x=Tensor([0, 4],"complex128"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.365270 test begin: paddle.fft.fftn(x=Tensor([0, 4],"complex128"), norm="ortho", )

[torch error] paddle.fft.fftn(x=Tensor([0, 4],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.365981 test begin: paddle.fft.fftn(x=Tensor([0, 4],"float32"), )

[torch error] paddle.fft.fftn(x=Tensor([0, 4],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.366872 test begin: paddle.fft.fftn(x=Tensor([2, 0, 2],"float64"), )

[torch error] paddle.fft.fftn(x=Tensor([2, 0, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.367492 test begin: paddle.fft.fftn(x=Tensor([2, 4, 0],"float64"), )

[torch error] paddle.fft.fftn(x=Tensor([2, 4, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.368005 test begin: paddle.fft.fftn(x=Tensor([3, 0],"complex128"), norm="forward", )

[torch error] paddle.fft.fftn(x=Tensor([3, 0],"complex128"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.368606 test begin: paddle.fft.fftn(x=Tensor([3, 0],"complex128"), norm="ortho", )

[torch error] paddle.fft.fftn(x=Tensor([3, 0],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.369119 test begin: paddle.fft.fftn(x=Tensor([4, 0, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[Pass] paddle.fft.fftn(x=Tensor([4, 0, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
2025-03-05 15:41:46.372554 test begin: paddle.fft.fftn(x=Tensor([4, 0, 6],"float64"), s=list[1,], )

[torch error] paddle.fft.fftn(x=Tensor([4, 0, 6],"float64"), s=list[1,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.373357 test begin: paddle.fft.fftn(x=Tensor([4, 0, 6],"float64"), s=list[2,4,], )

[Pass] paddle.fft.fftn(x=Tensor([4, 0, 6],"float64"), s=list[2,4,], )
2025-03-05 15:41:46.378501 test begin: paddle.fft.fftn(x=Tensor([4, 0],"float32"), )

[torch error] paddle.fft.fftn(x=Tensor([4, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.379638 test begin: paddle.fft.fftn(x=Tensor([4, 4, 0, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[torch error] paddle.fft.fftn(x=Tensor([4, 4, 0, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.380723 test begin: paddle.fft.fftn(x=Tensor([4, 4, 0],"float64"), s=list[1,], )

[Pass] paddle.fft.fftn(x=Tensor([4, 4, 0],"float64"), s=list[1,], )
2025-03-05 15:41:46.385968 test begin: paddle.fft.fftn(x=Tensor([4, 4, 0],"float64"), s=list[2,4,], )

[Pass] paddle.fft.fftn(x=Tensor([4, 4, 0],"float64"), s=list[2,4,], )
2025-03-05 15:41:46.389391 test begin: paddle.fft.fftn(x=Tensor([4, 4, 6, 0],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[torch error] paddle.fft.fftn(x=Tensor([4, 4, 6, 0],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.390348 test begin: paddle.fft.fftshift(x=Tensor([0, 4, 2],"float64"), )

[Pass] paddle.fft.fftshift(x=Tensor([0, 4, 2],"float64"), )
2025-03-05 15:41:46.392983 test begin: paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), )

[Pass] paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), )
2025-03-05 15:41:46.394897 test begin: paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )

[Pass] paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )
2025-03-05 15:41:46.397140 test begin: paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(1,3,), )

[Pass] paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(1,3,), )
2025-03-05 15:41:46.399595 test begin: paddle.fft.fftshift(x=Tensor([0],"float32"), )

[Pass] paddle.fft.fftshift(x=Tensor([0],"float32"), )
2025-03-05 15:41:46.401442 test begin: paddle.fft.fftshift(x=Tensor([2, 0, 2],"float64"), )

[Pass] paddle.fft.fftshift(x=Tensor([2, 0, 2],"float64"), )
2025-03-05 15:41:46.403151 test begin: paddle.fft.fftshift(x=Tensor([2, 4, 0],"float64"), )

[Pass] paddle.fft.fftshift(x=Tensor([2, 4, 0],"float64"), )
2025-03-05 15:41:46.404828 test begin: paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), )

[Pass] paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), )
2025-03-05 15:41:46.406268 test begin: paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )

[Pass] paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )
2025-03-05 15:41:46.407981 test begin: paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(1,3,), )

[Pass] paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(1,3,), )
2025-03-05 15:41:46.409792 test begin: paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), )

[Pass] paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), )
2025-03-05 15:41:46.411468 test begin: paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )

[Pass] paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )
2025-03-05 15:41:46.413000 test begin: paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(1,3,), )

[Pass] paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(1,3,), )
2025-03-05 15:41:46.414973 test begin: paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), )

[Pass] paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), )
2025-03-05 15:41:46.416883 test begin: paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )

[Pass] paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )
2025-03-05 15:41:46.418566 test begin: paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(1,3,), )

[Pass] paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(1,3,), )
2025-03-05 15:41:46.420170 test begin: paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.421807 test begin: paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), n=2, )

[torch error] paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.422592 test begin: paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), n=2, axis=1, )

[torch error] paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.423247 test begin: paddle.fft.hfft(x=Tensor([0, 4, 3],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([0, 4, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.423861 test begin: paddle.fft.hfft(x=Tensor([0, 4],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([0, 4],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.424445 test begin: paddle.fft.hfft(x=Tensor([0, 4],"complex128"), norm="forward", )

[torch error] paddle.fft.hfft(x=Tensor([0, 4],"complex128"), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.425053 test begin: paddle.fft.hfft(x=Tensor([0, 4],"complex128"), norm="ortho", )

[torch error] paddle.fft.hfft(x=Tensor([0, 4],"complex128"), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.425686 test begin: paddle.fft.hfft(x=Tensor([0],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.426168 test begin: paddle.fft.hfft(x=Tensor([2, 0, 3],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([2, 0, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.426830 test begin: paddle.fft.hfft(x=Tensor([2, 0],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([2, 0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.427633 test begin: paddle.fft.hfft(x=Tensor([2, 0],"complex128"), norm="forward", )

[torch error] paddle.fft.hfft(x=Tensor([2, 0],"complex128"), norm="forward", ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.428193 test begin: paddle.fft.hfft(x=Tensor([2, 0],"complex128"), norm="ortho", )

[torch error] paddle.fft.hfft(x=Tensor([2, 0],"complex128"), norm="ortho", ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.428709 test begin: paddle.fft.hfft(x=Tensor([2, 4, 0],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([2, 4, 0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.429188 test begin: paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.429783 test begin: paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), n=2, )

[torch error] paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.430419 test begin: paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), n=2, axis=1, )

[Pass] paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), n=2, axis=1, )
2025-03-05 15:41:46.435096 test begin: paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.436159 test begin: paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), n=2, )

[torch error] paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.437017 test begin: paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), n=2, axis=1, )

[torch error] paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.437736 test begin: paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), )

[torch error] paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.438235 test begin: paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), n=2, )

[Pass] paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), n=2, )
2025-03-05 15:41:46.442092 test begin: paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), n=2, axis=1, )

[torch error] paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.442818 test begin: paddle.fft.hfft2(x=Tensor([0, 1, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.hfft2(x=Tensor([0, 1, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.443666 test begin: paddle.fft.hfft2(x=Tensor([0, 3, 3, 3],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([0, 3, 3, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.444257 test begin: paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.448862 test begin: paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.454210 test begin: paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.457983 test begin: paddle.fft.hfft2(x=Tensor([0, 4, 5],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([0, 4, 5],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.458779 test begin: paddle.fft.hfft2(x=Tensor([0, 4],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([0, 4],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.459808 test begin: paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.460725 test begin: paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.461690 test begin: paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.462464 test begin: paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.465503 test begin: paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.469677 test begin: paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.472766 test begin: paddle.fft.hfft2(x=Tensor([3, 0, 2],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.hfft2(x=Tensor([3, 0, 2],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.477007 test begin: paddle.fft.hfft2(x=Tensor([3, 0, 3, 3],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([3, 0, 3, 3],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.477875 test begin: paddle.fft.hfft2(x=Tensor([3, 0, 5],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([3, 0, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.478465 test begin: paddle.fft.hfft2(x=Tensor([3, 0],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([3, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.479023 test begin: paddle.fft.hfft2(x=Tensor([3, 1, 0],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.hfft2(x=Tensor([3, 1, 0],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.481859 test begin: paddle.fft.hfft2(x=Tensor([3, 3, 0, 3],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([3, 3, 0, 3],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.482554 test begin: paddle.fft.hfft2(x=Tensor([3, 3, 3, 0],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([3, 3, 3, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.483171 test begin: paddle.fft.hfft2(x=Tensor([3, 4, 0],"complex128"), )

[torch error] paddle.fft.hfft2(x=Tensor([3, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.483777 test begin: paddle.fft.hfftn(Tensor([0, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([0, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.484826 test begin: paddle.fft.hfftn(Tensor([0, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([0, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.485509 test begin: paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )

[Pass] paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
2025-03-05 15:41:46.488325 test begin: paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )

[Pass] paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
2025-03-05 15:41:46.490934 test begin: paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[Pass] paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
2025-03-05 15:41:46.493282 test begin: paddle.fft.hfftn(Tensor([0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.494030 test begin: paddle.fft.hfftn(Tensor([0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.494635 test begin: paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.495300 test begin: paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )

[torch error] paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.495952 test begin: paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[torch error] paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.496608 test begin: paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )

[Pass] paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
2025-03-05 15:41:46.499019 test begin: paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )

[Pass] paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
2025-03-05 15:41:46.501379 test begin: paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[Pass] paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
2025-03-05 15:41:46.505099 test begin: paddle.fft.hfftn(Tensor([3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.hfftn(Tensor([3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.507851 test begin: paddle.fft.hfftn(Tensor([3, 0, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([3, 0, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.508698 test begin: paddle.fft.hfftn(Tensor([3, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([3, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.509297 test begin: paddle.fft.hfftn(Tensor([3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.509869 test begin: paddle.fft.hfftn(Tensor([3, 1, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.hfftn(Tensor([3, 1, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.512173 test begin: paddle.fft.hfftn(Tensor([3, 3, 0, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([3, 3, 0, 3],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.512836 test begin: paddle.fft.hfftn(Tensor([3, 3, 3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([3, 3, 3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.513407 test begin: paddle.fft.hfftn(Tensor([3, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.hfftn(Tensor([3, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.513966 test begin: paddle.fft.hfftn(x=Tensor([0, 3, 1, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.hfftn(x=Tensor([0, 3, 1, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.514576 test begin: paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.518301 test begin: paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.521763 test begin: paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.525468 test begin: paddle.fft.hfftn(x=Tensor([0, 3, 4, 2],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([0, 3, 4, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.526179 test begin: paddle.fft.hfftn(x=Tensor([0, 4, 5],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([0, 4, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.526785 test begin: paddle.fft.hfftn(x=Tensor([0, 4],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([0, 4],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.527346 test begin: paddle.fft.hfftn(x=Tensor([0],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.527945 test begin: paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.528715 test begin: paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.530164 test begin: paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.531082 test begin: paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.535698 test begin: paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.539546 test begin: paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.543309 test begin: paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.544204 test begin: paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.544995 test begin: paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.545777 test begin: paddle.fft.hfftn(x=Tensor([2, 0, 1, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.hfftn(x=Tensor([2, 0, 1, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.546496 test begin: paddle.fft.hfftn(x=Tensor([2, 0, 4, 2],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([2, 0, 4, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.547102 test begin: paddle.fft.hfftn(x=Tensor([2, 3, 0, 2],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([2, 3, 0, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.547693 test begin: paddle.fft.hfftn(x=Tensor([2, 3, 0, 2],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.hfftn(x=Tensor([2, 3, 0, 2],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.551136 test begin: paddle.fft.hfftn(x=Tensor([2, 3, 1, 0],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.hfftn(x=Tensor([2, 3, 1, 0],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.554754 test begin: paddle.fft.hfftn(x=Tensor([2, 3, 4, 0],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([2, 3, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.555459 test begin: paddle.fft.hfftn(x=Tensor([3, 0, 5],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([3, 0, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.556053 test begin: paddle.fft.hfftn(x=Tensor([3, 0],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([3, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.556617 test begin: paddle.fft.hfftn(x=Tensor([3, 4, 0],"complex128"), )

[torch error] paddle.fft.hfftn(x=Tensor([3, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.557202 test begin: paddle.fft.ifft(x=Tensor([0, 3],"complex128"), norm="ortho", )

[torch error] paddle.fft.ifft(x=Tensor([0, 3],"complex128"), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.557952 test begin: paddle.fft.ifft(x=Tensor([0],"complex128"), )

[torch error] paddle.fft.ifft(x=Tensor([0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.558550 test begin: paddle.fft.ifft(x=Tensor([0],"complex128"), axis=0, )

[torch error] paddle.fft.ifft(x=Tensor([0],"complex128"), axis=0, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.559207 test begin: paddle.fft.ifft(x=Tensor([0],"complex128"), n=1, )

[Pass] paddle.fft.ifft(x=Tensor([0],"complex128"), n=1, )
2025-03-05 15:41:46.561628 test begin: paddle.fft.ifft(x=Tensor([0],"complex128"), norm="forward", )

[torch error] paddle.fft.ifft(x=Tensor([0],"complex128"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.562345 test begin: paddle.fft.ifft(x=Tensor([0],"complex128"), norm="ortho", )

[torch error] paddle.fft.ifft(x=Tensor([0],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.562960 test begin: paddle.fft.ifft(x=Tensor([2, 0],"complex128"), norm="ortho", )

[torch error] paddle.fft.ifft(x=Tensor([2, 0],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.563553 test begin: paddle.fft.ifft2(x=Tensor([0, 2, 4, 2],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([0, 2, 4, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.564276 test begin: paddle.fft.ifft2(x=Tensor([0, 2, 4],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([0, 2, 4],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.564931 test begin: paddle.fft.ifft2(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.ifft2(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.565673 test begin: paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), )

[torch error] paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.566374 test begin: paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )

[torch error] paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.567125 test begin: paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )

[torch error] paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.567865 test begin: paddle.fft.ifft2(x=Tensor([0, 4],"float64"), )

[torch error] paddle.fft.ifft2(x=Tensor([0, 4],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.568449 test begin: paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), )

[torch error] paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.569084 test begin: paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="forward", )

[torch error] paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.569732 test begin: paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )

[torch error] paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.570368 test begin: paddle.fft.ifft2(x=Tensor([2, 0, 4],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([2, 0, 4],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.570994 test begin: paddle.fft.ifft2(x=Tensor([2, 0],"float64"), )

[torch error] paddle.fft.ifft2(x=Tensor([2, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.571550 test begin: paddle.fft.ifft2(x=Tensor([2, 2, 0],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([2, 2, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.572117 test begin: paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), )

[torch error] paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.572747 test begin: paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="forward", )

[torch error] paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.573374 test begin: paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="ortho", )

[torch error] paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.574004 test begin: paddle.fft.ifft2(x=Tensor([3, 0, 2, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.ifft2(x=Tensor([3, 0, 2, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.574716 test begin: paddle.fft.ifft2(x=Tensor([3, 0, 4, 2],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([3, 0, 4, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.575342 test begin: paddle.fft.ifft2(x=Tensor([3, 2, 0, 2],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([3, 2, 0, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.575917 test begin: paddle.fft.ifft2(x=Tensor([3, 2, 4, 0],"complex128"), )

[torch error] paddle.fft.ifft2(x=Tensor([3, 2, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.576485 test begin: paddle.fft.ifft2(x=Tensor([3, 3, 0, 2],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.ifft2(x=Tensor([3, 3, 0, 2],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.579006 test begin: paddle.fft.ifft2(x=Tensor([3, 3, 2, 0],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.ifft2(x=Tensor([3, 3, 2, 0],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.581401 test begin: paddle.fft.ifftn(Tensor([0, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.582228 test begin: paddle.fft.ifftn(Tensor([0, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.582899 test begin: paddle.fft.ifftn(Tensor([0, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.583563 test begin: paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.584203 test begin: paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.584842 test begin: paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.585454 test begin: paddle.fft.ifftn(Tensor([0, 4],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([0, 4],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.586014 test begin: paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.586552 test begin: paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "forward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "forward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.587100 test begin: paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "ortho", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "ortho", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.587694 test begin: paddle.fft.ifftn(Tensor([2, 0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.588243 test begin: paddle.fft.ifftn(Tensor([2, 0],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 0],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.588803 test begin: paddle.fft.ifftn(Tensor([2, 2, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 2, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.590655 test begin: paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.591273 test begin: paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "forward", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "forward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.591888 test begin: paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "ortho", None, )

[torch error] paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "ortho", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.592446 test begin: paddle.fft.ifftn(Tensor([3, 0, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([3, 0, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.593113 test begin: paddle.fft.ifftn(Tensor([3, 0, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([3, 0, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.593743 test begin: paddle.fft.ifftn(Tensor([3, 2, 0, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([3, 2, 0, 2],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.594294 test begin: paddle.fft.ifftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ifftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.594844 test begin: paddle.fft.ifftn(Tensor([3, 3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.ifftn(Tensor([3, 3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.598198 test begin: paddle.fft.ifftn(Tensor([3, 3, 2, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.ifftn(Tensor([3, 3, 2, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.601642 test begin: paddle.fft.ifftn(x=Tensor([0, 4, 2],"float64"), )

[torch error] paddle.fft.ifftn(x=Tensor([0, 4, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.602196 test begin: paddle.fft.ifftn(x=Tensor([0, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[Pass] paddle.fft.ifftn(x=Tensor([0, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
2025-03-05 15:41:46.605262 test begin: paddle.fft.ifftn(x=Tensor([0, 4, 6],"float64"), s=list[1,], )

[torch error] paddle.fft.ifftn(x=Tensor([0, 4, 6],"float64"), s=list[1,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.606451 test begin: paddle.fft.ifftn(x=Tensor([0, 4, 6],"float64"), s=list[2,4,], )

[torch error] paddle.fft.ifftn(x=Tensor([0, 4, 6],"float64"), s=list[2,4,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.607616 test begin: paddle.fft.ifftn(x=Tensor([0, 4],"complex128"), norm="forward", )

[torch error] paddle.fft.ifftn(x=Tensor([0, 4],"complex128"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.608264 test begin: paddle.fft.ifftn(x=Tensor([0, 4],"complex128"), norm="ortho", )

[torch error] paddle.fft.ifftn(x=Tensor([0, 4],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.609097 test begin: paddle.fft.ifftn(x=Tensor([0, 4],"float32"), )

[torch error] paddle.fft.ifftn(x=Tensor([0, 4],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.609696 test begin: paddle.fft.ifftn(x=Tensor([2, 0, 2],"float64"), )

[torch error] paddle.fft.ifftn(x=Tensor([2, 0, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.610474 test begin: paddle.fft.ifftn(x=Tensor([2, 4, 0],"float64"), )

[torch error] paddle.fft.ifftn(x=Tensor([2, 4, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.611208 test begin: paddle.fft.ifftn(x=Tensor([3, 0],"complex128"), norm="forward", )

[torch error] paddle.fft.ifftn(x=Tensor([3, 0],"complex128"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.611762 test begin: paddle.fft.ifftn(x=Tensor([3, 0],"complex128"), norm="ortho", )

[torch error] paddle.fft.ifftn(x=Tensor([3, 0],"complex128"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.612805 test begin: paddle.fft.ifftn(x=Tensor([4, 0, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[Pass] paddle.fft.ifftn(x=Tensor([4, 0, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
2025-03-05 15:41:46.617093 test begin: paddle.fft.ifftn(x=Tensor([4, 0, 6],"float64"), s=list[1,], )

[torch error] paddle.fft.ifftn(x=Tensor([4, 0, 6],"float64"), s=list[1,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.617893 test begin: paddle.fft.ifftn(x=Tensor([4, 0, 6],"float64"), s=list[2,4,], )

[Pass] paddle.fft.ifftn(x=Tensor([4, 0, 6],"float64"), s=list[2,4,], )
2025-03-05 15:41:46.620560 test begin: paddle.fft.ifftn(x=Tensor([4, 0],"float32"), )

[torch error] paddle.fft.ifftn(x=Tensor([4, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.621154 test begin: paddle.fft.ifftn(x=Tensor([4, 4, 0, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[torch error] paddle.fft.ifftn(x=Tensor([4, 4, 0, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.621839 test begin: paddle.fft.ifftn(x=Tensor([4, 4, 0],"float64"), s=list[1,], )

[Pass] paddle.fft.ifftn(x=Tensor([4, 4, 0],"float64"), s=list[1,], )
2025-03-05 15:41:46.624154 test begin: paddle.fft.ifftn(x=Tensor([4, 4, 0],"float64"), s=list[2,4,], )

[Pass] paddle.fft.ifftn(x=Tensor([4, 4, 0],"float64"), s=list[2,4,], )
2025-03-05 15:41:46.628066 test begin: paddle.fft.ifftn(x=Tensor([4, 4, 6, 0],"float64"), s=list[2,4,], axes=tuple(0,1,), )

[torch error] paddle.fft.ifftn(x=Tensor([4, 4, 6, 0],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.629120 test begin: paddle.fft.ifftshift(x=Tensor([0, 4, 2],"float64"), )

[Pass] paddle.fft.ifftshift(x=Tensor([0, 4, 2],"float64"), )
2025-03-05 15:41:46.631805 test begin: paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), )

[Pass] paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), )
2025-03-05 15:41:46.633969 test begin: paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )

[Pass] paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )
2025-03-05 15:41:46.635731 test begin: paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(0,3,), )

[Pass] paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
2025-03-05 15:41:46.637221 test begin: paddle.fft.ifftshift(x=Tensor([0],"float32"), )

[Pass] paddle.fft.ifftshift(x=Tensor([0],"float32"), )
2025-03-05 15:41:46.638413 test begin: paddle.fft.ifftshift(x=Tensor([2, 0, 2],"float64"), )

[Pass] paddle.fft.ifftshift(x=Tensor([2, 0, 2],"float64"), )
2025-03-05 15:41:46.639571 test begin: paddle.fft.ifftshift(x=Tensor([2, 4, 0],"float64"), )

[Pass] paddle.fft.ifftshift(x=Tensor([2, 4, 0],"float64"), )
2025-03-05 15:41:46.640740 test begin: paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), )
2025-03-05 15:41:46.641923 test begin: paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )
2025-03-05 15:41:46.643154 test begin: paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(0,3,), )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(0,3,), )
2025-03-05 15:41:46.644736 test begin: paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), )
2025-03-05 15:41:46.646009 test begin: paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )
2025-03-05 15:41:46.648139 test begin: paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(0,3,), )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(0,3,), )
2025-03-05 15:41:46.649829 test begin: paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), )
2025-03-05 15:41:46.651178 test begin: paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )
2025-03-05 15:41:46.652902 test begin: paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(0,3,), )

[Pass] paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(0,3,), )
2025-03-05 15:41:46.654428 test begin: paddle.fft.ihfft(x=Tensor([0, 3, 3],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([0, 3, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.655715 test begin: paddle.fft.ihfft(x=Tensor([0, 3],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([0, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.656971 test begin: paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.657981 test begin: paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), n=2, )

[torch error] paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.658787 test begin: paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), n=2, axis=1, )

[torch error] paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.659992 test begin: paddle.fft.ihfft(x=Tensor([0, 4],"float64"), norm="forward", )

[torch error] paddle.fft.ihfft(x=Tensor([0, 4],"float64"), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.663853 test begin: paddle.fft.ihfft(x=Tensor([0, 4],"float64"), norm="ortho", )

[torch error] paddle.fft.ihfft(x=Tensor([0, 4],"float64"), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.664575 test begin: paddle.fft.ihfft(x=Tensor([0],"float32"), )

[torch error] paddle.fft.ihfft(x=Tensor([0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.665185 test begin: paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.666818 test begin: paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), n=2, )

[torch error] paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.667500 test begin: paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), n=2, axis=1, )

[Pass] paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), n=2, axis=1, )
2025-03-05 15:41:46.673989 test begin: paddle.fft.ihfft(x=Tensor([2, 0],"float64"), norm="forward", )

[torch error] paddle.fft.ihfft(x=Tensor([2, 0],"float64"), norm="forward", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.674721 test begin: paddle.fft.ihfft(x=Tensor([2, 0],"float64"), norm="ortho", )

[torch error] paddle.fft.ihfft(x=Tensor([2, 0],"float64"), norm="ortho", ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.675249 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.675845 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), n=2, )

[torch error] paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.676445 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), n=2, axis=1, )

[torch error] paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.677053 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.677594 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), n=2, )

[Pass] paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), n=2, )
2025-03-05 15:41:46.683517 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), n=2, axis=1, )

[torch error] paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.684292 test begin: paddle.fft.ihfft(x=Tensor([4, 0, 3],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([4, 0, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.685175 test begin: paddle.fft.ihfft(x=Tensor([4, 0],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([4, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.685722 test begin: paddle.fft.ihfft(x=Tensor([4, 3, 0],"float64"), )

[torch error] paddle.fft.ihfft(x=Tensor([4, 3, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.686394 test begin: paddle.fft.ihfft2(x=Tensor([0, 3, 3, 3],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([0, 3, 3, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.687316 test begin: paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), )

[torch error] paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.688066 test begin: paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.695314 test begin: paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.700943 test begin: paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.704616 test begin: paddle.fft.ihfft2(x=Tensor([0, 4, 5],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([0, 4, 5],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.705610 test begin: paddle.fft.ihfft2(x=Tensor([0, 4],"float32"), )

[torch error] paddle.fft.ihfft2(x=Tensor([0, 4],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.706378 test begin: paddle.fft.ihfft2(x=Tensor([3, 0, 5],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([3, 0, 5],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.707053 test begin: paddle.fft.ihfft2(x=Tensor([3, 0],"float32"), )

[torch error] paddle.fft.ihfft2(x=Tensor([3, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.707697 test begin: paddle.fft.ihfft2(x=Tensor([3, 4, 0],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([3, 4, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.708290 test begin: paddle.fft.ihfft2(x=Tensor([4, 0, 3, 3],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([4, 0, 3, 3],"float64"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.708951 test begin: paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), )

[Pass] paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), )
2025-03-05 15:41:46.714101 test begin: paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.715067 test begin: paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.715939 test begin: paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.716658 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 0, 3],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([4, 3, 0, 3],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.717171 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), )

[Pass] paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), )
2025-03-05 15:41:46.720328 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.723508 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.726851 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.730460 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 3, 0],"float64"), )

[torch error] paddle.fft.ihfft2(x=Tensor([4, 3, 3, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.731294 test begin: paddle.fft.ihfftn(Tensor([0, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([0, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.732244 test begin: paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.733166 test begin: paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )

[Pass] paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
2025-03-05 15:41:46.737188 test begin: paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )

[Pass] paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
2025-03-05 15:41:46.741236 test begin: paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[Pass] paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
2025-03-05 15:41:46.744664 test begin: paddle.fft.ihfftn(Tensor([0, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([0, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.745490 test begin: paddle.fft.ihfftn(Tensor([0, 4],"float32"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([0, 4],"float32"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.746208 test begin: paddle.fft.ihfftn(Tensor([3, 0, 5],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([3, 0, 5],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.747607 test begin: paddle.fft.ihfftn(Tensor([3, 0],"float32"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([3, 0],"float32"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.748546 test begin: paddle.fft.ihfftn(Tensor([3, 4, 0],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([3, 4, 0],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.749718 test begin: paddle.fft.ihfftn(Tensor([4, 0, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([4, 0, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.750805 test begin: paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.755198 test begin: paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.756075 test begin: paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )

[torch error] paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.757130 test begin: paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[torch error] paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.757935 test begin: paddle.fft.ihfftn(Tensor([4, 3, 0, 3],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([4, 3, 0, 3],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.759020 test begin: paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.762839 test begin: paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )

[Pass] paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
2025-03-05 15:41:46.766605 test begin: paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )

[Pass] paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
2025-03-05 15:41:46.770027 test begin: paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[Pass] paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
2025-03-05 15:41:46.774077 test begin: paddle.fft.ihfftn(Tensor([4, 3, 3, 0],"float64"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.ihfftn(Tensor([4, 3, 3, 0],"float64"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.774982 test begin: paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), )

[torch error] paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.775808 test begin: paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.778791 test begin: paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.781182 test begin: paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.784916 test begin: paddle.fft.ihfftn(x=Tensor([0, 3, 5, 2],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([0, 3, 5, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.785694 test begin: paddle.fft.ihfftn(x=Tensor([0, 3, 5],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([0, 3, 5],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.786351 test begin: paddle.fft.ihfftn(x=Tensor([0, 3],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([0, 3],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.786868 test begin: paddle.fft.ihfftn(x=Tensor([0],"float32"), )

[torch error] paddle.fft.ihfftn(x=Tensor([0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.787340 test begin: paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), )

[Pass] paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), )
2025-03-05 15:41:46.790079 test begin: paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.790926 test begin: paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.791824 test begin: paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.792532 test begin: paddle.fft.ihfftn(x=Tensor([4, 0, 5, 2],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 0, 5, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.798505 test begin: paddle.fft.ihfftn(x=Tensor([4, 0, 5],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 0, 5],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.799330 test begin: paddle.fft.ihfftn(x=Tensor([4, 0],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.800060 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 0, 2],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 3, 0, 2],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.801009 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.801779 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), )

[Pass] paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), )
2025-03-05 15:41:46.805284 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.809394 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.815046 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.818980 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 5, 0],"float64"), )

[torch error] paddle.fft.ihfftn(x=Tensor([4, 3, 5, 0],"float64"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.819679 test begin: paddle.fft.irfft(x=Tensor([0, 2, 4],"complex128"), n=2, axis=1, )

[torch error] paddle.fft.irfft(x=Tensor([0, 2, 4],"complex128"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.821284 test begin: paddle.fft.irfft(x=Tensor([0, 4, 2],"complex128"), n=2, )

[torch error] paddle.fft.irfft(x=Tensor([0, 4, 2],"complex128"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.822146 test begin: paddle.fft.irfft(x=Tensor([0, 4, 4, 2],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([0, 4, 4, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.823495 test begin: paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.824236 test begin: paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), norm="forward", )

[torch error] paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.824883 test begin: paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), norm="ortho", )

[torch error] paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.825492 test begin: paddle.fft.irfft(x=Tensor([0, 4],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([0, 4],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.826464 test begin: paddle.fft.irfft(x=Tensor([0],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.827099 test begin: paddle.fft.irfft(x=Tensor([3, 0, 4, 2],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([3, 0, 4, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.828095 test begin: paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.829432 test begin: paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), n=2, axis=1, )

[Pass] paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), n=2, axis=1, )
2025-03-05 15:41:46.834969 test begin: paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), norm="forward", )

[torch error] paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.835931 test begin: paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), norm="ortho", )

[torch error] paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.836788 test begin: paddle.fft.irfft(x=Tensor([3, 0],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([3, 0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.837498 test begin: paddle.fft.irfft(x=Tensor([3, 2, 0],"complex128"), n=2, axis=1, )

[torch error] paddle.fft.irfft(x=Tensor([3, 2, 0],"complex128"), n=2, axis=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.838421 test begin: paddle.fft.irfft(x=Tensor([3, 4, 0, 2],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([3, 4, 0, 2],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.839204 test begin: paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.839903 test begin: paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), norm="forward", )

[torch error] paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), norm="forward", ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.840631 test begin: paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), norm="ortho", )

[torch error] paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), norm="ortho", ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.841301 test begin: paddle.fft.irfft(x=Tensor([3, 4, 4, 0],"complex128"), )

[torch error] paddle.fft.irfft(x=Tensor([3, 4, 4, 0],"complex128"), ) 
 Invalid number of data points (-2) specified
2025-03-05 15:41:46.841865 test begin: paddle.fft.irfft(x=Tensor([4, 0, 2],"complex128"), n=2, )

[torch error] paddle.fft.irfft(x=Tensor([4, 0, 2],"complex128"), n=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.842594 test begin: paddle.fft.irfft(x=Tensor([4, 4, 0],"complex128"), n=2, )

[Pass] paddle.fft.irfft(x=Tensor([4, 4, 0],"complex128"), n=2, )
2025-03-05 15:41:46.847806 test begin: paddle.fft.irfft2(x=Tensor([0, 1, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.irfft2(x=Tensor([0, 1, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.848793 test begin: paddle.fft.irfft2(x=Tensor([0, 2, 4, 5],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([0, 2, 4, 5],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.849662 test begin: paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.854218 test begin: paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.856793 test begin: paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.860690 test begin: paddle.fft.irfft2(x=Tensor([0, 4, 5],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([0, 4, 5],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.861812 test begin: paddle.fft.irfft2(x=Tensor([0, 4],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([0, 4],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.862480 test begin: paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.863295 test begin: paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.864372 test begin: paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.865437 test begin: paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.868344 test begin: paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.876406 test begin: paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.882236 test begin: paddle.fft.irfft2(x=Tensor([3, 0, 2],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.irfft2(x=Tensor([3, 0, 2],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.888168 test begin: paddle.fft.irfft2(x=Tensor([3, 0, 4, 5],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([3, 0, 4, 5],"complex128"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.889297 test begin: paddle.fft.irfft2(x=Tensor([3, 0, 5],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([3, 0, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.889958 test begin: paddle.fft.irfft2(x=Tensor([3, 0],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([3, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.891013 test begin: paddle.fft.irfft2(x=Tensor([3, 1, 0],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.irfft2(x=Tensor([3, 1, 0],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.895742 test begin: paddle.fft.irfft2(x=Tensor([3, 2, 0, 5],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([3, 2, 0, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.896633 test begin: paddle.fft.irfft2(x=Tensor([3, 2, 4, 0],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([3, 2, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.897361 test begin: paddle.fft.irfft2(x=Tensor([3, 4, 0],"complex128"), )

[torch error] paddle.fft.irfft2(x=Tensor([3, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.898328 test begin: paddle.fft.irfftn(Tensor([0, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([0, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.899477 test begin: paddle.fft.irfftn(Tensor([0, 2, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([0, 2, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.900458 test begin: paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )

[Pass] paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
2025-03-05 15:41:46.904389 test begin: paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )

[Pass] paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
2025-03-05 15:41:46.911912 test begin: paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[Pass] paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
2025-03-05 15:41:46.914797 test begin: paddle.fft.irfftn(Tensor([0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.915637 test begin: paddle.fft.irfftn(Tensor([0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.916263 test begin: paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.918048 test begin: paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )

[torch error] paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.919193 test begin: paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[torch error] paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.920056 test begin: paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )

[Pass] paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
2025-03-05 15:41:46.922921 test begin: paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )

[Pass] paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
2025-03-05 15:41:46.925335 test begin: paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )

[Pass] paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
2025-03-05 15:41:46.928983 test begin: paddle.fft.irfftn(Tensor([3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.irfftn(Tensor([3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.931570 test begin: paddle.fft.irfftn(Tensor([3, 0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([3, 0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.932624 test begin: paddle.fft.irfftn(Tensor([3, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([3, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.933330 test begin: paddle.fft.irfftn(Tensor([3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.934255 test begin: paddle.fft.irfftn(Tensor([3, 1, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.irfftn(Tensor([3, 1, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:46.937692 test begin: paddle.fft.irfftn(Tensor([3, 2, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([3, 2, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.938473 test begin: paddle.fft.irfftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.939133 test begin: paddle.fft.irfftn(Tensor([3, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.irfftn(Tensor([3, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.939759 test begin: paddle.fft.irfftn(x=Tensor([0, 3, 1, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.irfftn(x=Tensor([0, 3, 1, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.940871 test begin: paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.944303 test begin: paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.947096 test begin: paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.949600 test begin: paddle.fft.irfftn(x=Tensor([0, 3, 4, 2],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([0, 3, 4, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.950190 test begin: paddle.fft.irfftn(x=Tensor([0, 4, 5],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([0, 4, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.951040 test begin: paddle.fft.irfftn(x=Tensor([0, 4],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([0, 4],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.951780 test begin: paddle.fft.irfftn(x=Tensor([0],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.952621 test begin: paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.953563 test begin: paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.954502 test begin: paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.955385 test begin: paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[Pass] paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
2025-03-05 15:41:46.959503 test begin: paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[Pass] paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
2025-03-05 15:41:46.963576 test begin: paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[Pass] paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
2025-03-05 15:41:46.967095 test begin: paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )

[torch error] paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.968486 test begin: paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )

[torch error] paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.969243 test begin: paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )

[torch error] paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.970087 test begin: paddle.fft.irfftn(x=Tensor([2, 0, 1, 2],"complex128"), s=tuple(1,2,), )

[torch error] paddle.fft.irfftn(x=Tensor([2, 0, 1, 2],"complex128"), s=tuple(1,2,), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.971172 test begin: paddle.fft.irfftn(x=Tensor([2, 0, 4, 2],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([2, 0, 4, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.971820 test begin: paddle.fft.irfftn(x=Tensor([2, 3, 0, 2],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([2, 3, 0, 2],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.972690 test begin: paddle.fft.irfftn(x=Tensor([2, 3, 0, 2],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.irfftn(x=Tensor([2, 3, 0, 2],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.976428 test begin: paddle.fft.irfftn(x=Tensor([2, 3, 1, 0],"complex128"), s=tuple(1,2,), )

[Pass] paddle.fft.irfftn(x=Tensor([2, 3, 1, 0],"complex128"), s=tuple(1,2,), )
2025-03-05 15:41:46.980534 test begin: paddle.fft.irfftn(x=Tensor([2, 3, 4, 0],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([2, 3, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.981308 test begin: paddle.fft.irfftn(x=Tensor([3, 0, 5],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([3, 0, 5],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.982007 test begin: paddle.fft.irfftn(x=Tensor([3, 0],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([3, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.982728 test begin: paddle.fft.irfftn(x=Tensor([3, 4, 0],"complex128"), )

[torch error] paddle.fft.irfftn(x=Tensor([3, 4, 0],"complex128"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.983904 test begin: paddle.fft.rfft(x=Tensor([0, 2, 2],"float32"), )

[torch error] paddle.fft.rfft(x=Tensor([0, 2, 2],"float32"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.984718 test begin: paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, )

[torch error] paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.985792 test begin: paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="backward", )

[torch error] paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="backward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.987005 test begin: paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="forward", )

[torch error] paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.987980 test begin: paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="ortho", )

[torch error] paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.988736 test begin: paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="ortho", axis=2, )

[torch error] paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="ortho", axis=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.989657 test begin: paddle.fft.rfft(x=Tensor([2, 0, 2],"float32"), )

[torch error] paddle.fft.rfft(x=Tensor([2, 0, 2],"float32"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.990853 test begin: paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, )

[torch error] paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.991750 test begin: paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="backward", )

[torch error] paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="backward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.992701 test begin: paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="forward", )

[torch error] paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.993452 test begin: paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="ortho", )

[torch error] paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.994392 test begin: paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="ortho", axis=2, )

[torch error] paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="ortho", axis=2, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:46.995168 test begin: paddle.fft.rfft(x=Tensor([2, 2, 0],"float32"), )

[torch error] paddle.fft.rfft(x=Tensor([2, 2, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:46.995907 test begin: paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, )

[Pass] paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, )
2025-03-05 15:41:47.001452 test begin: paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="backward", )

[Pass] paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="backward", )
2025-03-05 15:41:47.005426 test begin: paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="forward", )

[Pass] paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="forward", )
2025-03-05 15:41:47.008399 test begin: paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="ortho", )

[Pass] paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="ortho", )
2025-03-05 15:41:47.011469 test begin: paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="ortho", axis=2, )

[Pass] paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="ortho", axis=2, )
2025-03-05 15:41:47.019275 test begin: paddle.fft.rfft2(x=Tensor([0, 2, 2],"float32"), )

[torch error] paddle.fft.rfft2(x=Tensor([0, 2, 2],"float32"), ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.020592 test begin: paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], )

[torch error] paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.023676 test begin: paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="backward", )

[torch error] paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="backward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.025669 test begin: paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="forward", )

[torch error] paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.028065 test begin: paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="ortho", )

[torch error] paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.029137 test begin: paddle.fft.rfft2(x=Tensor([2, 0, 2],"float32"), )

[torch error] paddle.fft.rfft2(x=Tensor([2, 0, 2],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.029841 test begin: paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], )

[Pass] paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], )
2025-03-05 15:41:47.034110 test begin: paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="backward", )

[Pass] paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="backward", )
2025-03-05 15:41:47.037276 test begin: paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="forward", )

[Pass] paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="forward", )
2025-03-05 15:41:47.040499 test begin: paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="ortho", )

[Pass] paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="ortho", )
2025-03-05 15:41:47.044188 test begin: paddle.fft.rfft2(x=Tensor([2, 2, 0],"float32"), )

[torch error] paddle.fft.rfft2(x=Tensor([2, 2, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.044967 test begin: paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], )

[Pass] paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], )
2025-03-05 15:41:47.048035 test begin: paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="backward", )

[Pass] paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="backward", )
2025-03-05 15:41:47.050946 test begin: paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="forward", )

[Pass] paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="forward", )
2025-03-05 15:41:47.053508 test begin: paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="ortho", )

[Pass] paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="ortho", )
2025-03-05 15:41:47.056854 test begin: paddle.fft.rfftn(Tensor([0, 2, 2],"float32"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.rfftn(Tensor([0, 2, 2],"float32"), None, tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.057842 test begin: paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], None, "ortho", None, )

[torch error] paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], None, "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.058652 test begin: paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.059677 test begin: paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )

[torch error] paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.060443 test begin: paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )

[torch error] paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.061522 test begin: paddle.fft.rfftn(Tensor([2, 0, 2],"float32"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.rfftn(Tensor([2, 0, 2],"float32"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.062217 test begin: paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], None, "ortho", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], None, "ortho", None, )
2025-03-05 15:41:47.066365 test begin: paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:47.075992 test begin: paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
2025-03-05 15:41:47.081623 test begin: paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
2025-03-05 15:41:47.088843 test begin: paddle.fft.rfftn(Tensor([2, 2, 0],"float32"), None, tuple(-2,-1,), "backward", None, )

[torch error] paddle.fft.rfftn(Tensor([2, 2, 0],"float32"), None, tuple(-2,-1,), "backward", None, ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.089702 test begin: paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], None, "ortho", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], None, "ortho", None, )
2025-03-05 15:41:47.096160 test begin: paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
2025-03-05 15:41:47.103192 test begin: paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
2025-03-05 15:41:47.109057 test begin: paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )

[Pass] paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
2025-03-05 15:41:47.111616 test begin: paddle.fft.rfftn(x=Tensor([0, 2, 2],"float32"), )

[torch error] paddle.fft.rfftn(x=Tensor([0, 2, 2],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.112598 test begin: paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], )

[torch error] paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.113363 test begin: paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )

[Pass] paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )
2025-03-05 15:41:47.117063 test begin: paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="backward", )

[torch error] paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="backward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.118274 test begin: paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="forward", )

[torch error] paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.119485 test begin: paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="ortho", )

[torch error] paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.120357 test begin: paddle.fft.rfftn(x=Tensor([2, 0, 2],"float32"), )

[torch error] paddle.fft.rfftn(x=Tensor([2, 0, 2],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.121149 test begin: paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], )

[torch error] paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.121943 test begin: paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )

[torch error] paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.122879 test begin: paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="backward", )

[torch error] paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="backward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.123805 test begin: paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="forward", )

[torch error] paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="forward", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.124948 test begin: paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="ortho", )

[torch error] paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.125875 test begin: paddle.fft.rfftn(x=Tensor([2, 2, 0],"float32"), )

[torch error] paddle.fft.rfftn(x=Tensor([2, 2, 0],"float32"), ) 
 Invalid number of data points (0) specified
2025-03-05 15:41:47.126734 test begin: paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], )

[Pass] paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], )
2025-03-05 15:41:47.129447 test begin: paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], axes=list[0,], norm="ortho", )

[torch error] paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], axes=list[0,], norm="ortho", ) 
 cuFFT error: CUFFT_INVALID_SIZE
2025-03-05 15:41:47.130453 test begin: paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="backward", )

[Pass] paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="backward", )
2025-03-05 15:41:47.135704 test begin: paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="forward", )

[Pass] paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="forward", )
2025-03-05 15:41:47.139382 test begin: paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="ortho", )

[Pass] paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="ortho", )
2025-03-05 15:41:47.143921 test begin: paddle.flatten(Tensor([0, 1, 16, 12],"float32"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 1, 16, 12],"float32"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.145986 test begin: paddle.flatten(Tensor([0, 10, 7, 1],"float32"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([0, 10, 7, 1],"float32"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.147340 test begin: paddle.flatten(Tensor([0, 100, 120],"float64"), 1, 2, )

[Pass] paddle.flatten(Tensor([0, 100, 120],"float64"), 1, 2, )
2025-03-05 15:41:47.151419 test begin: paddle.flatten(Tensor([0, 1024, 1, 1],"float32"), 1, )

[Pass] paddle.flatten(Tensor([0, 1024, 1, 1],"float32"), 1, )
2025-03-05 15:41:47.153059 test begin: paddle.flatten(Tensor([0, 1024, 1, 40],"float16"), start_axis=2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 1024, 1, 40],"float16"), start_axis=2, stop_axis=-1, )
2025-03-05 15:41:47.155233 test begin: paddle.flatten(Tensor([0, 1024, 1],"float32"), 1, )

[Pass] paddle.flatten(Tensor([0, 1024, 1],"float32"), 1, )
2025-03-05 15:41:47.156821 test begin: paddle.flatten(Tensor([0, 16, 5, 5],"float32"), 1, -1, )

[Pass] paddle.flatten(Tensor([0, 16, 5, 5],"float32"), 1, -1, )
2025-03-05 15:41:47.158418 test begin: paddle.flatten(Tensor([0, 2, 26, 26],"float32"), start_axis=1, )

[Pass] paddle.flatten(Tensor([0, 2, 26, 26],"float32"), start_axis=1, )
2025-03-05 15:41:47.160448 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-1, stop_axis=-1, )
2025-03-05 15:41:47.162384 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )
2025-03-05 15:41:47.164116 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=1, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=1, )
2025-03-05 15:41:47.165716 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=-1, )
2025-03-05 15:41:47.167387 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=1, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=1, )
2025-03-05 15:41:47.169083 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.171008 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.172299 test begin: paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.174361 test begin: paddle.flatten(Tensor([0, 2, 4, 4, 5],"float64"), )

[Pass] paddle.flatten(Tensor([0, 2, 4, 4, 5],"float64"), )
2025-03-05 15:41:47.175661 test begin: paddle.flatten(Tensor([0, 2, 4, 5],"float64"), )

[Pass] paddle.flatten(Tensor([0, 2, 4, 5],"float64"), )
2025-03-05 15:41:47.177779 test begin: paddle.flatten(Tensor([0, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.179694 test begin: paddle.flatten(Tensor([0, 3, 4],"float64"), start_axis=-2, stop_axis=1, )

[Pass] paddle.flatten(Tensor([0, 3, 4],"float64"), start_axis=-2, stop_axis=1, )
2025-03-05 15:41:47.181457 test begin: paddle.flatten(Tensor([0, 512],"float16"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 512],"float16"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.183385 test begin: paddle.flatten(Tensor([0, 6, 3, 4, 2, 5],"float64"), )

[Pass] paddle.flatten(Tensor([0, 6, 3, 4, 2, 5],"float64"), )
2025-03-05 15:41:47.185360 test begin: paddle.flatten(Tensor([0, 768, 28, 28],"float32"), 2, )

[Pass] paddle.flatten(Tensor([0, 768, 28, 28],"float32"), 2, )
2025-03-05 15:41:47.187066 test begin: paddle.flatten(Tensor([0, 784],"float32"), )

[Pass] paddle.flatten(Tensor([0, 784],"float32"), )
2025-03-05 15:41:47.188973 test begin: paddle.flatten(Tensor([0, 8, 14, 12],"float32"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([0, 8, 14, 12],"float32"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.191209 test begin: paddle.flatten(Tensor([0, 8, 7, 7],"float32"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([0, 8, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.192890 test begin: paddle.flatten(Tensor([1, 0, 1, 1],"float32"), 1, )

[Pass] paddle.flatten(Tensor([1, 0, 1, 1],"float32"), 1, )
2025-03-05 15:41:47.194406 test begin: paddle.flatten(Tensor([1, 0, 14, 12],"float32"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([1, 0, 14, 12],"float32"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.195729 test begin: paddle.flatten(Tensor([1, 0, 28, 28],"float32"), 2, )

[Pass] paddle.flatten(Tensor([1, 0, 28, 28],"float32"), 2, )
2025-03-05 15:41:47.197261 test begin: paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=-3, stop_axis=-3, )

[Pass] paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=-3, stop_axis=-3, )
2025-03-05 15:41:47.199054 test begin: paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=0, stop_axis=1, )

[Pass] paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=0, stop_axis=1, )
2025-03-05 15:41:47.200731 test begin: paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.202346 test begin: paddle.flatten(Tensor([1, 0, 7, 7],"float32"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([1, 0, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.203977 test begin: paddle.flatten(Tensor([1, 1024, 0, 1],"float32"), 1, )

[Pass] paddle.flatten(Tensor([1, 1024, 0, 1],"float32"), 1, )
2025-03-05 15:41:47.206592 test begin: paddle.flatten(Tensor([1, 1024, 1, 0],"float32"), 1, )

[Pass] paddle.flatten(Tensor([1, 1024, 1, 0],"float32"), 1, )
2025-03-05 15:41:47.208552 test begin: paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=-3, stop_axis=-3, )

[Pass] paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=-3, stop_axis=-3, )
2025-03-05 15:41:47.210402 test begin: paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=0, stop_axis=1, )

[Pass] paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=0, stop_axis=1, )
2025-03-05 15:41:47.212328 test begin: paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.214500 test begin: paddle.flatten(Tensor([1, 768, 0, 28],"float32"), 2, )

[Pass] paddle.flatten(Tensor([1, 768, 0, 28],"float32"), 2, )
2025-03-05 15:41:47.216140 test begin: paddle.flatten(Tensor([1, 768, 28, 0],"float32"), 2, )

[Pass] paddle.flatten(Tensor([1, 768, 28, 0],"float32"), 2, )
2025-03-05 15:41:47.218199 test begin: paddle.flatten(Tensor([1, 8, 0, 12],"float32"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([1, 8, 0, 12],"float32"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.220410 test begin: paddle.flatten(Tensor([1, 8, 0, 7],"float32"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([1, 8, 0, 7],"float32"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.221940 test begin: paddle.flatten(Tensor([1, 8, 14, 0],"float32"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(Tensor([1, 8, 14, 0],"float32"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.223698 test begin: paddle.flatten(Tensor([1, 8, 7, 0],"float32"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([1, 8, 7, 0],"float32"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.226026 test begin: paddle.flatten(Tensor([1000, 0],"float32"), )

[Pass] paddle.flatten(Tensor([1000, 0],"float32"), )
2025-03-05 15:41:47.227847 test begin: paddle.flatten(Tensor([12, 0, 1],"float32"), 1, )

[Pass] paddle.flatten(Tensor([12, 0, 1],"float32"), 1, )
2025-03-05 15:41:47.229640 test begin: paddle.flatten(Tensor([12, 1024, 0],"float32"), 1, )

[Pass] paddle.flatten(Tensor([12, 1024, 0],"float32"), 1, )
2025-03-05 15:41:47.231628 test begin: paddle.flatten(Tensor([128, 0, 1, 40],"float16"), start_axis=2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([128, 0, 1, 40],"float16"), start_axis=2, stop_axis=-1, )
2025-03-05 15:41:47.233846 test begin: paddle.flatten(Tensor([128, 0],"float16"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([128, 0],"float16"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.236121 test begin: paddle.flatten(Tensor([128, 1024, 0, 40],"float16"), start_axis=2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([128, 1024, 0, 40],"float16"), start_axis=2, stop_axis=-1, )
2025-03-05 15:41:47.238161 test begin: paddle.flatten(Tensor([128, 1024, 1, 0],"float16"), start_axis=2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([128, 1024, 1, 0],"float16"), start_axis=2, stop_axis=-1, )
2025-03-05 15:41:47.240227 test begin: paddle.flatten(Tensor([13, 0, 16, 12],"float32"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([13, 0, 16, 12],"float32"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.241911 test begin: paddle.flatten(Tensor([13, 1, 0, 12],"float32"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([13, 1, 0, 12],"float32"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.243667 test begin: paddle.flatten(Tensor([13, 1, 16, 0],"float32"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([13, 1, 16, 0],"float32"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.245892 test begin: paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=-1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=-1, stop_axis=-1, )
2025-03-05 15:41:47.247822 test begin: paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=-3, stop_axis=1, )

[Pass] paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=-3, stop_axis=1, )
2025-03-05 15:41:47.249375 test begin: paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=-1, )
2025-03-05 15:41:47.250944 test begin: paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.252916 test begin: paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.255064 test begin: paddle.flatten(Tensor([2, 0, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 0, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.256701 test begin: paddle.flatten(Tensor([2, 0, 4],"float64"), start_axis=-2, stop_axis=1, )

[Pass] paddle.flatten(Tensor([2, 0, 4],"float64"), start_axis=-2, stop_axis=1, )
2025-03-05 15:41:47.257951 test begin: paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=-1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=-1, stop_axis=-1, )
2025-03-05 15:41:47.259788 test begin: paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=-3, stop_axis=1, )

[Pass] paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=-3, stop_axis=1, )
2025-03-05 15:41:47.261189 test begin: paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=-1, )
2025-03-05 15:41:47.262764 test begin: paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.264108 test begin: paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=1, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=1, stop_axis=-1, )
2025-03-05 15:41:47.265708 test begin: paddle.flatten(Tensor([2, 3, 0, 5],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 3, 0, 5],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.267634 test begin: paddle.flatten(Tensor([2, 3, 0],"float64"), start_axis=-2, stop_axis=1, )

[Pass] paddle.flatten(Tensor([2, 3, 0],"float64"), start_axis=-2, stop_axis=1, )
2025-03-05 15:41:47.269031 test begin: paddle.flatten(Tensor([2, 3, 4, 0],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(Tensor([2, 3, 4, 0],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.270417 test begin: paddle.flatten(Tensor([3, 0, 120],"float64"), 1, 2, )

[Pass] paddle.flatten(Tensor([3, 0, 120],"float64"), 1, 2, )
2025-03-05 15:41:47.272751 test begin: paddle.flatten(Tensor([3, 0, 3, 4, 2, 5],"float64"), )

[Pass] paddle.flatten(Tensor([3, 0, 3, 4, 2, 5],"float64"), )
2025-03-05 15:41:47.274089 test begin: paddle.flatten(Tensor([3, 100, 0],"float64"), 1, 2, )

[Pass] paddle.flatten(Tensor([3, 100, 0],"float64"), 1, 2, )
2025-03-05 15:41:47.275936 test begin: paddle.flatten(Tensor([3, 6, 0, 4, 2, 5],"float64"), )

[Pass] paddle.flatten(Tensor([3, 6, 0, 4, 2, 5],"float64"), )
2025-03-05 15:41:47.277738 test begin: paddle.flatten(Tensor([3, 6, 3, 0, 2, 5],"float64"), )

[Pass] paddle.flatten(Tensor([3, 6, 3, 0, 2, 5],"float64"), )
2025-03-05 15:41:47.279613 test begin: paddle.flatten(Tensor([3, 6, 3, 4, 0, 5],"float64"), )

[Pass] paddle.flatten(Tensor([3, 6, 3, 4, 0, 5],"float64"), )
2025-03-05 15:41:47.281313 test begin: paddle.flatten(Tensor([3, 6, 3, 4, 2, 0],"float64"), )

[Pass] paddle.flatten(Tensor([3, 6, 3, 4, 2, 0],"float64"), )
2025-03-05 15:41:47.283246 test begin: paddle.flatten(Tensor([32, 0, 26, 26],"float32"), start_axis=1, )

[Pass] paddle.flatten(Tensor([32, 0, 26, 26],"float32"), start_axis=1, )
2025-03-05 15:41:47.285286 test begin: paddle.flatten(Tensor([32, 2, 0, 26],"float32"), start_axis=1, )

[Pass] paddle.flatten(Tensor([32, 2, 0, 26],"float32"), start_axis=1, )
2025-03-05 15:41:47.287721 test begin: paddle.flatten(Tensor([32, 2, 26, 0],"float32"), start_axis=1, )

[Pass] paddle.flatten(Tensor([32, 2, 26, 0],"float32"), start_axis=1, )
2025-03-05 15:41:47.289237 test begin: paddle.flatten(Tensor([4, 0, 4, 4, 5],"float64"), )

[Pass] paddle.flatten(Tensor([4, 0, 4, 4, 5],"float64"), )
2025-03-05 15:41:47.290653 test begin: paddle.flatten(Tensor([4, 0, 4, 5],"float64"), )

[Pass] paddle.flatten(Tensor([4, 0, 4, 5],"float64"), )
2025-03-05 15:41:47.291971 test begin: paddle.flatten(Tensor([4, 0, 7, 1],"float32"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([4, 0, 7, 1],"float32"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.293601 test begin: paddle.flatten(Tensor([4, 10, 0, 1],"float32"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([4, 10, 0, 1],"float32"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.295091 test begin: paddle.flatten(Tensor([4, 10, 7, 0],"float32"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(Tensor([4, 10, 7, 0],"float32"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.296580 test begin: paddle.flatten(Tensor([4, 2, 0, 4, 5],"float64"), )

[Pass] paddle.flatten(Tensor([4, 2, 0, 4, 5],"float64"), )
2025-03-05 15:41:47.298364 test begin: paddle.flatten(Tensor([4, 2, 0, 5],"float64"), )

[Pass] paddle.flatten(Tensor([4, 2, 0, 5],"float64"), )
2025-03-05 15:41:47.299614 test begin: paddle.flatten(Tensor([4, 2, 4, 0, 5],"float64"), )

[Pass] paddle.flatten(Tensor([4, 2, 4, 0, 5],"float64"), )
2025-03-05 15:41:47.301750 test begin: paddle.flatten(Tensor([4, 2, 4, 0],"float64"), )

[Pass] paddle.flatten(Tensor([4, 2, 4, 0],"float64"), )
2025-03-05 15:41:47.303103 test begin: paddle.flatten(Tensor([4, 2, 4, 4, 0],"float64"), )

[Pass] paddle.flatten(Tensor([4, 2, 4, 4, 0],"float64"), )
2025-03-05 15:41:47.304856 test begin: paddle.flatten(Tensor([64, 0, 5, 5],"float32"), 1, -1, )

[Pass] paddle.flatten(Tensor([64, 0, 5, 5],"float32"), 1, -1, )
2025-03-05 15:41:47.306508 test begin: paddle.flatten(Tensor([64, 16, 0, 5],"float32"), 1, -1, )

[Pass] paddle.flatten(Tensor([64, 16, 0, 5],"float32"), 1, -1, )
2025-03-05 15:41:47.308135 test begin: paddle.flatten(Tensor([64, 16, 5, 0],"float32"), 1, -1, )

[Pass] paddle.flatten(Tensor([64, 16, 5, 0],"float32"), 1, -1, )
2025-03-05 15:41:47.309757 test begin: paddle.flatten(x=Tensor([0, 1280, 1, 1],"float32"), start_axis=1, )

[Pass] paddle.flatten(x=Tensor([0, 1280, 1, 1],"float32"), start_axis=1, )
2025-03-05 15:41:47.311403 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float32"), )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float32"), )
2025-03-05 15:41:47.312936 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )
2025-03-05 15:41:47.314484 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=1, )
2025-03-05 15:41:47.316003 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, )
2025-03-05 15:41:47.317531 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=-1, )
2025-03-05 15:41:47.319075 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=1, )
2025-03-05 15:41:47.320483 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.321732 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.322888 test begin: paddle.flatten(x=Tensor([0, 2, 3],"float64"), stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([0, 2, 3],"float64"), stop_axis=-1, )
2025-03-05 15:41:47.324015 test begin: paddle.flatten(x=Tensor([0, 3, 3],"float64"), name="test_name", )

[Pass] paddle.flatten(x=Tensor([0, 3, 3],"float64"), name="test_name", )
2025-03-05 15:41:47.325734 test begin: paddle.flatten(x=Tensor([0, 3, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([0, 3, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.327710 test begin: paddle.flatten(x=Tensor([0, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([0, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.329277 test begin: paddle.flatten(x=Tensor([0, 3, 4],"float64"), start_axis=-2, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([0, 3, 4],"float64"), start_axis=-2, stop_axis=1, )
2025-03-05 15:41:47.330712 test begin: paddle.flatten(x=Tensor([0],"float64"), )

[Pass] paddle.flatten(x=Tensor([0],"float64"), )
2025-03-05 15:41:47.332010 test begin: paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=-3, stop_axis=-3, )

[Pass] paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=-3, stop_axis=-3, )
2025-03-05 15:41:47.333355 test begin: paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=0, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=0, stop_axis=1, )
2025-03-05 15:41:47.335238 test begin: paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.336787 test begin: paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=-3, stop_axis=-3, )

[Pass] paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=-3, stop_axis=-3, )
2025-03-05 15:41:47.338891 test begin: paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=0, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=0, stop_axis=1, )
2025-03-05 15:41:47.340306 test begin: paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=1, stop_axis=2, )

[Pass] paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=1, stop_axis=2, )
2025-03-05 15:41:47.341471 test begin: paddle.flatten(x=Tensor([124, 0, 1, 1],"float32"), start_axis=1, )

[Pass] paddle.flatten(x=Tensor([124, 0, 1, 1],"float32"), start_axis=1, )
2025-03-05 15:41:47.342579 test begin: paddle.flatten(x=Tensor([124, 1280, 0, 1],"float32"), start_axis=1, )

[Pass] paddle.flatten(x=Tensor([124, 1280, 0, 1],"float32"), start_axis=1, )
2025-03-05 15:41:47.344123 test begin: paddle.flatten(x=Tensor([124, 1280, 1, 0],"float32"), start_axis=1, )

[Pass] paddle.flatten(x=Tensor([124, 1280, 1, 0],"float32"), start_axis=1, )
2025-03-05 15:41:47.345684 test begin: paddle.flatten(x=Tensor([2, 0, 3],"float32"), )

[Pass] paddle.flatten(x=Tensor([2, 0, 3],"float32"), )
2025-03-05 15:41:47.347597 test begin: paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=-3, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=-3, stop_axis=1, )
2025-03-05 15:41:47.349461 test begin: paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, )

[Pass] paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, )
2025-03-05 15:41:47.351541 test begin: paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=-1, )
2025-03-05 15:41:47.353187 test begin: paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.355253 test begin: paddle.flatten(x=Tensor([2, 0, 3],"float64"), stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 0, 3],"float64"), stop_axis=-1, )
2025-03-05 15:41:47.357076 test begin: paddle.flatten(x=Tensor([2, 0, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 0, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.358833 test begin: paddle.flatten(x=Tensor([2, 0, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 0, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.360620 test begin: paddle.flatten(x=Tensor([2, 0, 4],"float64"), start_axis=-2, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([2, 0, 4],"float64"), start_axis=-2, stop_axis=1, )
2025-03-05 15:41:47.362741 test begin: paddle.flatten(x=Tensor([2, 2, 0],"float32"), )

[Pass] paddle.flatten(x=Tensor([2, 2, 0],"float32"), )
2025-03-05 15:41:47.364528 test begin: paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=-3, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=-3, stop_axis=1, )
2025-03-05 15:41:47.366741 test begin: paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, )

[Pass] paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, )
2025-03-05 15:41:47.368467 test begin: paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=-1, )
2025-03-05 15:41:47.370298 test begin: paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=2, )

[Pass] paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=2, )
2025-03-05 15:41:47.371628 test begin: paddle.flatten(x=Tensor([2, 2, 0],"float64"), stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 2, 0],"float64"), stop_axis=-1, )
2025-03-05 15:41:47.373454 test begin: paddle.flatten(x=Tensor([2, 3, 0, 5],"float64"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 3, 0, 5],"float64"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.375894 test begin: paddle.flatten(x=Tensor([2, 3, 0, 5],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 3, 0, 5],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.378088 test begin: paddle.flatten(x=Tensor([2, 3, 0],"float64"), start_axis=-2, stop_axis=1, )

[Pass] paddle.flatten(x=Tensor([2, 3, 0],"float64"), start_axis=-2, stop_axis=1, )
2025-03-05 15:41:47.380414 test begin: paddle.flatten(x=Tensor([2, 3, 4, 0],"float64"), start_axis=-2, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 3, 4, 0],"float64"), start_axis=-2, stop_axis=-1, )
2025-03-05 15:41:47.382514 test begin: paddle.flatten(x=Tensor([2, 3, 4, 0],"float64"), start_axis=-3, stop_axis=-1, )

[Pass] paddle.flatten(x=Tensor([2, 3, 4, 0],"float64"), start_axis=-3, stop_axis=-1, )
2025-03-05 15:41:47.384351 test begin: paddle.flatten(x=Tensor([3, 0, 3],"float64"), name="test_name", )

[Pass] paddle.flatten(x=Tensor([3, 0, 3],"float64"), name="test_name", )
2025-03-05 15:41:47.386401 test begin: paddle.flatten(x=Tensor([3, 3, 0],"float64"), name="test_name", )

[Pass] paddle.flatten(x=Tensor([3, 3, 0],"float64"), name="test_name", )
2025-03-05 15:41:47.388217 test begin: paddle.flip(Tensor([0, 2, 2],"float32"), list[0,1,], )

[cuda error] paddle.flip(Tensor([0, 2, 2],"float32"), list[0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.390424 test begin: paddle.flip(Tensor([0, 2],"float32"), tuple(-2,-1,), )

[cuda error] paddle.flip(Tensor([0, 2],"float32"), tuple(-2,-1,), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.392519 test begin: paddle.flip(Tensor([0, 3],"float32"), list[0,], )

[cuda error] paddle.flip(Tensor([0, 3],"float32"), list[0,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.394321 test begin: paddle.flip(Tensor([0, 4],"float32"), list[0,1,], )

[cuda error] paddle.flip(Tensor([0, 4],"float32"), list[0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.395887 test begin: paddle.flip(Tensor([0, 8, 224, 224],"float32"), axis=list[3,], )

[cuda error] paddle.flip(Tensor([0, 8, 224, 224],"float32"), axis=list[3,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.397420 test begin: paddle.flip(Tensor([0],"int32"), axis=list[0,], )

[cuda error] paddle.flip(Tensor([0],"int32"), axis=list[0,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.399084 test begin: paddle.flip(Tensor([2, 0],"float32"), list[0,], )

[cuda error] paddle.flip(Tensor([2, 0],"float32"), list[0,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.400570 test begin: paddle.flip(Tensor([2, 0],"float32"), tuple(-2,-1,), )

[cuda error] paddle.flip(Tensor([2, 0],"float32"), tuple(-2,-1,), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.401970 test begin: paddle.flip(Tensor([3, 0, 224, 224],"float32"), axis=list[3,], )

[cuda error] paddle.flip(Tensor([3, 0, 224, 224],"float32"), axis=list[3,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.403910 test begin: paddle.flip(Tensor([3, 0, 2],"float32"), list[0,1,], )

[cuda error] paddle.flip(Tensor([3, 0, 2],"float32"), list[0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.405220 test begin: paddle.flip(Tensor([3, 2, 0],"float32"), list[0,1,], )

[cuda error] paddle.flip(Tensor([3, 2, 0],"float32"), list[0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.406553 test begin: paddle.flip(Tensor([3, 8, 0, 224],"float32"), axis=list[3,], )

[cuda error] paddle.flip(Tensor([3, 8, 0, 224],"float32"), axis=list[3,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.408016 test begin: paddle.flip(Tensor([3, 8, 224, 0],"float32"), axis=list[3,], )

[cuda error] paddle.flip(Tensor([3, 8, 224, 0],"float32"), axis=list[3,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.409637 test begin: paddle.flip(Tensor([4, 0],"float32"), list[0,1,], )

[cuda error] paddle.flip(Tensor([4, 0],"float32"), list[0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.411331 test begin: paddle.flip(x=Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )

[cuda error] paddle.flip(x=Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.412990 test begin: paddle.flip(x=Tensor([0, 3, 3],"bool"), axis=list[0,], )

[cuda error] paddle.flip(x=Tensor([0, 3, 3],"bool"), axis=list[0,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.414543 test begin: paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[-1,0,1,], )

[cuda error] paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[-1,0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.415790 test begin: paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,2,], )

[cuda error] paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.416960 test begin: paddle.flip(x=Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )

[cuda error] paddle.flip(x=Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.418703 test begin: paddle.flip(x=Tensor([3, 0, 3],"bool"), axis=list[0,], )

[cuda error] paddle.flip(x=Tensor([3, 0, 3],"bool"), axis=list[0,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.420348 test begin: paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[-1,0,1,], )

[cuda error] paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[-1,0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.421855 test begin: paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,2,], )

[cuda error] paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.423529 test begin: paddle.flip(x=Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.425136 test begin: paddle.flip(x=Tensor([3, 3, 0],"bool"), axis=list[0,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 0],"bool"), axis=list[0,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.426430 test begin: paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[-1,0,1,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[-1,0,1,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.428183 test begin: paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,2,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.429732 test begin: paddle.flip(x=Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=list[-1,0,3,4,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.431475 test begin: paddle.flip(x=Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=list[-1,0,3,4,2,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=list[-1,0,3,4,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.433062 test begin: paddle.flip(x=Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=list[-1,0,3,4,2,], )

[cuda error] paddle.flip(x=Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=list[-1,0,3,4,2,], ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.434920 test begin: paddle.floor(Tensor([0, 1, 1, 1, 1],"float32"), )

[cuda error] paddle.floor(Tensor([0, 1, 1, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.436662 test begin: paddle.floor(Tensor([0, 1, 1, 1],"float32"), )

[cuda error] paddle.floor(Tensor([0, 1, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.438131 test begin: paddle.floor(Tensor([0, 1, 1],"float32"), )

[cuda error] paddle.floor(Tensor([0, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.439619 test begin: paddle.floor(Tensor([0, 3],"float64"), )

[cuda error] paddle.floor(Tensor([0, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.440937 test begin: paddle.floor(Tensor([0, 6, 3, 1, 2, 5],"float64"), )

[cuda error] paddle.floor(Tensor([0, 6, 3, 1, 2, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.442527 test begin: paddle.floor(Tensor([0],"float32"), )

[cuda error] paddle.floor(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.444497 test begin: paddle.floor(Tensor([1, 0, 1, 1, 1],"float32"), )

[cuda error] paddle.floor(Tensor([1, 0, 1, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.446305 test begin: paddle.floor(Tensor([1, 0, 1],"float32"), )

[cuda error] paddle.floor(Tensor([1, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.447499 test begin: paddle.floor(Tensor([1, 0],"float64"), )

[cuda error] paddle.floor(Tensor([1, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.448588 test begin: paddle.floor(Tensor([1, 1, 0, 1, 1],"float32"), )

[cuda error] paddle.floor(Tensor([1, 1, 0, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.449629 test begin: paddle.floor(Tensor([1, 1, 0],"float32"), )

[cuda error] paddle.floor(Tensor([1, 1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.450875 test begin: paddle.floor(Tensor([1, 1, 1, 0, 1],"float32"), )

[cuda error] paddle.floor(Tensor([1, 1, 1, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.452110 test begin: paddle.floor(Tensor([1, 1, 1, 1, 0],"float32"), )

[cuda error] paddle.floor(Tensor([1, 1, 1, 1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.453186 test begin: paddle.floor(Tensor([124, 0, 1, 1],"float32"), )

[cuda error] paddle.floor(Tensor([124, 0, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.454919 test begin: paddle.floor(Tensor([124, 1, 0, 1],"float32"), )

[cuda error] paddle.floor(Tensor([124, 1, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.456995 test begin: paddle.floor(Tensor([124, 1, 1, 0],"float32"), )

[cuda error] paddle.floor(Tensor([124, 1, 1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.458532 test begin: paddle.floor(Tensor([3, 0, 3, 1, 2, 5],"float64"), )

[cuda error] paddle.floor(Tensor([3, 0, 3, 1, 2, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.459825 test begin: paddle.floor(Tensor([3, 6, 0, 1, 2, 5],"float64"), )

[cuda error] paddle.floor(Tensor([3, 6, 0, 1, 2, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.461138 test begin: paddle.floor(Tensor([3, 6, 3, 0, 2, 5],"float64"), )

[cuda error] paddle.floor(Tensor([3, 6, 3, 0, 2, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.462780 test begin: paddle.floor(Tensor([3, 6, 3, 1, 0, 5],"float64"), )

[cuda error] paddle.floor(Tensor([3, 6, 3, 1, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.464378 test begin: paddle.floor(Tensor([3, 6, 3, 1, 2, 0],"float64"), )

[cuda error] paddle.floor(Tensor([3, 6, 3, 1, 2, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.465852 test begin: paddle.floor(x=Tensor([0, 3, 3],"float32"), )

[cuda error] paddle.floor(x=Tensor([0, 3, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.467381 test begin: paddle.floor(x=Tensor([3, 0, 3],"float32"), )

[cuda error] paddle.floor(x=Tensor([3, 0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.469363 test begin: paddle.floor(x=Tensor([3, 3, 0],"float32"), )

[cuda error] paddle.floor(x=Tensor([3, 3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.471023 test begin: paddle.fmax(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )

[Pass] paddle.fmax(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
2025-03-05 15:41:47.473288 test begin: paddle.fmax(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )

[torch error] paddle.fmax(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:47.474737 test begin: paddle.fmax(Tensor([0, 15],"float32"), Tensor([15],"float32"), )

[Pass] paddle.fmax(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
2025-03-05 15:41:47.476742 test begin: paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )

[Pass] paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
2025-03-05 15:41:47.480012 test begin: paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )

[torch error] paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (30) at non-singleton dimension 0
2025-03-05 15:41:47.485287 test begin: paddle.fmax(Tensor([0],"int64"), Tensor([0],"int64"), )

[Pass] paddle.fmax(Tensor([0],"int64"), Tensor([0],"int64"), )
2025-03-05 15:41:47.487671 test begin: paddle.fmax(Tensor([0],"int64"), Tensor([3],"int64"), )

[torch error] paddle.fmax(Tensor([0],"int64"), Tensor([3],"int64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:47.489403 test begin: paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )

[Pass] paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
2025-03-05 15:41:47.491224 test begin: paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )

[torch error] paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (15) at non-singleton dimension 1
2025-03-05 15:41:47.492407 test begin: paddle.fmax(Tensor([10, 0],"float32"), Tensor([15],"float32"), )

[torch error] paddle.fmax(Tensor([10, 0],"float32"), Tensor([15],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (15) at non-singleton dimension 1
2025-03-05 15:41:47.493394 test begin: paddle.fmax(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )

[torch error] paddle.fmax(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:47.494332 test begin: paddle.fmax(Tensor([10, 15],"float32"), Tensor([0],"float32"), )

[torch error] paddle.fmax(Tensor([10, 15],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (15) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.495482 test begin: paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )

[torch error] paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), ) 
 The size of tensor a (15) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.496365 test begin: paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )

[Pass] paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
2025-03-05 15:41:47.499171 test begin: paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )

[torch error] paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (200) at non-singleton dimension 1
2025-03-05 15:41:47.503607 test begin: paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )

[Pass] paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
2025-03-05 15:41:47.506485 test begin: paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )

[torch error] paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (40) at non-singleton dimension 2
2025-03-05 15:41:47.512522 test begin: paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )

[torch error] paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), ) 
 The size of tensor a (30) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:47.516190 test begin: paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )

[torch error] paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), ) 
 The size of tensor a (200) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.519882 test begin: paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )

[torch error] paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), ) 
 The size of tensor a (40) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:47.523311 test begin: paddle.fmax(Tensor([3],"int64"), Tensor([0],"int64"), )

[torch error] paddle.fmax(Tensor([3],"int64"), Tensor([0],"int64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:47.524479 test begin: paddle.fmin(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )

[Pass] paddle.fmin(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
2025-03-05 15:41:47.528139 test begin: paddle.fmin(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )

[torch error] paddle.fmin(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:47.530179 test begin: paddle.fmin(Tensor([0, 15],"float32"), Tensor([15],"float32"), )

[Pass] paddle.fmin(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
2025-03-05 15:41:47.534479 test begin: paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )

[Pass] paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
2025-03-05 15:41:47.537498 test begin: paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )

[torch error] paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (30) at non-singleton dimension 0
2025-03-05 15:41:47.541353 test begin: paddle.fmin(Tensor([0],"int64"), Tensor([0],"int64"), )

[Pass] paddle.fmin(Tensor([0],"int64"), Tensor([0],"int64"), )
2025-03-05 15:41:47.543618 test begin: paddle.fmin(Tensor([0],"int64"), Tensor([1],"int64"), )

[Pass] paddle.fmin(Tensor([0],"int64"), Tensor([1],"int64"), )
2025-03-05 15:41:47.546081 test begin: paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )

[Pass] paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
2025-03-05 15:41:47.548289 test begin: paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )

[torch error] paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (15) at non-singleton dimension 1
2025-03-05 15:41:47.549401 test begin: paddle.fmin(Tensor([10, 0],"float32"), Tensor([15],"float32"), )

[torch error] paddle.fmin(Tensor([10, 0],"float32"), Tensor([15],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (15) at non-singleton dimension 1
2025-03-05 15:41:47.550632 test begin: paddle.fmin(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )

[torch error] paddle.fmin(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:47.551902 test begin: paddle.fmin(Tensor([10, 15],"float32"), Tensor([0],"float32"), )

[torch error] paddle.fmin(Tensor([10, 15],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (15) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.552761 test begin: paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )

[torch error] paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), ) 
 The size of tensor a (15) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.553645 test begin: paddle.fmin(Tensor([1],"int64"), Tensor([0],"int64"), )

[Pass] paddle.fmin(Tensor([1],"int64"), Tensor([0],"int64"), )
2025-03-05 15:41:47.555240 test begin: paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )

[Pass] paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
2025-03-05 15:41:47.557323 test begin: paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )

[torch error] paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (200) at non-singleton dimension 1
2025-03-05 15:41:47.560939 test begin: paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )

[Pass] paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
2025-03-05 15:41:47.563952 test begin: paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )

[torch error] paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (40) at non-singleton dimension 2
2025-03-05 15:41:47.567786 test begin: paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )

[torch error] paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), ) 
 The size of tensor a (30) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:47.571518 test begin: paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )

[torch error] paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), ) 
 The size of tensor a (200) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.574720 test begin: paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )

[torch error] paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), ) 
 The size of tensor a (40) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:47.578541 test begin: paddle.frac(Tensor([0, 20, 1],"float32"), )

[cuda error] paddle.frac(Tensor([0, 20, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.581930 test begin: paddle.frac(Tensor([0, 3],"float32"), )

[cuda error] paddle.frac(Tensor([0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.583856 test begin: paddle.frac(Tensor([10, 0, 1],"float32"), )

[cuda error] paddle.frac(Tensor([10, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.584963 test begin: paddle.frac(Tensor([10, 20, 0],"float32"), )

[cuda error] paddle.frac(Tensor([10, 20, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.586455 test begin: paddle.frac(Tensor([2, 0],"float32"), )

[cuda error] paddle.frac(Tensor([2, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.588040 test begin: paddle.full_like(Tensor([0, 1, 1, 1],"float32"), -3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([0, 1, 1, 1],"float32"), -3.4028234663852886e+38, )
2025-03-05 15:41:47.589804 test begin: paddle.full_like(Tensor([0, 1, 6],"float64"), fill_value=6, )

[Pass] paddle.full_like(Tensor([0, 1, 6],"float64"), fill_value=6, )
2025-03-05 15:41:47.591552 test begin: paddle.full_like(Tensor([0, 10164],"int32"), 80, )

[Pass] paddle.full_like(Tensor([0, 10164],"int32"), 80, )
2025-03-05 15:41:47.593071 test begin: paddle.full_like(Tensor([0, 1024],"float32"), 0.334840825619673, )

[Pass] paddle.full_like(Tensor([0, 1024],"float32"), 0.334840825619673, )
2025-03-05 15:41:47.594370 test begin: paddle.full_like(Tensor([0, 10285],"int32"), 11, )

[Pass] paddle.full_like(Tensor([0, 10285],"int32"), 11, )
2025-03-05 15:41:47.595413 test begin: paddle.full_like(Tensor([0, 1],"float32"), 0.5, )

[Pass] paddle.full_like(Tensor([0, 1],"float32"), 0.5, )
2025-03-05 15:41:47.596377 test begin: paddle.full_like(Tensor([0, 1],"float32"), fill_value=2, )

[Pass] paddle.full_like(Tensor([0, 1],"float32"), fill_value=2, )
2025-03-05 15:41:47.597333 test begin: paddle.full_like(Tensor([0, 1],"float32"), fill_value=6, )

[Pass] paddle.full_like(Tensor([0, 1],"float32"), fill_value=6, )
2025-03-05 15:41:47.599219 test begin: paddle.full_like(Tensor([0, 1],"float64"), -2.220446049250313e-16, )

[Pass] paddle.full_like(Tensor([0, 1],"float64"), -2.220446049250313e-16, )
2025-03-05 15:41:47.600513 test begin: paddle.full_like(Tensor([0, 1],"float64"), 1.7976931348623157e+308, )

[Pass] paddle.full_like(Tensor([0, 1],"float64"), 1.7976931348623157e+308, )
2025-03-05 15:41:47.602235 test begin: paddle.full_like(Tensor([0, 1],"float64"), fill_value=11, )

[Pass] paddle.full_like(Tensor([0, 1],"float64"), fill_value=11, )
2025-03-05 15:41:47.603445 test begin: paddle.full_like(Tensor([0, 1],"float64"), fill_value=23, )

[Pass] paddle.full_like(Tensor([0, 1],"float64"), fill_value=23, )
2025-03-05 15:41:47.605025 test begin: paddle.full_like(Tensor([0, 1],"float64"), fill_value=41, )

[Pass] paddle.full_like(Tensor([0, 1],"float64"), fill_value=41, )
2025-03-05 15:41:47.606303 test begin: paddle.full_like(Tensor([0, 1],"float64"), math.inf, )

[Pass] paddle.full_like(Tensor([0, 1],"float64"), math.inf, )
2025-03-05 15:41:47.607869 test begin: paddle.full_like(Tensor([0, 1],"int64"), -1, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), -1, )
2025-03-05 15:41:47.609410 test begin: paddle.full_like(Tensor([0, 1],"int64"), 0, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 0, )
2025-03-05 15:41:47.610510 test begin: paddle.full_like(Tensor([0, 1],"int64"), 1, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 1, )
2025-03-05 15:41:47.611934 test begin: paddle.full_like(Tensor([0, 1],"int64"), 151643, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 151643, )
2025-03-05 15:41:47.613174 test begin: paddle.full_like(Tensor([0, 1],"int64"), 2, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 2, )
2025-03-05 15:41:47.614482 test begin: paddle.full_like(Tensor([0, 1],"int64"), 255, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 255, )
2025-03-05 15:41:47.616622 test begin: paddle.full_like(Tensor([0, 1],"int64"), 3, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 3, )
2025-03-05 15:41:47.617874 test begin: paddle.full_like(Tensor([0, 1],"int64"), 7, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 7, )
2025-03-05 15:41:47.619268 test begin: paddle.full_like(Tensor([0, 1],"int64"), 98, )

[Pass] paddle.full_like(Tensor([0, 1],"int64"), 98, )
2025-03-05 15:41:47.620615 test begin: paddle.full_like(Tensor([0, 200],"float32"), 0.0, )

[Pass] paddle.full_like(Tensor([0, 200],"float32"), 0.0, )
2025-03-05 15:41:47.621765 test begin: paddle.full_like(Tensor([0, 21504],"int32"), 10, )

[Pass] paddle.full_like(Tensor([0, 21504],"int32"), 10, )
2025-03-05 15:41:47.623348 test begin: paddle.full_like(Tensor([0, 21504],"int32"), 15, )

[Pass] paddle.full_like(Tensor([0, 21504],"int32"), 15, )
2025-03-05 15:41:47.624713 test begin: paddle.full_like(Tensor([0, 232],"float16"), 0.0, None, None, )

[Pass] paddle.full_like(Tensor([0, 232],"float16"), 0.0, None, None, )
2025-03-05 15:41:47.626164 test begin: paddle.full_like(Tensor([0, 232],"int32"), 1.0, None, None, )

[Pass] paddle.full_like(Tensor([0, 232],"int32"), 1.0, None, None, )
2025-03-05 15:41:47.627435 test begin: paddle.full_like(Tensor([0, 232],"int32"), 1e-10, None, None, )

[Pass] paddle.full_like(Tensor([0, 232],"int32"), 1e-10, None, None, )
2025-03-05 15:41:47.629708 test begin: paddle.full_like(Tensor([0, 232],"int32"), 1e-100, None, None, )

[Pass] paddle.full_like(Tensor([0, 232],"int32"), 1e-100, None, None, )
2025-03-05 15:41:47.631840 test begin: paddle.full_like(Tensor([0, 2],"float32"), -1.1920928955078125e-07, )

[Pass] paddle.full_like(Tensor([0, 2],"float32"), -1.1920928955078125e-07, )
2025-03-05 15:41:47.633080 test begin: paddle.full_like(Tensor([0, 2],"float32"), 3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([0, 2],"float32"), 3.4028234663852886e+38, )
2025-03-05 15:41:47.634804 test begin: paddle.full_like(Tensor([0, 3, 3],"float32"), fill_value=2, )

[Pass] paddle.full_like(Tensor([0, 3, 3],"float32"), fill_value=2, )
2025-03-05 15:41:47.636110 test begin: paddle.full_like(Tensor([0, 3, 4],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([0, 3, 4],"float64"), fill_value=1, )
2025-03-05 15:41:47.637623 test begin: paddle.full_like(Tensor([0, 300, 4096],"float32"), 1, )

[Pass] paddle.full_like(Tensor([0, 300, 4096],"float32"), 1, )
2025-03-05 15:41:47.639327 test begin: paddle.full_like(Tensor([0, 36858],"int32"), 4, )

[Pass] paddle.full_like(Tensor([0, 36858],"int32"), 4, )
2025-03-05 15:41:47.640611 test begin: paddle.full_like(Tensor([0, 3],"float32"), -10.0, )

[Pass] paddle.full_like(Tensor([0, 3],"float32"), -10.0, )
2025-03-05 15:41:47.642155 test begin: paddle.full_like(Tensor([0, 3],"float32"), -3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([0, 3],"float32"), -3.4028234663852886e+38, )
2025-03-05 15:41:47.643667 test begin: paddle.full_like(Tensor([0, 3],"float32"), 100.0, )

[Pass] paddle.full_like(Tensor([0, 3],"float32"), 100.0, )
2025-03-05 15:41:47.644919 test begin: paddle.full_like(Tensor([0, 3],"float32"), 2.0, )

[Pass] paddle.full_like(Tensor([0, 3],"float32"), 2.0, )
2025-03-05 15:41:47.647740 test begin: paddle.full_like(Tensor([0, 3],"float32"), fill_value=math.inf, )

[Pass] paddle.full_like(Tensor([0, 3],"float32"), fill_value=math.inf, )
2025-03-05 15:41:47.649401 test begin: paddle.full_like(Tensor([0, 3],"float32"), fill_value=nan, )

[Pass] paddle.full_like(Tensor([0, 3],"float32"), fill_value=nan, )
2025-03-05 15:41:47.650767 test begin: paddle.full_like(Tensor([0, 3],"float64"), 0.9999998807907104, )

[Pass] paddle.full_like(Tensor([0, 3],"float64"), 0.9999998807907104, )
2025-03-05 15:41:47.653177 test begin: paddle.full_like(Tensor([0, 3],"float64"), 1.1754943508222875e-38, )

[Pass] paddle.full_like(Tensor([0, 3],"float64"), 1.1754943508222875e-38, )
2025-03-05 15:41:47.654671 test begin: paddle.full_like(Tensor([0, 40],"float32"), -1.0, )

[Pass] paddle.full_like(Tensor([0, 40],"float32"), -1.0, )
2025-03-05 15:41:47.656342 test begin: paddle.full_like(Tensor([0, 5, 2],"float32"), 0, )

[Pass] paddle.full_like(Tensor([0, 5, 2],"float32"), 0, )
2025-03-05 15:41:47.658013 test begin: paddle.full_like(Tensor([0, 5, 3],"float32"), -1.1920928955078125e-07, )

[Pass] paddle.full_like(Tensor([0, 5, 3],"float32"), -1.1920928955078125e-07, )
2025-03-05 15:41:47.659403 test begin: paddle.full_like(Tensor([0, 5, 3],"float32"), -math.inf, )

[Pass] paddle.full_like(Tensor([0, 5, 3],"float32"), -math.inf, )
2025-03-05 15:41:47.661520 test begin: paddle.full_like(Tensor([0, 5, 3],"float32"), 0.0, )

[Pass] paddle.full_like(Tensor([0, 5, 3],"float32"), 0.0, )
2025-03-05 15:41:47.662989 test begin: paddle.full_like(Tensor([0, 5, 3],"float32"), 3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([0, 5, 3],"float32"), 3.4028234663852886e+38, )
2025-03-05 15:41:47.664431 test begin: paddle.full_like(Tensor([0, 5, 3],"float32"), math.inf, )

[Pass] paddle.full_like(Tensor([0, 5, 3],"float32"), math.inf, )
2025-03-05 15:41:47.665944 test begin: paddle.full_like(Tensor([0, 512],"float16"), -127, )

[Pass] paddle.full_like(Tensor([0, 512],"float16"), -127, )
2025-03-05 15:41:47.667376 test begin: paddle.full_like(Tensor([0, 512],"float16"), 127, )

[Pass] paddle.full_like(Tensor([0, 512],"float16"), 127, )
2025-03-05 15:41:47.668846 test begin: paddle.full_like(Tensor([0, 56, 56],"int64"), 15, )

[Pass] paddle.full_like(Tensor([0, 56, 56],"int64"), 15, )
2025-03-05 15:41:47.670281 test begin: paddle.full_like(Tensor([0, 56, 56],"int64"), 31, )

[Pass] paddle.full_like(Tensor([0, 56, 56],"int64"), 31, )
2025-03-05 15:41:47.671719 test begin: paddle.full_like(Tensor([0, 6, 3, 1, 2, 5],"float64"), fill_value=3, )

[Pass] paddle.full_like(Tensor([0, 6, 3, 1, 2, 5],"float64"), fill_value=3, )
2025-03-05 15:41:47.673010 test begin: paddle.full_like(Tensor([0, 6, 3, 4, 1, 5],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([0, 6, 3, 4, 1, 5],"float64"), fill_value=1, )
2025-03-05 15:41:47.674297 test begin: paddle.full_like(Tensor([0, 6, 3, 4, 2, 1],"float64"), fill_value=4, )

[Pass] paddle.full_like(Tensor([0, 6, 3, 4, 2, 1],"float64"), fill_value=4, )
2025-03-05 15:41:47.675801 test begin: paddle.full_like(Tensor([0, 64],"float32"), 1.0, )

[Pass] paddle.full_like(Tensor([0, 64],"float32"), 1.0, )
2025-03-05 15:41:47.677133 test begin: paddle.full_like(Tensor([0, 64],"float32"), 1e-20, )

[Pass] paddle.full_like(Tensor([0, 64],"float32"), 1e-20, )
2025-03-05 15:41:47.678501 test begin: paddle.full_like(Tensor([0, 7, 1],"float64"), fill_value=5, )

[Pass] paddle.full_like(Tensor([0, 7, 1],"float64"), fill_value=5, )
2025-03-05 15:41:47.679628 test begin: paddle.full_like(Tensor([0, 8, 64, 64],"float16"), -127, )

[Pass] paddle.full_like(Tensor([0, 8, 64, 64],"float16"), -127, )
2025-03-05 15:41:47.680716 test begin: paddle.full_like(Tensor([0, 8, 64, 64],"float16"), 127, )

[Pass] paddle.full_like(Tensor([0, 8, 64, 64],"float16"), 127, )
2025-03-05 15:41:47.681650 test begin: paddle.full_like(Tensor([0, 8000],"float32"), -math.inf, )

[Pass] paddle.full_like(Tensor([0, 8000],"float32"), -math.inf, )
2025-03-05 15:41:47.682863 test begin: paddle.full_like(Tensor([0],"float32"), 0.5, )

[Pass] paddle.full_like(Tensor([0],"float32"), 0.5, )
2025-03-05 15:41:47.684068 test begin: paddle.full_like(Tensor([0],"float32"), 1.0, )

[Pass] paddle.full_like(Tensor([0],"float32"), 1.0, )
2025-03-05 15:41:47.685242 test begin: paddle.full_like(Tensor([0],"float32"), 1e-20, )

[Pass] paddle.full_like(Tensor([0],"float32"), 1e-20, )
2025-03-05 15:41:47.686573 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=0, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=0, )
2025-03-05 15:41:47.687653 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=1023, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=1023, )
2025-03-05 15:41:47.688910 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=1183, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=1183, )
2025-03-05 15:41:47.690267 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=16383, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=16383, )
2025-03-05 15:41:47.691589 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=19, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=19, )
2025-03-05 15:41:47.692849 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=2, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=2, )
2025-03-05 15:41:47.694170 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=31, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=31, )
2025-03-05 15:41:47.695452 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=35967, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=35967, )
2025-03-05 15:41:47.696885 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=36, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=36, )
2025-03-05 15:41:47.698255 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=5, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=5, )
2025-03-05 15:41:47.699966 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=511, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=511, )
2025-03-05 15:41:47.701417 test begin: paddle.full_like(Tensor([0],"float32"), fill_value=7, )

[Pass] paddle.full_like(Tensor([0],"float32"), fill_value=7, )
2025-03-05 15:41:47.703650 test begin: paddle.full_like(Tensor([0],"float64"), -2.220446049250313e-16, )

[Pass] paddle.full_like(Tensor([0],"float64"), -2.220446049250313e-16, )
2025-03-05 15:41:47.705212 test begin: paddle.full_like(Tensor([0],"float64"), -math.inf, )

[Pass] paddle.full_like(Tensor([0],"float64"), -math.inf, )
2025-03-05 15:41:47.706680 test begin: paddle.full_like(Tensor([0],"float64"), 0.0, )

[Pass] paddle.full_like(Tensor([0],"float64"), 0.0, )
2025-03-05 15:41:47.707921 test begin: paddle.full_like(Tensor([0],"float64"), 0.9999998807907104, )

[Pass] paddle.full_like(Tensor([0],"float64"), 0.9999998807907104, )
2025-03-05 15:41:47.709446 test begin: paddle.full_like(Tensor([0],"float64"), 1.1754943508222875e-38, )

[Pass] paddle.full_like(Tensor([0],"float64"), 1.1754943508222875e-38, )
2025-03-05 15:41:47.711099 test begin: paddle.full_like(Tensor([0],"float64"), 1.7976931348623157e+308, )

[Pass] paddle.full_like(Tensor([0],"float64"), 1.7976931348623157e+308, )
2025-03-05 15:41:47.712630 test begin: paddle.full_like(Tensor([0],"float64"), fill_value=167, )

[Pass] paddle.full_like(Tensor([0],"float64"), fill_value=167, )
2025-03-05 15:41:47.713931 test begin: paddle.full_like(Tensor([0],"float64"), fill_value=2159, )

[Pass] paddle.full_like(Tensor([0],"float64"), fill_value=2159, )
2025-03-05 15:41:47.714927 test begin: paddle.full_like(Tensor([0],"float64"), math.inf, )

[Pass] paddle.full_like(Tensor([0],"float64"), math.inf, )
2025-03-05 15:41:47.716277 test begin: paddle.full_like(Tensor([0],"int64"), 0, )

[Pass] paddle.full_like(Tensor([0],"int64"), 0, )
2025-03-05 15:41:47.725391 test begin: paddle.full_like(Tensor([0],"int64"), 1, )

[Pass] paddle.full_like(Tensor([0],"int64"), 1, )
2025-03-05 15:41:47.731443 test begin: paddle.full_like(Tensor([0],"int64"), 10, )

[Pass] paddle.full_like(Tensor([0],"int64"), 10, )
2025-03-05 15:41:47.732736 test begin: paddle.full_like(Tensor([0],"int64"), 11, )

[Pass] paddle.full_like(Tensor([0],"int64"), 11, )
2025-03-05 15:41:47.733708 test begin: paddle.full_like(Tensor([0],"int64"), 12, )

[Pass] paddle.full_like(Tensor([0],"int64"), 12, )
2025-03-05 15:41:47.734655 test begin: paddle.full_like(Tensor([0],"int64"), 13, )

[Pass] paddle.full_like(Tensor([0],"int64"), 13, )
2025-03-05 15:41:47.737030 test begin: paddle.full_like(Tensor([0],"int64"), 14, )

[Pass] paddle.full_like(Tensor([0],"int64"), 14, )
2025-03-05 15:41:47.738501 test begin: paddle.full_like(Tensor([0],"int64"), 15, )

[Pass] paddle.full_like(Tensor([0],"int64"), 15, )
2025-03-05 15:41:47.739470 test begin: paddle.full_like(Tensor([0],"int64"), 2, )

[Pass] paddle.full_like(Tensor([0],"int64"), 2, )
2025-03-05 15:41:47.740394 test begin: paddle.full_like(Tensor([0],"int64"), 3, )

[Pass] paddle.full_like(Tensor([0],"int64"), 3, )
2025-03-05 15:41:47.741703 test begin: paddle.full_like(Tensor([0],"int64"), 4, )

[Pass] paddle.full_like(Tensor([0],"int64"), 4, )
2025-03-05 15:41:47.742837 test begin: paddle.full_like(Tensor([0],"int64"), 5, )

[Pass] paddle.full_like(Tensor([0],"int64"), 5, )
2025-03-05 15:41:47.744174 test begin: paddle.full_like(Tensor([0],"int64"), 6, )

[Pass] paddle.full_like(Tensor([0],"int64"), 6, )
2025-03-05 15:41:47.745575 test begin: paddle.full_like(Tensor([0],"int64"), 7, )

[Pass] paddle.full_like(Tensor([0],"int64"), 7, )
2025-03-05 15:41:47.747375 test begin: paddle.full_like(Tensor([0],"int64"), 8, )

[Pass] paddle.full_like(Tensor([0],"int64"), 8, )
2025-03-05 15:41:47.748980 test begin: paddle.full_like(Tensor([0],"int64"), 9, )

[Pass] paddle.full_like(Tensor([0],"int64"), 9, )
2025-03-05 15:41:47.758946 test begin: paddle.full_like(Tensor([1, 0, 1, 1],"float32"), -3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([1, 0, 1, 1],"float32"), -3.4028234663852886e+38, )
2025-03-05 15:41:47.760909 test begin: paddle.full_like(Tensor([1, 0, 3],"float32"), fill_value=2, )

[Pass] paddle.full_like(Tensor([1, 0, 3],"float32"), fill_value=2, )
2025-03-05 15:41:47.761892 test begin: paddle.full_like(Tensor([1, 0, 4096],"float32"), 1, )

[Pass] paddle.full_like(Tensor([1, 0, 4096],"float32"), 1, )
2025-03-05 15:41:47.765347 test begin: paddle.full_like(Tensor([1, 0, 4],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([1, 0, 4],"float64"), fill_value=1, )
2025-03-05 15:41:47.767093 test begin: paddle.full_like(Tensor([1, 0],"float32"), -math.inf, )

[Pass] paddle.full_like(Tensor([1, 0],"float32"), -math.inf, )
2025-03-05 15:41:47.768926 test begin: paddle.full_like(Tensor([1, 0],"float32"), 0.0, )

[Pass] paddle.full_like(Tensor([1, 0],"float32"), 0.0, )
2025-03-05 15:41:47.770124 test begin: paddle.full_like(Tensor([1, 0],"int32"), 10, )

[Pass] paddle.full_like(Tensor([1, 0],"int32"), 10, )
2025-03-05 15:41:47.771489 test begin: paddle.full_like(Tensor([1, 0],"int32"), 11, )

[Pass] paddle.full_like(Tensor([1, 0],"int32"), 11, )
2025-03-05 15:41:47.772927 test begin: paddle.full_like(Tensor([1, 0],"int32"), 15, )

[Pass] paddle.full_like(Tensor([1, 0],"int32"), 15, )
2025-03-05 15:41:47.774037 test begin: paddle.full_like(Tensor([1, 0],"int32"), 4, )

[Pass] paddle.full_like(Tensor([1, 0],"int32"), 4, )
2025-03-05 15:41:47.775660 test begin: paddle.full_like(Tensor([1, 0],"int64"), -1, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), -1, )
2025-03-05 15:41:47.776840 test begin: paddle.full_like(Tensor([1, 0],"int64"), 0, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 0, )
2025-03-05 15:41:47.778473 test begin: paddle.full_like(Tensor([1, 0],"int64"), 1, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 1, )
2025-03-05 15:41:47.779886 test begin: paddle.full_like(Tensor([1, 0],"int64"), 2, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 2, )
2025-03-05 15:41:47.781153 test begin: paddle.full_like(Tensor([1, 0],"int64"), 255, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 255, )
2025-03-05 15:41:47.782118 test begin: paddle.full_like(Tensor([1, 0],"int64"), 3, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 3, )
2025-03-05 15:41:47.783037 test begin: paddle.full_like(Tensor([1, 0],"int64"), 7, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 7, )
2025-03-05 15:41:47.784285 test begin: paddle.full_like(Tensor([1, 0],"int64"), 98, )

[Pass] paddle.full_like(Tensor([1, 0],"int64"), 98, )
2025-03-05 15:41:47.785413 test begin: paddle.full_like(Tensor([1, 1, 0, 1],"float32"), -3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([1, 1, 0, 1],"float32"), -3.4028234663852886e+38, )
2025-03-05 15:41:47.786842 test begin: paddle.full_like(Tensor([1, 1, 1, 0],"float32"), -3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([1, 1, 1, 0],"float32"), -3.4028234663852886e+38, )
2025-03-05 15:41:47.788386 test begin: paddle.full_like(Tensor([1, 3, 0],"float32"), fill_value=2, )

[Pass] paddle.full_like(Tensor([1, 3, 0],"float32"), fill_value=2, )
2025-03-05 15:41:47.789841 test begin: paddle.full_like(Tensor([1, 3, 0],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([1, 3, 0],"float64"), fill_value=1, )
2025-03-05 15:41:47.791926 test begin: paddle.full_like(Tensor([1, 300, 0],"float32"), 1, )

[Pass] paddle.full_like(Tensor([1, 300, 0],"float32"), 1, )
2025-03-05 15:41:47.793511 test begin: paddle.full_like(Tensor([1024, 0],"float32"), 0.334840825619673, )

[Pass] paddle.full_like(Tensor([1024, 0],"float32"), 0.334840825619673, )
2025-03-05 15:41:47.795041 test begin: paddle.full_like(Tensor([114, 0],"float64"), -2.220446049250313e-16, )

[Pass] paddle.full_like(Tensor([114, 0],"float64"), -2.220446049250313e-16, )
2025-03-05 15:41:47.796541 test begin: paddle.full_like(Tensor([114, 0],"float64"), 1.7976931348623157e+308, )

[Pass] paddle.full_like(Tensor([114, 0],"float64"), 1.7976931348623157e+308, )
2025-03-05 15:41:47.798447 test begin: paddle.full_like(Tensor([114, 0],"float64"), math.inf, )

[Pass] paddle.full_like(Tensor([114, 0],"float64"), math.inf, )
2025-03-05 15:41:47.800163 test begin: paddle.full_like(Tensor([128, 0],"float16"), -127, )

[Pass] paddle.full_like(Tensor([128, 0],"float16"), -127, )
2025-03-05 15:41:47.802457 test begin: paddle.full_like(Tensor([128, 0],"float16"), 127, )

[Pass] paddle.full_like(Tensor([128, 0],"float16"), 127, )
2025-03-05 15:41:47.803939 test begin: paddle.full_like(Tensor([13, 0, 56],"int64"), 15, )

[Pass] paddle.full_like(Tensor([13, 0, 56],"int64"), 15, )
2025-03-05 15:41:47.805758 test begin: paddle.full_like(Tensor([13, 0, 56],"int64"), 31, )

[Pass] paddle.full_like(Tensor([13, 0, 56],"int64"), 31, )
2025-03-05 15:41:47.807509 test begin: paddle.full_like(Tensor([13, 56, 0],"int64"), 15, )

[Pass] paddle.full_like(Tensor([13, 56, 0],"int64"), 15, )
2025-03-05 15:41:47.808919 test begin: paddle.full_like(Tensor([13, 56, 0],"int64"), 31, )

[Pass] paddle.full_like(Tensor([13, 56, 0],"int64"), 31, )
2025-03-05 15:41:47.810233 test begin: paddle.full_like(Tensor([148, 0, 3],"float32"), -1.1920928955078125e-07, )

[Pass] paddle.full_like(Tensor([148, 0, 3],"float32"), -1.1920928955078125e-07, )
2025-03-05 15:41:47.812221 test begin: paddle.full_like(Tensor([148, 0, 3],"float32"), -math.inf, )

[Pass] paddle.full_like(Tensor([148, 0, 3],"float32"), -math.inf, )
2025-03-05 15:41:47.813793 test begin: paddle.full_like(Tensor([148, 0, 3],"float32"), 0.0, )

[Pass] paddle.full_like(Tensor([148, 0, 3],"float32"), 0.0, )
2025-03-05 15:41:47.815356 test begin: paddle.full_like(Tensor([148, 0, 3],"float32"), 3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([148, 0, 3],"float32"), 3.4028234663852886e+38, )
2025-03-05 15:41:47.816678 test begin: paddle.full_like(Tensor([148, 0, 3],"float32"), math.inf, )

[Pass] paddle.full_like(Tensor([148, 0, 3],"float32"), math.inf, )
2025-03-05 15:41:47.818005 test begin: paddle.full_like(Tensor([148, 5, 0],"float32"), -1.1920928955078125e-07, )

[Pass] paddle.full_like(Tensor([148, 5, 0],"float32"), -1.1920928955078125e-07, )
2025-03-05 15:41:47.819173 test begin: paddle.full_like(Tensor([148, 5, 0],"float32"), -math.inf, )

[Pass] paddle.full_like(Tensor([148, 5, 0],"float32"), -math.inf, )
2025-03-05 15:41:47.820464 test begin: paddle.full_like(Tensor([148, 5, 0],"float32"), 0.0, )

[Pass] paddle.full_like(Tensor([148, 5, 0],"float32"), 0.0, )
2025-03-05 15:41:47.821745 test begin: paddle.full_like(Tensor([148, 5, 0],"float32"), 3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([148, 5, 0],"float32"), 3.4028234663852886e+38, )
2025-03-05 15:41:47.823621 test begin: paddle.full_like(Tensor([148, 5, 0],"float32"), math.inf, )

[Pass] paddle.full_like(Tensor([148, 5, 0],"float32"), math.inf, )
2025-03-05 15:41:47.825035 test begin: paddle.full_like(Tensor([16, 0],"float32"), 1.0, )

[Pass] paddle.full_like(Tensor([16, 0],"float32"), 1.0, )
2025-03-05 15:41:47.827022 test begin: paddle.full_like(Tensor([16, 0],"float32"), 1e-20, )

[Pass] paddle.full_like(Tensor([16, 0],"float32"), 1e-20, )
2025-03-05 15:41:47.829021 test begin: paddle.full_like(Tensor([16, 0],"int32"), 80, )

[Pass] paddle.full_like(Tensor([16, 0],"int32"), 80, )
2025-03-05 15:41:47.830461 test begin: paddle.full_like(Tensor([1948, 0],"float32"), -1.1920928955078125e-07, )

[Pass] paddle.full_like(Tensor([1948, 0],"float32"), -1.1920928955078125e-07, )
2025-03-05 15:41:47.831844 test begin: paddle.full_like(Tensor([1948, 0],"float32"), 3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([1948, 0],"float32"), 3.4028234663852886e+38, )
2025-03-05 15:41:47.834498 test begin: paddle.full_like(Tensor([2, 0, 64, 64],"float16"), -127, )

[Pass] paddle.full_like(Tensor([2, 0, 64, 64],"float16"), -127, )
2025-03-05 15:41:47.835877 test begin: paddle.full_like(Tensor([2, 0, 64, 64],"float16"), 127, )

[Pass] paddle.full_like(Tensor([2, 0, 64, 64],"float16"), 127, )
2025-03-05 15:41:47.837006 test begin: paddle.full_like(Tensor([2, 0],"float32"), -10.0, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), -10.0, )
2025-03-05 15:41:47.838034 test begin: paddle.full_like(Tensor([2, 0],"float32"), -3.4028234663852886e+38, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), -3.4028234663852886e+38, )
2025-03-05 15:41:47.839761 test begin: paddle.full_like(Tensor([2, 0],"float32"), 0.5, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), 0.5, )
2025-03-05 15:41:47.843645 test begin: paddle.full_like(Tensor([2, 0],"float32"), 100.0, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), 100.0, )
2025-03-05 15:41:47.844854 test begin: paddle.full_like(Tensor([2, 0],"float32"), 2.0, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), 2.0, )
2025-03-05 15:41:47.846778 test begin: paddle.full_like(Tensor([2, 0],"float32"), fill_value=2, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), fill_value=2, )
2025-03-05 15:41:47.848200 test begin: paddle.full_like(Tensor([2, 0],"float32"), fill_value=math.inf, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), fill_value=math.inf, )
2025-03-05 15:41:47.849365 test begin: paddle.full_like(Tensor([2, 0],"float32"), fill_value=nan, )

[Pass] paddle.full_like(Tensor([2, 0],"float32"), fill_value=nan, )
2025-03-05 15:41:47.850877 test begin: paddle.full_like(Tensor([2, 0],"int64"), 151643, )

[Pass] paddle.full_like(Tensor([2, 0],"int64"), 151643, )
2025-03-05 15:41:47.851870 test begin: paddle.full_like(Tensor([2, 8, 0, 64],"float16"), -127, )

[Pass] paddle.full_like(Tensor([2, 8, 0, 64],"float16"), -127, )
2025-03-05 15:41:47.852764 test begin: paddle.full_like(Tensor([2, 8, 0, 64],"float16"), 127, )

[Pass] paddle.full_like(Tensor([2, 8, 0, 64],"float16"), 127, )
2025-03-05 15:41:47.854625 test begin: paddle.full_like(Tensor([2, 8, 64, 0],"float16"), -127, )

[Pass] paddle.full_like(Tensor([2, 8, 64, 0],"float16"), -127, )
2025-03-05 15:41:47.855712 test begin: paddle.full_like(Tensor([2, 8, 64, 0],"float16"), 127, )

[Pass] paddle.full_like(Tensor([2, 8, 64, 0],"float16"), 127, )
2025-03-05 15:41:47.857170 test begin: paddle.full_like(Tensor([219, 0],"float16"), 0.0, None, None, )

[Pass] paddle.full_like(Tensor([219, 0],"float16"), 0.0, None, None, )
2025-03-05 15:41:47.858812 test begin: paddle.full_like(Tensor([219, 0],"int32"), 1.0, None, None, )

[Pass] paddle.full_like(Tensor([219, 0],"int32"), 1.0, None, None, )
2025-03-05 15:41:47.860651 test begin: paddle.full_like(Tensor([219, 0],"int32"), 1e-10, None, None, )

[Pass] paddle.full_like(Tensor([219, 0],"int32"), 1e-10, None, None, )
2025-03-05 15:41:47.862066 test begin: paddle.full_like(Tensor([219, 0],"int32"), 1e-100, None, None, )

[Pass] paddle.full_like(Tensor([219, 0],"int32"), 1e-100, None, None, )
2025-03-05 15:41:47.863428 test begin: paddle.full_like(Tensor([3, 0, 3, 1, 2, 5],"float64"), fill_value=3, )

[Pass] paddle.full_like(Tensor([3, 0, 3, 1, 2, 5],"float64"), fill_value=3, )
2025-03-05 15:41:47.864579 test begin: paddle.full_like(Tensor([3, 0, 3, 4, 1, 5],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([3, 0, 3, 4, 1, 5],"float64"), fill_value=1, )
2025-03-05 15:41:47.865700 test begin: paddle.full_like(Tensor([3, 0, 3, 4, 2, 1],"float64"), fill_value=4, )

[Pass] paddle.full_like(Tensor([3, 0, 3, 4, 2, 1],"float64"), fill_value=4, )
2025-03-05 15:41:47.866925 test begin: paddle.full_like(Tensor([3, 0],"float32"), -1.0, )

[Pass] paddle.full_like(Tensor([3, 0],"float32"), -1.0, )
2025-03-05 15:41:47.867864 test begin: paddle.full_like(Tensor([3, 6, 0, 1, 2, 5],"float64"), fill_value=3, )

[Pass] paddle.full_like(Tensor([3, 6, 0, 1, 2, 5],"float64"), fill_value=3, )
2025-03-05 15:41:47.868857 test begin: paddle.full_like(Tensor([3, 6, 0, 4, 1, 5],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([3, 6, 0, 4, 1, 5],"float64"), fill_value=1, )
2025-03-05 15:41:47.870152 test begin: paddle.full_like(Tensor([3, 6, 0, 4, 2, 1],"float64"), fill_value=4, )

[Pass] paddle.full_like(Tensor([3, 6, 0, 4, 2, 1],"float64"), fill_value=4, )
2025-03-05 15:41:47.871882 test begin: paddle.full_like(Tensor([3, 6, 3, 0, 1, 5],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 0, 1, 5],"float64"), fill_value=1, )
2025-03-05 15:41:47.873338 test begin: paddle.full_like(Tensor([3, 6, 3, 0, 2, 1],"float64"), fill_value=4, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 0, 2, 1],"float64"), fill_value=4, )
2025-03-05 15:41:47.874427 test begin: paddle.full_like(Tensor([3, 6, 3, 0, 2, 5],"float64"), fill_value=3, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 0, 2, 5],"float64"), fill_value=3, )
2025-03-05 15:41:47.875672 test begin: paddle.full_like(Tensor([3, 6, 3, 1, 0, 5],"float64"), fill_value=3, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 1, 0, 5],"float64"), fill_value=3, )
2025-03-05 15:41:47.876795 test begin: paddle.full_like(Tensor([3, 6, 3, 1, 2, 0],"float64"), fill_value=3, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 1, 2, 0],"float64"), fill_value=3, )
2025-03-05 15:41:47.878141 test begin: paddle.full_like(Tensor([3, 6, 3, 4, 0, 1],"float64"), fill_value=4, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 4, 0, 1],"float64"), fill_value=4, )
2025-03-05 15:41:47.879346 test begin: paddle.full_like(Tensor([3, 6, 3, 4, 0, 5],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 4, 0, 5],"float64"), fill_value=1, )
2025-03-05 15:41:47.880594 test begin: paddle.full_like(Tensor([3, 6, 3, 4, 1, 0],"float64"), fill_value=1, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 4, 1, 0],"float64"), fill_value=1, )
2025-03-05 15:41:47.881765 test begin: paddle.full_like(Tensor([3, 6, 3, 4, 2, 0],"float64"), fill_value=4, )

[Pass] paddle.full_like(Tensor([3, 6, 3, 4, 2, 0],"float64"), fill_value=4, )
2025-03-05 15:41:47.885566 test begin: paddle.full_like(Tensor([4, 0, 1],"float64"), fill_value=5, )

[Pass] paddle.full_like(Tensor([4, 0, 1],"float64"), fill_value=5, )
2025-03-05 15:41:47.887070 test begin: paddle.full_like(Tensor([4, 0, 2],"float32"), 0, )

[Pass] paddle.full_like(Tensor([4, 0, 2],"float32"), 0, )
2025-03-05 15:41:47.888604 test begin: paddle.full_like(Tensor([4, 0, 6],"float64"), fill_value=6, )

[Pass] paddle.full_like(Tensor([4, 0, 6],"float64"), fill_value=6, )
2025-03-05 15:41:47.890007 test begin: paddle.full_like(Tensor([4, 0],"float32"), fill_value=6, )

[Pass] paddle.full_like(Tensor([4, 0],"float32"), fill_value=6, )
2025-03-05 15:41:47.891476 test begin: paddle.full_like(Tensor([4, 0],"float64"), fill_value=41, )

[Pass] paddle.full_like(Tensor([4, 0],"float64"), fill_value=41, )
2025-03-05 15:41:47.892905 test begin: paddle.full_like(Tensor([4, 1, 0],"float64"), fill_value=6, )

[Pass] paddle.full_like(Tensor([4, 1, 0],"float64"), fill_value=6, )
2025-03-05 15:41:47.894163 test begin: paddle.full_like(Tensor([4, 5, 0],"float32"), 0, )

[Pass] paddle.full_like(Tensor([4, 5, 0],"float32"), 0, )
2025-03-05 15:41:47.895750 test begin: paddle.full_like(Tensor([4, 7, 0],"float64"), fill_value=5, )

[Pass] paddle.full_like(Tensor([4, 7, 0],"float64"), fill_value=5, )
2025-03-05 15:41:47.897316 test begin: paddle.full_like(Tensor([5, 0],"float64"), 0.9999998807907104, )

[Pass] paddle.full_like(Tensor([5, 0],"float64"), 0.9999998807907104, )
2025-03-05 15:41:47.898655 test begin: paddle.full_like(Tensor([5, 0],"float64"), 1.1754943508222875e-38, )

[Pass] paddle.full_like(Tensor([5, 0],"float64"), 1.1754943508222875e-38, )
2025-03-05 15:41:47.900813 test begin: paddle.full_like(Tensor([5, 0],"float64"), fill_value=11, )

[Pass] paddle.full_like(Tensor([5, 0],"float64"), fill_value=11, )
2025-03-05 15:41:47.902393 test begin: paddle.full_like(Tensor([7, 0],"float64"), fill_value=23, )

[Pass] paddle.full_like(Tensor([7, 0],"float64"), fill_value=23, )
2025-03-05 15:41:47.903795 test begin: paddle.full_like(x=Tensor([0],"bool"), fill_value=1, )

[Pass] paddle.full_like(x=Tensor([0],"bool"), fill_value=1, )
2025-03-05 15:41:47.905521 test begin: paddle.full_like(x=Tensor([0],"float64"), fill_value=-math.inf, )

[Pass] paddle.full_like(x=Tensor([0],"float64"), fill_value=-math.inf, )
2025-03-05 15:41:47.906912 test begin: paddle.full_like(x=Tensor([0],"float64"), fill_value=math.inf, )

[Pass] paddle.full_like(x=Tensor([0],"float64"), fill_value=math.inf, )
2025-03-05 15:41:47.908060 test begin: paddle.gcd(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), )

[cuda error] paddle.gcd(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.910223 test begin: paddle.gcd(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), )

[torch error] paddle.gcd(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:47.929340 test begin: paddle.gcd(Tensor([0],"int64"), Tensor([0],"int64"), )

[cuda error] paddle.gcd(Tensor([0],"int64"), Tensor([0],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.933323 test begin: paddle.gcd(Tensor([0],"int64"), Tensor([1],"int64"), )

[cuda error] paddle.gcd(Tensor([0],"int64"), Tensor([1],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.937323 test begin: paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )

[cuda error] paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.951796 test begin: paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), )

[torch error] paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (20) at non-singleton dimension 1
2025-03-05 15:41:47.965867 test begin: paddle.gcd(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), )

[torch error] paddle.gcd(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:47.966893 test begin: paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), )

[torch error] paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), ) 
 The size of tensor a (20) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:47.967967 test begin: paddle.gcd(Tensor([1],"int64"), Tensor([0],"int64"), )

[cuda error] paddle.gcd(Tensor([1],"int64"), Tensor([0],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.970720 test begin: paddle.gcd(x=Tensor([0, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([0, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.973627 test begin: paddle.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.979337 test begin: paddle.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (6) at non-singleton dimension 0
2025-03-05 15:41:47.982224 test begin: paddle.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:47.996132 test begin: paddle.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:47.999810 test begin: paddle.gcd(x=Tensor([0, 5],"int32"), y=Tensor([0, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([0, 5],"int32"), y=Tensor([0, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.007802 test begin: paddle.gcd(x=Tensor([0, 5],"int32"), y=Tensor([4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([0, 5],"int32"), y=Tensor([4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:48.015050 test begin: paddle.gcd(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )

[cuda error] paddle.gcd(x=Tensor([0],"int32"), y=Tensor([0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.021058 test begin: paddle.gcd(x=Tensor([0],"int32"), y=Tensor([1],"int32"), )

[cuda error] paddle.gcd(x=Tensor([0],"int32"), y=Tensor([1],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.026276 test begin: paddle.gcd(x=Tensor([1],"int32"), y=Tensor([0],"int32"), )

[cuda error] paddle.gcd(x=Tensor([1],"int32"), y=Tensor([0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.028802 test begin: paddle.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 0, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.034271 test begin: paddle.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 1
2025-03-05 15:41:48.049135 test begin: paddle.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 0],"int32"), )

[cuda error] paddle.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.056223 test begin: paddle.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 2
2025-03-05 15:41:48.065683 test begin: paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.067339 test begin: paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.068308 test begin: paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 0],"int32"), )

[torch error] paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 0],"int32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.069564 test begin: paddle.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 0],"int32"), )

[cuda error] paddle.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.074262 test begin: paddle.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:48.091094 test begin: paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([0, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([0, 5],"int32"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.092524 test begin: paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 0],"int32"), )

[torch error] paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 0],"int32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.093597 test begin: paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:48.094854 test begin: paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.106074 test begin: paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:48.117328 test begin: paddle.gcd(x=Tensor([6, 1, 0, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([6, 1, 0, 5],"int32"), y=Tensor([2, 1, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.119619 test begin: paddle.gcd(x=Tensor([6, 1, 4, 0],"int32"), y=Tensor([2, 1, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 1, 4, 0],"int32"), y=Tensor([2, 1, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 3
2025-03-05 15:41:48.120525 test begin: paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([0, 1, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([0, 1, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.123382 test begin: paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.124512 test begin: paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 0],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 0],"int32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:48.125560 test begin: paddle.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )

[cuda error] paddle.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.128561 test begin: paddle.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 2
2025-03-05 15:41:48.132773 test begin: paddle.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )

[cuda error] paddle.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.139528 test begin: paddle.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 5],"int32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 3
2025-03-05 15:41:48.141968 test begin: paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), ) 
 The size of tensor a (6) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.142964 test begin: paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.144564 test begin: paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.145931 test begin: paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )

[torch error] paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 0],"int32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:48.146978 test begin: paddle.heaviside(Tensor([0, 100, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )

[Pass] paddle.heaviside(Tensor([0, 100, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )
2025-03-05 15:41:48.150255 test begin: paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )

[Pass] paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )
2025-03-05 15:41:48.153959 test begin: paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([100, 13, 1],"float32"), )

[torch error] paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([100, 13, 1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (100) at non-singleton dimension 0
2025-03-05 15:41:48.157186 test begin: paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([13, 17],"float32"), )

[Pass] paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([13, 17],"float32"), )
2025-03-05 15:41:48.159851 test begin: paddle.heaviside(Tensor([0, 17],"float32"), Tensor([0, 17],"float32"), )

[Pass] paddle.heaviside(Tensor([0, 17],"float32"), Tensor([0, 17],"float32"), )
2025-03-05 15:41:48.163112 test begin: paddle.heaviside(Tensor([0, 17],"float32"), Tensor([13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([0, 17],"float32"), Tensor([13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (13) at non-singleton dimension 0
2025-03-05 15:41:48.165155 test begin: paddle.heaviside(Tensor([0, 17],"float32"), Tensor([1],"float32"), )

[Pass] paddle.heaviside(Tensor([0, 17],"float32"), Tensor([1],"float32"), )
2025-03-05 15:41:48.167750 test begin: paddle.heaviside(Tensor([0],"float32"), Tensor([300, 2048],"float32"), )

[torch error] paddle.heaviside(Tensor([0],"float32"), Tensor([300, 2048],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (2048) at non-singleton dimension 1
2025-03-05 15:41:48.182547 test begin: paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 0, 1],"float32"), )

[Pass] paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 0, 1],"float32"), )
2025-03-05 15:41:48.187895 test begin: paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 13, 1],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 13, 1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (13) at non-singleton dimension 1
2025-03-05 15:41:48.190108 test begin: paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (13) at non-singleton dimension 1
2025-03-05 15:41:48.191276 test begin: paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 0],"float32"), )

[Pass] paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 0],"float32"), )
2025-03-05 15:41:48.193905 test begin: paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 1],"float32"), )

[Pass] paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 1],"float32"), )
2025-03-05 15:41:48.195985 test begin: paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (17) at non-singleton dimension 2
2025-03-05 15:41:48.197097 test begin: paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), ) 
 The size of tensor a (100) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.198226 test begin: paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 17],"float32"), ) 
 The size of tensor a (13) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.199778 test begin: paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 0, 1],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 0, 1],"float32"), ) 
 The size of tensor a (13) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.200932 test begin: paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), ) 
 The size of tensor a (17) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.202290 test begin: paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([13, 0],"float32"), )

[torch error] paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([13, 0],"float32"), ) 
 The size of tensor a (17) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.203600 test begin: paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), )

[Pass] paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), )
2025-03-05 15:41:48.206222 test begin: paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (17) at non-singleton dimension 1
2025-03-05 15:41:48.207353 test begin: paddle.heaviside(Tensor([13, 0],"float32"), Tensor([1],"float32"), )

[Pass] paddle.heaviside(Tensor([13, 0],"float32"), Tensor([1],"float32"), )
2025-03-05 15:41:48.209094 test begin: paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0, 17],"float32"), ) 
 The size of tensor a (13) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.210272 test begin: paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0],"float32"), )

[torch error] paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (17) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.211337 test begin: paddle.heaviside(Tensor([13, 17],"float32"), Tensor([13, 0],"float32"), )

[torch error] paddle.heaviside(Tensor([13, 17],"float32"), Tensor([13, 0],"float32"), ) 
 The size of tensor a (17) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.212563 test begin: paddle.heaviside(Tensor([1],"float32"), Tensor([0, 2048],"float32"), )

[Pass] paddle.heaviside(Tensor([1],"float32"), Tensor([0, 2048],"float32"), )
2025-03-05 15:41:48.214734 test begin: paddle.heaviside(Tensor([1],"float32"), Tensor([300, 0],"float32"), )

[Pass] paddle.heaviside(Tensor([1],"float32"), Tensor([300, 0],"float32"), )
2025-03-05 15:41:48.216318 test begin: paddle.heaviside(Tensor([2, 0, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([2, 0, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (100) at non-singleton dimension 1
2025-03-05 15:41:48.218276 test begin: paddle.heaviside(Tensor([2, 100, 0, 17],"float32"), Tensor([100, 13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([2, 100, 0, 17],"float32"), Tensor([100, 13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (13) at non-singleton dimension 2
2025-03-05 15:41:48.220896 test begin: paddle.heaviside(Tensor([2, 100, 13, 0],"float32"), Tensor([100, 13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([2, 100, 13, 0],"float32"), Tensor([100, 13, 17],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (17) at non-singleton dimension 3
2025-03-05 15:41:48.222232 test begin: paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([0, 13, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([0, 13, 17],"float32"), ) 
 The size of tensor a (100) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.227889 test begin: paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 0, 17],"float32"), )

[torch error] paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 0, 17],"float32"), ) 
 The size of tensor a (13) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.240388 test begin: paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), )

[torch error] paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), ) 
 The size of tensor a (17) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:48.244256 test begin: paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,1,3,], )

[Pass] paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,1,3,], )
2025-03-05 15:41:48.250239 test begin: paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,], )

[Pass] paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,], )
2025-03-05 15:41:48.252254 test begin: paddle.hsplit(Tensor([0, 6, 3],"int64"), list[2,4,], )

[Pass] paddle.hsplit(Tensor([0, 6, 3],"int64"), list[2,4,], )
2025-03-05 15:41:48.253985 test begin: paddle.hsplit(Tensor([0, 6, 3],"int64"), tuple(2,1,3,), )

[Pass] paddle.hsplit(Tensor([0, 6, 3],"int64"), tuple(2,1,3,), )
2025-03-05 15:41:48.259712 test begin: paddle.hsplit(Tensor([0, 6],"int64"), list[-1,1,3,], )

[Pass] paddle.hsplit(Tensor([0, 6],"int64"), list[-1,1,3,], )
2025-03-05 15:41:48.262667 test begin: paddle.hsplit(Tensor([0, 6],"int64"), list[-1,], )

[Pass] paddle.hsplit(Tensor([0, 6],"int64"), list[-1,], )
2025-03-05 15:41:48.265355 test begin: paddle.hsplit(Tensor([0, 6],"int64"), list[2,4,], )

[Pass] paddle.hsplit(Tensor([0, 6],"int64"), list[2,4,], )
2025-03-05 15:41:48.267555 test begin: paddle.hsplit(Tensor([0, 6],"int64"), tuple(2,1,3,), )

[Pass] paddle.hsplit(Tensor([0, 6],"int64"), tuple(2,1,3,), )
2025-03-05 15:41:48.270178 test begin: paddle.hsplit(Tensor([0],"int64"), list[-1,1,3,], )

[Pass] paddle.hsplit(Tensor([0],"int64"), list[-1,1,3,], )
2025-03-05 15:41:48.282087 test begin: paddle.hsplit(Tensor([0],"int64"), list[-1,], )

[Pass] paddle.hsplit(Tensor([0],"int64"), list[-1,], )
2025-03-05 15:41:48.293511 test begin: paddle.hsplit(Tensor([0],"int64"), list[2,4,], )

[Pass] paddle.hsplit(Tensor([0],"int64"), list[2,4,], )
2025-03-05 15:41:48.295909 test begin: paddle.hsplit(Tensor([0],"int64"), tuple(2,1,3,), )

[Pass] paddle.hsplit(Tensor([0],"int64"), tuple(2,1,3,), )
2025-03-05 15:41:48.298262 test begin: paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,1,3,], )

[Pass] paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,1,3,], )
2025-03-05 15:41:48.300287 test begin: paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,], )

[Pass] paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,], )
2025-03-05 15:41:48.327145 test begin: paddle.hsplit(Tensor([4, 0, 3],"int64"), list[2,4,], )

[Pass] paddle.hsplit(Tensor([4, 0, 3],"int64"), list[2,4,], )
2025-03-05 15:41:48.329719 test begin: paddle.hsplit(Tensor([4, 0, 3],"int64"), tuple(2,1,3,), )

[Pass] paddle.hsplit(Tensor([4, 0, 3],"int64"), tuple(2,1,3,), )
2025-03-05 15:41:48.332678 test begin: paddle.hsplit(Tensor([4, 0],"int64"), list[-1,1,3,], )

[Pass] paddle.hsplit(Tensor([4, 0],"int64"), list[-1,1,3,], )
2025-03-05 15:41:48.335093 test begin: paddle.hsplit(Tensor([4, 0],"int64"), list[-1,], )

[Pass] paddle.hsplit(Tensor([4, 0],"int64"), list[-1,], )
2025-03-05 15:41:48.336808 test begin: paddle.hsplit(Tensor([4, 0],"int64"), list[2,4,], )

[Pass] paddle.hsplit(Tensor([4, 0],"int64"), list[2,4,], )
2025-03-05 15:41:48.346174 test begin: paddle.hsplit(Tensor([4, 0],"int64"), tuple(2,1,3,), )

[Pass] paddle.hsplit(Tensor([4, 0],"int64"), tuple(2,1,3,), )
2025-03-05 15:41:48.350975 test begin: paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,1,3,], )

[Pass] paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,1,3,], )
2025-03-05 15:41:48.353760 test begin: paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,], )

[Pass] paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,], )
2025-03-05 15:41:48.356520 test begin: paddle.hsplit(Tensor([4, 6, 0],"int64"), list[2,4,], )

[Pass] paddle.hsplit(Tensor([4, 6, 0],"int64"), list[2,4,], )
2025-03-05 15:41:48.359423 test begin: paddle.hsplit(Tensor([4, 6, 0],"int64"), tuple(2,1,3,), )

[Pass] paddle.hsplit(Tensor([4, 6, 0],"int64"), tuple(2,1,3,), )
2025-03-05 15:41:48.362323 test begin: paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.364270 test begin: paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 0 but got size 1 for tensor number 1 in the list.
2025-03-05 15:41:48.366627 test begin: paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.368313 test begin: paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.371144 test begin: paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 0 but got size 1 for tensor number 1 in the list.
2025-03-05 15:41:48.372912 test begin: paddle.hstack(list[Tensor([0, 1, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0, 1, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.375173 test begin: paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.377160 test begin: paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 0 but got size 1 for tensor number 1 in the list.
2025-03-05 15:41:48.378789 test begin: paddle.hstack(list[Tensor([0, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.380438 test begin: paddle.hstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.382979 test begin: paddle.hstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
2025-03-05 15:41:48.386249 test begin: paddle.hstack(list[Tensor([0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.387951 test begin: paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.390415 test begin: paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
2025-03-05 15:41:48.394256 test begin: paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.396756 test begin: paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.398480 test begin: paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
2025-03-05 15:41:48.401622 test begin: paddle.hstack(list[Tensor([1, 0, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 0, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.403177 test begin: paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.404535 test begin: paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
2025-03-05 15:41:48.409641 test begin: paddle.hstack(list[Tensor([1, 0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.412098 test begin: paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.414821 test begin: paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 0 but got size 1 for tensor number 1 in the list.
2025-03-05 15:41:48.416888 test begin: paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.418932 test begin: paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.420863 test begin: paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 0 but got size 1 for tensor number 1 in the list.
2025-03-05 15:41:48.422254 test begin: paddle.hstack(list[Tensor([1, 1, 0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 1, 0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.423784 test begin: paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.425204 test begin: paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 0 but got size 1 for tensor number 1 in the list.
2025-03-05 15:41:48.426682 test begin: paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),], )

[paddle error] paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),], ) 
 (InvalidArgument) concat(): argument 'x' (position 0) must be list of Tensors, but got empty list (at ../paddle/fluid/pybind/eager_utils.cc:1400)

2025-03-05 15:41:48.428080 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 1 in the list.
2025-03-05 15:41:48.429301 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
2025-03-05 15:41:48.431504 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 1 in the list.
2025-03-05 15:41:48.432867 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 1 in the list.
2025-03-05 15:41:48.434417 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 2 in the list.
2025-03-05 15:41:48.435864 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
2025-03-05 15:41:48.439759 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 2 in the list.
2025-03-05 15:41:48.440979 test begin: paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 2 in the list.
2025-03-05 15:41:48.442902 test begin: paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 1 in the list.
2025-03-05 15:41:48.443961 test begin: paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
2025-03-05 15:41:48.447053 test begin: paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 1 in the list.
2025-03-05 15:41:48.448274 test begin: paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 2 in the list.
2025-03-05 15:41:48.449895 test begin: paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
2025-03-05 15:41:48.453345 test begin: paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 2 in the list.
2025-03-05 15:41:48.454482 test begin: paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 1 in the list.
2025-03-05 15:41:48.455600 test begin: paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
2025-03-05 15:41:48.457909 test begin: paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )

[torch error] paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], ) 
 Sizes of tensors must match except in dimension 1. Expected size 1 but got size 0 for tensor number 2 in the list.
2025-03-05 15:41:48.459164 test begin: paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
2025-03-05 15:41:48.461722 test begin: paddle.hstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
2025-03-05 15:41:48.464773 test begin: paddle.hstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )

[Pass] paddle.hstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
2025-03-05 15:41:48.470614 test begin: paddle.hypot(Tensor([0, 10],"float32"), Tensor([0, 1],"float32"), )

[cuda error] paddle.hypot(Tensor([0, 10],"float32"), Tensor([0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.472862 test begin: paddle.hypot(Tensor([0, 10],"float32"), Tensor([10, 1],"float32"), )

[torch error] paddle.hypot(Tensor([0, 10],"float32"), Tensor([10, 1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:48.474355 test begin: paddle.hypot(Tensor([0],"float32"), Tensor([0],"float32"), )

[cuda error] paddle.hypot(Tensor([0],"float32"), Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.476388 test begin: paddle.hypot(Tensor([0],"float32"), Tensor([1],"float32"), )

[cuda error] paddle.hypot(Tensor([0],"float32"), Tensor([1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.478842 test begin: paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )

[cuda error] paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.480701 test begin: paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), )

[cuda error] paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.483967 test begin: paddle.hypot(Tensor([10, 10],"float32"), Tensor([0, 1],"float32"), )

[torch error] paddle.hypot(Tensor([10, 10],"float32"), Tensor([0, 1],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.485044 test begin: paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )

[torch error] paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.486023 test begin: paddle.hypot(Tensor([1],"float32"), Tensor([0],"float32"), )

[cuda error] paddle.hypot(Tensor([1],"float32"), Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.487807 test begin: paddle.i0(Tensor([0, 20, 1],"float32"), )

[cuda error] paddle.i0(Tensor([0, 20, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.489814 test begin: paddle.i0(Tensor([0],"float32"), )

[cuda error] paddle.i0(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.491205 test begin: paddle.i0(Tensor([10, 0, 1],"float32"), )

[cuda error] paddle.i0(Tensor([10, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.493456 test begin: paddle.i0(Tensor([10, 20, 0],"float32"), )

[cuda error] paddle.i0(Tensor([10, 20, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.495181 test begin: paddle.i0e(Tensor([0],"float32"), )

[cuda error] paddle.i0e(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.497717 test begin: paddle.i1(Tensor([0],"float64"), )

[cuda error] paddle.i1(Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.499634 test begin: paddle.i1e(Tensor([0],"float64"), )

[cuda error] paddle.i1e(Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.501562 test begin: paddle.imag(Tensor([0, 10, 10, 20],"complex128"), )

[Pass] paddle.imag(Tensor([0, 10, 10, 20],"complex128"), )
2025-03-05 15:41:48.504475 test begin: paddle.imag(Tensor([0, 3],"complex128"), )

[Pass] paddle.imag(Tensor([0, 3],"complex128"), )
2025-03-05 15:41:48.506237 test begin: paddle.imag(Tensor([10, 0, 10, 20],"complex128"), )

[Pass] paddle.imag(Tensor([10, 0, 10, 20],"complex128"), )
2025-03-05 15:41:48.508176 test begin: paddle.imag(Tensor([10, 10, 0, 20],"complex128"), )

[Pass] paddle.imag(Tensor([10, 10, 0, 20],"complex128"), )
2025-03-05 15:41:48.510260 test begin: paddle.imag(Tensor([10, 10, 10, 0],"complex128"), )

[Pass] paddle.imag(Tensor([10, 10, 10, 0],"complex128"), )
2025-03-05 15:41:48.512281 test begin: paddle.imag(Tensor([2, 0],"complex128"), )

[Pass] paddle.imag(Tensor([2, 0],"complex128"), )
2025-03-05 15:41:48.513934 test begin: paddle.imag(x=Tensor([0, 10],"complex64"), )

[Pass] paddle.imag(x=Tensor([0, 10],"complex64"), )
2025-03-05 15:41:48.516281 test begin: paddle.imag(x=Tensor([1, 0],"complex64"), )

[Pass] paddle.imag(x=Tensor([1, 0],"complex64"), )
2025-03-05 15:41:48.518334 test begin: paddle.inner(Tensor([0, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )

[Pass] paddle.inner(Tensor([0, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
2025-03-05 15:41:48.521949 test begin: paddle.inner(Tensor([0, 10, 10],"float64"), Tensor([2, 10],"float64"), )

[Pass] paddle.inner(Tensor([0, 10, 10],"float64"), Tensor([2, 10],"float64"), )
2025-03-05 15:41:48.525442 test begin: paddle.inner(Tensor([0, 50],"complex128"), Tensor([50],"complex128"), )

[Pass] paddle.inner(Tensor([0, 50],"complex128"), Tensor([50],"complex128"), )
2025-03-05 15:41:48.528596 test begin: paddle.inner(Tensor([0, 50],"float64"), Tensor([50],"float64"), )

[Pass] paddle.inner(Tensor([0, 50],"float64"), Tensor([50],"float64"), )
2025-03-05 15:41:48.531509 test begin: paddle.inner(Tensor([20, 0],"complex128"), Tensor([50],"complex128"), )

[torch error] paddle.inner(Tensor([20, 0],"complex128"), Tensor([50],"complex128"), ) 
 inner() the last dimension must match on both input tensors but got shapes [20, 0] and [50]
2025-03-05 15:41:48.533004 test begin: paddle.inner(Tensor([20, 0],"float64"), Tensor([50],"float64"), )

[torch error] paddle.inner(Tensor([20, 0],"float64"), Tensor([50],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [20, 0] and [50]
2025-03-05 15:41:48.534655 test begin: paddle.inner(Tensor([20, 50],"complex128"), Tensor([0],"complex128"), )

[torch error] paddle.inner(Tensor([20, 50],"complex128"), Tensor([0],"complex128"), ) 
 inner() the last dimension must match on both input tensors but got shapes [20, 50] and [0]
2025-03-05 15:41:48.535870 test begin: paddle.inner(Tensor([20, 50],"float64"), Tensor([0],"float64"), )

[torch error] paddle.inner(Tensor([20, 50],"float64"), Tensor([0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [20, 50] and [0]
2025-03-05 15:41:48.537094 test begin: paddle.inner(Tensor([5, 0, 10],"complex128"), Tensor([2, 10],"complex128"), )

[Pass] paddle.inner(Tensor([5, 0, 10],"complex128"), Tensor([2, 10],"complex128"), )
2025-03-05 15:41:48.539656 test begin: paddle.inner(Tensor([5, 0, 10],"float64"), Tensor([2, 10],"float64"), )

[Pass] paddle.inner(Tensor([5, 0, 10],"float64"), Tensor([2, 10],"float64"), )
2025-03-05 15:41:48.542248 test begin: paddle.inner(Tensor([5, 10, 0],"complex128"), Tensor([2, 10],"complex128"), )

[torch error] paddle.inner(Tensor([5, 10, 0],"complex128"), Tensor([2, 10],"complex128"), ) 
 inner() the last dimension must match on both input tensors but got shapes [5, 10, 0] and [2, 10]
2025-03-05 15:41:48.543186 test begin: paddle.inner(Tensor([5, 10, 0],"float64"), Tensor([2, 10],"float64"), )

[torch error] paddle.inner(Tensor([5, 10, 0],"float64"), Tensor([2, 10],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [5, 10, 0] and [2, 10]
2025-03-05 15:41:48.543857 test begin: paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )

[Pass] paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )
2025-03-05 15:41:48.545892 test begin: paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 0],"complex128"), )

[torch error] paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 0],"complex128"), ) 
 inner() the last dimension must match on both input tensors but got shapes [5, 10, 10] and [2, 0]
2025-03-05 15:41:48.546790 test begin: paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )

[Pass] paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
2025-03-05 15:41:48.548890 test begin: paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([2, 0],"float64"), )

[torch error] paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([2, 0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [5, 10, 10] and [2, 0]
2025-03-05 15:41:48.550144 test begin: paddle.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
2025-03-05 15:41:48.552842 test begin: paddle.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
2025-03-05 15:41:48.557003 test begin: paddle.inner(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )

[Pass] paddle.inner(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
2025-03-05 15:41:48.559713 test begin: paddle.inner(x=Tensor([0, 4],"float32"), y=Tensor([4, 4],"float32"), )

[Pass] paddle.inner(x=Tensor([0, 4],"float32"), y=Tensor([4, 4],"float32"), )
2025-03-05 15:41:48.564143 test begin: paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
2025-03-05 15:41:48.567501 test begin: paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
2025-03-05 15:41:48.570530 test begin: paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.572710 test begin: paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([5, 4],"float64"), )
2025-03-05 15:41:48.575152 test begin: paddle.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.579028 test begin: paddle.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.582348 test begin: paddle.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )

[paddle error] paddle.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), ) 
 (InvalidArgument) can not reshape 0 to -1, 0, because the unspecified dimension 0 can be any number and is ambiguous
  [Hint: Expected unk_dim_idx == -1, but received unk_dim_idx:0 != -1:-1.] (at ../paddle/phi/infermeta/unary.cc:2217)

2025-03-05 15:41:48.584757 test begin: paddle.inner(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )

[torch error] paddle.inner(x=Tensor([0],"float64"), y=Tensor([4],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [0] and [4]
2025-03-05 15:41:48.585925 test begin: paddle.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
2025-03-05 15:41:48.588491 test begin: paddle.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.590664 test begin: paddle.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
2025-03-05 15:41:48.592544 test begin: paddle.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.594848 test begin: paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )

[paddle error] paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), ) 
 (InvalidArgument) can not reshape 2, 5, 3, 0 to -1, 0, because the unspecified dimension 0 can be any number and is ambiguous
  [Hint: Expected unk_dim_idx == -1, but received unk_dim_idx:0 != -1:-1.] (at ../paddle/phi/infermeta/unary.cc:2217)

2025-03-05 15:41:48.598396 test begin: paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )

[torch error] paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [2, 5, 3, 0] and [3, 2, 5, 4]
2025-03-05 15:41:48.599754 test begin: paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.601560 test begin: paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
2025-03-05 15:41:48.603848 test begin: paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
2025-03-05 15:41:48.606618 test begin: paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )

[torch error] paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [2, 5, 3, 4] and [3, 2, 5, 0]
2025-03-05 15:41:48.607751 test begin: paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 4],"float64"), )

[torch error] paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 4],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [3, 0] and [3, 2, 4]
2025-03-05 15:41:48.609072 test begin: paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )

[torch error] paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [3, 0] and [3, 2, 5, 4]
2025-03-05 15:41:48.609911 test begin: paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )

[paddle error] paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), ) 
 (InvalidArgument) can not reshape 3, 0 to -1, 0, because the unspecified dimension 0 can be any number and is ambiguous
  [Hint: Expected unk_dim_idx == -1, but received unk_dim_idx:0 != -1:-1.] (at ../paddle/phi/infermeta/unary.cc:2217)

2025-03-05 15:41:48.612156 test begin: paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 4],"float64"), )

[torch error] paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 4],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [3, 0] and [5, 4]
2025-03-05 15:41:48.614469 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
2025-03-05 15:41:48.617042 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
2025-03-05 15:41:48.619703 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
2025-03-05 15:41:48.621337 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
2025-03-05 15:41:48.623919 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
2025-03-05 15:41:48.626193 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
2025-03-05 15:41:48.628924 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0],"float64"), )

[torch error] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [3, 4] and [3, 2, 0]
2025-03-05 15:41:48.630022 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )

[torch error] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [3, 4] and [3, 2, 5, 0]
2025-03-05 15:41:48.631233 test begin: paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 0],"float64"), )

[torch error] paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [3, 4] and [5, 0]
2025-03-05 15:41:48.632936 test begin: paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )

[paddle error] paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), ) 
 (InvalidArgument) can not reshape 4, 0 to -1, 0, because the unspecified dimension 0 can be any number and is ambiguous
  [Hint: Expected unk_dim_idx == -1, but received unk_dim_idx:0 != -1:-1.] (at ../paddle/phi/infermeta/unary.cc:2217)

2025-03-05 15:41:48.636225 test begin: paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )

[torch error] paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), ) 
 inner() the last dimension must match on both input tensors but got shapes [4, 0] and [4, 4]
2025-03-05 15:41:48.637594 test begin: paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )

[Pass] paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
2025-03-05 15:41:48.639995 test begin: paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 0],"float32"), )

[torch error] paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 0],"float32"), ) 
 inner() the last dimension must match on both input tensors but got shapes [4, 4] and [4, 0]
2025-03-05 15:41:48.641354 test begin: paddle.inner(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )

[torch error] paddle.inner(x=Tensor([4],"float64"), y=Tensor([0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [4] and [0]
2025-03-05 15:41:48.642516 test begin: paddle.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
2025-03-05 15:41:48.644927 test begin: paddle.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
2025-03-05 15:41:48.648357 test begin: paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )

[paddle error] paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), ) 
 (InvalidArgument) can not reshape 5, 3, 0 to -1, 0, because the unspecified dimension 0 can be any number and is ambiguous
  [Hint: Expected unk_dim_idx == -1, but received unk_dim_idx:0 != -1:-1.] (at ../paddle/phi/infermeta/unary.cc:2217)

2025-03-05 15:41:48.651067 test begin: paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 4],"float64"), )

[torch error] paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 4],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [5, 3, 0] and [2, 5, 4]
2025-03-05 15:41:48.652669 test begin: paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
2025-03-05 15:41:48.656286 test begin: paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )

[Pass] paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
2025-03-05 15:41:48.659359 test begin: paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 0],"float64"), )

[torch error] paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 0],"float64"), ) 
 inner() the last dimension must match on both input tensors but got shapes [5, 3, 4] and [2, 5, 0]
2025-03-05 15:41:48.660960 test begin: paddle.is_complex(Tensor([0, 10285, 2],"float32"), )

[Pass] paddle.is_complex(Tensor([0, 10285, 2],"float32"), )
2025-03-05 15:41:48.662958 test begin: paddle.is_complex(Tensor([0, 14, 5, 14],"complex128"), )

[Pass] paddle.is_complex(Tensor([0, 14, 5, 14],"complex128"), )
2025-03-05 15:41:48.664648 test begin: paddle.is_complex(Tensor([0, 2, 2],"float32"), )

[Pass] paddle.is_complex(Tensor([0, 2, 2],"float32"), )
2025-03-05 15:41:48.666379 test begin: paddle.is_complex(Tensor([0, 2],"float32"), )

[Pass] paddle.is_complex(Tensor([0, 2],"float32"), )
2025-03-05 15:41:48.668107 test begin: paddle.is_complex(Tensor([0, 3, 4, 5],"bfloat16"), )

[Pass] paddle.is_complex(Tensor([0, 3, 4, 5],"bfloat16"), )
2025-03-05 15:41:48.670133 test begin: paddle.is_complex(Tensor([0, 4, 5, 6, 8],"float32"), )

[Pass] paddle.is_complex(Tensor([0, 4, 5, 6, 8],"float32"), )
2025-03-05 15:41:48.672109 test begin: paddle.is_complex(Tensor([0],"float32"), )

[Pass] paddle.is_complex(Tensor([0],"float32"), )
2025-03-05 15:41:48.674276 test begin: paddle.is_complex(Tensor([0],"int64"), )

[Pass] paddle.is_complex(Tensor([0],"int64"), )
2025-03-05 15:41:48.675879 test begin: paddle.is_complex(Tensor([1, 0, 2],"float32"), )

[Pass] paddle.is_complex(Tensor([1, 0, 2],"float32"), )
2025-03-05 15:41:48.677937 test begin: paddle.is_complex(Tensor([1, 0, 5, 14],"complex128"), )

[Pass] paddle.is_complex(Tensor([1, 0, 5, 14],"complex128"), )
2025-03-05 15:41:48.679080 test begin: paddle.is_complex(Tensor([1, 0],"float32"), )

[Pass] paddle.is_complex(Tensor([1, 0],"float32"), )
2025-03-05 15:41:48.681170 test begin: paddle.is_complex(Tensor([1, 10285, 0],"float32"), )

[Pass] paddle.is_complex(Tensor([1, 10285, 0],"float32"), )
2025-03-05 15:41:48.682904 test begin: paddle.is_complex(Tensor([1, 14, 0, 14],"complex128"), )

[Pass] paddle.is_complex(Tensor([1, 14, 0, 14],"complex128"), )
2025-03-05 15:41:48.684121 test begin: paddle.is_complex(Tensor([1, 14, 5, 0],"complex128"), )

[Pass] paddle.is_complex(Tensor([1, 14, 5, 0],"complex128"), )
2025-03-05 15:41:48.685091 test begin: paddle.is_complex(Tensor([1, 2, 0],"float32"), )

[Pass] paddle.is_complex(Tensor([1, 2, 0],"float32"), )
2025-03-05 15:41:48.686131 test begin: paddle.is_complex(Tensor([2, 0, 4, 5],"bfloat16"), )

[Pass] paddle.is_complex(Tensor([2, 0, 4, 5],"bfloat16"), )
2025-03-05 15:41:48.687224 test begin: paddle.is_complex(Tensor([2, 3, 0, 5],"bfloat16"), )

[Pass] paddle.is_complex(Tensor([2, 3, 0, 5],"bfloat16"), )
2025-03-05 15:41:48.688064 test begin: paddle.is_complex(Tensor([2, 3, 4, 0],"bfloat16"), )

[Pass] paddle.is_complex(Tensor([2, 3, 4, 0],"bfloat16"), )
2025-03-05 15:41:48.688858 test begin: paddle.is_complex(Tensor([3, 0, 5, 6, 8],"float32"), )

[Pass] paddle.is_complex(Tensor([3, 0, 5, 6, 8],"float32"), )
2025-03-05 15:41:48.689600 test begin: paddle.is_complex(Tensor([3, 4, 0, 6, 8],"float32"), )

[Pass] paddle.is_complex(Tensor([3, 4, 0, 6, 8],"float32"), )
2025-03-05 15:41:48.691110 test begin: paddle.is_complex(Tensor([3, 4, 5, 0, 8],"float32"), )

[Pass] paddle.is_complex(Tensor([3, 4, 5, 0, 8],"float32"), )
2025-03-05 15:41:48.691954 test begin: paddle.is_complex(Tensor([3, 4, 5, 6, 0],"float32"), )

[Pass] paddle.is_complex(Tensor([3, 4, 5, 6, 0],"float32"), )
2025-03-05 15:41:48.693059 test begin: paddle.isclose(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )

[cuda error] paddle.isclose(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.694931 test begin: paddle.isclose(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )

[torch error] paddle.isclose(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:48.697548 test begin: paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )

[cuda error] paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.700104 test begin: paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )

[torch error] paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 1
2025-03-05 15:41:48.701555 test begin: paddle.isclose(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )

[torch error] paddle.isclose(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.702546 test begin: paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )

[torch error] paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.703441 test begin: paddle.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )

[cuda error] paddle.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.705137 test begin: paddle.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )

[torch error] paddle.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:48.706912 test begin: paddle.isclose(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )

[cuda error] paddle.isclose(x=Tensor([0],"float32"), y=Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.708265 test begin: paddle.isclose(x=Tensor([0],"float32"), y=Tensor([2],"float32"), )

[torch error] paddle.isclose(x=Tensor([0],"float32"), y=Tensor([2],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:48.710274 test begin: paddle.isclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )

[cuda error] paddle.isclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.712869 test begin: paddle.isclose(x=Tensor([0],"float64"), y=Tensor([2],"float64"), )

[torch error] paddle.isclose(x=Tensor([0],"float64"), y=Tensor([2],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:48.714265 test begin: paddle.isclose(x=Tensor([2],"float32"), y=Tensor([0],"float32"), )

[torch error] paddle.isclose(x=Tensor([2],"float32"), y=Tensor([0],"float32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.715393 test begin: paddle.isclose(x=Tensor([2],"float64"), y=Tensor([0],"float64"), )

[torch error] paddle.isclose(x=Tensor([2],"float64"), y=Tensor([0],"float64"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.717638 test begin: paddle.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )

[cuda error] paddle.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.719548 test begin: paddle.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )

[torch error] paddle.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 4, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 1
2025-03-05 15:41:48.722227 test begin: paddle.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 0],"float64"), )

[cuda error] paddle.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.723858 test begin: paddle.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 5],"float64"), )

[torch error] paddle.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 2
2025-03-05 15:41:48.725444 test begin: paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )

[torch error] paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:48.726334 test begin: paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )

[torch error] paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 0, 5],"float64"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:48.727294 test begin: paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 0],"float64"), )

[torch error] paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 0],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:48.728276 test begin: paddle.isfinite(Tensor([0, 17, 10],"int32"), )

[cuda error] paddle.isfinite(Tensor([0, 17, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.730405 test begin: paddle.isfinite(Tensor([0, 17, 5, 6, 7],"float16"), )

[cuda error] paddle.isfinite(Tensor([0, 17, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.732021 test begin: paddle.isfinite(Tensor([0, 17],"float32"), )

[cuda error] paddle.isfinite(Tensor([0, 17],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.733210 test begin: paddle.isfinite(Tensor([0, 280, 376, 25, 3],"float32"), )

[cuda error] paddle.isfinite(Tensor([0, 280, 376, 25, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.734691 test begin: paddle.isfinite(Tensor([0, 3, 4, 5],"float64"), )

[cuda error] paddle.isfinite(Tensor([0, 3, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.736285 test begin: paddle.isfinite(Tensor([0, 94, 311],"float32"), )

[cuda error] paddle.isfinite(Tensor([0, 94, 311],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.737328 test begin: paddle.isfinite(Tensor([0],"int64"), )

[cuda error] paddle.isfinite(Tensor([0],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.738628 test begin: paddle.isfinite(Tensor([11, 0, 10],"int32"), )

[cuda error] paddle.isfinite(Tensor([11, 0, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.740156 test begin: paddle.isfinite(Tensor([11, 0],"float32"), )

[cuda error] paddle.isfinite(Tensor([11, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.741427 test begin: paddle.isfinite(Tensor([11, 17, 0],"int32"), )

[cuda error] paddle.isfinite(Tensor([11, 17, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.742662 test begin: paddle.isfinite(Tensor([2, 0, 4, 5],"float64"), )

[cuda error] paddle.isfinite(Tensor([2, 0, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.744520 test begin: paddle.isfinite(Tensor([2, 3, 0, 5],"float64"), )

[cuda error] paddle.isfinite(Tensor([2, 3, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.745696 test begin: paddle.isfinite(Tensor([2, 3, 4, 0],"float64"), )

[cuda error] paddle.isfinite(Tensor([2, 3, 4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.747107 test begin: paddle.isfinite(Tensor([4, 0, 311],"float32"), )

[cuda error] paddle.isfinite(Tensor([4, 0, 311],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.748493 test begin: paddle.isfinite(Tensor([4, 0, 376, 25, 3],"float32"), )

[cuda error] paddle.isfinite(Tensor([4, 0, 376, 25, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.750931 test begin: paddle.isfinite(Tensor([4, 280, 0, 25, 3],"float32"), )

[cuda error] paddle.isfinite(Tensor([4, 280, 0, 25, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.752485 test begin: paddle.isfinite(Tensor([4, 280, 376, 0, 3],"float32"), )

[cuda error] paddle.isfinite(Tensor([4, 280, 376, 0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.753454 test begin: paddle.isfinite(Tensor([4, 280, 376, 25, 0],"float32"), )

[cuda error] paddle.isfinite(Tensor([4, 280, 376, 25, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.755081 test begin: paddle.isfinite(Tensor([4, 94, 0],"float32"), )

[cuda error] paddle.isfinite(Tensor([4, 94, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.756192 test begin: paddle.isfinite(Tensor([8, 0, 5, 6, 7],"float16"), )

[cuda error] paddle.isfinite(Tensor([8, 0, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.757355 test begin: paddle.isfinite(Tensor([8, 17, 0, 6, 7],"float16"), )

[cuda error] paddle.isfinite(Tensor([8, 17, 0, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.758360 test begin: paddle.isfinite(Tensor([8, 17, 5, 0, 7],"float16"), )

[cuda error] paddle.isfinite(Tensor([8, 17, 5, 0, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.759647 test begin: paddle.isfinite(Tensor([8, 17, 5, 6, 0],"float16"), )

[cuda error] paddle.isfinite(Tensor([8, 17, 5, 6, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.760676 test begin: paddle.isfinite(x=Tensor([0],"float64"), )

[cuda error] paddle.isfinite(x=Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.762706 test begin: paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )

[Pass] paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
2025-03-05 15:41:48.770797 test begin: paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )

[Pass] paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
2025-03-05 15:41:48.774631 test begin: paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )

[Pass] paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
2025-03-05 15:41:48.778446 test begin: paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )

[Pass] paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
2025-03-05 15:41:48.782439 test begin: paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, False, )

[Pass] paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, False, )
2025-03-05 15:41:48.788228 test begin: paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, True, )

[Pass] paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, True, )
2025-03-05 15:41:48.796332 test begin: paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, False, )

[Pass] paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, False, )
2025-03-05 15:41:48.804182 test begin: paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, True, )

[Pass] paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, True, )
2025-03-05 15:41:48.813134 test begin: paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, False, )

[cuda error] paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.817114 test begin: paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, True, )

[cuda error] paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.819396 test begin: paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, False, )

[cuda error] paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.825090 test begin: paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, True, )

[cuda error] paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.829534 test begin: paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, False, )

[cuda error] paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.831739 test begin: paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, True, )

[cuda error] paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.833679 test begin: paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, False, )

[cuda error] paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.839572 test begin: paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, True, )

[cuda error] paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:48.844615 test begin: paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, False, )
2025-03-05 15:41:48.854935 test begin: paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, True, )
2025-03-05 15:41:48.860819 test begin: paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, False, )
2025-03-05 15:41:48.870089 test begin: paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, True, )
2025-03-05 15:41:48.873119 test begin: paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
2025-03-05 15:41:48.878482 test begin: paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
2025-03-05 15:41:48.885421 test begin: paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
2025-03-05 15:41:48.905037 test begin: paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
2025-03-05 15:41:48.912425 test begin: paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
2025-03-05 15:41:48.923945 test begin: paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
2025-03-05 15:41:48.930028 test begin: paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
2025-03-05 15:41:48.937507 test begin: paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
2025-03-05 15:41:48.943097 test begin: paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
2025-03-05 15:41:48.963451 test begin: paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
2025-03-05 15:41:48.970760 test begin: paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
2025-03-05 15:41:48.975308 test begin: paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
2025-03-05 15:41:48.979761 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, False, )
2025-03-05 15:41:48.983814 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, True, )
2025-03-05 15:41:48.987372 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, False, )
2025-03-05 15:41:48.990201 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, True, )
2025-03-05 15:41:48.992717 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, False, )
2025-03-05 15:41:48.995914 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, True, )
2025-03-05 15:41:49.000437 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, False, )
2025-03-05 15:41:49.005341 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, True, )
2025-03-05 15:41:49.010670 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, False, )
2025-03-05 15:41:49.014406 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, True, )
2025-03-05 15:41:49.018189 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, False, )
2025-03-05 15:41:49.021201 test begin: paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, True, )
2025-03-05 15:41:49.024376 test begin: paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, False, )
2025-03-05 15:41:49.027302 test begin: paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, True, )
2025-03-05 15:41:49.029994 test begin: paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, False, )
2025-03-05 15:41:49.032537 test begin: paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, True, )
2025-03-05 15:41:49.035679 test begin: paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, False, )

[Pass] paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, False, )
2025-03-05 15:41:49.038085 test begin: paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, True, )

[Pass] paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, True, )
2025-03-05 15:41:49.042324 test begin: paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, False, )

[Pass] paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, False, )
2025-03-05 15:41:49.047197 test begin: paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, True, )

[Pass] paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, True, )
2025-03-05 15:41:49.050829 test begin: paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, False, )

[cuda error] paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.052861 test begin: paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, True, )

[cuda error] paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.054824 test begin: paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, False, )

[cuda error] paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.057228 test begin: paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, True, )

[cuda error] paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.059339 test begin: paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, False, )

[cuda error] paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.062055 test begin: paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, True, )

[cuda error] paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.063949 test begin: paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, False, )

[cuda error] paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, False, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.067566 test begin: paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, True, )

[cuda error] paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, True, ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.070465 test begin: paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, False, )

[Pass] paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
2025-03-05 15:41:49.073080 test begin: paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, True, )

[Pass] paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
2025-03-05 15:41:49.076749 test begin: paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, False, )

[Pass] paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, False, )
2025-03-05 15:41:49.079216 test begin: paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, True, )

[Pass] paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, True, )
2025-03-05 15:41:49.083888 test begin: paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, False, )

[Pass] paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
2025-03-05 15:41:49.087191 test begin: paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, True, )

[Pass] paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
2025-03-05 15:41:49.090871 test begin: paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, False, )

[Pass] paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, False, )
2025-03-05 15:41:49.093690 test begin: paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, True, )

[Pass] paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, True, )
2025-03-05 15:41:49.096742 test begin: paddle.isinf(Tensor([0, 12],"float32"), )

[cuda error] paddle.isinf(Tensor([0, 12],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.098591 test begin: paddle.isinf(Tensor([0, 12],"float64"), )

[cuda error] paddle.isinf(Tensor([0, 12],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.099805 test begin: paddle.isinf(Tensor([0, 17, 10],"int16"), )

[cuda error] paddle.isinf(Tensor([0, 17, 10],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.101730 test begin: paddle.isinf(Tensor([0, 17, 10],"int32"), )

[cuda error] paddle.isinf(Tensor([0, 17, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.102898 test begin: paddle.isinf(Tensor([0, 17, 5, 6, 7],"float16"), )

[cuda error] paddle.isinf(Tensor([0, 17, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.103747 test begin: paddle.isinf(Tensor([0, 3, 4, 5],"float64"), )

[cuda error] paddle.isinf(Tensor([0, 3, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.105839 test begin: paddle.isinf(Tensor([0, 3, 4, 5],"int8"), )

[cuda error] paddle.isinf(Tensor([0, 3, 4, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.107729 test begin: paddle.isinf(Tensor([0],"int64"), )

[cuda error] paddle.isinf(Tensor([0],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.110182 test begin: paddle.isinf(Tensor([0],"uint8"), )

[cuda error] paddle.isinf(Tensor([0],"uint8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.111799 test begin: paddle.isinf(Tensor([10, 0],"float32"), )

[cuda error] paddle.isinf(Tensor([10, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.113155 test begin: paddle.isinf(Tensor([10, 0],"float64"), )

[cuda error] paddle.isinf(Tensor([10, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.114506 test begin: paddle.isinf(Tensor([11, 0, 10],"int16"), )

[cuda error] paddle.isinf(Tensor([11, 0, 10],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.115683 test begin: paddle.isinf(Tensor([11, 0, 10],"int32"), )

[cuda error] paddle.isinf(Tensor([11, 0, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.116744 test begin: paddle.isinf(Tensor([11, 17, 0],"int16"), )

[cuda error] paddle.isinf(Tensor([11, 17, 0],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.117878 test begin: paddle.isinf(Tensor([11, 17, 0],"int32"), )

[cuda error] paddle.isinf(Tensor([11, 17, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.119024 test begin: paddle.isinf(Tensor([2, 0, 4, 5],"float64"), )

[cuda error] paddle.isinf(Tensor([2, 0, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.120393 test begin: paddle.isinf(Tensor([2, 0, 4, 5],"int8"), )

[cuda error] paddle.isinf(Tensor([2, 0, 4, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.122015 test begin: paddle.isinf(Tensor([2, 3, 0, 5],"float64"), )

[cuda error] paddle.isinf(Tensor([2, 3, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.123371 test begin: paddle.isinf(Tensor([2, 3, 0, 5],"int8"), )

[cuda error] paddle.isinf(Tensor([2, 3, 0, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.124859 test begin: paddle.isinf(Tensor([2, 3, 4, 0],"float64"), )

[cuda error] paddle.isinf(Tensor([2, 3, 4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.126113 test begin: paddle.isinf(Tensor([2, 3, 4, 0],"int8"), )

[cuda error] paddle.isinf(Tensor([2, 3, 4, 0],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.127148 test begin: paddle.isinf(Tensor([8, 0, 5, 6, 7],"float16"), )

[cuda error] paddle.isinf(Tensor([8, 0, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.128423 test begin: paddle.isinf(Tensor([8, 17, 0, 6, 7],"float16"), )

[cuda error] paddle.isinf(Tensor([8, 17, 0, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.130235 test begin: paddle.isinf(Tensor([8, 17, 5, 0, 7],"float16"), )

[cuda error] paddle.isinf(Tensor([8, 17, 5, 0, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.131685 test begin: paddle.isinf(Tensor([8, 17, 5, 6, 0],"float16"), )

[cuda error] paddle.isinf(Tensor([8, 17, 5, 6, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.133117 test begin: paddle.isinf(x=Tensor([0],"float64"), )

[cuda error] paddle.isinf(x=Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.134374 test begin: paddle.isnan(Tensor([0, 17, 10],"int32"), )

[cuda error] paddle.isnan(Tensor([0, 17, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.136024 test begin: paddle.isnan(Tensor([0, 17, 5, 6, 7],"float16"), )

[cuda error] paddle.isnan(Tensor([0, 17, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.137840 test begin: paddle.isnan(Tensor([0, 17],"float32"), )

[cuda error] paddle.isnan(Tensor([0, 17],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.139127 test begin: paddle.isnan(Tensor([0, 3, 4, 5],"float32"), )

[cuda error] paddle.isnan(Tensor([0, 3, 4, 5],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.140724 test begin: paddle.isnan(Tensor([0, 3, 4, 5],"float64"), )

[cuda error] paddle.isnan(Tensor([0, 3, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.142073 test begin: paddle.isnan(Tensor([0, 512],"float16"), )

[cuda error] paddle.isnan(Tensor([0, 512],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.143190 test begin: paddle.isnan(Tensor([0, 64, 16],"float32"), )

[cuda error] paddle.isnan(Tensor([0, 64, 16],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.144865 test begin: paddle.isnan(Tensor([0],"float16"), )

[cuda error] paddle.isnan(Tensor([0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.146127 test begin: paddle.isnan(Tensor([0],"float32"), )

[cuda error] paddle.isnan(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.147702 test begin: paddle.isnan(Tensor([1024, 0],"float16"), )

[cuda error] paddle.isnan(Tensor([1024, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.149296 test begin: paddle.isnan(Tensor([11, 0, 10],"int32"), )

[cuda error] paddle.isnan(Tensor([11, 0, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.150361 test begin: paddle.isnan(Tensor([11, 0],"float32"), )

[cuda error] paddle.isnan(Tensor([11, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.151796 test begin: paddle.isnan(Tensor([11, 17, 0],"int32"), )

[cuda error] paddle.isnan(Tensor([11, 17, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.153357 test begin: paddle.isnan(Tensor([14, 0, 16],"float32"), )

[cuda error] paddle.isnan(Tensor([14, 0, 16],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.154442 test begin: paddle.isnan(Tensor([14, 64, 0],"float32"), )

[cuda error] paddle.isnan(Tensor([14, 64, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.155556 test begin: paddle.isnan(Tensor([2, 0, 4, 5],"float32"), )

[cuda error] paddle.isnan(Tensor([2, 0, 4, 5],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.156891 test begin: paddle.isnan(Tensor([2, 0, 4, 5],"float64"), )

[cuda error] paddle.isnan(Tensor([2, 0, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.158393 test begin: paddle.isnan(Tensor([2, 3, 0, 5],"float32"), )

[cuda error] paddle.isnan(Tensor([2, 3, 0, 5],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.159405 test begin: paddle.isnan(Tensor([2, 3, 0, 5],"float64"), )

[cuda error] paddle.isnan(Tensor([2, 3, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.160715 test begin: paddle.isnan(Tensor([2, 3, 4, 0],"float32"), )

[cuda error] paddle.isnan(Tensor([2, 3, 4, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.161747 test begin: paddle.isnan(Tensor([2, 3, 4, 0],"float64"), )

[cuda error] paddle.isnan(Tensor([2, 3, 4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.162672 test begin: paddle.isnan(Tensor([8, 0, 5, 6, 7],"float16"), )

[cuda error] paddle.isnan(Tensor([8, 0, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.164242 test begin: paddle.isnan(Tensor([8, 17, 0, 6, 7],"float16"), )

[cuda error] paddle.isnan(Tensor([8, 17, 0, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.166010 test begin: paddle.isnan(Tensor([8, 17, 5, 0, 7],"float16"), )

[cuda error] paddle.isnan(Tensor([8, 17, 5, 0, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.167479 test begin: paddle.isnan(Tensor([8, 17, 5, 6, 0],"float16"), )

[cuda error] paddle.isnan(Tensor([8, 17, 5, 6, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.168699 test begin: paddle.isnan(x=Tensor([0],"float64"), )

[cuda error] paddle.isnan(x=Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.170125 test begin: paddle.isneginf(Tensor([0, 17, 10],"int16"), )

[cuda error] paddle.isneginf(Tensor([0, 17, 10],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.171865 test begin: paddle.isneginf(Tensor([0, 17, 10],"int32"), )

[cuda error] paddle.isneginf(Tensor([0, 17, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.173318 test begin: paddle.isneginf(Tensor([0, 17, 5, 6, 7],"float16"), )

[cuda error] paddle.isneginf(Tensor([0, 17, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.174839 test begin: paddle.isneginf(Tensor([0, 17],"float32"), )

[cuda error] paddle.isneginf(Tensor([0, 17],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.176598 test begin: paddle.isneginf(Tensor([0, 3, 4, 5],"float64"), )

[cuda error] paddle.isneginf(Tensor([0, 3, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.178035 test begin: paddle.isneginf(Tensor([0, 3, 4, 5],"int8"), )

[cuda error] paddle.isneginf(Tensor([0, 3, 4, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.179256 test begin: paddle.isneginf(Tensor([0],"int64"), )

[cuda error] paddle.isneginf(Tensor([0],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.180366 test begin: paddle.isneginf(Tensor([0],"uint8"), )

[cuda error] paddle.isneginf(Tensor([0],"uint8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.181684 test begin: paddle.isneginf(Tensor([11, 0, 10],"int16"), )

[cuda error] paddle.isneginf(Tensor([11, 0, 10],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.182774 test begin: paddle.isneginf(Tensor([11, 0, 10],"int32"), )

[cuda error] paddle.isneginf(Tensor([11, 0, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.183776 test begin: paddle.isneginf(Tensor([11, 0],"float32"), )

[cuda error] paddle.isneginf(Tensor([11, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.184955 test begin: paddle.isneginf(Tensor([11, 17, 0],"int16"), )

[cuda error] paddle.isneginf(Tensor([11, 17, 0],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.186927 test begin: paddle.isneginf(Tensor([11, 17, 0],"int32"), )

[cuda error] paddle.isneginf(Tensor([11, 17, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.188415 test begin: paddle.isneginf(Tensor([2, 0, 4, 5],"float64"), )

[cuda error] paddle.isneginf(Tensor([2, 0, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.191007 test begin: paddle.isneginf(Tensor([2, 0, 4, 5],"int8"), )

[cuda error] paddle.isneginf(Tensor([2, 0, 4, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.193018 test begin: paddle.isneginf(Tensor([2, 3, 0, 5],"float64"), )

[cuda error] paddle.isneginf(Tensor([2, 3, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.194781 test begin: paddle.isneginf(Tensor([2, 3, 0, 5],"int8"), )

[cuda error] paddle.isneginf(Tensor([2, 3, 0, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.195971 test begin: paddle.isneginf(Tensor([2, 3, 4, 0],"float64"), )

[cuda error] paddle.isneginf(Tensor([2, 3, 4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.197431 test begin: paddle.isneginf(Tensor([2, 3, 4, 0],"int8"), )

[cuda error] paddle.isneginf(Tensor([2, 3, 4, 0],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.198781 test begin: paddle.isneginf(Tensor([8, 0, 5, 6, 7],"float16"), )

[cuda error] paddle.isneginf(Tensor([8, 0, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.201029 test begin: paddle.isneginf(Tensor([8, 17, 0, 6, 7],"float16"), )

[cuda error] paddle.isneginf(Tensor([8, 17, 0, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.202636 test begin: paddle.isneginf(Tensor([8, 17, 5, 0, 7],"float16"), )

[cuda error] paddle.isneginf(Tensor([8, 17, 5, 0, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.203981 test begin: paddle.isneginf(Tensor([8, 17, 5, 6, 0],"float16"), )

[cuda error] paddle.isneginf(Tensor([8, 17, 5, 6, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.205514 test begin: paddle.isposinf(Tensor([0, 17, 10],"int16"), )

[cuda error] paddle.isposinf(Tensor([0, 17, 10],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.206936 test begin: paddle.isposinf(Tensor([0, 17, 10],"int32"), )

[cuda error] paddle.isposinf(Tensor([0, 17, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.208290 test begin: paddle.isposinf(Tensor([0, 17, 5, 6, 7],"float16"), )

[cuda error] paddle.isposinf(Tensor([0, 17, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.210290 test begin: paddle.isposinf(Tensor([0, 17],"float32"), )

[cuda error] paddle.isposinf(Tensor([0, 17],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.211576 test begin: paddle.isposinf(Tensor([0, 3, 4, 5],"float64"), )

[cuda error] paddle.isposinf(Tensor([0, 3, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.213601 test begin: paddle.isposinf(Tensor([0, 3, 4, 5],"int8"), )

[cuda error] paddle.isposinf(Tensor([0, 3, 4, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.215035 test begin: paddle.isposinf(Tensor([0],"int64"), )

[cuda error] paddle.isposinf(Tensor([0],"int64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.217134 test begin: paddle.isposinf(Tensor([0],"uint8"), )

[cuda error] paddle.isposinf(Tensor([0],"uint8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.218779 test begin: paddle.isposinf(Tensor([11, 0, 10],"int16"), )

[cuda error] paddle.isposinf(Tensor([11, 0, 10],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.220600 test begin: paddle.isposinf(Tensor([11, 0, 10],"int32"), )

[cuda error] paddle.isposinf(Tensor([11, 0, 10],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.222890 test begin: paddle.isposinf(Tensor([11, 0],"float32"), )

[cuda error] paddle.isposinf(Tensor([11, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.224640 test begin: paddle.isposinf(Tensor([11, 17, 0],"int16"), )

[cuda error] paddle.isposinf(Tensor([11, 17, 0],"int16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.226501 test begin: paddle.isposinf(Tensor([11, 17, 0],"int32"), )

[cuda error] paddle.isposinf(Tensor([11, 17, 0],"int32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.228364 test begin: paddle.isposinf(Tensor([2, 0, 4, 5],"float64"), )

[cuda error] paddle.isposinf(Tensor([2, 0, 4, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.230498 test begin: paddle.isposinf(Tensor([2, 0, 4, 5],"int8"), )

[cuda error] paddle.isposinf(Tensor([2, 0, 4, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.232567 test begin: paddle.isposinf(Tensor([2, 3, 0, 5],"float64"), )

[cuda error] paddle.isposinf(Tensor([2, 3, 0, 5],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.234473 test begin: paddle.isposinf(Tensor([2, 3, 0, 5],"int8"), )

[cuda error] paddle.isposinf(Tensor([2, 3, 0, 5],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.236218 test begin: paddle.isposinf(Tensor([2, 3, 4, 0],"float64"), )

[cuda error] paddle.isposinf(Tensor([2, 3, 4, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.237903 test begin: paddle.isposinf(Tensor([2, 3, 4, 0],"int8"), )

[cuda error] paddle.isposinf(Tensor([2, 3, 4, 0],"int8"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.239776 test begin: paddle.isposinf(Tensor([8, 0, 5, 6, 7],"float16"), )

[cuda error] paddle.isposinf(Tensor([8, 0, 5, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.241914 test begin: paddle.isposinf(Tensor([8, 17, 0, 6, 7],"float16"), )

[cuda error] paddle.isposinf(Tensor([8, 17, 0, 6, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.243734 test begin: paddle.isposinf(Tensor([8, 17, 5, 0, 7],"float16"), )

[cuda error] paddle.isposinf(Tensor([8, 17, 5, 0, 7],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.245295 test begin: paddle.isposinf(Tensor([8, 17, 5, 6, 0],"float16"), )

[cuda error] paddle.isposinf(Tensor([8, 17, 5, 6, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.247060 test begin: paddle.isreal(Tensor([0, 3],"bfloat16"), )

[Pass] paddle.isreal(Tensor([0, 3],"bfloat16"), )
2025-03-05 15:41:49.249719 test begin: paddle.isreal(Tensor([0, 3],"bool"), )

[Pass] paddle.isreal(Tensor([0, 3],"bool"), )
2025-03-05 15:41:49.251095 test begin: paddle.isreal(Tensor([2, 0],"bfloat16"), )

[Pass] paddle.isreal(Tensor([2, 0],"bfloat16"), )
2025-03-05 15:41:49.252770 test begin: paddle.isreal(Tensor([2, 0],"bool"), )

[Pass] paddle.isreal(Tensor([2, 0],"bool"), )
2025-03-05 15:41:49.254010 test begin: paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )

[cuda error] paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.257438 test begin: paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.260203 test begin: paddle.kron(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), )

[cuda error] paddle.kron(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.263521 test begin: paddle.kron(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), )

[cuda error] paddle.kron(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.267371 test begin: paddle.kron(Tensor([0, 2],"complex128"), Tensor([2, 2, 3],"float64"), )

[cuda error] paddle.kron(Tensor([0, 2],"complex128"), Tensor([2, 2, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.270062 test begin: paddle.kron(Tensor([0, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([0, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.273422 test begin: paddle.kron(Tensor([0, 8],"float16"), Tensor([0, 8],"float16"), )

[cuda error] paddle.kron(Tensor([0, 8],"float16"), Tensor([0, 8],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.277449 test begin: paddle.kron(Tensor([0, 8],"float16"), Tensor([16, 8],"float16"), )

[cuda error] paddle.kron(Tensor([0, 8],"float16"), Tensor([16, 8],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.281041 test begin: paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )

[cuda error] paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.284801 test begin: paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.287029 test begin: paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )

[cuda error] paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.295791 test begin: paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), )

[cuda error] paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.298074 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4, 3, 2],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4, 3, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.300107 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.302417 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4, 3, 2],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4, 3, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.304276 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.307846 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0, 3, 2],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0, 3, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.309647 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.312026 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 0, 2],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 0, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.314077 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 0],"float32"), )

[cuda error] paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.316114 test begin: paddle.kron(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), )

[cuda error] paddle.kron(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.317900 test begin: paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )

[cuda error] paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.322402 test begin: paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 0],"float16"), )

[cuda error] paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.327501 test begin: paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 8],"float16"), )

[cuda error] paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 8],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.333058 test begin: paddle.kron(Tensor([12, 8],"float16"), Tensor([0, 8],"float16"), )

[cuda error] paddle.kron(Tensor([12, 8],"float16"), Tensor([0, 8],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.337969 test begin: paddle.kron(Tensor([12, 8],"float16"), Tensor([16, 0],"float16"), )

[cuda error] paddle.kron(Tensor([12, 8],"float16"), Tensor([16, 0],"float16"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.342733 test begin: paddle.kron(Tensor([2, 0],"complex128"), Tensor([2, 2, 3],"float64"), )

[cuda error] paddle.kron(Tensor([2, 0],"complex128"), Tensor([2, 2, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.344957 test begin: paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 2, 3],"float64"), )

[paddle error] paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 2, 3],"float64"), ) 
 (InvalidArgument) The type of data we are trying to retrieve (complex128) does not match the type of data (float64) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():11 != phi::CppTypeToDataType<T>::Type():13.] (at ../paddle/phi/core/dense_tensor.cc:160)

2025-03-05 15:41:49.346475 test begin: paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 0, 3],"float64"), )

[paddle error] paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 0, 3],"float64"), ) 
 (InvalidArgument) The type of data we are trying to retrieve (complex128) does not match the type of data (float64) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():11 != phi::CppTypeToDataType<T>::Type():13.] (at ../paddle/phi/core/dense_tensor.cc:160)

2025-03-05 15:41:49.347965 test begin: paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 0],"float64"), )

[paddle error] paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 0],"float64"), ) 
 (InvalidArgument) The type of data we are trying to retrieve (complex128) does not match the type of data (float64) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():11 != phi::CppTypeToDataType<T>::Type():13.] (at ../paddle/phi/core/dense_tensor.cc:160)

2025-03-05 15:41:49.350140 test begin: paddle.kron(Tensor([5, 0, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 0, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.352101 test begin: paddle.kron(Tensor([5, 5, 0, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 0, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.354310 test begin: paddle.kron(Tensor([5, 5, 4, 0, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 4, 0, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.357091 test begin: paddle.kron(Tensor([5, 5, 4, 3, 0, 6],"float32"), Tensor([3, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 4, 3, 0, 6],"float32"), Tensor([3, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.359532 test begin: paddle.kron(Tensor([5, 5, 4, 3, 5, 0],"float32"), Tensor([3, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 4, 3, 5, 0],"float32"), Tensor([3, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.365158 test begin: paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([0, 5, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([0, 5, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.367321 test begin: paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 0, 4],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 0, 4],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.369974 test begin: paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 0],"float32"), )

[cuda error] paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.372328 test begin: paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([0, 3],"float64"), )

[cuda error] paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([0, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.374726 test begin: paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3, 2],"float64"), )

[cuda error] paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.376779 test begin: paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3],"float64"), )

[cuda error] paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.378310 test begin: paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )

[cuda error] paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.380188 test begin: paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )

[cuda error] paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.383607 test begin: paddle.kron(x=Tensor([0],"float64"), y=Tensor([3, 3],"float64"), )

[cuda error] paddle.kron(x=Tensor([0],"float64"), y=Tensor([3, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.385390 test begin: paddle.kron(x=Tensor([1],"float64"), y=Tensor([0, 3],"float64"), )

[cuda error] paddle.kron(x=Tensor([1],"float64"), y=Tensor([0, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.387318 test begin: paddle.kron(x=Tensor([1],"float64"), y=Tensor([3, 0],"float64"), )

[cuda error] paddle.kron(x=Tensor([1],"float64"), y=Tensor([3, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.388861 test begin: paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 0],"float32"), )

[cuda error] paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.391749 test begin: paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 3],"float32"), )

[cuda error] paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.394722 test begin: paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 0],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.397071 test begin: paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3, 2],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.401184 test begin: paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.404888 test begin: paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3, 2],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.408151 test begin: paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.411319 test begin: paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0, 2],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.414115 test begin: paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.417337 test begin: paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3, 0],"float64"), )

[cuda error] paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.420065 test begin: paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([0, 3],"float32"), )

[cuda error] paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.424075 test begin: paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([3, 0],"float32"), )

[cuda error] paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.427086 test begin: paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.429643 test begin: paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:49.431560 test begin: paddle.lerp(Tensor([0, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([0, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:49.433456 test begin: paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )

[paddle error] paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.435521 test begin: paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.437914 test begin: paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )

[torch error] paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.439943 test begin: paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.441213 test begin: paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.443393 test begin: paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:49.444814 test begin: paddle.lerp(Tensor([0, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([0, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:49.445921 test begin: paddle.lerp(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )

[paddle error] paddle.lerp(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.447995 test begin: paddle.lerp(Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )

[torch error] paddle.lerp(Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:49.449766 test begin: paddle.lerp(Tensor([0, 2, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )

[torch error] paddle.lerp(Tensor([0, 2, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:49.451127 test begin: paddle.lerp(Tensor([0, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([0, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (300) at non-singleton dimension 0
2025-03-05 15:41:49.459197 test begin: paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )

[paddle error] paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.461524 test begin: paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )

[paddle error] paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.463147 test begin: paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )

[torch error] paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.464214 test begin: paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )

[torch error] paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.465114 test begin: paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )

[paddle error] paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.466848 test begin: paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )

[paddle error] paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.468835 test begin: paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.470640 test begin: paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.472286 test begin: paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.473729 test begin: paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:49.474809 test begin: paddle.lerp(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.476223 test begin: paddle.lerp(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.477820 test begin: paddle.lerp(Tensor([0, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([0, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 0
2025-03-05 15:41:49.478729 test begin: paddle.lerp(Tensor([0, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )

[torch error] paddle.lerp(Tensor([0, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:49.479544 test begin: paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.481117 test begin: paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.482680 test begin: paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.484322 test begin: paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.485749 test begin: paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.488064 test begin: paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.489745 test begin: paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.491019 test begin: paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 0
2025-03-05 15:41:49.491951 test begin: paddle.lerp(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )

[paddle error] paddle.lerp(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.493658 test begin: paddle.lerp(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.lerp(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.495510 test begin: paddle.lerp(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )

[paddle error] paddle.lerp(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.496981 test begin: paddle.lerp(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )

[paddle error] paddle.lerp(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.498568 test begin: paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )

[paddle error] paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.499930 test begin: paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.501151 test begin: paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )

[torch error] paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, ) 
 The size of tensor a (0) must match the size of tensor b (28) at non-singleton dimension 1
2025-03-05 15:41:49.502092 test begin: paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 1
2025-03-05 15:41:49.503134 test begin: paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )

[paddle error] paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.504454 test begin: paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )

[torch error] paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, ) 
 The size of tensor a (0) must match the size of tensor b (28) at non-singleton dimension 1
2025-03-05 15:41:49.505415 test begin: paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), )

[paddle error] paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.506695 test begin: paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )

[torch error] paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:49.507853 test begin: paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.509467 test begin: paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:49.510902 test begin: paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.512375 test begin: paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 1
2025-03-05 15:41:49.513456 test begin: paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )

[paddle error] paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.515074 test begin: paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:49.516457 test begin: paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )

[paddle error] paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 0],"float32"), 0.36, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.518069 test begin: paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )

[torch error] paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 28],"float32"), 0.36, ) 
 The size of tensor a (0) must match the size of tensor b (28) at non-singleton dimension 2
2025-03-05 15:41:49.519170 test begin: paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 0],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.520814 test begin: paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 2
2025-03-05 15:41:49.521876 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )

[paddle error] paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.523628 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.525042 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )

[paddle error] paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.526886 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.528607 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )

[paddle error] paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 0],"float32"), 0.36, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.530067 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 0],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.531342 test begin: paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )

[paddle error] paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.533013 test begin: paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )

[torch error] paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.0, ) 
 The size of tensor a (0) must match the size of tensor b (28) at non-singleton dimension 2
2025-03-05 15:41:49.534089 test begin: paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )

[paddle error] paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.535548 test begin: paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )

[torch error] paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, ) 
 The size of tensor a (28) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.536372 test begin: paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )

[torch error] paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.0, ) 
 The size of tensor a (28) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.537260 test begin: paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), )

[paddle error] paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.538879 test begin: paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )

[torch error] paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:49.540223 test begin: paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )

[paddle error] paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.541846 test begin: paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:49.543204 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )

[paddle error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.545103 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 3, 3],"float32"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 3, 3],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.546252 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.547260 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )

[Pass] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
2025-03-05 15:41:49.549109 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 0, 3],"float32"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 0, 3],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.550948 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 0],"float32"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 0],"float32"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.552072 test begin: paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.554568 test begin: paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.556207 test begin: paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.557910 test begin: paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )

[Pass] paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
2025-03-05 15:41:49.561313 test begin: paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.562633 test begin: paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.563822 test begin: paddle.lerp(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), )

[paddle error] paddle.lerp(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.565336 test begin: paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.566195 test begin: paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )

[Pass] paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )
2025-03-05 15:41:49.568757 test begin: paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), )

[torch error] paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.570019 test begin: paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.571602 test begin: paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 2
2025-03-05 15:41:49.572704 test begin: paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.574446 test begin: paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.575363 test begin: paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 1.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.576235 test begin: paddle.lerp(Tensor([10, 0, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 0, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.577414 test begin: paddle.lerp(Tensor([10, 0, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 0, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.578821 test begin: paddle.lerp(Tensor([10, 0, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 0, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 1
2025-03-05 15:41:49.579987 test begin: paddle.lerp(Tensor([10, 1, 0, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.lerp(Tensor([10, 1, 0, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.583321 test begin: paddle.lerp(Tensor([10, 1, 10, 0, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 0, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 3
2025-03-05 15:41:49.584547 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 0],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 5, 0],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 4
2025-03-05 15:41:49.585516 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([0, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([0, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.586694 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 0, 1, 5, 5],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 0, 1, 5, 5],"float32"), Tensor([1],"float32"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.589559 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 0, 5, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 0, 5, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.590770 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 0, 5],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 0, 5],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.592009 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 0],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 0],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:49.593172 test begin: paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([0],"float32"), )

[torch error] paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:49.594202 test begin: paddle.lerp(Tensor([10, 10, 0, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 0, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 2
2025-03-05 15:41:49.595212 test begin: paddle.lerp(Tensor([10, 10, 5, 0],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 5, 0],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 3
2025-03-05 15:41:49.596179 test begin: paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([0, 10, 5, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([0, 10, 5, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.597329 test begin: paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 0, 5, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 0, 5, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.598467 test begin: paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 0, 5],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 0, 5],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.599920 test begin: paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 0],"float32"), Tensor([5],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 0],"float32"), Tensor([5],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.601332 test begin: paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([0],"float32"), )

[torch error] paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.602363 test begin: paddle.lerp(Tensor([10, 5, 0, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 0, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (10) at non-singleton dimension 2
2025-03-05 15:41:49.603596 test begin: paddle.lerp(Tensor([10, 5, 10, 0, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 10, 0, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 3
2025-03-05 15:41:49.604766 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 0],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.lerp(Tensor([10, 5, 10, 1, 0],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.606742 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([0, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([0, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.607947 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 0, 10, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 0, 10, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.608984 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 0, 5, 1],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 0, 5, 1],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (10) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.610250 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 0, 1],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 0, 1],"float32"), Tensor([1],"float32"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.613651 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 0],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 0],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:49.615117 test begin: paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([0],"float32"), )

[torch error] paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:49.616549 test begin: paddle.lerp(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.lerp(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.618360 test begin: paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )

[Pass] paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )
2025-03-05 15:41:49.620219 test begin: paddle.lerp(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )

[paddle error] paddle.lerp(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.621956 test begin: paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )

[Pass] paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
2025-03-05 15:41:49.623685 test begin: paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.625473 test begin: paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:49.627065 test begin: paddle.lerp(Tensor([2, 0, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )

[paddle error] paddle.lerp(Tensor([2, 0, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.629032 test begin: paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.630913 test begin: paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.632388 test begin: paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:49.633637 test begin: paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 1
2025-03-05 15:41:49.634957 test begin: paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )

[paddle error] paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.636978 test begin: paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )

[paddle error] paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.638966 test begin: paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )

[torch error] paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 2
2025-03-05 15:41:49.639932 test begin: paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.642008 test begin: paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 2
2025-03-05 15:41:49.643220 test begin: paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.644912 test begin: paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 2
2025-03-05 15:41:49.646042 test begin: paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.647750 test begin: paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 3
2025-03-05 15:41:49.648897 test begin: paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )

[torch error] paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.649792 test begin: paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.651548 test begin: paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.653982 test begin: paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )

[paddle error] paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.655961 test begin: paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.657905 test begin: paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 3
2025-03-05 15:41:49.659026 test begin: paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.659790 test begin: paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )

[paddle error] paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.661170 test begin: paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.661974 test begin: paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )

[torch error] paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.662736 test begin: paddle.lerp(Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), )

[torch error] paddle.lerp(Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.663769 test begin: paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), )

[paddle error] paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.665363 test begin: paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), )

[torch error] paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.666314 test begin: paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), )

[Pass] paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), )
2025-03-05 15:41:49.667988 test begin: paddle.lerp(Tensor([2, 2, 0],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )

[torch error] paddle.lerp(Tensor([2, 2, 0],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 3
2025-03-05 15:41:49.668938 test begin: paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([0, 2, 1, 5],"float32"), 0.5, )

[paddle error] paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([0, 2, 1, 5],"float32"), 0.5, ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.670309 test begin: paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 0, 1, 5],"float32"), 0.5, )

[torch error] paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 0, 1, 5],"float32"), 0.5, ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.671105 test begin: paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 0, 5],"float32"), 0.5, )

[torch error] paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 0, 5],"float32"), 0.5, ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.671951 test begin: paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 1, 0],"float32"), 0.5, )

[torch error] paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 1, 0],"float32"), 0.5, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.672757 test begin: paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.674268 test begin: paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 2
2025-03-05 15:41:49.675247 test begin: paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.676824 test begin: paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 3
2025-03-05 15:41:49.677812 test begin: paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.678556 test begin: paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.679312 test begin: paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.680206 test begin: paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.681098 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([0, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )

[torch error] paddle.lerp(Tensor([2, 5],"float32"), Tensor([0, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:49.681929 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 0, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )

[torch error] paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 0, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.682851 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 0],"float32"), Tensor([2, 2, 2, 5],"float32"), )

[torch error] paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 0],"float32"), Tensor([2, 2, 2, 5],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.684144 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([0, 2, 2, 5],"float32"), )

[Pass] paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([0, 2, 2, 5],"float32"), )
2025-03-05 15:41:49.686979 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 0, 2, 5],"float32"), )

[torch error] paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 0, 2, 5],"float32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.688021 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 0, 5],"float32"), )

[torch error] paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 0, 5],"float32"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.688934 test begin: paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 0],"float32"), )

[torch error] paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 0],"float32"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.689757 test begin: paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )

[paddle error] paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.691401 test begin: paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )

[torch error] paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, ) 
 The size of tensor a (0) must match the size of tensor b (28) at non-singleton dimension 1
2025-03-05 15:41:49.692435 test begin: paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.693858 test begin: paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (6) at non-singleton dimension 1
2025-03-05 15:41:49.694982 test begin: paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.697258 test begin: paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (6) at non-singleton dimension 1
2025-03-05 15:41:49.698545 test begin: paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.700255 test begin: paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 1
2025-03-05 15:41:49.701425 test begin: paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )

[paddle error] paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.2, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.702924 test begin: paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )

[torch error] paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.2, ) 
 The size of tensor a (0) must match the size of tensor b (28) at non-singleton dimension 2
2025-03-05 15:41:49.704092 test begin: paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )

[torch error] paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.704984 test begin: paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )

[torch error] paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, ) 
 The size of tensor a (28) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.705883 test begin: paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )

[torch error] paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.2, ) 
 The size of tensor a (28) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.706774 test begin: paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.708640 test begin: paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:49.710436 test begin: paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.712110 test begin: paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 2
2025-03-05 15:41:49.713216 test begin: paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.714600 test begin: paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 3
2025-03-05 15:41:49.715696 test begin: paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.717336 test begin: paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.719410 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.721093 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 4
2025-03-05 15:41:49.722356 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.724172 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 5
2025-03-05 15:41:49.725731 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.726767 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (6) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.727808 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.729163 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.731335 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:49.732978 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 5
2025-03-05 15:41:49.734129 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.735972 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), ) 
 The size of tensor a (6) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.737339 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.738521 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )

[Pass] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
2025-03-05 15:41:49.741993 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 4
2025-03-05 15:41:49.743561 test begin: paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 5
2025-03-05 15:41:49.744617 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.746533 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.749089 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.750844 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 5
2025-03-05 15:41:49.752419 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.753839 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (6) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.755154 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.756488 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.757606 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[paddle error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 (InvalidArgument) LerpKernel's input y must not empty.
  [Hint: Expected y.numel() > 0, but received y.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:58)

2025-03-05 15:41:49.759909 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 5
2025-03-05 15:41:49.761177 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.762300 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), ) 
 The size of tensor a (6) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.763627 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.764565 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.765565 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )

[Pass] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
2025-03-05 15:41:49.767720 test begin: paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), )

[torch error] paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 5
2025-03-05 15:41:49.768882 test begin: paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )

[paddle error] paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 2.1, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.770615 test begin: paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (0) must match the size of tensor b (8) at non-singleton dimension 2
2025-03-05 15:41:49.771726 test begin: paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.772519 test begin: paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.773327 test begin: paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )

[torch error] paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 2.1, ) 
 The size of tensor a (8) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.774115 test begin: paddle.lerp(Tensor([300, 0],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([300, 0],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (0) must match the size of tensor b (2048) at non-singleton dimension 1
2025-03-05 15:41:49.783670 test begin: paddle.lerp(Tensor([300, 2048],"float32"), Tensor([0, 2048],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([300, 2048],"float32"), Tensor([0, 2048],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (300) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.790079 test begin: paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 0],"float32"), Tensor([1],"float32"), )

[torch error] paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 0],"float32"), Tensor([1],"float32"), ) 
 The size of tensor a (2048) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.797882 test begin: paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([0],"float32"), )

[torch error] paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([0],"float32"), ) 
 The size of tensor a (2048) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.811033 test begin: paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )

[paddle error] paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.813960 test begin: paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.815884 test begin: paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )

[paddle error] paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.817311 test begin: paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.818480 test begin: paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.819315 test begin: paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.820273 test begin: paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.822158 test begin: paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.823416 test begin: paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.824917 test begin: paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )

[paddle error] paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.826830 test begin: paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.827743 test begin: paddle.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.829268 test begin: paddle.lerp(x=Tensor([0],"float32"), y=Tensor([4],"float32"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([0],"float32"), y=Tensor([4],"float32"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.830318 test begin: paddle.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.831992 test begin: paddle.lerp(x=Tensor([0],"float64"), y=Tensor([4],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([0],"float64"), y=Tensor([4],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 0
2025-03-05 15:41:49.833220 test begin: paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )

[paddle error] paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.834893 test begin: paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.836259 test begin: paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )

[paddle error] paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.837779 test begin: paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.839042 test begin: paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.839985 test begin: paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.840947 test begin: paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.843121 test begin: paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.844348 test begin: paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )

[paddle error] paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.846144 test begin: paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.848063 test begin: paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 1
2025-03-05 15:41:49.849309 test begin: paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.850993 test begin: paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.853041 test begin: paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.855081 test begin: paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 2
2025-03-05 15:41:49.856504 test begin: paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 2
2025-03-05 15:41:49.857467 test begin: paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 2
2025-03-05 15:41:49.858501 test begin: paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.860351 test begin: paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (4) at non-singleton dimension 2
2025-03-05 15:41:49.861577 test begin: paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.863086 test begin: paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.864602 test begin: paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )

[paddle error] paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, ) 
 (InvalidArgument) LerpKernel's input x must not empty.
  [Hint: Expected x.numel() > 0, but received x.numel():0 <= 0:0.] (at ../paddle/phi/kernels/gpu/lerp_kernel.cu:53)

2025-03-05 15:41:49.866100 test begin: paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 3
2025-03-05 15:41:49.867307 test begin: paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 3
2025-03-05 15:41:49.868306 test begin: paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, ) 
 The size of tensor a (0) must match the size of tensor b (3) at non-singleton dimension 3
2025-03-05 15:41:49.869324 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.870473 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.871534 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.872499 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.873398 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.874343 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.875941 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.877072 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.878006 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.878963 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.879888 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.880875 test begin: paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, ) 
 The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 3
2025-03-05 15:41:49.881775 test begin: paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.882648 test begin: paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.883811 test begin: paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 2
2025-03-05 15:41:49.884743 test begin: paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.885454 test begin: paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0],"float64"), weight=0.2, )

[torch error] paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0],"float64"), weight=0.2, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.886180 test begin: paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:49.887184 test begin: paddle.lerp(x=Tensor([4],"float32"), y=Tensor([0],"float32"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4],"float32"), y=Tensor([0],"float32"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.888050 test begin: paddle.lerp(x=Tensor([4],"float64"), y=Tensor([0],"float64"), weight=0.5, )

[torch error] paddle.lerp(x=Tensor([4],"float64"), y=Tensor([0],"float64"), weight=0.5, ) 
 The size of tensor a (4) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:49.888742 test begin: paddle.lgamma(Tensor([0, 1, 1, 1],"float32"), )

[cuda error] paddle.lgamma(Tensor([0, 1, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.890528 test begin: paddle.lgamma(Tensor([0, 1, 1],"float32"), )

[cuda error] paddle.lgamma(Tensor([0, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.891578 test begin: paddle.lgamma(Tensor([0, 10, 10, 2],"float64"), )

[cuda error] paddle.lgamma(Tensor([0, 10, 10, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.892916 test begin: paddle.lgamma(Tensor([0, 1],"float32"), )

[cuda error] paddle.lgamma(Tensor([0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.894121 test begin: paddle.lgamma(Tensor([0, 2, 2],"float32"), )

[cuda error] paddle.lgamma(Tensor([0, 2, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.899657 test begin: paddle.lgamma(Tensor([0, 2],"float32"), )

[cuda error] paddle.lgamma(Tensor([0, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.900789 test begin: paddle.lgamma(Tensor([0],"float32"), )

[cuda error] paddle.lgamma(Tensor([0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.901802 test begin: paddle.lgamma(Tensor([0],"float64"), )

[cuda error] paddle.lgamma(Tensor([0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.902803 test begin: paddle.lgamma(Tensor([1, 0, 2],"float32"), )

[cuda error] paddle.lgamma(Tensor([1, 0, 2],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.903811 test begin: paddle.lgamma(Tensor([1, 0],"float32"), )

[cuda error] paddle.lgamma(Tensor([1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.904809 test begin: paddle.lgamma(Tensor([1, 2, 0],"float32"), )

[cuda error] paddle.lgamma(Tensor([1, 2, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.905953 test begin: paddle.lgamma(Tensor([10, 0, 1, 1],"float32"), )

[cuda error] paddle.lgamma(Tensor([10, 0, 1, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.907232 test begin: paddle.lgamma(Tensor([10, 0, 10, 2],"float64"), )

[cuda error] paddle.lgamma(Tensor([10, 0, 10, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.908511 test begin: paddle.lgamma(Tensor([10, 0, 1],"float32"), )

[cuda error] paddle.lgamma(Tensor([10, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.910013 test begin: paddle.lgamma(Tensor([10, 1, 0, 1],"float32"), )

[cuda error] paddle.lgamma(Tensor([10, 1, 0, 1],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.911989 test begin: paddle.lgamma(Tensor([10, 1, 0],"float32"), )

[cuda error] paddle.lgamma(Tensor([10, 1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.913249 test begin: paddle.lgamma(Tensor([10, 1, 1, 0],"float32"), )

[cuda error] paddle.lgamma(Tensor([10, 1, 1, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.914508 test begin: paddle.lgamma(Tensor([10, 10, 0, 2],"float64"), )

[cuda error] paddle.lgamma(Tensor([10, 10, 0, 2],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.915789 test begin: paddle.lgamma(Tensor([10, 10, 10, 0],"float64"), )

[cuda error] paddle.lgamma(Tensor([10, 10, 10, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.917025 test begin: paddle.lgamma(x=Tensor([0, 3],"float32"), )

[cuda error] paddle.lgamma(x=Tensor([0, 3],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.918284 test begin: paddle.lgamma(x=Tensor([0, 3],"float64"), )

[cuda error] paddle.lgamma(x=Tensor([0, 3],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.920023 test begin: paddle.lgamma(x=Tensor([0, 6, 6],"float64"), )

[cuda error] paddle.lgamma(x=Tensor([0, 6, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.921632 test begin: paddle.lgamma(x=Tensor([3, 0],"float32"), )

[cuda error] paddle.lgamma(x=Tensor([3, 0],"float32"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.922819 test begin: paddle.lgamma(x=Tensor([3, 0],"float64"), )

[cuda error] paddle.lgamma(x=Tensor([3, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.924053 test begin: paddle.lgamma(x=Tensor([6, 0, 6],"float64"), )

[cuda error] paddle.lgamma(x=Tensor([6, 0, 6],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.925065 test begin: paddle.lgamma(x=Tensor([6, 6, 0],"float64"), )

[cuda error] paddle.lgamma(x=Tensor([6, 6, 0],"float64"), ) 
 (External) CUDA error(9), invalid configuration argument. 
  [Hint: 'cudaErrorInvalidConfiguration'. This indicates that a kernel launch is requesting resources that can never be satisfied by the current device. Requestingmore shared memory per block than the device supports will trigger this error, as will requesting too many threads or blocks.See cudaDeviceProp for more device limitations.] (at ../paddle/fluid/pybind/eager_functions.cc:1388)

2025-03-05 15:41:49.926023 test begin: paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([0, 20],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([0, 20],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 0 by 20 matrices
2025-03-05 15:41:49.926870 test begin: paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([20, 20],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([20, 20],"float64"), upper=True, ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 20 by 20 but each b matrix is 0 by 2
2025-03-05 15:41:49.928114 test begin: paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )

[Pass] paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
2025-03-05 15:41:57.337658 test begin: paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 0
2025-03-05 15:41:57.339965 test begin: paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 0 by 30 matrices
2025-03-05 15:41:57.342285 test begin: paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 30 by 30 but each b matrix is 0 by 2
2025-03-05 15:41:57.346476 test begin: paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 0],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 0],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 30 by 0 matrices
2025-03-05 15:41:57.347614 test begin: paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )

[Pass] paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
2025-03-05 15:41:58.821877 test begin: paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )

[Pass] paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
2025-03-05 15:41:58.824744 test begin: paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 0 by 30 matrices
2025-03-05 15:41:58.825923 test begin: paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 30, 0],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 30, 0],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 30 by 0 matrices
2025-03-05 15:41:58.826727 test begin: paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 20 by 0 matrices
2025-03-05 15:41:58.828157 test begin: paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 20],"float64"), upper=True, )

[Pass] paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 20],"float64"), upper=True, )
2025-03-05 15:41:58.883317 test begin: paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([0, 20],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([0, 20],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 0 by 20 matrices
2025-03-05 15:41:58.884884 test begin: paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([20, 0],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([20, 0],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 20 by 0 matrices
2025-03-05 15:41:58.885791 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([0, 4],"float32"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([0, 4],"float32"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.889747 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([4, 4],"float32"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([4, 4],"float32"), ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 4 by 4 but each b matrix is 0 by 1
2025-03-05 15:41:58.897408 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([0, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([0, 4],"float64"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.913220 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([4, 4],"float64"), ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 4 by 4 but each b matrix is 0 by 1
2025-03-05 15:41:58.921510 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
2025-03-05 15:41:58.928511 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )

/usr/local/lib/python3.9/dist-packages/torch/utils/_device.py:106: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at ../aten/src/ATen/cuda/CublasHandlePool.cpp:135.)
  return func(*args, **kwargs)
[Pass] paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
2025-03-05 15:41:58.930417 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 0
2025-03-05 15:41:58.941632 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 0
2025-03-05 15:41:58.942437 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
2025-03-05 15:41:58.953566 test begin: paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (5) at non-singleton dimension 0
2025-03-05 15:41:58.963000 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:58.965523 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
2025-03-05 15:41:58.968657 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:58.969474 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
2025-03-05 15:41:58.972176 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([0, 4],"float32"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([0, 4],"float32"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.973097 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 0],"float32"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 0],"float32"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:58.974031 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([0, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([0, 4],"float64"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.974732 test begin: paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 0],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 0],"float64"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:58.975562 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 0, 4],"float64"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.976332 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 4, 4],"float64"), ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 4 by 4 but each b matrix is 0 by 3
2025-03-05 15:41:58.977380 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
2025-03-05 15:41:58.979428 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
2025-03-05 15:41:58.981142 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:58.982229 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, ) 
 The size of tensor a (0) must match the size of tensor b (2) at non-singleton dimension 1
2025-03-05 15:41:58.983084 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.983837 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.984416 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 4 by 4 but each b matrix is 0 by 3
2025-03-05 15:41:58.985515 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, ) 
 Incompatible matrix sizes for cholesky_solve: each A matrix is 4 by 4 but each b matrix is 0 by 3
2025-03-05 15:41:58.986361 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:58.987124 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:58.987719 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
2025-03-05 15:41:58.991306 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
2025-03-05 15:41:58.994376 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:58.995491 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:58.996413 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:58.997114 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, ) 
 The size of tensor a (2) must match the size of tensor b (0) at non-singleton dimension 1
2025-03-05 15:41:58.997843 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.998623 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:58.999344 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:59.000044 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:59.000825 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 0],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 0],"float64"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:59.001763 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )

[Pass] paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
2025-03-05 15:41:59.005807 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), ) 
 The size of tensor a (5) must match the size of tensor b (0) at non-singleton dimension 0
2025-03-05 15:41:59.006763 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 0, 4],"float64"), ) 
 A must be batches of square matrices, but they are 0 by 4 matrices
2025-03-05 15:41:59.007620 test begin: paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 0],"float64"), )

[torch error] paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 0],"float64"), ) 
 A must be batches of square matrices, but they are 4 by 0 matrices
2025-03-05 15:41:59.008453 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), )

[paddle error] paddle.linalg.cond(Tensor([0, 3],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [0, 3], X's size = 0, 'shape' is [], the capacity of 'shape' is 1.
  [Hint: Expected capacity == in_size, but received capacity:1 != in_size:0.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-05 15:41:59.011427 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), p="fro", )

[torch error] paddle.linalg.cond(Tensor([0, 3],"float32"), p="fro", ) 
 linalg.cond(ord=fro): A must be batches of square matrices, but they are 0 by 3 matrices
2025-03-05 15:41:59.012080 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), p="nuc", )

[torch error] paddle.linalg.cond(Tensor([0, 3],"float32"), p="nuc", ) 
 linalg.cond(ord=nuc): A must be batches of square matrices, but they are 0 by 3 matrices
2025-03-05 15:41:59.012589 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), p=-1, )

[paddle error] paddle.linalg.cond(Tensor([0, 3],"float32"), p=-1, ) 
 only support p is -1 when input is a square matrix or batches of square matrices
2025-03-05 15:41:59.014977 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), p=1, )

[paddle error] paddle.linalg.cond(Tensor([0, 3],"float32"), p=1, ) 
 only support p is 1 when input is a square matrix or batches of square matrices
2025-03-05 15:41:59.017404 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), p=2, )

[paddle error] paddle.linalg.cond(Tensor([0, 3],"float32"), p=2, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [0, 3], X's size = 0, 'shape' is [], the capacity of 'shape' is 1.
  [Hint: Expected capacity == in_size, but received capacity:1 != in_size:0.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-05 15:41:59.019273 test begin: paddle.linalg.cond(Tensor([0, 3],"float32"), p=math.inf, )

[paddle error] paddle.linalg.cond(Tensor([0, 3],"float32"), p=math.inf, ) 
 only support p is inf when input is a square matrix or batches of square matrices
2025-03-05 15:41:59.020866 test begin: paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "fro", )

[Pass] paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "fro", )
2025-03-05 15:41:59.022192 test begin: paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "nuc", )

[Pass] paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "nuc", )
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest/PaddleAPITest/engine.py", line 1, in <module>
    from tester import TensorConfig, APIConfig, analyse_configs
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/__init__.py", line 1, in <module>
    from .base import APITestBase
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/base.py", line 2, in <module>
    from .api_config import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/__init__.py", line 1, in <module>
    from .config_analyzer import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/config_analyzer.py", line 9, in <module>
    import torch
  File "/usr/local/lib/python3.9/dist-packages/torch/__init__.py", line 367, in <module>
    from torch._C import *  # noqa: F403
  File "<frozen importlib._bootstrap>", line 203, in _lock_unlock_module
KeyboardInterrupt
2025-03-05 16:00:32.282356 test begin: paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )

W0305 16:00:40.049640 88802 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0305 16:00:40.050531 88802 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::pybind::eager_api_concat(_object*, _object*, _object*)
1   concat_ad_func(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, paddle::experimental::ScalarBase<paddle::Tensor>)
2   paddle::experimental::concat(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, paddle::experimental::ScalarBase<paddle::Tensor> const&)
3   void phi::ConcatKernel<float, phi::GPUContext>(phi::GPUContext const&, std::vector<phi::DenseTensor const*, std::allocator<phi::DenseTensor const*> > const&, paddle::experimental::ScalarBase<phi::DenseTensor> const&, phi::DenseTensor*)
4   void phi::funcs::ConcatFunctorWithIndexType<float, int>(phi::GPUContext const&, std::vector<phi::DenseTensor, std::allocator<phi::DenseTensor> > const&, int, phi::DenseTensor*)

----------------------
Error Message Summary:
----------------------
FatalError: `Segmentation fault` is detected by the operating system.
  [TimeInfo: *** Aborted at 1741161750 (unix time) try "date -d @1741161750" if you are using GNU date ***]
  [SignalInfo: *** SIGSEGV (@0x0) received by PID 88630 (TID 0x7f8517f48700) from PID 0 ***]

2025-03-05 16:03:03.993866 test begin: paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 4],"float32"), )

W0305 16:03:26.598973 94938 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0305 16:03:26.599907 94938 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 4],"float32"), )
2025-03-05 16:04:23.069130 test begin: paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )



--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::pybind::eager_api_concat(_object*, _object*, _object*)
1   concat_ad_func(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, paddle::experimental::ScalarBase<paddle::Tensor>)
2   paddle::experimental::concat(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, paddle::experimental::ScalarBase<paddle::Tensor> const&)
3   void phi::ConcatKernel<float, phi::GPUContext>(phi::GPUContext const&, std::vector<phi::DenseTensor const*, std::allocator<phi::DenseTensor const*> > const&, paddle::experimental::ScalarBase<phi::DenseTensor> const&, phi::DenseTensor*)
4   void phi::funcs::ConcatFunctorWithIndexType<float, int>(phi::GPUContext const&, std::vector<phi::DenseTensor, std::allocator<phi::DenseTensor> > const&, int, phi::DenseTensor*)

----------------------
Error Message Summary:
----------------------
FatalError: `Segmentation fault` is detected by the operating system.
  [TimeInfo: *** Aborted at 1741161863 (unix time) try "date -d @1741161863" if you are using GNU date ***]
  [SignalInfo: *** SIGSEGV (@0x0) received by PID 94831 (TID 0x7fcce5dc2700) from PID 0 ***]

2025-03-05 16:04:57.540374 test begin: paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )

W0305 16:05:10.735102 101905 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0305 16:05:10.735942 101905 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::pybind::eager_api_concat(_object*, _object*, _object*)
1   concat_ad_func(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, paddle::experimental::ScalarBase<paddle::Tensor>)
2   paddle::experimental::concat(std::vector<paddle::Tensor, std::allocator<paddle::Tensor> > const&, paddle::experimental::ScalarBase<paddle::Tensor> const&)
3   void phi::ConcatKernel<float, phi::GPUContext>(phi::GPUContext const&, std::vector<phi::DenseTensor const*, std::allocator<phi::DenseTensor const*> > const&, paddle::experimental::ScalarBase<phi::DenseTensor> const&, phi::DenseTensor*)
4   void phi::funcs::ConcatFunctorWithIndexType<float, int>(phi::GPUContext const&, std::vector<phi::DenseTensor, std::allocator<phi::DenseTensor> > const&, int, phi::DenseTensor*)

----------------------
Error Message Summary:
----------------------
FatalError: `Segmentation fault` is detected by the operating system.
  [TimeInfo: *** Aborted at 1741162037 (unix time) try "date -d @1741162037" if you are using GNU date ***]
  [SignalInfo: *** SIGSEGV (@0x0) received by PID 101459 (TID 0x7faecdf48700) from PID 0 ***]

2025-03-05 16:07:52.432059 test begin: paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=None, )

W0305 16:07:59.780268 112350 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0305 16:07:59.781190 112350 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[Pass] paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=None, )
2025-03-05 16:08:41.355424 test begin: paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )

[Pass] paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
2025-03-05 16:08:41.379516 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([0, 3],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([0, 3],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(0) = 2, but got tensor.size(0) = 0
2025-03-05 16:08:41.385151 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
2025-03-05 16:08:41.395443 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 2],"float32"), append=Tensor([2, 3],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 2],"float32"), append=Tensor([2, 3],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(0) = 2, but got tensor.size(0) = 0
2025-03-05 16:08:41.401035 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 3],"float32"), append=None, )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 3],"float32"), append=None, ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(0) = 2, but got tensor.size(0) = 0
2025-03-05 16:08:41.402217 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
2025-03-05 16:08:41.413705 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 3],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 3],"float32"), )
2025-03-05 16:08:41.436797 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([0, 3],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([0, 3],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(0) = 2, but got tensor.size(0) = 0
2025-03-05 16:08:41.446024 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([2, 0],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([2, 0],"float32"), )
2025-03-05 16:08:41.479320 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )
2025-03-05 16:08:41.495978 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 0],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 0],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(1) = 4, but got tensor.size(1) = 0
2025-03-05 16:08:41.499413 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )
2025-03-05 16:08:41.509783 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=Tensor([2, 4],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([0, 4],"float32"), append=Tensor([2, 4],"float32"), )
2025-03-05 16:08:41.518448 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 4],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 4],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(1) = 4, but got tensor.size(1) = 0
2025-03-05 16:08:41.525317 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([0, 4],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([0, 4],"float32"), )
2025-03-05 16:08:41.539644 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 0],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 0],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(1) = 4, but got tensor.size(1) = 0
2025-03-05 16:08:41.544477 test begin: paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([3, 0],"float32"), append=None, )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([3, 0],"float32"), append=None, ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(1) = 4, but got tensor.size(1) = 0
2025-03-05 16:08:41.545792 test begin: paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([0, 4],"float32"), )
2025-03-05 16:08:41.554150 test begin: paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 0],"float32"), )

[torch error] paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 0],"float32"), ) 
 diff expects the shape of tensor to prepend or append to match that of input except along the differencing dimension; input.size(1) = 4, but got tensor.size(1) = 0
2025-03-05 16:08:41.559885 test begin: paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )

[Pass] paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([0, 4],"float32"), append=None, )
Traceback (most recent call last):
  File "/host_home/wanghuan29/APItest/PaddleAPITest/engine.py", line 1, in <module>
    from tester import TensorConfig, APIConfig, analyse_configs
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/__init__.py", line 1, in <module>
    from .base import APITestBase
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/base.py", line 2, in <module>
    from .api_config import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/__init__.py", line 1, in <module>
    from .config_analyzer import TensorConfig, APIConfig, analyse_configs, USE_CACHED_NUMPY, cached_numpy
  File "/host_home/wanghuan29/APItest/PaddleAPITest/tester/api_config/config_analyzer.py", line 9, in <module>
    import torch
  File "/usr/local/lib/python3.9/dist-packages/torch/__init__.py", line 367, in <module>
    from torch._C import *  # noqa: F403
KeyboardInterrupt
