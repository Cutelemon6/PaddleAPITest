paddle.reshape(Tensor([4, 48, 0, 384],"float32"), list[4,48,48,384,], )
paddle.reshape(Tensor([4, 48, 48, 0],"float32"), list[4,48,48,256,], )
paddle.reshape(Tensor([4, 48, 48, 0],"float32"), list[4,48,48,384,], )
paddle.reshape(Tensor([4, 5, 0, 6, 6],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 5, 0],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 5, 6, 0, 6],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 5, 6, 6, 0],"float32"), tuple(4,-1,), )
paddle.reshape(Tensor([4, 512, 0, 150],"float32"), list[-1,150,], )
paddle.reshape(Tensor([4, 512, 0, 2],"float32"), list[-1,2,], )
paddle.reshape(Tensor([4, 512, 0],"float16"), list[-1,1024,], )
paddle.reshape(Tensor([4, 512, 0],"float32"), list[-1,1024,], )
paddle.reshape(Tensor([4, 512, 512, 0],"float32"), list[-1,150,], )
paddle.reshape(Tensor([4, 512, 512, 0],"float32"), list[-1,2,], )
paddle.reshape(Tensor([4, 56, 0, 192],"float32"), list[4,56,56,192,], )
paddle.reshape(Tensor([4, 56, 56, 0],"float32"), list[4,56,56,192,], )
paddle.reshape(Tensor([4, 6, 0, 272],"float32"), shape=list[-1,328,272,], )
paddle.reshape(Tensor([4, 6, 0, 304],"float32"), shape=list[-1,224,304,], )
paddle.reshape(Tensor([4, 6, 0, 304],"float32"), shape=list[-1,280,304,], )
paddle.reshape(Tensor([4, 6, 0],"float16"), shape=tuple(-1,224,304,), )
paddle.reshape(Tensor([4, 6, 0],"float16"), shape=tuple(-1,328,272,), )
paddle.reshape(Tensor([4, 6, 224, 0],"float32"), shape=list[-1,224,304,], )
paddle.reshape(Tensor([4, 6, 280, 0],"float32"), shape=list[-1,280,304,], )
paddle.reshape(Tensor([4, 6, 328, 0],"float32"), shape=list[-1,328,272,], )
paddle.reshape(Tensor([4, 640, 0],"float32"), shape=list[-1,], )
paddle.reshape(Tensor([4, 8, 0],"float32"), list[-1,256,], )
paddle.reshape(Tensor([4, 8, 0],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([4, 96, 0, 128],"float32"), list[4,96,96,128,], )
paddle.reshape(Tensor([4, 96, 0, 192],"float32"), list[4,96,96,192,], )
paddle.reshape(Tensor([4, 96, 96, 0],"float32"), list[4,96,96,128,], )
paddle.reshape(Tensor([4, 96, 96, 0],"float32"), list[4,96,96,192,], )
paddle.reshape(Tensor([40, 0, 24],"float32"), list[1960,24,], )
paddle.reshape(Tensor([40, 0, 272],"float16"), shape=tuple(40,-1,), )
paddle.reshape(Tensor([40, 0, 272],"float32"), shape=tuple(40,-1,), )
paddle.reshape(Tensor([40, 0, 6, 4],"float32"), list[-1,4,], )
paddle.reshape(Tensor([40, 0, 7],"float32"), list[1960,], )
paddle.reshape(Tensor([40, 200, 0],"float16"), shape=tuple(40,-1,), )
paddle.reshape(Tensor([40, 200, 0],"float32"), shape=tuple(40,-1,), )
paddle.reshape(Tensor([40, 40, 0, 4],"float32"), list[-1,4,], )
paddle.reshape(Tensor([40, 40, 6, 0],"float32"), list[-1,4,], )
paddle.reshape(Tensor([40, 49, 0],"float32"), list[1960,24,], )
paddle.reshape(Tensor([40, 7, 0],"float32"), list[1960,], )
paddle.reshape(Tensor([44, 0, 272],"float16"), shape=tuple(44,-1,), )
paddle.reshape(Tensor([44, 0, 272],"float32"), shape=tuple(44,-1,), )
paddle.reshape(Tensor([44, 200, 0],"float16"), shape=tuple(44,-1,), )
paddle.reshape(Tensor([44, 200, 0],"float32"), shape=tuple(44,-1,), )
paddle.reshape(Tensor([45, 0],"float32"), list[5,3,3,3,], )
paddle.reshape(Tensor([45000, 0],"int64"), list[9,5000,10,], name="Categorical_sample", )
paddle.reshape(Tensor([48, 0, 1, 1],"float16"), list[-1,3,2048,], )
paddle.reshape(Tensor([48, 0, 1, 1],"float32"), list[-1,3,2048,], )
paddle.reshape(Tensor([48, 0, 272],"float16"), shape=tuple(48,-1,), )
paddle.reshape(Tensor([48, 0, 272],"float32"), shape=tuple(48,-1,), )
paddle.reshape(Tensor([48, 200, 0],"float16"), shape=tuple(48,-1,), )
paddle.reshape(Tensor([48, 200, 0],"float32"), shape=tuple(48,-1,), )
paddle.reshape(Tensor([48, 2048, 0, 1],"float16"), list[-1,3,2048,], )
paddle.reshape(Tensor([48, 2048, 0, 1],"float32"), list[-1,3,2048,], )
paddle.reshape(Tensor([48, 2048, 1, 0],"float16"), list[-1,3,2048,], )
paddle.reshape(Tensor([48, 2048, 1, 0],"float32"), list[-1,3,2048,], )
paddle.reshape(Tensor([5, 0, 10],"float32"), list[-1,10,], )
paddle.reshape(Tensor([5, 0, 2],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 0, 3, 3, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 0, 3, 3],"float32"), tuple(-1,3,), )
paddle.reshape(Tensor([5, 0, 3, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 0, 4, 4, 4],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 0, 6, 6, 6],"float32"), tuple(-1,6,), )
paddle.reshape(Tensor([5, 0, 8],"float32"), list[5,10,8,], name="Normal_sample", )
paddle.reshape(Tensor([5, 0],"float32"), list[5,3,3,3,], )
paddle.reshape(Tensor([5, 0],"float32"), list[5,3,3,3,3,], )
paddle.reshape(Tensor([5, 0],"float32"), list[5,4,2,], )
paddle.reshape(Tensor([5, 0],"float32"), list[5,4,4,4,4,], )
paddle.reshape(Tensor([5, 0],"float32"), shape=list[5,-1,], )
paddle.reshape(Tensor([5, 0],"int32"), shape=tuple(7,5,), )
paddle.reshape(Tensor([5, 10, 0],"float32"), list[5,10,8,], name="Normal_sample", )
paddle.reshape(Tensor([5, 20, 0],"float32"), list[-1,10,], )
paddle.reshape(Tensor([5, 3, 0, 3, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 3, 0, 3],"float32"), tuple(-1,3,), )
paddle.reshape(Tensor([5, 3, 0, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 3, 3, 0, 3],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 3, 3, 0],"float32"), tuple(-1,3,), )
paddle.reshape(Tensor([5, 3, 3, 0],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 3, 3, 3, 0],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 0, 4, 4],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 0, 6, 6],"float32"), tuple(-1,6,), )
paddle.reshape(Tensor([5, 4, 0],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 4, 0, 4],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 4, 4, 0],"float32"), tuple(5,-1,), )
paddle.reshape(Tensor([5, 4, 6, 0, 6],"float32"), tuple(-1,6,), )
paddle.reshape(Tensor([5, 4, 6, 6, 0],"float32"), tuple(-1,6,), )
paddle.reshape(Tensor([512, 0, 1, 2],"float16"), shape=tuple(512,-1,), )
paddle.reshape(Tensor([512, 0, 1, 2],"float32"), shape=tuple(512,-1,), )
paddle.reshape(Tensor([512, 0, 2],"float16"), shape=list[-1,32,100,2,], )
paddle.reshape(Tensor([512, 0, 2],"float32"), shape=list[-1,32,100,2,], )
paddle.reshape(Tensor([512, 0],"float16"), shape=list[-1,20,2,], )
paddle.reshape(Tensor([512, 0],"float32"), shape=list[-1,20,2,], )
paddle.reshape(Tensor([512, 256, 0, 2],"float16"), shape=tuple(512,-1,), )
paddle.reshape(Tensor([512, 256, 0, 2],"float32"), shape=tuple(512,-1,), )
paddle.reshape(Tensor([512, 256, 1, 0],"float16"), shape=tuple(512,-1,), )
paddle.reshape(Tensor([512, 256, 1, 0],"float32"), shape=tuple(512,-1,), )
paddle.reshape(Tensor([512, 3200, 0],"float16"), shape=list[-1,32,100,2,], )
paddle.reshape(Tensor([512, 3200, 0],"float32"), shape=list[-1,32,100,2,], )
paddle.reshape(Tensor([52, 0, 1, 7],"float32"), list[52,7,1,], )
paddle.reshape(Tensor([52, 0, 1],"float32"), list[52,1,1,1,], )
paddle.reshape(Tensor([52, 0, 1],"float32"), list[52,5,1,1,], )
paddle.reshape(Tensor([52, 0, 272],"float16"), shape=tuple(52,-1,), )
paddle.reshape(Tensor([52, 0, 272],"float32"), shape=tuple(52,-1,), )
paddle.reshape(Tensor([52, 0, 32],"float32"), list[52,7,4,-1,], )
paddle.reshape(Tensor([52, 0, 4, 8],"float32"), list[52,7,-1,], )
paddle.reshape(Tensor([52, 0, 5, 1, 8],"float32"), list[52,4,5,-1,], )
paddle.reshape(Tensor([52, 0, 5, 5, 1, 8],"float32"), list[52,4,5,5,-1,], )
paddle.reshape(Tensor([52, 0, 7, 1],"float32"), list[52,7,1,], )
paddle.reshape(Tensor([52, 0, 7, 8],"float32"), list[52,4,7,1,-1,], )
paddle.reshape(Tensor([52, 0, 7],"float32"), tuple(13,4,7,-1,), )
paddle.reshape(Tensor([52, 0, 8],"float32"), tuple(-1,8,), )
paddle.reshape(Tensor([52, 0, 8],"float32"), tuple(13,4,-1,8,), )
paddle.reshape(Tensor([52, 0, 8],"float32"), tuple(13,4,21,8,), )
paddle.reshape(Tensor([52, 0, 8],"float32"), tuple(13,4,7,8,), )
paddle.reshape(Tensor([52, 0, 96],"float32"), list[52,7,4,-1,], )
paddle.reshape(Tensor([52, 1, 0, 1],"float32"), list[52,7,1,], )
paddle.reshape(Tensor([52, 1, 0, 7],"float32"), list[52,7,1,], )
paddle.reshape(Tensor([52, 1, 0],"float32"), list[52,1,1,1,], )
paddle.reshape(Tensor([52, 1, 1, 0],"float32"), list[52,7,1,], )
paddle.reshape(Tensor([52, 1, 7, 0],"float32"), list[52,7,1,], )
paddle.reshape(Tensor([52, 200, 0],"float16"), shape=tuple(52,-1,), )
paddle.reshape(Tensor([52, 200, 0],"float32"), shape=tuple(52,-1,), )
paddle.reshape(Tensor([52, 21, 0],"float32"), tuple(13,4,21,8,), )
paddle.reshape(Tensor([52, 4, 0, 1, 8],"float32"), list[52,4,5,-1,], )
paddle.reshape(Tensor([52, 4, 0, 5, 1, 8],"float32"), list[52,4,5,5,-1,], )
paddle.reshape(Tensor([52, 4, 0, 8],"float32"), list[52,4,7,1,-1,], )
paddle.reshape(Tensor([52, 4, 5, 0, 1, 8],"float32"), list[52,4,5,5,-1,], )
paddle.reshape(Tensor([52, 4, 5, 0, 8],"float32"), list[52,4,5,-1,], )
paddle.reshape(Tensor([52, 4, 5, 1, 0],"float32"), list[52,4,5,-1,], )
paddle.reshape(Tensor([52, 4, 5, 5, 0, 8],"float32"), list[52,4,5,5,-1,], )
paddle.reshape(Tensor([52, 4, 5, 5, 1, 0],"float32"), list[52,4,5,5,-1,], )
paddle.reshape(Tensor([52, 4, 7, 0],"float32"), list[52,4,7,1,-1,], )
paddle.reshape(Tensor([52, 5, 0],"float32"), list[52,5,1,1,], )
paddle.reshape(Tensor([52, 7, 0, 8],"float32"), list[52,7,-1,], )
paddle.reshape(Tensor([52, 7, 0],"float32"), list[52,7,4,-1,], )
paddle.reshape(Tensor([52, 7, 0],"float32"), tuple(-1,8,), )
paddle.reshape(Tensor([52, 7, 0],"float32"), tuple(13,4,-1,8,), )
paddle.reshape(Tensor([52, 7, 0],"float32"), tuple(13,4,7,-1,), )
paddle.reshape(Tensor([52, 7, 0],"float32"), tuple(13,4,7,8,), )
paddle.reshape(Tensor([52, 7, 4, 0],"float32"), list[52,7,-1,], )
paddle.reshape(Tensor([520, 0, 8],"float32"), list[13,4,5,2,-1,], )
paddle.reshape(Tensor([520, 0],"float32"), list[13,4,5,-1,], )
paddle.reshape(Tensor([520, 1, 0],"float32"), list[13,4,5,2,-1,], )
paddle.reshape(Tensor([54, 0],"int64"), list[9,6,10,], name="Categorical_sample", )
paddle.reshape(Tensor([56, 0, 13, 7],"float32"), list[56,4,7,13,], )
paddle.reshape(Tensor([56, 0, 272],"float16"), shape=tuple(56,-1,), )
paddle.reshape(Tensor([56, 0, 272],"float32"), shape=tuple(56,-1,), )
paddle.reshape(Tensor([56, 0, 7, 14],"float32"), list[56,4,14,7,], )
paddle.reshape(Tensor([56, 200, 0],"float16"), shape=tuple(56,-1,), )
paddle.reshape(Tensor([56, 200, 0],"float32"), shape=tuple(56,-1,), )
paddle.reshape(Tensor([56, 4, 0, 14],"float32"), list[56,4,14,7,], )
paddle.reshape(Tensor([56, 4, 0, 7],"float32"), list[56,4,7,13,], )
paddle.reshape(Tensor([56, 4, 13, 0],"float32"), list[56,4,7,13,], )
paddle.reshape(Tensor([56, 4, 7, 0],"float32"), list[56,4,14,7,], )
paddle.reshape(Tensor([58, 0, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(Tensor([58, 0],"int64"), list[58,], )
paddle.reshape(Tensor([58, 1, 0],"float32"), shape=list[-1,2,], )
paddle.reshape(Tensor([59, 0],"int64"), list[59,], )
paddle.reshape(Tensor([6, 0, 1, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([6, 0, 100, 11],"float32"), tuple(-1,11,), )
paddle.reshape(Tensor([6, 0, 100, 2],"float32"), tuple(-1,2,), )
paddle.reshape(Tensor([6, 0, 200],"float32"), shape=tuple(6,-1,), )
paddle.reshape(Tensor([6, 0, 25, 11],"float32"), tuple(-1,11,), )
paddle.reshape(Tensor([6, 0, 25, 2],"float32"), tuple(-1,2,), )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,18,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[12,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,1,18,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,6,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[3,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[4,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[6,2,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[6,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,18,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[12,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,1,18,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,6,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[3,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[4,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[6,2,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[6,3,2,], )
paddle.reshape(Tensor([6, 0, 304],"float32"), shape=tuple(6,-1,), )
paddle.reshape(Tensor([6, 0, 4],"float16"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 0, 4],"float32"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 0, 5, 6, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 0, 6, 5, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 0],"float32"), list[-1,3,8,], )
paddle.reshape(Tensor([6, 0],"float32"), list[6,4,5,6,6,], )
paddle.reshape(Tensor([6, 0],"float32"), list[6,4,6,5,6,], )
paddle.reshape(Tensor([6, 0],"float32"), shape=list[1,-1,256,], )
paddle.reshape(Tensor([6, 0],"int32"), shape=tuple(3,2,), )
paddle.reshape(Tensor([6, 100, 0, 11],"float32"), tuple(-1,11,), )
paddle.reshape(Tensor([6, 100, 0, 2],"float32"), tuple(-1,2,), )
paddle.reshape(Tensor([6, 100, 100, 0],"float32"), tuple(-1,11,), )
paddle.reshape(Tensor([6, 100, 100, 0],"float32"), tuple(-1,2,), )
paddle.reshape(Tensor([6, 2, 0],"float16"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,18,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[12,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,1,18,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,6,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[3,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[4,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[6,2,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[6,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,18,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[12,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,1,18,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,6,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[3,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[4,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[6,2,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[6,3,2,], )
paddle.reshape(Tensor([6, 200, 0],"float32"), shape=tuple(6,-1,), )
paddle.reshape(Tensor([6, 25, 0, 11],"float32"), tuple(-1,11,), )
paddle.reshape(Tensor([6, 25, 0, 2],"float32"), tuple(-1,2,), )
paddle.reshape(Tensor([6, 25, 25, 0],"float32"), tuple(-1,11,), )
paddle.reshape(Tensor([6, 25, 25, 0],"float32"), tuple(-1,2,), )
paddle.reshape(Tensor([6, 3, 0, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([6, 3, 1, 0],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([6, 304, 0],"float32"), shape=tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 0, 5, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 0, 6, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 5, 0, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 5, 6, 0],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 6, 0, 6],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([6, 4, 6, 5, 0],"float32"), tuple(6,-1,), )
paddle.reshape(Tensor([60, 0, 14, 384],"float32"), list[60,14,14,384,], )
paddle.reshape(Tensor([60, 0, 14, 512],"float32"), list[60,14,14,512,], )
paddle.reshape(Tensor([60, 0, 24, 512],"float32"), list[60,24,24,512,], )
paddle.reshape(Tensor([60, 0, 272],"float16"), shape=tuple(60,-1,), )
paddle.reshape(Tensor([60, 0, 272],"float32"), shape=tuple(60,-1,), )
paddle.reshape(Tensor([60, 0, 28, 192],"float32"), list[60,28,28,192,], )
paddle.reshape(Tensor([60, 0, 28, 256],"float32"), list[60,28,28,256,], )
paddle.reshape(Tensor([60, 0, 48, 256],"float32"), list[60,48,48,256,], )
paddle.reshape(Tensor([60, 0, 56, 128],"float32"), list[60,56,56,128,], )
paddle.reshape(Tensor([60, 0, 56, 96],"float32"), list[60,56,56,96,], )
paddle.reshape(Tensor([60, 0, 96, 128],"float32"), list[60,96,96,128,], )
paddle.reshape(Tensor([60, 0],"float32"), list[15,4,4,], )
paddle.reshape(Tensor([60, 0],"int64"), list[60,], )
paddle.reshape(Tensor([60, 14, 0, 384],"float32"), list[60,14,14,384,], )
paddle.reshape(Tensor([60, 14, 0, 512],"float32"), list[60,14,14,512,], )
paddle.reshape(Tensor([60, 14, 14, 0],"float32"), list[60,14,14,384,], )
paddle.reshape(Tensor([60, 14, 14, 0],"float32"), list[60,14,14,512,], )
paddle.reshape(Tensor([60, 200, 0],"float16"), shape=tuple(60,-1,), )
paddle.reshape(Tensor([60, 200, 0],"float32"), shape=tuple(60,-1,), )
paddle.reshape(Tensor([60, 24, 0, 512],"float32"), list[60,24,24,512,], )
paddle.reshape(Tensor([60, 24, 24, 0],"float32"), list[60,24,24,512,], )
paddle.reshape(Tensor([60, 28, 0, 192],"float32"), list[60,28,28,192,], )
paddle.reshape(Tensor([60, 28, 0, 256],"float32"), list[60,28,28,256,], )
paddle.reshape(Tensor([60, 28, 28, 0],"float32"), list[60,28,28,192,], )
paddle.reshape(Tensor([60, 28, 28, 0],"float32"), list[60,28,28,256,], )
paddle.reshape(Tensor([60, 48, 0, 256],"float32"), list[60,48,48,256,], )
paddle.reshape(Tensor([60, 48, 48, 0],"float32"), list[60,48,48,256,], )
paddle.reshape(Tensor([60, 56, 0, 128],"float32"), list[60,56,56,128,], )
paddle.reshape(Tensor([60, 56, 0, 96],"float32"), list[60,56,56,96,], )
paddle.reshape(Tensor([60, 56, 56, 0],"float32"), list[60,56,56,128,], )
paddle.reshape(Tensor([60, 56, 56, 0],"float32"), list[60,56,56,96,], )
paddle.reshape(Tensor([60, 96, 0, 128],"float32"), list[60,96,96,128,], )
paddle.reshape(Tensor([60, 96, 96, 0],"float32"), list[60,96,96,128,], )
paddle.reshape(Tensor([61, 0],"int64"), list[61,], )
paddle.reshape(Tensor([64, 0, 1, 1],"float32"), list[-1,8,1280,], )
paddle.reshape(Tensor([64, 0, 1],"float32"), tuple(64,-1,), )
paddle.reshape(Tensor([64, 0, 14, 384],"float32"), list[64,14,14,384,], )
paddle.reshape(Tensor([64, 0, 14, 512],"float32"), list[64,14,14,512,], )
paddle.reshape(Tensor([64, 0, 16, 16],"float16"), list[64,96,-1,], )
paddle.reshape(Tensor([64, 0, 24, 512],"float32"), list[64,24,24,512,], )
paddle.reshape(Tensor([64, 0, 272],"float16"), shape=tuple(64,-1,), )
paddle.reshape(Tensor([64, 0, 272],"float32"), shape=tuple(64,-1,), )
paddle.reshape(Tensor([64, 0, 28, 192],"float32"), list[64,28,28,192,], )
paddle.reshape(Tensor([64, 0, 28, 256],"float32"), list[64,28,28,256,], )
paddle.reshape(Tensor([64, 0, 3],"float32"), tuple(64,-1,), )
paddle.reshape(Tensor([64, 0, 48, 256],"float32"), list[64,48,48,256,], )
paddle.reshape(Tensor([64, 0, 56, 128],"float32"), list[64,56,56,128,], )
paddle.reshape(Tensor([64, 0, 56, 96],"float32"), list[64,56,56,96,], )
paddle.reshape(Tensor([64, 0, 6626],"float32"), list[-1,6626,], )
paddle.reshape(Tensor([64, 0, 96, 128],"float32"), list[64,96,96,128,], )
paddle.reshape(Tensor([64, 0],"float16"), tuple(1,1,64,64,), )
paddle.reshape(Tensor([64, 0],"float32"), list[16,-1,], )
paddle.reshape(Tensor([64, 0],"float32"), list[64,1,1,], )
paddle.reshape(Tensor([64, 0],"float32"), list[64,1,3,], )
paddle.reshape(Tensor([64, 0],"float32"), list[64,64,1,], )
paddle.reshape(Tensor([64, 0],"float32"), list[64,64,3,], )
paddle.reshape(Tensor([64, 1, 0],"float32"), tuple(64,-1,), )
paddle.reshape(Tensor([64, 1280, 0, 1],"float32"), list[-1,8,1280,], )
paddle.reshape(Tensor([64, 1280, 1, 0],"float32"), list[-1,8,1280,], )
paddle.reshape(Tensor([64, 14, 0, 384],"float32"), list[64,14,14,384,], )
paddle.reshape(Tensor([64, 14, 0, 512],"float32"), list[64,14,14,512,], )
paddle.reshape(Tensor([64, 14, 14, 0],"float32"), list[64,14,14,384,], )
paddle.reshape(Tensor([64, 14, 14, 0],"float32"), list[64,14,14,512,], )
paddle.reshape(Tensor([64, 200, 0],"float16"), shape=tuple(64,-1,), )
paddle.reshape(Tensor([64, 200, 0],"float32"), shape=tuple(64,-1,), )
paddle.reshape(Tensor([64, 24, 0, 512],"float32"), list[64,24,24,512,], )
paddle.reshape(Tensor([64, 24, 0],"float32"), list[-1,6626,], )
paddle.reshape(Tensor([64, 24, 24, 0],"float32"), list[64,24,24,512,], )
paddle.reshape(Tensor([64, 28, 0, 192],"float32"), list[64,28,28,192,], )
paddle.reshape(Tensor([64, 28, 0, 256],"float32"), list[64,28,28,256,], )
paddle.reshape(Tensor([64, 28, 28, 0],"float32"), list[64,28,28,192,], )
paddle.reshape(Tensor([64, 28, 28, 0],"float32"), list[64,28,28,256,], )
paddle.reshape(Tensor([64, 48, 0, 256],"float32"), list[64,48,48,256,], )
paddle.reshape(Tensor([64, 48, 48, 0],"float32"), list[64,48,48,256,], )
paddle.reshape(Tensor([64, 56, 0, 128],"float32"), list[64,56,56,128,], )
paddle.reshape(Tensor([64, 56, 0, 96],"float32"), list[64,56,56,96,], )
paddle.reshape(Tensor([64, 56, 56, 0],"float32"), list[64,56,56,128,], )
paddle.reshape(Tensor([64, 56, 56, 0],"float32"), list[64,56,56,96,], )
paddle.reshape(Tensor([64, 96, 0, 128],"float32"), list[64,96,96,128,], )
paddle.reshape(Tensor([64, 96, 0, 16],"float16"), list[64,96,-1,], )
paddle.reshape(Tensor([64, 96, 16, 0],"float16"), list[64,96,-1,], )
paddle.reshape(Tensor([64, 96, 96, 0],"float32"), list[64,96,96,128,], )
paddle.reshape(Tensor([65, 0],"float16"), tuple(1,1,65,64,), )
paddle.reshape(Tensor([68, 0, 272],"float16"), shape=tuple(68,-1,), )
paddle.reshape(Tensor([68, 0, 272],"float32"), shape=tuple(68,-1,), )
paddle.reshape(Tensor([68, 200, 0],"float16"), shape=tuple(68,-1,), )
paddle.reshape(Tensor([68, 200, 0],"float32"), shape=tuple(68,-1,), )
paddle.reshape(Tensor([7, 0, 13, 7],"float32"), list[7,4,7,13,], )
paddle.reshape(Tensor([7, 0, 32],"float16"), shape=list[7,14,4,8,], )
paddle.reshape(Tensor([7, 0, 32],"float32"), shape=list[7,10,4,8,], )
paddle.reshape(Tensor([7, 0, 32],"float32"), shape=list[7,11,4,8,], )
paddle.reshape(Tensor([7, 0, 32],"float32"), shape=list[7,14,4,8,], )
paddle.reshape(Tensor([7, 0, 32],"float32"), shape=list[7,4,4,8,], )
paddle.reshape(Tensor([7, 0, 32],"float32"), shape=list[7,56,4,8,], )
paddle.reshape(Tensor([7, 0, 32],"float32"), shape=list[7,7,4,8,], )
paddle.reshape(Tensor([7, 0, 50000],"float32"), list[-1,50000,], )
paddle.reshape(Tensor([7, 0, 7, 14],"float32"), list[7,4,14,7,], )
paddle.reshape(Tensor([7, 10, 0],"float32"), shape=list[7,10,4,8,], )
paddle.reshape(Tensor([7, 11, 0],"float32"), shape=list[7,11,4,8,], )
paddle.reshape(Tensor([7, 14, 0],"float16"), shape=list[7,14,4,8,], )
paddle.reshape(Tensor([7, 14, 0],"float32"), shape=list[7,14,4,8,], )
paddle.reshape(Tensor([7, 165, 0],"float32"), list[-1,50000,], )
paddle.reshape(Tensor([7, 4, 0, 14],"float32"), list[7,4,14,7,], )
paddle.reshape(Tensor([7, 4, 0, 7],"float32"), list[7,4,7,13,], )
paddle.reshape(Tensor([7, 4, 0],"float32"), shape=list[7,4,4,8,], )
paddle.reshape(Tensor([7, 4, 13, 0],"float32"), list[7,4,7,13,], )
paddle.reshape(Tensor([7, 4, 7, 0],"float32"), list[7,4,14,7,], )
paddle.reshape(Tensor([7, 56, 0],"float32"), shape=list[7,56,4,8,], )
paddle.reshape(Tensor([7, 7, 0],"float32"), shape=list[7,7,4,8,], )
paddle.reshape(Tensor([72, 0, 272],"float16"), shape=tuple(72,-1,), )
paddle.reshape(Tensor([72, 0, 272],"float32"), shape=tuple(72,-1,), )
paddle.reshape(Tensor([72, 200, 0],"float16"), shape=tuple(72,-1,), )
paddle.reshape(Tensor([72, 200, 0],"float32"), shape=tuple(72,-1,), )
paddle.reshape(Tensor([720, 0],"float32"), list[5,4,6,6,6,], )
paddle.reshape(Tensor([728, 0],"float32"), tuple(2,52,7,-1,), )
paddle.reshape(Tensor([76, 0, 272],"float16"), shape=tuple(76,-1,), )
paddle.reshape(Tensor([76, 0, 272],"float32"), shape=tuple(76,-1,), )
paddle.reshape(Tensor([76, 200, 0],"float16"), shape=tuple(76,-1,), )
paddle.reshape(Tensor([76, 200, 0],"float32"), shape=tuple(76,-1,), )
paddle.reshape(Tensor([8, 0, 1, 1, 400],"float16"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 0, 1, 1, 400],"float32"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 0, 1, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([8, 0, 1, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([8, 0, 1, 7, 7],"float32"), list[8,5,7,7,], )
paddle.reshape(Tensor([8, 0, 100],"float64"), list[-1,400,], )
paddle.reshape(Tensor([8, 0, 136, 12],"float16"), shape=tuple(8,-1,4,), )
paddle.reshape(Tensor([8, 0, 136, 12],"float32"), shape=tuple(8,-1,4,), )
paddle.reshape(Tensor([8, 0, 136, 3],"float16"), shape=tuple(8,-1,1,), )
paddle.reshape(Tensor([8, 0, 136, 3],"float32"), shape=tuple(8,-1,1,), )
paddle.reshape(Tensor([8, 0, 14, 768],"float32"), list[8,14,14,768,], )
paddle.reshape(Tensor([8, 0, 24, 7, 7],"float32"), list[40,24,49,], )
paddle.reshape(Tensor([8, 0, 28, 384],"float32"), list[8,28,28,384,], )
paddle.reshape(Tensor([8, 0, 304],"float16"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 0, 304],"float32"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 0, 32],"float32"), shape=list[8,14,4,8,], )
paddle.reshape(Tensor([8, 0, 4, 4, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 0, 4, 4, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 0, 56, 192],"float32"), list[8,56,56,192,], )
paddle.reshape(Tensor([8, 0, 6626],"float32"), list[-1,6626,], )
paddle.reshape(Tensor([8, 0, 7, 7],"bool"), list[-1,], )
paddle.reshape(Tensor([8, 0, 7, 7],"bool"), list[-1,1,], )
paddle.reshape(Tensor([8, 0, 7, 7],"float32"), list[8,-1,], )
paddle.reshape(Tensor([8, 0, 7, 7],"float32"), list[8,1024,-1,], )
paddle.reshape(Tensor([8, 0, 7, 7],"float32"), list[8,5,29,7,7,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,1024,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,2048,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,256,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,512,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([8, 0],"int64"), list[2,4,3,], name="Categorical_sample", )
paddle.reshape(Tensor([8, 0],"int64"), list[2,4,3,2,], name="Categorical_sample", )
paddle.reshape(Tensor([8, 1, 0, 1, 400],"float16"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 1, 0, 1, 400],"float32"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 1, 1, 0, 400],"float16"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 1, 1, 0, 400],"float32"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 1, 1, 1, 0],"float16"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 1, 1, 1, 0],"float32"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 100, 0, 12],"float16"), shape=tuple(8,-1,4,), )
paddle.reshape(Tensor([8, 100, 0, 12],"float32"), shape=tuple(8,-1,4,), )
paddle.reshape(Tensor([8, 100, 0, 3],"float16"), shape=tuple(8,-1,1,), )
paddle.reshape(Tensor([8, 100, 0, 3],"float32"), shape=tuple(8,-1,1,), )
paddle.reshape(Tensor([8, 100, 136, 0],"float16"), shape=tuple(8,-1,1,), )
paddle.reshape(Tensor([8, 100, 136, 0],"float16"), shape=tuple(8,-1,4,), )
paddle.reshape(Tensor([8, 100, 136, 0],"float32"), shape=tuple(8,-1,1,), )
paddle.reshape(Tensor([8, 100, 136, 0],"float32"), shape=tuple(8,-1,4,), )
paddle.reshape(Tensor([8, 1024, 0, 7],"float32"), list[8,1024,-1,], )
paddle.reshape(Tensor([8, 1024, 7, 0],"float32"), list[8,1024,-1,], )
paddle.reshape(Tensor([8, 14, 0, 768],"float32"), list[8,14,14,768,], )
paddle.reshape(Tensor([8, 14, 0],"float32"), shape=list[8,14,4,8,], )
paddle.reshape(Tensor([8, 14, 14, 0],"float32"), list[8,14,14,768,], )
paddle.reshape(Tensor([8, 145, 0, 7],"float32"), list[8,5,29,7,7,], )
paddle.reshape(Tensor([8, 145, 7, 0],"float32"), list[8,5,29,7,7,], )
paddle.reshape(Tensor([8, 200, 0],"float16"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 200, 0],"float32"), shape=tuple(8,-1,), )
paddle.reshape(Tensor([8, 24, 0],"float32"), list[-1,6626,], )
paddle.reshape(Tensor([8, 256, 0, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([8, 256, 1, 0],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([8, 28, 0, 384],"float32"), list[8,28,28,384,], )
paddle.reshape(Tensor([8, 28, 28, 0],"float32"), list[8,28,28,384,], )
paddle.reshape(Tensor([8, 3, 0, 4, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 0, 4, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 0, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 0, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 0, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 0, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 5, 0],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 5, 0],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 4, 0],"float64"), list[-1,400,], )
paddle.reshape(Tensor([8, 5, 0, 7, 7],"float32"), list[40,24,49,], )
paddle.reshape(Tensor([8, 5, 0, 7, 7],"float32"), list[8,5,7,7,], )
paddle.reshape(Tensor([8, 5, 0, 7],"bool"), list[-1,], )
paddle.reshape(Tensor([8, 5, 0, 7],"bool"), list[-1,1,], )
paddle.reshape(Tensor([8, 5, 0, 7],"float32"), list[8,-1,], )
paddle.reshape(Tensor([8, 5, 1, 0, 7],"float32"), list[8,5,7,7,], )
paddle.reshape(Tensor([8, 5, 1, 7, 0],"float32"), list[8,5,7,7,], )
paddle.reshape(Tensor([8, 5, 24, 0, 7],"float32"), list[40,24,49,], )
paddle.reshape(Tensor([8, 5, 24, 7, 0],"float32"), list[40,24,49,], )
paddle.reshape(Tensor([8, 5, 7, 0],"bool"), list[-1,], )
paddle.reshape(Tensor([8, 5, 7, 0],"bool"), list[-1,1,], )
paddle.reshape(Tensor([8, 5, 7, 0],"float32"), list[8,-1,], )
paddle.reshape(Tensor([8, 512, 0, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([8, 512, 1, 0],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([8, 56, 0, 192],"float32"), list[8,56,56,192,], )
paddle.reshape(Tensor([8, 56, 56, 0],"float32"), list[8,56,56,192,], )
paddle.reshape(Tensor([80, 0, 2, 4],"float32"), list[-1,4,], )
paddle.reshape(Tensor([80, 0, 272],"float16"), shape=tuple(80,-1,), )
paddle.reshape(Tensor([80, 0, 272],"float32"), shape=tuple(80,-1,), )
paddle.reshape(Tensor([80, 0, 5],"float32"), tuple(80,-1,), )
paddle.reshape(Tensor([80, 0],"float32"), list[80,80,5,], )
paddle.reshape(Tensor([80, 200, 0],"float16"), shape=tuple(80,-1,), )
paddle.reshape(Tensor([80, 200, 0],"float32"), shape=tuple(80,-1,), )
paddle.reshape(Tensor([80, 80, 0, 4],"float32"), list[-1,4,], )
paddle.reshape(Tensor([80, 80, 0],"float32"), tuple(80,-1,), )
paddle.reshape(Tensor([80, 80, 2, 0],"float32"), list[-1,4,], )
paddle.reshape(Tensor([80239, 0],"bool"), list[-1,20,1,], )
paddle.reshape(Tensor([84, 0, 272],"float16"), shape=tuple(84,-1,), )
paddle.reshape(Tensor([84, 0, 272],"float32"), shape=tuple(84,-1,), )
paddle.reshape(Tensor([84, 200, 0],"float16"), shape=tuple(84,-1,), )
paddle.reshape(Tensor([84, 200, 0],"float32"), shape=tuple(84,-1,), )
paddle.reshape(Tensor([88, 0, 272],"float16"), shape=tuple(88,-1,), )
paddle.reshape(Tensor([88, 0, 272],"float32"), shape=tuple(88,-1,), )
paddle.reshape(Tensor([88, 200, 0],"float16"), shape=tuple(88,-1,), )
paddle.reshape(Tensor([88, 200, 0],"float32"), shape=tuple(88,-1,), )
paddle.reshape(Tensor([9, 0, 272],"float32"), shape=tuple(9,-1,), )
paddle.reshape(Tensor([9, 0, 304],"float32"), shape=tuple(9,-1,), )
paddle.reshape(Tensor([9, 0],"float32"), list[18,4,], )
paddle.reshape(Tensor([9, 0],"float32"), shape=list[1,-1,256,], )
paddle.reshape(Tensor([9, 0],"int64"), list[18,4,], )
paddle.reshape(Tensor([9, 0],"int64"), list[9,10,], name="Categorical_sample", )
paddle.reshape(Tensor([9, 200, 0],"float32"), shape=tuple(9,-1,), )
paddle.reshape(Tensor([92, 0, 272],"float16"), shape=tuple(92,-1,), )
paddle.reshape(Tensor([92, 0, 272],"float32"), shape=tuple(92,-1,), )
paddle.reshape(Tensor([92, 200, 0],"float16"), shape=tuple(92,-1,), )
paddle.reshape(Tensor([92, 200, 0],"float32"), shape=tuple(92,-1,), )
paddle.reshape(Tensor([96, 0, 272],"float16"), shape=tuple(96,-1,), )
paddle.reshape(Tensor([96, 0, 272],"float32"), shape=tuple(96,-1,), )
paddle.reshape(Tensor([96, 200, 0],"float16"), shape=tuple(96,-1,), )
paddle.reshape(Tensor([96, 200, 0],"float32"), shape=tuple(96,-1,), )
paddle.reshape(x=Tensor([0, 1, 10],"float32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 1, 10],"int32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 1, 12, 16],"float32"), shape=tuple(13,12,16,), )
paddle.reshape(x=Tensor([0, 1, 12, 16],"float32"), shape=tuple(16,12,16,), )
paddle.reshape(x=Tensor([0, 1, 12, 16],"float32"), shape=tuple(3,12,16,), )
paddle.reshape(x=Tensor([0, 1],"float32"), shape=list[10,], )
paddle.reshape(x=Tensor([0, 10],"float32"), shape=list[100,], )
paddle.reshape(x=Tensor([0, 10],"float32"), shape=list[200,], )
paddle.reshape(x=Tensor([0, 10],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([0, 100],"float16"), shape=list[-1,], )
paddle.reshape(x=Tensor([0, 100],"float32"), shape=list[-1,], )
paddle.reshape(x=Tensor([0, 1024, 1, 1],"float16"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([0, 1024, 1, 1],"float32"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([0, 1024],"float16"), shape=list[1048576,], )
paddle.reshape(x=Tensor([0, 116, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([0, 116, 2, 14, 14],"float16"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([0, 116, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([0, 116, 2, 14, 14],"float32"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([0, 116, 28, 28],"float16"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([0, 116, 28, 28],"float32"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([0, 12, 16],"float32"), shape=tuple(-1,1,12,16,), )
paddle.reshape(x=Tensor([0, 12, 16],"float32"), shape=tuple(-1,2,12,16,), )
paddle.reshape(x=Tensor([0, 120, 28, 28],"float16"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([0, 120, 28, 28],"float32"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([0, 12288],"float16"), shape=list[50331648,], )
paddle.reshape(x=Tensor([0, 128, 1, 1],"float16"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([0, 128, 1, 1],"float32"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([0, 138120, 1],"float32"), shape=tuple(-1,), )
paddle.reshape(x=Tensor([0, 138120, 4],"float32"), shape=tuple(-1,4,), )
paddle.reshape(x=Tensor([0, 140, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(x=Tensor([0, 153450, 1],"float32"), shape=tuple(-1,), )
paddle.reshape(x=Tensor([0, 153450, 4],"float32"), shape=tuple(-1,4,), )
paddle.reshape(x=Tensor([0, 16, 2, 32, 24],"float16"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([0, 16, 2, 32, 24],"float32"), shape=list[16,32,32,24,], )
paddle.reshape(x=Tensor([0, 16, 2, 32, 24],"float32"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([0, 16, 2, 64, 48],"float32"), shape=list[16,32,64,48,], )
paddle.reshape(x=Tensor([0, 160, 16, 12],"float32"), shape=list[16,2,80,16,12,], )
paddle.reshape(x=Tensor([0, 160, 2, 4, 3],"float16"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([0, 160, 2, 4, 3],"float32"), shape=list[16,320,4,3,], )
paddle.reshape(x=Tensor([0, 160, 2, 4, 3],"float32"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([0, 160, 2, 8, 6],"float32"), shape=list[16,320,8,6,], )
paddle.reshape(x=Tensor([0, 160, 8, 6],"float16"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([0, 160, 8, 6],"float32"), shape=list[16,2,80,8,6,], )
paddle.reshape(x=Tensor([0, 160, 8, 6],"float32"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([0, 16384],"float16"), shape=list[67108864,], )
paddle.reshape(x=Tensor([0, 192, 16, 16],"float16"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([0, 192, 16, 16],"float32"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([0, 192, 18, 18],"float16"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([0, 192, 18, 18],"float32"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([0, 192, 2, 10, 10],"float16"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([0, 192, 2, 10, 10],"float32"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([0, 192, 2, 11, 11],"float16"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([0, 192, 2, 11, 11],"float32"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([0, 192, 2, 12, 12],"float16"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([0, 192, 2, 12, 12],"float32"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([0, 192, 2, 8, 8],"float16"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([0, 192, 2, 8, 8],"float32"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([0, 192, 2, 9, 9],"float16"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([0, 192, 2, 9, 9],"float32"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([0, 192, 20, 20],"float16"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([0, 192, 20, 20],"float32"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([0, 192, 22, 22],"float16"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([0, 192, 22, 22],"float32"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([0, 192, 24, 24],"float16"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([0, 192, 24, 24],"float32"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([0, 2, 1, 128],"float16"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 128],"float32"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 256],"float16"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 256],"float32"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 512],"float16"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 512],"float32"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 64],"float16"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([0, 2, 1, 64],"float32"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([0, 2, 12, 16],"float32"), shape=tuple(32,12,16,), )
paddle.reshape(x=Tensor([0, 2, 12, 16],"float32"), shape=tuple(4,12,16,), )
paddle.reshape(x=Tensor([0, 2],"float32"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([0, 2],"float32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([0, 2],"float64"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([0, 2],"float64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([0, 2],"float64"), shape=tuple(1,4,), )
paddle.reshape(x=Tensor([0, 20, 2, 32, 24],"float16"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([0, 20, 2, 32, 24],"float32"), shape=list[16,40,32,24,], )
paddle.reshape(x=Tensor([0, 20, 2, 32, 24],"float32"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([0, 20, 2, 64, 48],"float32"), shape=list[16,40,64,48,], )
paddle.reshape(x=Tensor([0, 2048],"float16"), shape=list[103022592,], )
paddle.reshape(x=Tensor([0, 2048],"float16"), shape=list[2097152,], )
paddle.reshape(x=Tensor([0, 2048],"float16"), shape=list[4194304,], )
paddle.reshape(x=Tensor([0, 232, 14, 14],"float16"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([0, 232, 14, 14],"float16"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([0, 232, 14, 14],"float32"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([0, 232, 14, 14],"float32"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([0, 232, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([0, 232, 2, 7, 7],"float16"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([0, 232, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([0, 232, 2, 7, 7],"float32"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([0, 256, 1, 1],"float16"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([0, 256, 1, 1],"float32"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([0, 3],"float32"), shape=list[6,], )
paddle.reshape(x=Tensor([0, 32, 32, 24],"float16"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([0, 32, 32, 24],"float32"), shape=list[16,2,16,32,24,], )
paddle.reshape(x=Tensor([0, 32, 32, 24],"float32"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([0, 32, 64, 48],"float32"), shape=list[16,2,16,64,48,], )
paddle.reshape(x=Tensor([0, 320, 4, 3],"float16"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([0, 320, 4, 3],"float32"), shape=list[16,2,160,4,3,], )
paddle.reshape(x=Tensor([0, 320, 4, 3],"float32"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([0, 320, 8, 6],"float32"), shape=list[16,2,160,8,6,], )
paddle.reshape(x=Tensor([0, 384, 10, 10],"float16"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([0, 384, 10, 10],"float32"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([0, 384, 11, 11],"float16"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([0, 384, 11, 11],"float32"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([0, 384, 12, 12],"float16"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([0, 384, 12, 12],"float32"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([0, 384, 8, 8],"float16"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([0, 384, 8, 8],"float32"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([0, 384, 9, 9],"float16"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([0, 384, 9, 9],"float32"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([0, 40, 2, 16, 12],"float16"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([0, 40, 2, 16, 12],"float32"), shape=list[16,80,16,12,], )
paddle.reshape(x=Tensor([0, 40, 2, 16, 12],"float32"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([0, 40, 2, 32, 24],"float32"), shape=list[16,80,32,24,], )
paddle.reshape(x=Tensor([0, 40, 32, 24],"float16"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([0, 40, 32, 24],"float32"), shape=list[16,2,20,32,24,], )
paddle.reshape(x=Tensor([0, 40, 32, 24],"float32"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([0, 40, 64, 48],"float32"), shape=list[16,2,20,64,48,], )
paddle.reshape(x=Tensor([0, 4096],"float16"), shape=list[16777216,], )
paddle.reshape(x=Tensor([0, 4096],"float16"), shape=list[206045184,], )
paddle.reshape(x=Tensor([0, 4096],"float16"), shape=list[4194304,], )
paddle.reshape(x=Tensor([0, 4096],"float16"), shape=list[67108864,], )
paddle.reshape(x=Tensor([0, 464, 7, 7],"float16"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([0, 464, 7, 7],"float16"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([0, 464, 7, 7],"float32"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([0, 464, 7, 7],"float32"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([0, 48, 2, 32, 32],"float16"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([0, 48, 2, 32, 32],"float32"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([0, 48, 2, 36, 36],"float16"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([0, 48, 2, 36, 36],"float32"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([0, 48, 2, 40, 40],"float16"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([0, 48, 2, 40, 40],"float32"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([0, 48, 2, 44, 44],"float16"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([0, 48, 2, 44, 44],"float32"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([0, 48, 2, 48, 48],"float16"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([0, 48, 2, 48, 48],"float32"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([0, 512, 1, 1],"float16"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([0, 512, 1, 1],"float32"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([0, 58, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([0, 58, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([0, 60, 2, 28, 28],"float16"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([0, 60, 2, 28, 28],"float32"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([0, 6144],"float16"), shape=list[12582912,], )
paddle.reshape(x=Tensor([0, 7, 32],"float32"), shape=list[13,7,4,-1,], )
paddle.reshape(x=Tensor([0, 7, 32],"float32"), shape=list[52,7,4,-1,], )
paddle.reshape(x=Tensor([0, 8, 1],"float32"), shape=list[2,8,], )
paddle.reshape(x=Tensor([0, 8],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([0, 80, 16, 12],"float16"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([0, 80, 16, 12],"float32"), shape=list[16,2,40,16,12,], )
paddle.reshape(x=Tensor([0, 80, 16, 12],"float32"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([0, 80, 2, 16, 12],"float32"), shape=list[16,160,16,12,], )
paddle.reshape(x=Tensor([0, 80, 2, 8, 6],"float16"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([0, 80, 2, 8, 6],"float32"), shape=list[16,160,8,6,], )
paddle.reshape(x=Tensor([0, 80, 2, 8, 6],"float32"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([0, 80, 32, 24],"float32"), shape=list[16,2,40,32,24,], )
paddle.reshape(x=Tensor([0, 8192],"float16"), shape=list[16777216,], )
paddle.reshape(x=Tensor([0, 9],"float32"), shape=list[36,], )
paddle.reshape(x=Tensor([0, 96, 2, 16, 16],"float16"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([0, 96, 2, 16, 16],"float32"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([0, 96, 2, 18, 18],"float16"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([0, 96, 2, 18, 18],"float32"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([0, 96, 2, 20, 20],"float16"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([0, 96, 2, 20, 20],"float32"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([0, 96, 2, 22, 22],"float16"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([0, 96, 2, 22, 22],"float32"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([0, 96, 2, 24, 24],"float16"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([0, 96, 2, 24, 24],"float32"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([0, 96, 32, 32],"float16"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([0, 96, 32, 32],"float32"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([0, 96, 36, 36],"float16"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([0, 96, 36, 36],"float32"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([0, 96, 40, 40],"float16"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([0, 96, 40, 40],"float32"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([0, 96, 44, 44],"float16"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([0, 96, 44, 44],"float32"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([0, 96, 48, 48],"float16"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([0, 96, 48, 48],"float32"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[1,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[1024,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[12288,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[16384,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[2048,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[4096,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[6144,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[768,], )
paddle.reshape(x=Tensor([0],"float16"), shape=list[8192,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[10,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[1024,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[2048,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[4096,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[8,], )
paddle.reshape(x=Tensor([1, 0, 1],"float32"), shape=tuple(-1,), )
paddle.reshape(x=Tensor([1, 0, 4],"float32"), shape=tuple(-1,4,), )
paddle.reshape(x=Tensor([1, 138120, 0],"float32"), shape=tuple(-1,), )
paddle.reshape(x=Tensor([1, 138120, 0],"float32"), shape=tuple(-1,4,), )
paddle.reshape(x=Tensor([1, 153450, 0],"float32"), shape=tuple(-1,), )
paddle.reshape(x=Tensor([1, 153450, 0],"float32"), shape=tuple(-1,4,), )
paddle.reshape(x=Tensor([10, 0],"float32"), shape=list[10,], )
paddle.reshape(x=Tensor([10, 0],"float32"), shape=list[100,], )
paddle.reshape(x=Tensor([10, 0],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([1024, 0],"float16"), shape=list[1048576,], )
paddle.reshape(x=Tensor([1024, 0],"float16"), shape=list[2097152,], )
paddle.reshape(x=Tensor([1024, 0],"float16"), shape=list[4194304,], )
paddle.reshape(x=Tensor([13, 0, 12, 16],"float32"), shape=tuple(13,12,16,), )
paddle.reshape(x=Tensor([13, 0, 16],"float32"), shape=tuple(-1,1,12,16,), )
paddle.reshape(x=Tensor([13, 0, 32],"float32"), shape=list[13,7,4,-1,], )
paddle.reshape(x=Tensor([13, 1, 0, 16],"float32"), shape=tuple(13,12,16,), )
paddle.reshape(x=Tensor([13, 1, 12, 0],"float32"), shape=tuple(13,12,16,), )
paddle.reshape(x=Tensor([13, 12, 0],"float32"), shape=tuple(-1,1,12,16,), )
paddle.reshape(x=Tensor([13, 7, 0],"float32"), shape=list[13,7,4,-1,], )
paddle.reshape(x=Tensor([1536, 0, 14, 14],"float16"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([1536, 0, 14, 14],"float32"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([1536, 0, 2, 14, 14],"float16"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 0, 2, 14, 14],"float32"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 0, 2, 28, 28],"float16"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 0, 2, 28, 28],"float32"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 0, 2, 7, 7],"float16"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 0, 2, 7, 7],"float32"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 0, 28, 28],"float16"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([1536, 0, 28, 28],"float32"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([1536, 0, 7, 7],"float16"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([1536, 0, 7, 7],"float32"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([1536, 116, 0, 14, 14],"float16"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 116, 0, 14, 14],"float32"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 116, 0, 28],"float16"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([1536, 116, 0, 28],"float32"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([1536, 116, 2, 0, 14],"float16"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 116, 2, 0, 14],"float32"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 116, 2, 14, 0],"float16"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 116, 2, 14, 0],"float32"), shape=list[1536,232,14,14,], )
paddle.reshape(x=Tensor([1536, 116, 28, 0],"float16"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([1536, 116, 28, 0],"float32"), shape=list[1536,2,58,28,28,], )
paddle.reshape(x=Tensor([1536, 232, 0, 14],"float16"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([1536, 232, 0, 14],"float32"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([1536, 232, 0, 7, 7],"float16"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 232, 0, 7, 7],"float32"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 232, 14, 0],"float16"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([1536, 232, 14, 0],"float32"), shape=list[1536,2,116,14,14,], )
paddle.reshape(x=Tensor([1536, 232, 2, 0, 7],"float16"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 232, 2, 0, 7],"float32"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 232, 2, 7, 0],"float16"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 232, 2, 7, 0],"float32"), shape=list[1536,464,7,7,], )
paddle.reshape(x=Tensor([1536, 464, 0, 7],"float16"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([1536, 464, 0, 7],"float32"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([1536, 464, 7, 0],"float16"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([1536, 464, 7, 0],"float32"), shape=list[1536,2,232,7,7,], )
paddle.reshape(x=Tensor([1536, 58, 0, 28, 28],"float16"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 58, 0, 28, 28],"float32"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 58, 2, 0, 28],"float16"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 58, 2, 0, 28],"float32"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 58, 2, 28, 0],"float16"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([1536, 58, 2, 28, 0],"float32"), shape=list[1536,116,28,28,], )
paddle.reshape(x=Tensor([16, 0, 12, 16],"float32"), shape=tuple(16,12,16,), )
paddle.reshape(x=Tensor([16, 0, 12, 16],"float32"), shape=tuple(32,12,16,), )
paddle.reshape(x=Tensor([16, 0, 16, 12],"float32"), shape=list[16,2,40,16,12,], )
paddle.reshape(x=Tensor([16, 0, 16, 12],"float32"), shape=list[16,2,80,16,12,], )
paddle.reshape(x=Tensor([16, 0, 16],"float32"), shape=tuple(-1,1,12,16,), )
paddle.reshape(x=Tensor([16, 0, 2, 16, 12],"float32"), shape=list[16,160,16,12,], )
paddle.reshape(x=Tensor([16, 0, 2, 16, 12],"float32"), shape=list[16,80,16,12,], )
paddle.reshape(x=Tensor([16, 0, 2, 32, 24],"float32"), shape=list[16,32,32,24,], )
paddle.reshape(x=Tensor([16, 0, 2, 32, 24],"float32"), shape=list[16,40,32,24,], )
paddle.reshape(x=Tensor([16, 0, 2, 32, 24],"float32"), shape=list[16,80,32,24,], )
paddle.reshape(x=Tensor([16, 0, 2, 4, 3],"float32"), shape=list[16,320,4,3,], )
paddle.reshape(x=Tensor([16, 0, 2, 64, 48],"float32"), shape=list[16,32,64,48,], )
paddle.reshape(x=Tensor([16, 0, 2, 64, 48],"float32"), shape=list[16,40,64,48,], )
paddle.reshape(x=Tensor([16, 0, 2, 8, 6],"float32"), shape=list[16,160,8,6,], )
paddle.reshape(x=Tensor([16, 0, 2, 8, 6],"float32"), shape=list[16,320,8,6,], )
paddle.reshape(x=Tensor([16, 0, 32, 24],"float32"), shape=list[16,2,16,32,24,], )
paddle.reshape(x=Tensor([16, 0, 32, 24],"float32"), shape=list[16,2,20,32,24,], )
paddle.reshape(x=Tensor([16, 0, 32, 24],"float32"), shape=list[16,2,40,32,24,], )
paddle.reshape(x=Tensor([16, 0, 4, 3],"float32"), shape=list[16,2,160,4,3,], )
paddle.reshape(x=Tensor([16, 0, 64, 48],"float32"), shape=list[16,2,16,64,48,], )
paddle.reshape(x=Tensor([16, 0, 64, 48],"float32"), shape=list[16,2,20,64,48,], )
paddle.reshape(x=Tensor([16, 0, 8, 6],"float32"), shape=list[16,2,160,8,6,], )
paddle.reshape(x=Tensor([16, 0, 8, 6],"float32"), shape=list[16,2,80,8,6,], )
paddle.reshape(x=Tensor([16, 1, 0, 16],"float32"), shape=tuple(16,12,16,), )
paddle.reshape(x=Tensor([16, 1, 12, 0],"float32"), shape=tuple(16,12,16,), )
paddle.reshape(x=Tensor([16, 12, 0],"float32"), shape=tuple(-1,1,12,16,), )
paddle.reshape(x=Tensor([16, 16, 0, 32, 24],"float32"), shape=list[16,32,32,24,], )
paddle.reshape(x=Tensor([16, 16, 0, 64, 48],"float32"), shape=list[16,32,64,48,], )
paddle.reshape(x=Tensor([16, 16, 2, 0, 24],"float32"), shape=list[16,32,32,24,], )
paddle.reshape(x=Tensor([16, 16, 2, 0, 48],"float32"), shape=list[16,32,64,48,], )
paddle.reshape(x=Tensor([16, 16, 2, 32, 0],"float32"), shape=list[16,32,32,24,], )
paddle.reshape(x=Tensor([16, 16, 2, 64, 0],"float32"), shape=list[16,32,64,48,], )
paddle.reshape(x=Tensor([16, 160, 0, 12],"float32"), shape=list[16,2,80,16,12,], )
paddle.reshape(x=Tensor([16, 160, 0, 4, 3],"float32"), shape=list[16,320,4,3,], )
paddle.reshape(x=Tensor([16, 160, 0, 6],"float32"), shape=list[16,2,80,8,6,], )
paddle.reshape(x=Tensor([16, 160, 0, 8, 6],"float32"), shape=list[16,320,8,6,], )
paddle.reshape(x=Tensor([16, 160, 16, 0],"float32"), shape=list[16,2,80,16,12,], )
paddle.reshape(x=Tensor([16, 160, 2, 0, 3],"float32"), shape=list[16,320,4,3,], )
paddle.reshape(x=Tensor([16, 160, 2, 0, 6],"float32"), shape=list[16,320,8,6,], )
paddle.reshape(x=Tensor([16, 160, 2, 4, 0],"float32"), shape=list[16,320,4,3,], )
paddle.reshape(x=Tensor([16, 160, 2, 8, 0],"float32"), shape=list[16,320,8,6,], )
paddle.reshape(x=Tensor([16, 160, 8, 0],"float32"), shape=list[16,2,80,8,6,], )
paddle.reshape(x=Tensor([16, 2, 0, 16],"float32"), shape=tuple(32,12,16,), )
paddle.reshape(x=Tensor([16, 2, 12, 0],"float32"), shape=tuple(32,12,16,), )
paddle.reshape(x=Tensor([16, 20, 0, 32, 24],"float32"), shape=list[16,40,32,24,], )
paddle.reshape(x=Tensor([16, 20, 0, 64, 48],"float32"), shape=list[16,40,64,48,], )
paddle.reshape(x=Tensor([16, 20, 2, 0, 24],"float32"), shape=list[16,40,32,24,], )
paddle.reshape(x=Tensor([16, 20, 2, 0, 48],"float32"), shape=list[16,40,64,48,], )
paddle.reshape(x=Tensor([16, 20, 2, 32, 0],"float32"), shape=list[16,40,32,24,], )
paddle.reshape(x=Tensor([16, 20, 2, 64, 0],"float32"), shape=list[16,40,64,48,], )
paddle.reshape(x=Tensor([16, 32, 0, 24],"float32"), shape=list[16,2,16,32,24,], )
paddle.reshape(x=Tensor([16, 32, 0, 48],"float32"), shape=list[16,2,16,64,48,], )
paddle.reshape(x=Tensor([16, 32, 32, 0],"float32"), shape=list[16,2,16,32,24,], )
paddle.reshape(x=Tensor([16, 32, 64, 0],"float32"), shape=list[16,2,16,64,48,], )
paddle.reshape(x=Tensor([16, 320, 0, 3],"float32"), shape=list[16,2,160,4,3,], )
paddle.reshape(x=Tensor([16, 320, 0, 6],"float32"), shape=list[16,2,160,8,6,], )
paddle.reshape(x=Tensor([16, 320, 4, 0],"float32"), shape=list[16,2,160,4,3,], )
paddle.reshape(x=Tensor([16, 320, 8, 0],"float32"), shape=list[16,2,160,8,6,], )
paddle.reshape(x=Tensor([16, 40, 0, 16, 12],"float32"), shape=list[16,80,16,12,], )
paddle.reshape(x=Tensor([16, 40, 0, 24],"float32"), shape=list[16,2,20,32,24,], )
paddle.reshape(x=Tensor([16, 40, 0, 32, 24],"float32"), shape=list[16,80,32,24,], )
paddle.reshape(x=Tensor([16, 40, 0, 48],"float32"), shape=list[16,2,20,64,48,], )
paddle.reshape(x=Tensor([16, 40, 2, 0, 12],"float32"), shape=list[16,80,16,12,], )
paddle.reshape(x=Tensor([16, 40, 2, 0, 24],"float32"), shape=list[16,80,32,24,], )
paddle.reshape(x=Tensor([16, 40, 2, 16, 0],"float32"), shape=list[16,80,16,12,], )
paddle.reshape(x=Tensor([16, 40, 2, 32, 0],"float32"), shape=list[16,80,32,24,], )
paddle.reshape(x=Tensor([16, 40, 32, 0],"float32"), shape=list[16,2,20,32,24,], )
paddle.reshape(x=Tensor([16, 40, 64, 0],"float32"), shape=list[16,2,20,64,48,], )
paddle.reshape(x=Tensor([16, 80, 0, 12],"float32"), shape=list[16,2,40,16,12,], )
paddle.reshape(x=Tensor([16, 80, 0, 16, 12],"float32"), shape=list[16,160,16,12,], )
paddle.reshape(x=Tensor([16, 80, 0, 24],"float32"), shape=list[16,2,40,32,24,], )
paddle.reshape(x=Tensor([16, 80, 0, 8, 6],"float32"), shape=list[16,160,8,6,], )
paddle.reshape(x=Tensor([16, 80, 16, 0],"float32"), shape=list[16,2,40,16,12,], )
paddle.reshape(x=Tensor([16, 80, 2, 0, 12],"float32"), shape=list[16,160,16,12,], )
paddle.reshape(x=Tensor([16, 80, 2, 0, 6],"float32"), shape=list[16,160,8,6,], )
paddle.reshape(x=Tensor([16, 80, 2, 16, 0],"float32"), shape=list[16,160,16,12,], )
paddle.reshape(x=Tensor([16, 80, 2, 8, 0],"float32"), shape=list[16,160,8,6,], )
paddle.reshape(x=Tensor([16, 80, 32, 0],"float32"), shape=list[16,2,40,32,24,], )
paddle.reshape(x=Tensor([16384, 0],"float16"), shape=list[67108864,], )
paddle.reshape(x=Tensor([2, 0, 1],"float32"), shape=list[2,8,], )
paddle.reshape(x=Tensor([2, 0, 12, 16],"float32"), shape=tuple(4,12,16,), )
paddle.reshape(x=Tensor([2, 0],"float32"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([2, 0],"float32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 0],"float32"), shape=list[6,], )
paddle.reshape(x=Tensor([2, 0],"float64"), shape=list[1,-1,], )
paddle.reshape(x=Tensor([2, 0],"float64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 0],"float64"), shape=tuple(1,4,), )
paddle.reshape(x=Tensor([2, 2, 0, 16],"float32"), shape=tuple(4,12,16,), )
paddle.reshape(x=Tensor([2, 2, 12, 0],"float32"), shape=tuple(4,12,16,), )
paddle.reshape(x=Tensor([2, 8, 0],"float32"), shape=list[2,8,], )
paddle.reshape(x=Tensor([20, 0],"float32"), shape=list[200,], )
paddle.reshape(x=Tensor([2048, 0],"float16"), shape=list[12582912,], )
paddle.reshape(x=Tensor([2048, 0],"float16"), shape=list[16777216,], )
paddle.reshape(x=Tensor([2048, 0],"float16"), shape=list[4194304,], )
paddle.reshape(x=Tensor([3, 0, 12, 16],"float32"), shape=tuple(3,12,16,), )
paddle.reshape(x=Tensor([3, 1, 0, 16],"float32"), shape=tuple(3,12,16,), )
paddle.reshape(x=Tensor([3, 1, 12, 0],"float32"), shape=tuple(3,12,16,), )
paddle.reshape(x=Tensor([32, 0, 16],"float32"), shape=tuple(-1,2,12,16,), )
paddle.reshape(x=Tensor([32, 12, 0],"float32"), shape=tuple(-1,2,12,16,), )
paddle.reshape(x=Tensor([4, 0, 16],"float32"), shape=tuple(-1,2,12,16,), )
paddle.reshape(x=Tensor([4, 0],"float32"), shape=list[36,], )
paddle.reshape(x=Tensor([4, 12, 0],"float32"), shape=tuple(-1,2,12,16,), )
paddle.reshape(x=Tensor([4096, 0],"float16"), shape=list[16777216,], )
paddle.reshape(x=Tensor([4096, 0],"float16"), shape=list[50331648,], )
paddle.reshape(x=Tensor([4096, 0],"float16"), shape=list[67108864,], )
paddle.reshape(x=Tensor([5, 0, 10],"float32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 0, 10],"int32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"float32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"int32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([50304, 0],"float16"), shape=list[103022592,], )
paddle.reshape(x=Tensor([50304, 0],"float16"), shape=list[206045184,], )
paddle.reshape(x=Tensor([512, 0, 14, 14],"float16"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([512, 0, 14, 14],"float32"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([512, 0, 16, 12],"float16"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([512, 0, 16, 12],"float32"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([512, 0, 2, 14, 14],"float16"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 0, 2, 14, 14],"float32"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 0, 2, 16, 12],"float16"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 0, 2, 16, 12],"float32"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 0, 2, 28, 28],"float16"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 0, 2, 28, 28],"float32"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 0, 2, 32, 24],"float16"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 0, 2, 32, 24],"float16"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 0, 2, 32, 24],"float32"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 0, 2, 32, 24],"float32"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 0, 2, 4, 3],"float16"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 0, 2, 4, 3],"float32"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 0, 2, 7, 7],"float16"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 0, 2, 7, 7],"float32"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 0, 2, 8, 6],"float16"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 0, 2, 8, 6],"float32"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 0, 28, 28],"float16"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([512, 0, 28, 28],"float32"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([512, 0, 32, 24],"float16"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([512, 0, 32, 24],"float16"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([512, 0, 32, 24],"float32"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([512, 0, 32, 24],"float32"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([512, 0, 4, 3],"float16"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([512, 0, 4, 3],"float32"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([512, 0, 7, 7],"float16"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([512, 0, 7, 7],"float32"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([512, 0, 8, 6],"float16"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([512, 0, 8, 6],"float32"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([512, 116, 0, 14, 14],"float16"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 116, 0, 14, 14],"float32"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 116, 2, 0, 14],"float16"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 116, 2, 0, 14],"float32"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 116, 2, 14, 0],"float16"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 116, 2, 14, 0],"float32"), shape=list[512,232,14,14,], )
paddle.reshape(x=Tensor([512, 120, 0, 28],"float16"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([512, 120, 0, 28],"float32"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([512, 120, 28, 0],"float16"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([512, 120, 28, 0],"float32"), shape=list[512,2,60,28,28,], )
paddle.reshape(x=Tensor([512, 16, 0, 32, 24],"float16"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 16, 0, 32, 24],"float32"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 16, 2, 0, 24],"float16"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 16, 2, 0, 24],"float32"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 16, 2, 32, 0],"float16"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 16, 2, 32, 0],"float32"), shape=list[512,32,32,24,], )
paddle.reshape(x=Tensor([512, 160, 0, 4, 3],"float16"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 160, 0, 4, 3],"float32"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 160, 0, 6],"float16"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([512, 160, 0, 6],"float32"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([512, 160, 2, 0, 3],"float16"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 160, 2, 0, 3],"float32"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 160, 2, 4, 0],"float16"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 160, 2, 4, 0],"float32"), shape=list[512,320,4,3,], )
paddle.reshape(x=Tensor([512, 160, 8, 0],"float16"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([512, 160, 8, 0],"float32"), shape=list[512,2,80,8,6,], )
paddle.reshape(x=Tensor([512, 20, 0, 32, 24],"float16"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 20, 0, 32, 24],"float32"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 20, 2, 0, 24],"float16"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 20, 2, 0, 24],"float32"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 20, 2, 32, 0],"float16"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 20, 2, 32, 0],"float32"), shape=list[512,40,32,24,], )
paddle.reshape(x=Tensor([512, 232, 0, 14],"float16"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([512, 232, 0, 14],"float32"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([512, 232, 0, 7, 7],"float16"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 232, 0, 7, 7],"float32"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 232, 14, 0],"float16"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([512, 232, 14, 0],"float32"), shape=list[512,2,116,14,14,], )
paddle.reshape(x=Tensor([512, 232, 2, 0, 7],"float16"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 232, 2, 0, 7],"float32"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 232, 2, 7, 0],"float16"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 232, 2, 7, 0],"float32"), shape=list[512,464,7,7,], )
paddle.reshape(x=Tensor([512, 32, 0, 24],"float16"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([512, 32, 0, 24],"float32"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([512, 32, 32, 0],"float16"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([512, 32, 32, 0],"float32"), shape=list[512,2,16,32,24,], )
paddle.reshape(x=Tensor([512, 320, 0, 3],"float16"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([512, 320, 0, 3],"float32"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([512, 320, 4, 0],"float16"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([512, 320, 4, 0],"float32"), shape=list[512,2,160,4,3,], )
paddle.reshape(x=Tensor([512, 40, 0, 16, 12],"float16"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 40, 0, 16, 12],"float32"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 40, 0, 24],"float16"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([512, 40, 0, 24],"float32"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([512, 40, 2, 0, 12],"float16"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 40, 2, 0, 12],"float32"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 40, 2, 16, 0],"float16"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 40, 2, 16, 0],"float32"), shape=list[512,80,16,12,], )
paddle.reshape(x=Tensor([512, 40, 32, 0],"float16"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([512, 40, 32, 0],"float32"), shape=list[512,2,20,32,24,], )
paddle.reshape(x=Tensor([512, 464, 0, 7],"float16"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([512, 464, 0, 7],"float32"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([512, 464, 7, 0],"float16"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([512, 464, 7, 0],"float32"), shape=list[512,2,232,7,7,], )
paddle.reshape(x=Tensor([512, 60, 0, 28, 28],"float16"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 60, 0, 28, 28],"float32"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 60, 2, 0, 28],"float16"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 60, 2, 0, 28],"float32"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 60, 2, 28, 0],"float16"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 60, 2, 28, 0],"float32"), shape=list[512,120,28,28,], )
paddle.reshape(x=Tensor([512, 80, 0, 12],"float16"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([512, 80, 0, 12],"float32"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([512, 80, 0, 8, 6],"float16"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 80, 0, 8, 6],"float32"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 80, 16, 0],"float16"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([512, 80, 16, 0],"float32"), shape=list[512,2,40,16,12,], )
paddle.reshape(x=Tensor([512, 80, 2, 0, 6],"float16"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 80, 2, 0, 6],"float32"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 80, 2, 8, 0],"float16"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([512, 80, 2, 8, 0],"float32"), shape=list[512,160,8,6,], )
paddle.reshape(x=Tensor([52, 0, 32],"float32"), shape=list[52,7,4,-1,], )
paddle.reshape(x=Tensor([52, 7, 0],"float32"), shape=list[52,7,4,-1,], )
paddle.reshape(x=Tensor([58, 0, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(x=Tensor([58, 140, 0],"float32"), shape=list[-1,2,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float16"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float16"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float16"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float16"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float32"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float32"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float32"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([64, 0, 1, 1],"float32"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([64, 0, 1, 128],"float16"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 128],"float32"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 256],"float16"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 256],"float32"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 512],"float16"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 512],"float32"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 64],"float16"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([64, 0, 1, 64],"float32"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([64, 0, 10, 10],"float16"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([64, 0, 10, 10],"float32"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([64, 0, 11, 11],"float16"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([64, 0, 11, 11],"float32"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([64, 0, 12, 12],"float16"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([64, 0, 12, 12],"float32"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([64, 0, 16, 16],"float16"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([64, 0, 16, 16],"float32"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([64, 0, 18, 18],"float16"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([64, 0, 18, 18],"float32"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([64, 0, 2, 10, 10],"float16"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 0, 2, 10, 10],"float32"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 0, 2, 11, 11],"float16"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 0, 2, 11, 11],"float32"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 0, 2, 12, 12],"float16"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 0, 2, 12, 12],"float32"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 0, 2, 16, 16],"float16"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 0, 2, 16, 16],"float32"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 0, 2, 18, 18],"float16"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 0, 2, 18, 18],"float32"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 0, 2, 20, 20],"float16"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 0, 2, 20, 20],"float32"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 0, 2, 22, 22],"float16"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 0, 2, 22, 22],"float32"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 0, 2, 24, 24],"float16"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 0, 2, 24, 24],"float32"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 0, 2, 32, 32],"float16"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 0, 2, 32, 32],"float32"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 0, 2, 36, 36],"float16"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 0, 2, 36, 36],"float32"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 0, 2, 40, 40],"float16"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 0, 2, 40, 40],"float32"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 0, 2, 44, 44],"float16"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 0, 2, 44, 44],"float32"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 0, 2, 48, 48],"float16"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 0, 2, 48, 48],"float32"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 0, 2, 8, 8],"float16"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 0, 2, 8, 8],"float32"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 0, 2, 9, 9],"float16"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 0, 2, 9, 9],"float32"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 0, 20, 20],"float16"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([64, 0, 20, 20],"float32"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([64, 0, 22, 22],"float16"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([64, 0, 22, 22],"float32"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([64, 0, 24, 24],"float16"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([64, 0, 24, 24],"float32"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([64, 0, 32, 32],"float16"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([64, 0, 32, 32],"float32"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([64, 0, 36, 36],"float16"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([64, 0, 36, 36],"float32"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([64, 0, 40, 40],"float16"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([64, 0, 40, 40],"float32"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([64, 0, 44, 44],"float16"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([64, 0, 44, 44],"float32"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([64, 0, 48, 48],"float16"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([64, 0, 48, 48],"float32"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([64, 0, 8, 8],"float16"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([64, 0, 8, 8],"float32"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([64, 0, 9, 9],"float16"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([64, 0, 9, 9],"float32"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([64, 1024, 0, 1],"float16"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([64, 1024, 0, 1],"float32"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([64, 1024, 1, 0],"float16"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([64, 1024, 1, 0],"float32"), shape=list[64,1,2,512,], )
paddle.reshape(x=Tensor([64, 128, 0, 1],"float16"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([64, 128, 0, 1],"float32"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([64, 128, 1, 0],"float16"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([64, 128, 1, 0],"float32"), shape=list[64,1,2,64,], )
paddle.reshape(x=Tensor([64, 192, 0, 10, 10],"float16"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 192, 0, 10, 10],"float32"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 192, 0, 11, 11],"float16"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 192, 0, 11, 11],"float32"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 192, 0, 12, 12],"float16"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 192, 0, 12, 12],"float32"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 192, 0, 16],"float16"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([64, 192, 0, 16],"float32"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([64, 192, 0, 18],"float16"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([64, 192, 0, 18],"float32"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([64, 192, 0, 20],"float16"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([64, 192, 0, 20],"float32"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([64, 192, 0, 22],"float16"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([64, 192, 0, 22],"float32"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([64, 192, 0, 24],"float16"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([64, 192, 0, 24],"float32"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([64, 192, 0, 8, 8],"float16"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 192, 0, 8, 8],"float32"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 192, 0, 9, 9],"float16"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 192, 0, 9, 9],"float32"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 192, 16, 0],"float16"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([64, 192, 16, 0],"float32"), shape=list[64,2,96,16,16,], )
paddle.reshape(x=Tensor([64, 192, 18, 0],"float16"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([64, 192, 18, 0],"float32"), shape=list[64,2,96,18,18,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 10],"float16"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 10],"float32"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 11],"float16"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 11],"float32"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 12],"float16"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 12],"float32"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 8],"float16"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 8],"float32"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 9],"float16"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 192, 2, 0, 9],"float32"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 192, 2, 10, 0],"float16"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 192, 2, 10, 0],"float32"), shape=list[64,384,10,10,], )
paddle.reshape(x=Tensor([64, 192, 2, 11, 0],"float16"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 192, 2, 11, 0],"float32"), shape=list[64,384,11,11,], )
paddle.reshape(x=Tensor([64, 192, 2, 12, 0],"float16"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 192, 2, 12, 0],"float32"), shape=list[64,384,12,12,], )
paddle.reshape(x=Tensor([64, 192, 2, 8, 0],"float16"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 192, 2, 8, 0],"float32"), shape=list[64,384,8,8,], )
paddle.reshape(x=Tensor([64, 192, 2, 9, 0],"float16"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 192, 2, 9, 0],"float32"), shape=list[64,384,9,9,], )
paddle.reshape(x=Tensor([64, 192, 20, 0],"float16"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([64, 192, 20, 0],"float32"), shape=list[64,2,96,20,20,], )
paddle.reshape(x=Tensor([64, 192, 22, 0],"float16"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([64, 192, 22, 0],"float32"), shape=list[64,2,96,22,22,], )
paddle.reshape(x=Tensor([64, 192, 24, 0],"float16"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([64, 192, 24, 0],"float32"), shape=list[64,2,96,24,24,], )
paddle.reshape(x=Tensor([64, 2, 0, 128],"float16"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 128],"float32"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 256],"float16"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 256],"float32"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 512],"float16"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 512],"float32"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 64],"float16"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([64, 2, 0, 64],"float32"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float16"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float16"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float16"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float16"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float32"), shape=list[64,1024,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float32"), shape=list[64,128,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float32"), shape=list[64,256,1,1,], )
paddle.reshape(x=Tensor([64, 2, 1, 0],"float32"), shape=list[64,512,1,1,], )
paddle.reshape(x=Tensor([64, 256, 0, 1],"float16"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([64, 256, 0, 1],"float32"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([64, 256, 1, 0],"float16"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([64, 256, 1, 0],"float32"), shape=list[64,1,2,128,], )
paddle.reshape(x=Tensor([64, 384, 0, 10],"float16"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([64, 384, 0, 10],"float32"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([64, 384, 0, 11],"float16"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([64, 384, 0, 11],"float32"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([64, 384, 0, 12],"float16"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([64, 384, 0, 12],"float32"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([64, 384, 0, 8],"float16"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([64, 384, 0, 8],"float32"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([64, 384, 0, 9],"float16"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([64, 384, 0, 9],"float32"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([64, 384, 10, 0],"float16"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([64, 384, 10, 0],"float32"), shape=list[64,2,192,10,10,], )
paddle.reshape(x=Tensor([64, 384, 11, 0],"float16"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([64, 384, 11, 0],"float32"), shape=list[64,2,192,11,11,], )
paddle.reshape(x=Tensor([64, 384, 12, 0],"float16"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([64, 384, 12, 0],"float32"), shape=list[64,2,192,12,12,], )
paddle.reshape(x=Tensor([64, 384, 8, 0],"float16"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([64, 384, 8, 0],"float32"), shape=list[64,2,192,8,8,], )
paddle.reshape(x=Tensor([64, 384, 9, 0],"float16"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([64, 384, 9, 0],"float32"), shape=list[64,2,192,9,9,], )
paddle.reshape(x=Tensor([64, 48, 0, 32, 32],"float16"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 48, 0, 32, 32],"float32"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 48, 0, 36, 36],"float16"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 48, 0, 36, 36],"float32"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 48, 0, 40, 40],"float16"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 48, 0, 40, 40],"float32"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 48, 0, 44, 44],"float16"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 48, 0, 44, 44],"float32"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 48, 0, 48, 48],"float16"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 48, 0, 48, 48],"float32"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 32],"float16"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 32],"float32"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 36],"float16"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 36],"float32"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 40],"float16"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 40],"float32"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 44],"float16"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 44],"float32"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 48],"float16"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 48, 2, 0, 48],"float32"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 48, 2, 32, 0],"float16"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 48, 2, 32, 0],"float32"), shape=list[64,96,32,32,], )
paddle.reshape(x=Tensor([64, 48, 2, 36, 0],"float16"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 48, 2, 36, 0],"float32"), shape=list[64,96,36,36,], )
paddle.reshape(x=Tensor([64, 48, 2, 40, 0],"float16"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 48, 2, 40, 0],"float32"), shape=list[64,96,40,40,], )
paddle.reshape(x=Tensor([64, 48, 2, 44, 0],"float16"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 48, 2, 44, 0],"float32"), shape=list[64,96,44,44,], )
paddle.reshape(x=Tensor([64, 48, 2, 48, 0],"float16"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 48, 2, 48, 0],"float32"), shape=list[64,96,48,48,], )
paddle.reshape(x=Tensor([64, 512, 0, 1],"float16"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([64, 512, 0, 1],"float32"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([64, 512, 1, 0],"float16"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([64, 512, 1, 0],"float32"), shape=list[64,1,2,256,], )
paddle.reshape(x=Tensor([64, 96, 0, 16, 16],"float16"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 96, 0, 16, 16],"float32"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 96, 0, 18, 18],"float16"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 96, 0, 18, 18],"float32"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 96, 0, 20, 20],"float16"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 96, 0, 20, 20],"float32"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 96, 0, 22, 22],"float16"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 96, 0, 22, 22],"float32"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 96, 0, 24, 24],"float16"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 96, 0, 24, 24],"float32"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 96, 0, 32],"float16"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([64, 96, 0, 32],"float32"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([64, 96, 0, 36],"float16"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([64, 96, 0, 36],"float32"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([64, 96, 0, 40],"float16"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([64, 96, 0, 40],"float32"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([64, 96, 0, 44],"float16"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([64, 96, 0, 44],"float32"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([64, 96, 0, 48],"float16"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([64, 96, 0, 48],"float32"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 16],"float16"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 16],"float32"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 18],"float16"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 18],"float32"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 20],"float16"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 20],"float32"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 22],"float16"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 22],"float32"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 24],"float16"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 96, 2, 0, 24],"float32"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 96, 2, 16, 0],"float16"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 96, 2, 16, 0],"float32"), shape=list[64,192,16,16,], )
paddle.reshape(x=Tensor([64, 96, 2, 18, 0],"float16"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 96, 2, 18, 0],"float32"), shape=list[64,192,18,18,], )
paddle.reshape(x=Tensor([64, 96, 2, 20, 0],"float16"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 96, 2, 20, 0],"float32"), shape=list[64,192,20,20,], )
paddle.reshape(x=Tensor([64, 96, 2, 22, 0],"float16"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 96, 2, 22, 0],"float32"), shape=list[64,192,22,22,], )
paddle.reshape(x=Tensor([64, 96, 2, 24, 0],"float16"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 96, 2, 24, 0],"float32"), shape=list[64,192,24,24,], )
paddle.reshape(x=Tensor([64, 96, 32, 0],"float16"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([64, 96, 32, 0],"float32"), shape=list[64,2,48,32,32,], )
paddle.reshape(x=Tensor([64, 96, 36, 0],"float16"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([64, 96, 36, 0],"float32"), shape=list[64,2,48,36,36,], )
paddle.reshape(x=Tensor([64, 96, 40, 0],"float16"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([64, 96, 40, 0],"float32"), shape=list[64,2,48,40,40,], )
paddle.reshape(x=Tensor([64, 96, 44, 0],"float16"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([64, 96, 44, 0],"float32"), shape=list[64,2,48,44,44,], )
paddle.reshape(x=Tensor([64, 96, 48, 0],"float16"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([64, 96, 48, 0],"float32"), shape=list[64,2,48,48,48,], )
paddle.reshape(x=Tensor([8, 0],"float16"), shape=list[-1,], )
paddle.reshape(x=Tensor([8, 0],"float32"), shape=list[-1,], )
paddle.reshape(x=Tensor([8, 0],"float32"), shape=list[80,], )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 16, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 16, 7, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([0, 161, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 161, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 192, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 192, 144, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 21, 21, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 21, 21, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 24, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 24, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 3],"float64"), shifts=1, )
paddle.roll(Tensor([0, 3],"float64"), shifts=1, axis=0, )
paddle.roll(Tensor([0, 32, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0, 32, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([0],"float32"), -2, name=None, )
paddle.roll(Tensor([0],"float32"), -5, name=None, )
paddle.roll(Tensor([1, 0, 126, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 126, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 14, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 144, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 144, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 21, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 21, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 24, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 24, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 0, 7, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 14, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 0, 7, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 384],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 0, 768],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float32"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 0],"float32"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float32"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 0],"float32"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 0, 768],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float32"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 0],"float32"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float32"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 0],"float32"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 161, 0, 96],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 161, 0, 96],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 161, 126, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 161, 126, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 0, 192],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 0, 192],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 144, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 192, 144, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 0, 768],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 0, 768],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 21, 0],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 21, 21, 0],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 0, 1536],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 0, 1536],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 24, 0],"float32"), shifts=tuple(6,6,), axis=tuple(1,2,), )
paddle.roll(Tensor([1, 24, 24, 0],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 16, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 16, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 32, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 0, 32, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 0, 64],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 0, 64],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 16, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 16, 16, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 0, 32],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 0, 32],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 32, 0],"float32"), shifts=tuple(2,2,), axis=tuple(1,2,), )
paddle.roll(Tensor([12, 32, 32, 0],"float32"), shifts=tuple(-2,-2,), axis=tuple(1,2,), )
paddle.roll(Tensor([3, 0],"float64"), shifts=1, )
paddle.roll(Tensor([3, 0],"float64"), shifts=1, axis=0, )
paddle.roll(x=Tensor([0, 3],"float32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=0, axis=None, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=-1, axis=0, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=1, axis=None, )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=list[-1,1,], axis=list[0,1,], )
paddle.roll(x=Tensor([0, 3],"float64"), shifts=tuple(-1,1,), axis=tuple(0,1,), )
paddle.roll(x=Tensor([3, 0],"float32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=-1, axis=0, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=1, axis=None, )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=list[-1,1,], axis=list[0,1,], )
paddle.roll(x=Tensor([3, 0],"float64"), shifts=tuple(-1,1,), axis=tuple(0,1,), )
paddle.rot90(Tensor([0, 3],"float32"), k=1, axes=list[0,1,], )
paddle.rot90(Tensor([2, 0],"float32"), k=1, axes=list[0,1,], )
paddle.rot90(x=Tensor([0, 2],"float64"), k=-4, )
paddle.rot90(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([0, 4, 4],"float64"), )
paddle.rot90(x=Tensor([0, 4],"float32"), )
paddle.rot90(x=Tensor([0, 4],"float64"), )
paddle.rot90(x=Tensor([0, 4],"float64"), k=-1, )
paddle.rot90(x=Tensor([0, 4],"float64"), k=4, )
paddle.rot90(x=Tensor([2, 0],"float64"), k=-4, )
paddle.rot90(x=Tensor([3, 0],"float64"), )
paddle.rot90(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 0, 4],"float64"), )
paddle.rot90(x=Tensor([4, 0],"float32"), )
paddle.rot90(x=Tensor([4, 0],"float64"), k=-1, )
paddle.rot90(x=Tensor([4, 0],"float64"), k=4, )
paddle.rot90(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 4, 0],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=tuple(2,3,), )
paddle.row_stack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.row_stack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.row_stack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.row_stack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.row_stack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.rsqrt(Tensor([0, 1, 1],"float32"), )
paddle.rsqrt(Tensor([0, 1, 4096],"float32"), )
paddle.rsqrt(Tensor([0, 1],"float32"), )
paddle.rsqrt(Tensor([0, 128],"float32"), )
paddle.rsqrt(Tensor([0, 2, 16, 4, 1],"float32"), )
paddle.rsqrt(Tensor([0],"float32"), )
paddle.rsqrt(Tensor([1, 0, 1],"float32"), )
paddle.rsqrt(Tensor([1, 0, 4096],"float32"), )
paddle.rsqrt(Tensor([1, 0],"float32"), )
paddle.rsqrt(Tensor([1, 1, 0],"float32"), )
paddle.rsqrt(Tensor([13, 0, 16, 4, 1],"float32"), )
paddle.rsqrt(Tensor([13, 2, 0, 4, 1],"float32"), )
paddle.rsqrt(Tensor([13, 2, 16, 0, 1],"float32"), )
paddle.rsqrt(Tensor([13, 2, 16, 4, 0],"float32"), )
paddle.rsqrt(x=Tensor([0, 3, 2],"float32"), )
paddle.rsqrt(x=Tensor([0, 3, 2],"float64"), )
paddle.rsqrt(x=Tensor([2, 0, 2],"float32"), )
paddle.rsqrt(x=Tensor([2, 0, 2],"float64"), )
paddle.rsqrt(x=Tensor([2, 3, 0],"float32"), )
paddle.rsqrt(x=Tensor([2, 3, 0],"float64"), )
paddle.select_scatter(Tensor([0, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([0, 3, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 0, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 0, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 0, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 0],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 0, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 0],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([0, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 0, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 0, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 0],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([0, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([2, 0],"float32"), 1, 1, )
paddle.sgn(Tensor([0, 20, 2],"float16"), )
paddle.sgn(Tensor([0, 20, 2],"float32"), )
paddle.sgn(Tensor([0, 4],"complex128"), )
paddle.sgn(Tensor([0, 4],"complex64"), )
paddle.sgn(Tensor([12, 0, 2],"float16"), )
paddle.sgn(Tensor([12, 0, 2],"float32"), )
paddle.sgn(Tensor([12, 20, 0],"float16"), )
paddle.sgn(Tensor([12, 20, 0],"float32"), )
paddle.sgn(Tensor([2, 0],"complex128"), )
paddle.sgn(Tensor([2, 0],"complex64"), )
paddle.sign(Tensor([0, 17, 10],"int16"), )
paddle.sign(Tensor([0, 17, 10],"int32"), )
paddle.sign(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.sign(Tensor([0, 17],"float32"), )
paddle.sign(Tensor([0, 3, 4, 5],"float64"), )
paddle.sign(Tensor([0, 3, 4, 5],"int8"), )
paddle.sign(Tensor([0, 6],"float32"), )
paddle.sign(Tensor([0],"int64"), )
paddle.sign(Tensor([0],"uint8"), )
paddle.sign(Tensor([11, 0, 10],"int16"), )
paddle.sign(Tensor([11, 0, 10],"int32"), )
paddle.sign(Tensor([11, 0],"float32"), )
paddle.sign(Tensor([11, 17, 0],"int16"), )
paddle.sign(Tensor([11, 17, 0],"int32"), )
paddle.sign(Tensor([2, 0, 4, 5],"float64"), )
paddle.sign(Tensor([2, 0, 4, 5],"int8"), )
paddle.sign(Tensor([2, 3, 0, 5],"float64"), )
paddle.sign(Tensor([2, 3, 0, 5],"int8"), )
paddle.sign(Tensor([2, 3, 4, 0],"float64"), )
paddle.sign(Tensor([2, 3, 4, 0],"int8"), )
paddle.sign(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.sign(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.sign(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.sign(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.sign(Tensor([9, 0],"float32"), )
paddle.sign(x=Tensor([0],"float32"), )
paddle.sign(x=Tensor([0],"float64"), )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, 99, 299, Tensor([299],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, None, False, False, True, 1888, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, None, False, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, None, True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, 99, 299, Tensor([299],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, None, False, False, True, 1888, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, None, False, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, None, True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, 99, 299, Tensor([299],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, None, False, False, True, 1888, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, None, False, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, None, True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, 99, 299, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, 99, None, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, None, None, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signbit(Tensor([0, 17, 10],"int16"), )
paddle.signbit(Tensor([0, 17, 10],"int32"), )
paddle.signbit(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.signbit(Tensor([0, 17],"float32"), )
paddle.signbit(Tensor([0, 3, 4, 5],"float64"), )
paddle.signbit(Tensor([0, 3, 4, 5],"int8"), )
paddle.signbit(Tensor([0],"int64"), )
paddle.signbit(Tensor([0],"uint8"), )
paddle.signbit(Tensor([11, 0, 10],"int16"), )
paddle.signbit(Tensor([11, 0, 10],"int32"), )
paddle.signbit(Tensor([11, 0],"float32"), )
paddle.signbit(Tensor([11, 17, 0],"int16"), )
paddle.signbit(Tensor([11, 17, 0],"int32"), )
paddle.signbit(Tensor([2, 0, 4, 5],"float64"), )
paddle.signbit(Tensor([2, 0, 4, 5],"int8"), )
paddle.signbit(Tensor([2, 3, 0, 5],"float64"), )
paddle.signbit(Tensor([2, 3, 0, 5],"int8"), )
paddle.signbit(Tensor([2, 3, 4, 0],"float64"), )
paddle.signbit(Tensor([2, 3, 4, 0],"int8"), )
paddle.signbit(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.signbit(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.signbit(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.signbit(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.sin(Tensor([0, 10],"float32"), )
paddle.sin(Tensor([0, 128, 1, 32],"float32"), )
paddle.sin(Tensor([0, 2],"float32"), )
paddle.sin(Tensor([0, 20, 1],"float32"), )
paddle.sin(Tensor([0, 25, 1],"float32"), )
paddle.sin(Tensor([0, 4096, 1, 128],"float32"), )
paddle.sin(Tensor([0],"float32"), )
paddle.sin(Tensor([0],"float64"), )
paddle.sin(Tensor([1, 0, 1, 128],"float32"), )
paddle.sin(Tensor([1, 0, 1, 32],"float32"), )
paddle.sin(Tensor([1, 0, 1],"float32"), )
paddle.sin(Tensor([1, 0],"float32"), )
paddle.sin(Tensor([1, 128, 0, 32],"float32"), )
paddle.sin(Tensor([1, 128, 1, 0],"float32"), )
paddle.sin(Tensor([1, 25, 0],"float32"), )
paddle.sin(Tensor([1, 4096, 0, 128],"float32"), )
paddle.sin(Tensor([1, 4096, 1, 0],"float32"), )
paddle.sin(Tensor([10, 0, 1],"float32"), )
paddle.sin(Tensor([10, 0],"float32"), )
paddle.sin(Tensor([10, 20, 0],"float32"), )
paddle.sin(x=Tensor([0, 2, 3],"float64"), )
paddle.sin(x=Tensor([0, 2, 3],"float64"), name="test_sin", )
paddle.sin(x=Tensor([0],"float32"), )
paddle.sin(x=Tensor([0],"float64"), )
paddle.sin(x=Tensor([2, 0, 3],"float64"), )
paddle.sin(x=Tensor([2, 0, 3],"float64"), name="test_sin", )
paddle.sin(x=Tensor([2, 2, 0],"float64"), )
paddle.sin(x=Tensor([2, 2, 0],"float64"), name="test_sin", )
paddle.sinc(Tensor([0, 64],"float32"), )
paddle.sinc(Tensor([0, 64],"float64"), )
paddle.sinc(Tensor([0],"float32"), )
paddle.sinc(Tensor([0],"float64"), )
paddle.sinc(Tensor([16, 0],"float32"), )
paddle.sinc(Tensor([16, 0],"float64"), )
paddle.sinh(Tensor([0, 16, 32],"complex128"), )
paddle.sinh(Tensor([0, 20, 1],"float32"), )
paddle.sinh(Tensor([10, 0, 1],"float32"), )
paddle.sinh(Tensor([10, 20, 0],"float32"), )
paddle.sinh(Tensor([8, 0, 32],"complex128"), )
paddle.sinh(Tensor([8, 16, 0],"complex128"), )
paddle.sinh(x=Tensor([0, 2],"float32"), )
paddle.sinh(x=Tensor([0, 2],"float64"), )
paddle.sinh(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.sinh(x=Tensor([0],"float64"), )
paddle.sinh(x=Tensor([1, 0],"float32"), )
paddle.sinh(x=Tensor([1, 0],"float64"), )
paddle.sinh(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.sinh(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.sinh(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.sqrt(Tensor([0, 1, 1],"float32"), )
paddle.sqrt(Tensor([0, 1, 14, 14],"float32"), )
paddle.sqrt(Tensor([0, 1, 24, 24],"float32"), )
paddle.sqrt(Tensor([0, 1, 3],"float64"), )
paddle.sqrt(Tensor([0, 1, 512, 4, 4],"float32"), )
paddle.sqrt(Tensor([0, 1],"float32"), )
paddle.sqrt(Tensor([0, 10],"float64"), )
paddle.sqrt(Tensor([0, 15, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([0],"float32"), )
paddle.sqrt(Tensor([0],"float64"), )
paddle.sqrt(Tensor([1, 0, 1],"float32"), )
paddle.sqrt(Tensor([1, 0, 3],"float64"), )
paddle.sqrt(Tensor([1, 0],"float32"), )
paddle.sqrt(Tensor([1, 0],"float64"), )
paddle.sqrt(Tensor([1, 1, 0],"float32"), )
paddle.sqrt(Tensor([1, 1, 0],"float64"), )
paddle.sqrt(Tensor([124, 0, 14, 14],"float32"), )
paddle.sqrt(Tensor([124, 0, 24, 24],"float32"), )
paddle.sqrt(Tensor([124, 1, 0, 14],"float32"), )
paddle.sqrt(Tensor([124, 1, 0, 24],"float32"), )
paddle.sqrt(Tensor([124, 1, 14, 0],"float32"), )
paddle.sqrt(Tensor([124, 1, 24, 0],"float32"), )
paddle.sqrt(Tensor([2, 0, 512, 4, 4],"float32"), )
paddle.sqrt(Tensor([2, 1, 0, 4, 4],"float32"), )
paddle.sqrt(Tensor([2, 1, 512, 0, 4],"float32"), )
paddle.sqrt(Tensor([2, 1, 512, 4, 0],"float32"), )
paddle.sqrt(Tensor([4, 0, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([4, 15, 0, 256, 256],"float32"), )
paddle.sqrt(Tensor([4, 15, 3, 0, 256],"float32"), )
paddle.sqrt(Tensor([4, 15, 3, 256, 0],"float32"), )
paddle.sqrt(x=Tensor([0, 1, 1],"float32"), )
paddle.sqrt(x=Tensor([0, 3],"float64"), )
paddle.sqrt(x=Tensor([0],"float64"), )
paddle.sqrt(x=Tensor([0],"float64"), name=None, )
paddle.sqrt(x=Tensor([13, 0, 1],"float32"), )
paddle.sqrt(x=Tensor([13, 1, 0],"float32"), )
paddle.sqrt(x=Tensor([16, 0, 1],"float32"), )
paddle.sqrt(x=Tensor([16, 1, 0],"float32"), )
paddle.sqrt(x=Tensor([3, 0],"float64"), )
paddle.square(Tensor([0, 1, 1],"float32"), )
paddle.square(Tensor([0, 1],"float32"), )
paddle.square(Tensor([0, 1],"float32"), name=None, )
paddle.square(Tensor([0, 10, 10],"float32"), name=None, )
paddle.square(Tensor([0, 10],"float32"), name=None, )
paddle.square(Tensor([0, 196608],"float32"), )
paddle.square(Tensor([0, 2, 3, 3],"float32"), )
paddle.square(Tensor([0, 2, 3],"float32"), )
paddle.square(Tensor([0, 3, 10, 10],"float32"), )
paddle.square(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.square(Tensor([0, 96, 2],"float32"), name=None, )
paddle.square(Tensor([0],"float32"), )
paddle.square(Tensor([0],"float64"), )
paddle.square(Tensor([1, 0, 1],"float32"), )
paddle.square(Tensor([1, 0],"float32"), )
paddle.square(Tensor([1, 1, 0],"float32"), )
paddle.square(Tensor([10, 0, 3],"float32"), )
paddle.square(Tensor([10, 0],"float32"), name=None, )
paddle.square(Tensor([10, 2, 0],"float32"), )
paddle.square(Tensor([100, 0],"float32"), name=None, )
paddle.square(Tensor([16, 0, 2],"float32"), name=None, )
paddle.square(Tensor([16, 96, 0],"float32"), name=None, )
paddle.square(Tensor([2, 0, 10],"float32"), name=None, )
paddle.square(Tensor([2, 10, 0],"float32"), name=None, )
paddle.square(Tensor([3, 0, 10, 10],"float32"), )
paddle.square(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.square(Tensor([3, 0, 3, 3],"float32"), )
paddle.square(Tensor([3, 2, 0, 3],"float32"), )
paddle.square(Tensor([3, 2, 3, 0],"float32"), )
paddle.square(Tensor([3, 3, 0, 10],"float32"), )
paddle.square(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.square(Tensor([3, 3, 10, 0],"float32"), )
paddle.square(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.square(x=Tensor([0],"float32"), )
paddle.square(x=Tensor([0],"float64"), )
paddle.squeeze(Tensor([0, 1, 100, 100],"float16"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1, 100, 100],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1, 1024, 1024],"int32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 1024, 1024],"int64"), axis=1, )
paddle.squeeze(Tensor([0, 1, 2, 2],"float64"), 1, )
paddle.squeeze(Tensor([0, 1, 3, 1600, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 3, 3, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 32],"float64"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1, 400],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 8],"float32"), list[1,], )
paddle.squeeze(Tensor([0, 1, 93431],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1, 96],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1],"float16"), axis=1, )
paddle.squeeze(Tensor([0, 1],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 1],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1],"float32"), list[-1,], )
paddle.squeeze(Tensor([0, 1],"float64"), 1, )
paddle.squeeze(Tensor([0, 1],"float64"), -1, )
paddle.squeeze(Tensor([0, 1],"int32"), axis=-1, )
paddle.squeeze(Tensor([0, 10, 10],"float64"), )
paddle.squeeze(Tensor([0, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 10, 8, 1, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 100, 1],"float32"), -1, )
paddle.squeeze(Tensor([0, 1024, 1024, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 125, 125, 1],"float64"), -1, )
paddle.squeeze(Tensor([0, 1280, 1, 1],"float16"), axis=list[2,3,], )
paddle.squeeze(Tensor([0, 2, 1, 58],"float32"), )
paddle.squeeze(Tensor([0, 2, 1],"float32"), axis=2, )
paddle.squeeze(Tensor([0, 2, 2, 1],"float64"), -1, )
paddle.squeeze(Tensor([0, 2, 2, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 2],"float32"), )
paddle.squeeze(Tensor([0, 20, 1],"float32"), )
paddle.squeeze(Tensor([0, 2048, 1, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([0, 2048, 1, 7, 7],"float32"), axis=2, )
paddle.squeeze(Tensor([0, 28, 1],"int64"), axis=list[2,], )
paddle.squeeze(Tensor([0, 29, 1],"int64"), axis=list[2,], )
paddle.squeeze(Tensor([0, 3, 10, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 3, 3],"float32"), axis=0, )
paddle.squeeze(Tensor([0, 3, 3],"float64"), axis=0, )
paddle.squeeze(Tensor([0, 3],"float32"), )
paddle.squeeze(Tensor([0, 3],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([0, 3],"float64"), axis=0, )
paddle.squeeze(Tensor([0, 4, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 4],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([0, 512, 1, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([0, 6, 3, 1, 2, 5],"float64"), axis=3, )
paddle.squeeze(Tensor([0, 6, 3, 4, 1, 5],"float64"), axis=4, )
paddle.squeeze(Tensor([0, 6, 3, 4, 2, 1],"float64"), axis=5, )
paddle.squeeze(Tensor([0, 7, 1],"float32"), -1, )
paddle.squeeze(Tensor([0, 7, 1],"float64"), axis=2, )
paddle.squeeze(Tensor([0, 8, 16, 128, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([0],"float32"), )
paddle.squeeze(Tensor([0],"float32"), axis=0, )
paddle.squeeze(Tensor([0],"float32"), axis=-1, )
paddle.squeeze(Tensor([0],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 0, 1, 58],"float32"), )
paddle.squeeze(Tensor([1, 0, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([1, 0, 1024, 1024],"int32"), axis=1, )
paddle.squeeze(Tensor([1, 0, 1024, 1024],"int64"), axis=1, )
paddle.squeeze(Tensor([1, 0, 16, 128, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 0, 3],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 0, 3],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 0, 32],"float64"), axis=list[1,], )
paddle.squeeze(Tensor([1, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([1, 0],"float32"), axis=list[0,], )
paddle.squeeze(Tensor([1, 0],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([1, 0],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 0],"int32"), axis=-1, )
paddle.squeeze(Tensor([1, 1, 0, 1024],"int32"), axis=1, )
paddle.squeeze(Tensor([1, 1, 0, 1024],"int64"), axis=1, )
paddle.squeeze(Tensor([1, 1, 0],"float64"), axis=list[1,], )
paddle.squeeze(Tensor([1, 1, 1024, 0],"int32"), axis=1, )
paddle.squeeze(Tensor([1, 1, 1024, 0],"int64"), axis=1, )
paddle.squeeze(Tensor([1, 2, 0, 58],"float32"), )
paddle.squeeze(Tensor([1, 2, 1, 0],"float32"), )
paddle.squeeze(Tensor([1, 3, 0],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 3, 0],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 4, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([1, 8, 0, 128, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 8, 16, 0, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 8, 16, 128, 0],"float32"), axis=0, )
paddle.squeeze(Tensor([10, 0, 1],"float32"), )
paddle.squeeze(Tensor([10, 0, 10],"float64"), )
paddle.squeeze(Tensor([10, 0, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([10, 10, 0],"float64"), )
paddle.squeeze(Tensor([10, 10, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([10, 20, 0],"float32"), )
paddle.squeeze(Tensor([100, 0],"float64"), 1, )
paddle.squeeze(Tensor([100, 0],"float64"), -1, )
paddle.squeeze(Tensor([1024, 0, 1, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([1024, 2048, 0, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([1024, 2048, 1, 0],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([104, 0, 1],"int64"), axis=list[2,], )
paddle.squeeze(Tensor([104, 0, 93431],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([104, 1, 0],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([104, 28, 0],"int64"), axis=list[2,], )
paddle.squeeze(Tensor([104, 29, 0],"int64"), axis=list[2,], )
paddle.squeeze(Tensor([128, 0, 1, 1],"float16"), axis=list[2,3,], )
paddle.squeeze(Tensor([128, 0],"float16"), axis=1, )
paddle.squeeze(Tensor([128, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([128, 0],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([128, 0],"float32"), list[-1,], )
paddle.squeeze(Tensor([128, 1280, 0, 1],"float16"), axis=list[2,3,], )
paddle.squeeze(Tensor([128, 1280, 1, 0],"float16"), axis=list[2,3,], )
paddle.squeeze(Tensor([13, 0, 1],"float32"), -1, )
paddle.squeeze(Tensor([13, 7, 0],"float32"), -1, )
paddle.squeeze(Tensor([16, 0, 400],"float32"), axis=1, )
paddle.squeeze(Tensor([16, 1, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([192, 0],"float32"), list[-1,], )
paddle.squeeze(Tensor([2, 0, 10, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 0, 1024, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([2, 0, 2, 1],"float64"), -1, )
paddle.squeeze(Tensor([2, 0, 2, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 0, 2, 2],"float64"), 1, )
paddle.squeeze(Tensor([2, 0],"float32"), )
paddle.squeeze(Tensor([2, 0],"float64"), 1, )
paddle.squeeze(Tensor([2, 1, 0, 2],"float64"), 1, )
paddle.squeeze(Tensor([2, 1, 2, 0],"float64"), 1, )
paddle.squeeze(Tensor([2, 1024, 0, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([2, 1024, 1024, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([2, 2, 0, 1],"float64"), -1, )
paddle.squeeze(Tensor([2, 2, 0, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 2, 2, 0],"float64"), -1, )
paddle.squeeze(Tensor([2, 2, 2, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 0, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 10, 0, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 10, 10, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([24, 0, 96],"float32"), axis=1, )
paddle.squeeze(Tensor([24, 1, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 1],"float32"), axis=2, )
paddle.squeeze(Tensor([3, 0, 3, 1, 2, 5],"float64"), axis=3, )
paddle.squeeze(Tensor([3, 0, 3, 1600, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 3, 3, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 3, 4, 1, 5],"float64"), axis=4, )
paddle.squeeze(Tensor([3, 0, 3, 4, 2, 1],"float64"), axis=5, )
paddle.squeeze(Tensor([3, 1, 0, 1600, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 0, 3, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 0, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 0, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 1600, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 3, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 2, 0],"float32"), axis=2, )
paddle.squeeze(Tensor([3, 6, 0, 1, 2, 5],"float64"), axis=3, )
paddle.squeeze(Tensor([3, 6, 0, 4, 1, 5],"float64"), axis=4, )
paddle.squeeze(Tensor([3, 6, 0, 4, 2, 1],"float64"), axis=5, )
paddle.squeeze(Tensor([3, 6, 3, 0, 1, 5],"float64"), axis=4, )
paddle.squeeze(Tensor([3, 6, 3, 0, 2, 1],"float64"), axis=5, )
paddle.squeeze(Tensor([3, 6, 3, 0, 2, 5],"float64"), axis=3, )
paddle.squeeze(Tensor([3, 6, 3, 1, 0, 5],"float64"), axis=3, )
paddle.squeeze(Tensor([3, 6, 3, 1, 2, 0],"float64"), axis=3, )
paddle.squeeze(Tensor([3, 6, 3, 4, 0, 1],"float64"), axis=5, )
paddle.squeeze(Tensor([3, 6, 3, 4, 0, 5],"float64"), axis=4, )
paddle.squeeze(Tensor([3, 6, 3, 4, 1, 0],"float64"), axis=4, )
paddle.squeeze(Tensor([3, 6, 3, 4, 2, 0],"float64"), axis=5, )
paddle.squeeze(Tensor([4, 0, 1],"float32"), -1, )
paddle.squeeze(Tensor([4, 0, 1],"float64"), axis=2, )
paddle.squeeze(Tensor([4, 0, 125, 1],"float64"), -1, )
paddle.squeeze(Tensor([4, 100, 0],"float32"), -1, )
paddle.squeeze(Tensor([4, 125, 0, 1],"float64"), -1, )
paddle.squeeze(Tensor([4, 125, 125, 0],"float64"), -1, )
paddle.squeeze(Tensor([4, 7, 0],"float64"), axis=2, )
paddle.squeeze(Tensor([5, 0, 8, 1, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 0],"float64"), -1, )
paddle.squeeze(Tensor([5, 10, 0, 1, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 10, 8, 0, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 10, 8, 1, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([8, 0, 1, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 0, 1, 7, 7],"float32"), axis=2, )
paddle.squeeze(Tensor([8, 0, 100, 100],"float16"), axis=list[1,], )
paddle.squeeze(Tensor([8, 0, 100, 100],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([8, 0, 8],"float32"), list[1,], )
paddle.squeeze(Tensor([8, 1, 0, 100],"float16"), axis=list[1,], )
paddle.squeeze(Tensor([8, 1, 0, 100],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([8, 1, 0],"float32"), list[1,], )
paddle.squeeze(Tensor([8, 1, 100, 0],"float16"), axis=list[1,], )
paddle.squeeze(Tensor([8, 1, 100, 0],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([8, 2048, 0, 7, 7],"float32"), axis=2, )
paddle.squeeze(Tensor([8, 2048, 1, 0, 7],"float32"), axis=2, )
paddle.squeeze(Tensor([8, 2048, 1, 7, 0],"float32"), axis=2, )
paddle.squeeze(Tensor([8, 512, 0, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 512, 1, 0, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 512, 1, 100, 0],"float32"), axis=list[2,], )
paddle.squeeze(x=Tensor([0, 2, 1, 3],"float32"), )
paddle.squeeze(x=Tensor([0, 2, 1, 3],"float64"), )
paddle.squeeze(x=Tensor([0, 2, 1, 3],"float64"), axis=-4, )
paddle.squeeze(x=Tensor([0, 2, 1, 3],"float64"), axis=list[2,3,], )
paddle.squeeze(x=Tensor([0, 2, 1, 3],"float64"), axis=tuple(-4,-3,), )
paddle.squeeze(x=Tensor([1, 0, 1, 3],"float32"), )
paddle.squeeze(x=Tensor([1, 0, 1, 3],"float64"), )
paddle.squeeze(x=Tensor([1, 0, 1, 3],"float64"), axis=-4, )
paddle.squeeze(x=Tensor([1, 0, 1, 3],"float64"), axis=list[2,3,], )
paddle.squeeze(x=Tensor([1, 0, 1, 3],"float64"), axis=tuple(-4,-3,), )
paddle.squeeze(x=Tensor([1, 2, 0, 3],"float32"), )
paddle.squeeze(x=Tensor([1, 2, 0, 3],"float64"), )
paddle.squeeze(x=Tensor([1, 2, 0, 3],"float64"), axis=-4, )
paddle.squeeze(x=Tensor([1, 2, 0, 3],"float64"), axis=list[2,3,], )
paddle.squeeze(x=Tensor([1, 2, 0, 3],"float64"), axis=tuple(-4,-3,), )
paddle.squeeze(x=Tensor([1, 2, 1, 0],"float32"), )
paddle.squeeze(x=Tensor([1, 2, 1, 0],"float64"), )
paddle.squeeze(x=Tensor([1, 2, 1, 0],"float64"), axis=-4, )
paddle.squeeze(x=Tensor([1, 2, 1, 0],"float64"), axis=list[2,3,], )
paddle.squeeze(x=Tensor([1, 2, 1, 0],"float64"), axis=tuple(-4,-3,), )
paddle.stack(list[Tensor([0, 1, 1, 32],"float16"),Tensor([0, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 1, 32],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 1],"float32"),Tensor([0, 1, 1],"float32"),Tensor([0, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),Tensor([16, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 2, 2],"float32"),Tensor([0, 1, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1, 2, 2],"float32"),Tensor([1, 1, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1, 4, 2],"float32"),Tensor([0, 1, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1, 4, 2],"float32"),Tensor([1, 1, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1, 64, 32],"float16"),Tensor([0, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 64, 32],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 64],"float16"),Tensor([0, 1, 64],"float16"),], axis=0, )
paddle.stack(list[Tensor([0, 1, 64],"float16"),Tensor([2, 1, 64],"float16"),], axis=0, )
paddle.stack(list[Tensor([0, 1],"float32"),], )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([1, 1],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 1],"int32"),], )
paddle.stack(list[Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1],"int32"),Tensor([1, 1],"int32"),], axis=-1, )
paddle.stack(list[Tensor([0, 10, 10],"float64"),Tensor([0, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([0, 10, 10],"float64"),Tensor([10, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([0, 10, 2, 1, 4],"float32"),Tensor([0, 10, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 10, 2, 1, 4],"float32"),Tensor([2, 10, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),Tensor([0, 10, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 10],"int32"),Tensor([0, 10],"int32"),], axis=-1, )
paddle.stack(list[Tensor([0, 10],"int32"),Tensor([1, 10],"int32"),], axis=-1, )
paddle.stack(list[Tensor([0, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),], )
paddle.stack(list[Tensor([0, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([0, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),], )
paddle.stack(list[Tensor([0, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([0, 114, 4, 1, 32],"float16"),Tensor([0, 114, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([0, 114, 4, 1, 32],"float16"),Tensor([2, 114, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([0, 12],"int64"),Tensor([0, 12],"int64"),], )
paddle.stack(list[Tensor([0, 12],"int64"),Tensor([12, 12],"int64"),], )
paddle.stack(list[Tensor([0, 128, 32],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),Tensor([0, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([0, 14],"int64"),Tensor([14, 14],"int64"),], )
paddle.stack(list[Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 2, 1, 4],"float32"),Tensor([0, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 2, 1, 4],"float32"),Tensor([10, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], 1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], 1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([157920, 2],"float32"),Tensor([157920, 2],"float32"),Tensor([157920, 2],"float32"),], )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),], 1, )
paddle.stack(list[Tensor([0, 21504],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 25, 2],"float32"),Tensor([0, 25, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 25, 2],"float32"),Tensor([1, 25, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 25, 4],"float32"),Tensor([0, 25, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 25, 4],"float32"),Tensor([1, 25, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 28, 28],"float32"),Tensor([0, 28, 28],"float32"),Tensor([0, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),Tensor([0, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([0, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),Tensor([4, 3, 256, 256],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 3, 4],"float32"),Tensor([0, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 3],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),], )
paddle.stack(list[Tensor([0, 3],"float32"),Tensor([1, 3],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([0, 3],"int64"),Tensor([0, 3],"int64"),Tensor([0, 3],"int64"),Tensor([0, 3],"int64"),Tensor([0, 3],"int64"),Tensor([0, 3],"int64"),], )
paddle.stack(list[Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([0, 300, 4],"float32"),], )
paddle.stack(list[Tensor([0, 300, 4096],"float32"),Tensor([0, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 300, 4096],"float32"),Tensor([1, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 300],"float32"),Tensor([0, 300],"float32"),Tensor([0, 300],"float32"),Tensor([0, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 32, 1100, 4],"float32"),Tensor([0, 32, 1100, 4],"float32"),Tensor([0, 32, 1100, 4],"float32"),Tensor([0, 32, 1100, 4],"float32"),Tensor([0, 32, 1100, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 1100, 4],"float32"),Tensor([8, 32, 1100, 4],"float32"),Tensor([8, 32, 1100, 4],"float32"),Tensor([8, 32, 1100, 4],"float32"),Tensor([8, 32, 1100, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 11645, 4],"float32"),Tensor([0, 32, 11645, 4],"float32"),Tensor([0, 32, 11645, 4],"float32"),Tensor([0, 32, 11645, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 11645, 4],"float32"),Tensor([16, 32, 11645, 4],"float32"),Tensor([16, 32, 11645, 4],"float32"),Tensor([16, 32, 11645, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 18, 4],"float32"),Tensor([0, 32, 18, 4],"float32"),Tensor([0, 32, 18, 4],"float32"),Tensor([0, 32, 18, 4],"float32"),Tensor([0, 32, 18, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 18, 4],"float32"),Tensor([8, 32, 18, 4],"float32"),Tensor([8, 32, 18, 4],"float32"),Tensor([8, 32, 18, 4],"float32"),Tensor([8, 32, 18, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 300, 4],"float32"),Tensor([0, 32, 300, 4],"float32"),Tensor([0, 32, 300, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 300, 4],"float32"),Tensor([0, 32, 300, 4],"float32"),Tensor([0, 32, 300, 4],"float32"),Tensor([0, 32, 300, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 300, 4],"float32"),Tensor([16, 32, 300, 4],"float32"),Tensor([16, 32, 300, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 300, 4],"float32"),Tensor([16, 32, 300, 4],"float32"),Tensor([16, 32, 300, 4],"float32"),Tensor([16, 32, 300, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 476, 4],"float32"),Tensor([0, 32, 476, 4],"float32"),Tensor([0, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 4, 1, 32],"float16"),Tensor([0, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([0, 4, 1, 32],"float16"),Tensor([114, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float32"),], 0, )
paddle.stack(list[Tensor([0, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], 0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([5, 4],"float64"),], 0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([4, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),Tensor([4, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([0, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([0, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([0, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([0, 500, 4],"float32"),Tensor([0, 500, 4],"float32"),Tensor([0, 500, 4],"float32"),], )
paddle.stack(list[Tensor([0, 500, 4],"float32"),Tensor([4, 500, 4],"float32"),Tensor([4, 500, 4],"float32"),], )
paddle.stack(list[Tensor([0, 512],"float16"),Tensor([0, 512],"float16"),Tensor([0, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"float16"),Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"int32"),Tensor([0, 512],"int32"),Tensor([0, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"int32"),Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([0, 6, 3, 2, 5],"float64"),Tensor([0, 6, 3, 2, 5],"float64"),Tensor([0, 6, 3, 2, 5],"float64"),], 0, )
paddle.stack(list[Tensor([0, 6, 3, 2, 5],"float64"),Tensor([3, 6, 3, 2, 5],"float64"),Tensor([3, 6, 3, 2, 5],"float64"),], 0, )
paddle.stack(list[Tensor([0, 6, 3, 4, 5],"float64"),Tensor([0, 6, 3, 4, 5],"float64"),Tensor([0, 6, 3, 4, 5],"float64"),Tensor([0, 6, 3, 4, 5],"float64"),], 0, )
paddle.stack(list[Tensor([0, 6, 3, 4, 5],"float64"),Tensor([3, 6, 3, 4, 5],"float64"),Tensor([3, 6, 3, 4, 5],"float64"),Tensor([3, 6, 3, 4, 5],"float64"),], 0, )
paddle.stack(list[Tensor([0, 6, 8, 8],"float32"),Tensor([0, 6, 8, 8],"float32"),Tensor([0, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 64],"float32"),Tensor([14, 64],"float32"),Tensor([14, 64],"float32"),Tensor([14, 64],"float32"),Tensor([14, 64],"float32"),Tensor([14, 64],"float32"),Tensor([14, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 640, 640],"float32"),], )
paddle.stack(list[Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),Tensor([0, 640, 640],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),Tensor([3, 640, 640],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 7, 14],"float32"),Tensor([0, 7, 14],"float32"),Tensor([0, 7, 14],"float32"),Tensor([0, 7, 14],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 7, 14],"float32"),Tensor([13, 7, 14],"float32"),Tensor([13, 7, 14],"float32"),Tensor([13, 7, 14],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 7, 16],"float32"),Tensor([0, 7, 16],"float32"),Tensor([0, 7, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 7, 64],"float32"),Tensor([0, 7, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 7, 64],"float32"),Tensor([13, 7, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 7, 7],"int64"),Tensor([0, 7, 7],"int64"),Tensor([0, 7, 7],"int64"),], )
paddle.stack(list[Tensor([0, 7, 7],"int64"),Tensor([8, 7, 7],"int64"),Tensor([8, 7, 7],"int64"),], )
paddle.stack(list[Tensor([0, 7],"float32"),Tensor([0, 7],"float32"),Tensor([0, 7],"float32"),Tensor([0, 7],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 7],"float32"),Tensor([157920, 7],"float32"),Tensor([157920, 7],"float32"),Tensor([157920, 7],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([3, 8, 8],"float32"),], )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 8],"int64"),Tensor([0, 8],"int64"),], axis=2, )
paddle.stack(list[Tensor([0, 8],"int64"),Tensor([4, 8],"int64"),], axis=2, )
paddle.stack(list[Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),], 0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], 0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([10],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([10],"float32"),Tensor([10],"float32"),Tensor([10],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([157920],"float32"),Tensor([157920],"float32"),Tensor([157920],"float32"),], axis=0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([2],"float32"),], 0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([3],"float32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([3],"float32"),Tensor([3],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),], axis=0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float64"),], 0, )
paddle.stack(list[Tensor([0],"float64"),Tensor([0],"float64"),], 0, )
paddle.stack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], 1, )
paddle.stack(list[Tensor([0],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),], 1, )
paddle.stack(list[Tensor([0],"float64"),Tensor([3],"float64"),], 0, )
paddle.stack(list[Tensor([0],"int32"),], 1, )
paddle.stack(list[Tensor([0],"int32"),Tensor([0],"int32"),Tensor([0],"int32"),], )
paddle.stack(list[Tensor([0],"int32"),Tensor([0],"int32"),Tensor([0],"int32"),Tensor([0],"int32"),], axis=0, )
paddle.stack(list[Tensor([0],"int32"),Tensor([157920],"int32"),Tensor([157920],"int32"),Tensor([157920],"int32"),], axis=0, )
paddle.stack(list[Tensor([0],"int32"),Tensor([832],"int32"),Tensor([832],"int32"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=-1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=-2, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], 1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], 1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([1],"int64"),], axis=0, )
paddle.stack(list[Tensor([0],"int64"),Tensor([1],"int64"),], axis=1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([1],"int64"),], axis=-1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([10],"int64"),], axis=0, )
paddle.stack(list[Tensor([0],"int64"),Tensor([128],"int64"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([13],"int64"),Tensor([13],"int64"),Tensor([13],"int64"),Tensor([13],"int64"),Tensor([13],"int64"),Tensor([13],"int64"),], 1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([2],"int64"),], axis=-2, )
paddle.stack(list[Tensor([0],"int64"),Tensor([2],"int64"),Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([2],"int64"),Tensor([2],"int64"),Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.stack(list[Tensor([0],"int64"),Tensor([385],"int64"),Tensor([385],"int64"),Tensor([385],"int64"),], 1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([516],"int64"),Tensor([516],"int64"),Tensor([516],"int64"),], 1, )
paddle.stack(list[Tensor([1, 0, 1, 32],"float16"),Tensor([1, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1, 32],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1],"float32"),Tensor([1, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 0, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 0, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 0, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0, 2, 2],"float32"),Tensor([1, 1, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 0, 2],"float32"),Tensor([1, 25, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),], )
paddle.stack(list[Tensor([1, 0, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 0, 32],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 4, 2],"float32"),Tensor([1, 0, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0, 4, 2],"float32"),Tensor([1, 1, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], )
paddle.stack(list[Tensor([1, 0, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 0, 4],"float32"),Tensor([1, 25, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 4096],"float32"),Tensor([1, 0, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0, 4096],"float32"),Tensor([1, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0, 64, 32],"float16"),Tensor([1, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 64, 32],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([1, 0, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),Tensor([1, 10, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([1, 0, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),Tensor([1, 2, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([1, 0, 640],"float32"),], )
paddle.stack(list[Tensor([1, 0],"float32"),], )
paddle.stack(list[Tensor([1, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], 1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], 1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 1],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 3],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 0],"int32"),], )
paddle.stack(list[Tensor([1, 0],"int32"),Tensor([1, 0],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0],"int32"),Tensor([1, 1],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0],"int32"),Tensor([1, 10],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0, 2],"float32"),Tensor([1, 1, 0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 0, 2],"float32"),Tensor([1, 1, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 0, 2],"float32"),Tensor([1, 1, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 0, 32],"float16"),Tensor([1, 1, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0, 32],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0, 32],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 0],"float16"),Tensor([1, 1, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 0],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([0, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([1, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([1, 1, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([1, 1, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1],"float32"),Tensor([0, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),Tensor([0, 1, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),Tensor([1, 0, 1],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1],"float32"),Tensor([1, 1, 1],"float32"),Tensor([1, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 2, 0],"float32"),Tensor([1, 1, 2, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 2, 0],"float32"),Tensor([1, 1, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 2, 2],"float32"),Tensor([0, 1, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 2, 2],"float32"),Tensor([1, 1, 0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 2, 2],"float32"),Tensor([1, 1, 2, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 4, 0],"float32"),Tensor([1, 1, 4, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 4, 0],"float32"),Tensor([1, 1, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 4, 2],"float32"),Tensor([0, 1, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 4, 2],"float32"),Tensor([1, 0, 4, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 4, 2],"float32"),Tensor([1, 1, 0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 4, 2],"float32"),Tensor([1, 1, 4, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1, 64, 0],"float16"),Tensor([1, 1, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 0],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([0, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([1, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([1, 1, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([1, 1, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1],"int32"),Tensor([0, 1],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 1],"int32"),Tensor([1, 0],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 10],"int32"),Tensor([0, 10],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 10],"int32"),Tensor([1, 0],"int32"),], axis=-1, )
paddle.stack(list[Tensor([1, 11, 0],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 0],"float32"),], )
paddle.stack(list[Tensor([1, 11, 0],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 0],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([0, 11, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 0, 256],"float32"),], )
paddle.stack(list[Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 256],"float32"),Tensor([1, 11, 0],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 0],"float32"),Tensor([1, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([0, 11, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 0, 4],"float32"),], )
paddle.stack(list[Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 4],"float32"),Tensor([1, 11, 0],"float32"),], )
paddle.stack(list[Tensor([1, 128, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], 1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], 1, )
paddle.stack(list[Tensor([1, 25, 0],"float32"),Tensor([1, 25, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 25, 0],"float32"),Tensor([1, 25, 0],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 25, 0],"float32"),Tensor([1, 25, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 25, 0],"float32"),Tensor([1, 25, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 25, 2],"float32"),Tensor([0, 25, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 25, 2],"float32"),Tensor([1, 0, 2],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 25, 2],"float32"),Tensor([1, 25, 0],"float32"),], axis=-2, )
paddle.stack(list[Tensor([1, 25, 4],"float32"),Tensor([0, 25, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 25, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 25, 4],"float32"),Tensor([1, 25, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 3],"float32"),Tensor([0, 3],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 3],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 0],"float32"),Tensor([1, 300, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 0],"float32"),Tensor([1, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 4096],"float32"),Tensor([0, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 4096],"float32"),Tensor([1, 0, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 4096],"float32"),Tensor([1, 300, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300],"float32"),Tensor([0, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 300],"float32"),Tensor([1, 0],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([0, 300],"float32"),Tensor([1, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 0],"float32"),Tensor([1, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([0, 300],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 300],"float32"),Tensor([1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 0],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 0],"float32"),Tensor([1, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([0, 400, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 0, 176, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 0, 176],"float32"),], )
paddle.stack(list[Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 176],"float32"),Tensor([1, 400, 176, 0],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 0],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 0],"float32"),Tensor([1, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([0, 400, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 0, 184],"float32"),], )
paddle.stack(list[Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 184],"float32"),Tensor([1, 400, 184, 0],"float32"),], )
paddle.stack(list[Tensor([1, 640, 0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], 1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], -1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], -1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"int64"),Tensor([0],"int64"),], axis=1, )
paddle.stack(list[Tensor([1],"int64"),Tensor([0],"int64"),], axis=-1, )
paddle.stack(list[Tensor([10, 0, 1, 4],"float32"),Tensor([10, 0, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 0, 1, 4],"float32"),Tensor([10, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 0, 10],"float64"),Tensor([10, 0, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 0, 10],"float64"),Tensor([10, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 0],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 10, 0],"float64"),Tensor([10, 10, 0],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 0],"float64"),Tensor([10, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 10],"float64"),Tensor([0, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 10],"float64"),Tensor([10, 0, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 10],"float64"),Tensor([10, 10, 0],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10],"float32"),Tensor([0, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 10],"float32"),Tensor([10, 0],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([0, 10],"float32"),Tensor([10, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 0],"float32"),Tensor([10, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([0, 10],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 10],"float32"),Tensor([10, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([10, 2, 0, 4],"float32"),Tensor([10, 2, 0, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 0, 4],"float32"),Tensor([10, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 1, 0],"float32"),Tensor([10, 2, 1, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 1, 0],"float32"),Tensor([10, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 1, 4],"float32"),Tensor([0, 2, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 1, 4],"float32"),Tensor([10, 0, 1, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 1, 4],"float32"),Tensor([10, 2, 0, 4],"float32"),], axis=0, )
paddle.stack(list[Tensor([10, 2, 1, 4],"float32"),Tensor([10, 2, 1, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([10],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([10],"float32"),Tensor([0],"float32"),Tensor([10],"float32"),Tensor([10],"float32"),], -1, )
paddle.stack(list[Tensor([10],"float32"),Tensor([10],"float32"),Tensor([0],"float32"),Tensor([10],"float32"),], -1, )
paddle.stack(list[Tensor([10],"float32"),Tensor([10],"float32"),Tensor([10],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([10],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.stack(list[Tensor([10105, 0],"float32"),Tensor([10105, 0],"float32"),Tensor([10105, 0],"float32"),Tensor([10105, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 0],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 0],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 1],"float32"),Tensor([0, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 1],"float32"),Tensor([10105, 0],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([0, 1],"float32"),Tensor([10105, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 0],"float32"),Tensor([10105, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([0, 1],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 1],"float32"),Tensor([10105, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 10],"float32"),Tensor([0, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 10],"float32"),Tensor([10105, 0],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([0, 10],"float32"),Tensor([10105, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 0],"float32"),Tensor([10105, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([0, 10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 10],"float32"),Tensor([10105, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([114, 0, 1, 32],"float16"),Tensor([114, 0, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 0, 1, 32],"float16"),Tensor([114, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 0, 32],"float16"),Tensor([114, 4, 0, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 0, 32],"float16"),Tensor([114, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 1, 0],"float16"),Tensor([114, 4, 1, 0],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 1, 0],"float16"),Tensor([114, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 1, 32],"float16"),Tensor([0, 4, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 1, 32],"float16"),Tensor([114, 0, 1, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 1, 32],"float16"),Tensor([114, 4, 0, 32],"float16"),], axis=0, )
paddle.stack(list[Tensor([114, 4, 1, 32],"float16"),Tensor([114, 4, 1, 0],"float16"),], axis=0, )
paddle.stack(list[Tensor([12, 0],"int64"),Tensor([12, 0],"int64"),], )
paddle.stack(list[Tensor([12, 0],"int64"),Tensor([12, 12],"int64"),], )
paddle.stack(list[Tensor([12, 12],"int64"),Tensor([0, 12],"int64"),], )
paddle.stack(list[Tensor([12, 12],"int64"),Tensor([12, 0],"int64"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([128, 0, 476, 4],"float32"),Tensor([128, 0, 476, 4],"float32"),Tensor([128, 0, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 0, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 0],"float16"),Tensor([128, 0],"float16"),Tensor([128, 0],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"float16"),Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"int32"),Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 32, 0, 4],"float32"),Tensor([128, 32, 0, 4],"float32"),Tensor([128, 32, 0, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 0, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 0],"float32"),Tensor([128, 32, 476, 0],"float32"),Tensor([128, 32, 476, 0],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 0],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([0, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 0, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 0, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 0],"float32"),Tensor([128, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([0, 32, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 0, 476, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 0, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 4],"float32"),Tensor([128, 32, 476, 0],"float32"),], axis=-2, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([0, 512],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([128, 0],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),Tensor([0, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),Tensor([128, 0],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([0, 512],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([128, 0],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),Tensor([0, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.stack(list[Tensor([128],"int64"),Tensor([0],"int64"),], )
paddle.stack(list[Tensor([13, 0, 14],"float32"),Tensor([13, 0, 14],"float32"),Tensor([13, 0, 14],"float32"),Tensor([13, 0, 14],"float32"),], axis=1, )
paddle.stack(list[Tensor([13, 0, 14],"float32"),Tensor([13, 7, 14],"float32"),Tensor([13, 7, 14],"float32"),Tensor([13, 7, 14],"float32"),], axis=1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 64],"float32"),Tensor([13, 0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 64],"float32"),Tensor([13, 7, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),], )
paddle.stack(list[Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),], )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 0, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 0],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 0, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),], axis=1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 0, 1],"float32"),Tensor([140, 188, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 0],"float32"),Tensor([140, 188, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 1],"float32"),Tensor([0, 188, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 1],"float32"),Tensor([140, 0, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 1],"float32"),Tensor([140, 188, 0],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([16, 0],"int64"),Tensor([16, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([16, 0],"int64"),Tensor([16, 16],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([16, 16],"int64"),Tensor([0, 16],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([16, 16],"int64"),Tensor([16, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 10],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 2],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 10],"int64"),Tensor([0, 10],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 10],"int64"),Tensor([2, 0],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 2],"int64"),Tensor([0, 2],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 2],"int64"),Tensor([2, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2],"float32"),Tensor([0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([2],"float64"),Tensor([0],"float64"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224],"float32"),Tensor([3, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 0],"float32"),Tensor([3, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 0],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),), axis=0, )
paddle.stack(x=list[Tensor([0, 140, 140],"float32"),Tensor([0, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([0, 140, 140],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 0, 140],"float32"),Tensor([58, 0, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 0, 140],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 0],"float32"),Tensor([58, 140, 0],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 0],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([0, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([58, 0, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([58, 140, 0],"float32"),], axis=1, )
paddle.stack(x=tuple(Tensor([0, 16, 256, 32],"float32"),Tensor([0, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([0, 16, 256, 32],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([0, 3, 576, 32],"float32"),Tensor([0, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([0, 3, 576, 32],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 0, 256, 32],"float32"),Tensor([1, 0, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 0, 256, 32],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 0, 32],"float32"),Tensor([1, 16, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 0, 32],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 0],"float32"),Tensor([1, 16, 256, 0],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 0],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([0, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([1, 0, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([1, 16, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([1, 16, 256, 0],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 0, 576, 32],"float32"),Tensor([128, 0, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 0, 576, 32],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 0, 32],"float32"),Tensor([128, 3, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 0, 32],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 0],"float32"),Tensor([128, 3, 576, 0],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 0],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([0, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([128, 0, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([128, 3, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([128, 3, 576, 0],"float32"),), axis=-1, )
paddle.std(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([0, 32],"float32"), )
paddle.std(Tensor([0, 5],"float32"), )
paddle.std(Tensor([0, 9],"float32"), axis=1, )
paddle.std(Tensor([0],"float32"), )
paddle.std(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([3, 0],"float32"), )
paddle.std(Tensor([32, 0],"float32"), )
paddle.std(Tensor([6, 0],"float32"), axis=1, )
paddle.std(x=Tensor([0, 3, 3],"float64"), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([0, 3],"float32"), )
paddle.std(x=Tensor([0, 3],"float64"), )
paddle.std(x=Tensor([2, 0],"float32"), )
paddle.std(x=Tensor([2, 0],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([3, 3, 0],"float64"), )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.sum(Tensor([0, 1, 1],"float32"), 1, )
paddle.sum(Tensor([0, 1, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([0, 1, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([0, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 1, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 1, 45],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 1],"float32"), )
paddle.sum(Tensor([0, 1],"float32"), axis=-1, )
paddle.sum(Tensor([0, 1],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 1],"int32"), )
paddle.sum(Tensor([0, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([0, 10, 4],"float32"), axis=2, )
paddle.sum(Tensor([0, 10, 5],"float64"), name=None, )
paddle.sum(Tensor([0, 10],"float32"), 1, )
paddle.sum(Tensor([0, 10],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([0, 10],"float32"), name=None, )
paddle.sum(Tensor([0, 100],"float32"), 1, )
paddle.sum(Tensor([0, 1000],"float32"), axis=1, )
paddle.sum(Tensor([0, 1024, 1],"float32"), )
paddle.sum(Tensor([0, 1024, 1024],"int64"), )
paddle.sum(Tensor([0, 1024, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 1024, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 128, 32, 32],"float32"), 1, )
paddle.sum(Tensor([0, 128, 32, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([0, 128],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 13, 4],"float32"), axis=2, )
paddle.sum(Tensor([0, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 15, 20, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 16, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 16],"int64"), axis=0, )
paddle.sum(Tensor([0, 18],"float32"), 0, )
paddle.sum(Tensor([0, 196608],"float32"), axis=1, )
paddle.sum(Tensor([0, 2, 1, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 4, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([0, 2, 4],"float32"), axis=1, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([0, 2, 7, 32],"float32"), axis=-2, )
paddle.sum(Tensor([0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2],"float32"), name=None, )
paddle.sum(Tensor([0, 20, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 20, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([0, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([0, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 25, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 25, 21504, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 256, 16, 16],"float32"), 1, )
paddle.sum(Tensor([0, 256, 16, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([0, 256],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 256],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 26, 512, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([0, 26, 512, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([0, 28, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([0, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([0, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([0, 3, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 3, 20, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([0, 3, 3, 2],"float64"), )
paddle.sum(Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.sum(Tensor([0, 3, 3, 4],"float64"), name=None, )
paddle.sum(Tensor([0, 3, 3, 5],"float32"), )
paddle.sum(Tensor([0, 3, 3],"float32"), 2, )
paddle.sum(Tensor([0, 3, 3],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 3],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 3],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([0, 3, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 3],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([0, 3],"float32"), axis=0, )
paddle.sum(Tensor([0, 3],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3],"float64"), axis=list[1,], )
paddle.sum(Tensor([0, 3],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 300, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([0, 32, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 32, 128],"float32"), axis=0, )
paddle.sum(Tensor([0, 32, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 32, 32],"float32"), axis=0, )
paddle.sum(Tensor([0, 4, 2, 2],"float32"), axis=-2, )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 4, 5, 7],"int64"), )
paddle.sum(Tensor([0, 4],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 5],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 5],"float32"), axis=None, )
paddle.sum(Tensor([0, 5],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([0, 784],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 8, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([0, 8, 16],"float32"), axis=1, )
paddle.sum(Tensor([0, 81, 94, 311],"float32"), axis=1, )
paddle.sum(Tensor([0, 9],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([0, 93431],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 96, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([0],"bool"), axis=list[0,], keepdim=False, )
paddle.sum(Tensor([0],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([0],"float32"), )
paddle.sum(Tensor([0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float32"), axis=0, )
paddle.sum(Tensor([0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0],"float32"), axis=-1, )
paddle.sum(Tensor([0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0],"float32"), name=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float64"), name=None, )
paddle.sum(Tensor([0],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"int64"), )
paddle.sum(Tensor([0],"int64"), axis=list[0,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 1],"float32"), )
paddle.sum(Tensor([1, 0, 1],"float32"), 1, )
paddle.sum(Tensor([1, 0, 1024],"int64"), )
paddle.sum(Tensor([1, 0, 16, 16],"float32"), 1, )
paddle.sum(Tensor([1, 0, 16, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 21504, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 3, 5],"float32"), )
paddle.sum(Tensor([1, 0, 32, 32],"float32"), 1, )
paddle.sum(Tensor([1, 0, 32, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 0, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 45],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 0, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 0],"float32"), )
paddle.sum(Tensor([1, 0],"float32"), 1, )
paddle.sum(Tensor([1, 0],"float32"), axis=0, )
paddle.sum(Tensor([1, 0],"float32"), axis=1, )
paddle.sum(Tensor([1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([1, 0],"float64"), axis=list[1,], )
paddle.sum(Tensor([1, 0],"int32"), )
paddle.sum(Tensor([1, 0],"int64"), axis=0, )
paddle.sum(Tensor([1, 1, 0],"float32"), 1, )
paddle.sum(Tensor([1, 1, 0],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 1024, 0],"float32"), )
paddle.sum(Tensor([1, 1024, 0],"int64"), )
paddle.sum(Tensor([1, 128, 0, 32],"float32"), 1, )
paddle.sum(Tensor([1, 128, 0, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 128, 32, 0],"float32"), 1, )
paddle.sum(Tensor([1, 128, 32, 0],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 14, 0, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 0, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 14, 5, 0],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 5, 0],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 2, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 21504, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 256, 0, 16],"float32"), 1, )
paddle.sum(Tensor([1, 256, 0, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 256, 16, 0],"float32"), 1, )
paddle.sum(Tensor([1, 256, 16, 0],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 3, 0, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 5],"float32"), )
paddle.sum(Tensor([1, 3, 3, 0],"float32"), )
paddle.sum(Tensor([1, 3, 4, 0],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([10, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([10, 0, 5],"float64"), name=None, )
paddle.sum(Tensor([10, 0],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([10, 0],"float32"), name=None, )
paddle.sum(Tensor([10, 10, 0],"float64"), name=None, )
paddle.sum(Tensor([10, 20, 0],"float32"), axis=-1, )
paddle.sum(Tensor([100, 0, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 0, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 0, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 0, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 1, 0],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 1, 0],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 200, 0],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([1000, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 0, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 0, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([100000, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 0],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([104, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([12, 0, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 10, 0],"float32"), axis=2, )
paddle.sum(Tensor([12, 13, 0],"float32"), axis=2, )
paddle.sum(Tensor([128, 0, 32],"float32"), axis=0, )
paddle.sum(Tensor([128, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([128, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([128, 32, 0],"float32"), axis=0, )
paddle.sum(Tensor([12988, 0, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([12988, 32, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([13, 0, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([13, 0, 2, 2],"float32"), axis=-2, )
paddle.sum(Tensor([13, 0, 3],"float32"), 2, )
paddle.sum(Tensor([13, 0, 4, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 0, 7, 32],"float32"), axis=-2, )
paddle.sum(Tensor([13, 2, 0, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 0, 32],"float32"), axis=-2, )
paddle.sum(Tensor([13, 2, 4, 0, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 4, 16, 0],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 7, 0],"float32"), axis=-2, )
paddle.sum(Tensor([13, 3, 0],"float32"), 2, )
paddle.sum(Tensor([13, 4, 0, 2],"float32"), axis=-2, )
paddle.sum(Tensor([13, 4, 2, 0],"float32"), axis=-2, )
paddle.sum(Tensor([13, 96, 0],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([16, 0, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 0, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([16, 0, 128],"float32"), axis=0, )
paddle.sum(Tensor([16, 0, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 0],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 0],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 16, 0, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 16, 3, 0],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 0, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 0],"float32"), axis=0, )
paddle.sum(Tensor([16, 32, 1, 0],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 96, 0],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([170628, 0, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([170628, 20, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([18, 0],"float32"), 0, )
paddle.sum(Tensor([2, 0, 10],"float32"), name=None, )
paddle.sum(Tensor([2, 0, 16],"float32"), axis=1, )
paddle.sum(Tensor([2, 0, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 0, 3, 2],"float64"), )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 0],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([2, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 10, 0],"float32"), name=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 0, 2],"float64"), )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 3, 3, 0],"float64"), )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"int64"), )
paddle.sum(Tensor([2, 8, 0],"float32"), axis=1, )
paddle.sum(Tensor([256, 0, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 28, 0, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 28, 28, 0],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 3, 3, 3],"float32"), )
paddle.sum(Tensor([3, 0, 3],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([3, 0, 3],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([3, 0, 3],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([3, 0, 4, 5, 7],"int64"), )
paddle.sum(Tensor([3, 0, 4],"float32"), axis=1, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([3, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0],"float32"), axis=None, )
paddle.sum(Tensor([3, 0],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 0],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=1, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 0, 3, 3],"float32"), )
paddle.sum(Tensor([3, 3, 0],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 0],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 0],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 3, 0, 3],"float32"), )
paddle.sum(Tensor([3, 3, 3, 3, 0],"float32"), )
paddle.sum(Tensor([3, 4, 0, 5, 7],"int64"), )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 4, 0, 7],"int64"), )
paddle.sum(Tensor([3, 4, 4, 5, 0],"int64"), )
paddle.sum(Tensor([30, 0, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([30, 200, 0],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 0, 1, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 0, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 0, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 0, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 0, 3, 4],"float64"), name=None, )
paddle.sum(Tensor([4, 0, 94, 311],"float32"), axis=1, )
paddle.sum(Tensor([4, 0],"float64"), axis=list[1,], )
paddle.sum(Tensor([4, 2, 0, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 1, 0, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 1, 512, 0, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 1, 512, 4, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 3, 0, 4],"float64"), name=None, )
paddle.sum(Tensor([4, 3, 0, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 0, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 0],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 3, 2, 0],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 2, 0],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 3, 0],"float64"), name=None, )
paddle.sum(Tensor([4, 81, 0, 311],"float32"), axis=1, )
paddle.sum(Tensor([4, 81, 94, 0],"float32"), axis=1, )
paddle.sum(Tensor([400, 0, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 300, 0, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 300, 20, 0],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([500, 0, 20, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([500, 3, 0, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([500, 3, 20, 0],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 0, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 8, 0, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 8, 14, 0],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([6, 0, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([64, 0, 512, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 0, 512, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 0, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 0, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 0, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 0, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 1, 0],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 1, 0],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([8, 0, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 1, 0, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 1, 1, 0],"int64"), )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([96, 0, 20, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([96, 15, 0, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([96, 15, 20, 0],"float32"), axis=tuple(0,1,2,), )
paddle.sum(x=Tensor([0, 2],"float32"), )
paddle.sum(x=Tensor([0, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([0, 2],"float64"), )
paddle.sum(x=Tensor([0, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([0, 2],"float64"), axis=1, )
paddle.sum(x=Tensor([0, 2],"float64"), axis=-1, )
paddle.sum(x=Tensor([0, 2],"float64"), axis=list[0,1,], )
paddle.sum(x=Tensor([2, 0],"float32"), )
paddle.sum(x=Tensor([2, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 0],"float64"), )
paddle.sum(x=Tensor([2, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 0],"float64"), axis=1, )
paddle.sum(x=Tensor([2, 0],"float64"), axis=-1, )
paddle.sum(x=Tensor([2, 0],"float64"), axis=list[0,1,], )
paddle.t(Tensor([0, 20],"float32"), )
paddle.t(Tensor([0, 5],"float64"), )
paddle.t(Tensor([0],"float64"), )
paddle.t(Tensor([1, 0],"float64"), )
paddle.t(Tensor([10, 0],"float32"), )
paddle.take_along_axis(Tensor([0, 114, 64],"bfloat16"), axis=1, indices=Tensor([0, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([0, 114, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([0, 302, 768],"bfloat16"), axis=1, indices=Tensor([0, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([0, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([0, 4, 7, 14],"float32"), axis=-1, indices=Tensor([0, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([0, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([0, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 0, 7, 14],"float32"), axis=-1, indices=Tensor([13, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 0, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 0, 14],"float32"), axis=-1, indices=Tensor([13, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 0, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 0],"float32"), axis=-1, indices=Tensor([13, 4, 7, 0],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 0],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([0, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 64],"bfloat16"), axis=1, indices=Tensor([2, 0, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 768],"bfloat16"), axis=1, indices=Tensor([2, 0, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 64],"bfloat16"), axis=1, indices=Tensor([0, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 64],"bfloat16"), axis=1, indices=Tensor([2, 0, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([0, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 0, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([52, 0, 7, 14],"float32"), axis=-1, indices=Tensor([52, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 0, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 0, 14],"float32"), axis=-1, indices=Tensor([52, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 0, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 0],"float32"), axis=-1, indices=Tensor([52, 4, 7, 0],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 0],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([0, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 0],"int64"), )
paddle.tan(Tensor([0, 1, 2, 2],"float32"), )
paddle.tan(Tensor([0, 1, 2],"float32"), )
paddle.tan(Tensor([0, 1],"float32"), )
paddle.tan(Tensor([0, 1],"float64"), )
paddle.tan(Tensor([0, 2, 3, 1],"float32"), )
paddle.tan(Tensor([0, 20, 1],"float32"), )
paddle.tan(Tensor([0],"float32"), )
paddle.tan(Tensor([10, 0, 1],"float32"), )
paddle.tan(Tensor([10, 20, 0],"float32"), )
paddle.tan(Tensor([100, 0, 2, 2],"float32"), )
paddle.tan(Tensor([100, 0, 2],"float32"), )
paddle.tan(Tensor([100, 0, 3, 1],"float32"), )
paddle.tan(Tensor([100, 0],"float32"), )
paddle.tan(Tensor([100, 0],"float64"), )
paddle.tan(Tensor([100, 1, 0, 2],"float32"), )
paddle.tan(Tensor([100, 1, 0],"float32"), )
paddle.tan(Tensor([100, 1, 2, 0],"float32"), )
paddle.tan(Tensor([100, 2, 0, 1],"float32"), )
paddle.tan(Tensor([100, 2, 3, 0],"float32"), )
paddle.tan(x=Tensor([0, 3, 3],"float32"), )
paddle.tan(x=Tensor([0, 3, 3],"float64"), )
paddle.tan(x=Tensor([3, 0, 3],"float32"), )
paddle.tan(x=Tensor([3, 0, 3],"float64"), )
paddle.tan(x=Tensor([3, 3, 0],"float32"), )
paddle.tan(x=Tensor([3, 3, 0],"float64"), )
paddle.Tensor.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 0, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 0, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.argmax(Tensor([0, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([0, 100, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 101, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 157920, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 3, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 4],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 7],"int32"), -1, )
paddle.Tensor.argmax(Tensor([0, 77],"int64"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 90, 22400],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([1, 0, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([1, 0, 24276],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([1, 0],"int64"), axis=-1, )
paddle.Tensor.argmax(Tensor([1, 1, 0],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([13, 0, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([13, 0],"float32"), 1, )
paddle.Tensor.argmax(Tensor([13, 0],"int32"), -1, )
paddle.Tensor.argmax(Tensor([13, 3, 0],"float32"), 1, )
paddle.Tensor.argmax(Tensor([2, 0],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([30, 0, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 100, 0],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 101, 0],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([4, 0, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([4, 0, 22400],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([4, 0],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([4, 157920, 0],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([4, 90, 0],"float32"), axis=1, )
paddle.Tensor.argsort(Tensor([0, 22400],"float32"), axis=1, descending=True, )
paddle.Tensor.argsort(Tensor([0, 22400],"int64"), axis=1, )
paddle.Tensor.argsort(Tensor([0],"float32"), )
paddle.Tensor.argsort(Tensor([4, 0],"float32"), axis=1, descending=True, )
paddle.Tensor.argsort(Tensor([4, 0],"int64"), axis=1, )
paddle.Tensor.bmm(Tensor([0, 108472, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 108472, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 1156, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 1156, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 0, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 0],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 0],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.broadcast_to(Tensor([0],"float32"), list[3,2,], )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 0],"float64"), )
paddle.Tensor.chunk(Tensor([0, 1, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 10164, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 10285, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 10, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 10, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 100, 4],"float32"), 4, )
paddle.Tensor.chunk(Tensor([0, 128, 10],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 128, 1007],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 160, 16, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 160, 8, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 196, 768],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 300, 1],"float32"), 1, )
paddle.Tensor.chunk(Tensor([0, 300, 101],"float32"), 16, )
paddle.Tensor.chunk(Tensor([0, 300, 16],"float32"), 2, )
paddle.Tensor.chunk(Tensor([0, 300, 2],"float32"), 2, )
paddle.Tensor.chunk(Tensor([0, 300, 4],"float32"), 4, )
paddle.Tensor.chunk(Tensor([0, 300, 5],"float32"), 1, )
paddle.Tensor.chunk(Tensor([0, 300, 8],"float32"), 8, )
paddle.Tensor.chunk(Tensor([0, 3136, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 4],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 8, 32],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([1, 0, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 1],"float32"), 1, )
paddle.Tensor.chunk(Tensor([1, 0, 10164, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 10285, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 5],"float32"), 1, )
paddle.Tensor.chunk(Tensor([1, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([1, 1, 0, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 10164, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 10285, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 300, 0],"float32"), 1, )
paddle.Tensor.chunk(Tensor([128, 0, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 0, 768],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 196, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 3136, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([13, 0, 10],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 1007],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 32],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([13, 128, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 8, 0],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 101],"float32"), 16, )
paddle.Tensor.chunk(Tensor([16, 0, 16, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 8, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 0, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 0, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 16, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 8, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 300, 0],"float32"), 16, )
paddle.Tensor.chunk(Tensor([2, 0, 16],"float32"), 2, )
paddle.Tensor.chunk(Tensor([2, 0, 2],"float32"), 2, )
paddle.Tensor.chunk(Tensor([2, 300, 0],"float32"), 2, )
paddle.Tensor.chunk(Tensor([4, 0, 4],"float32"), 4, )
paddle.Tensor.chunk(Tensor([4, 100, 0],"float32"), 4, )
paddle.Tensor.chunk(Tensor([4, 300, 0],"float32"), 4, )
paddle.Tensor.chunk(Tensor([8, 0, 8],"float32"), 8, )
paddle.Tensor.chunk(Tensor([8, 300, 0],"float32"), 8, )
paddle.Tensor.clip(Tensor([0, 1, 1, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 1, 10285, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 1, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 1, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([0, 1, 28, 28],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([0, 1, 3, 3],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 1, 32, 32],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 100, 4],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 100, 4],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 1001, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0, 1002, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0, 10164, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 10164, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([0, 10164, 4],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([0, 11, 4],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([0, 11, 4],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 11, 4],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 1100, 4],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([0, 11109, 4],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([0, 120],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 120],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 16, 12, 12],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 18, 4],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([0, 2, 1],"float32"), min=1e-07, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([0, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0, 2],"int64"), 1, 2, )
paddle.Tensor.clip(Tensor([0, 20, 1],"float32"), 0.6, 1.5, )
paddle.Tensor.clip(Tensor([0, 20],"float64"), max=0, )
paddle.Tensor.clip(Tensor([0, 20],"float64"), min=0, )
paddle.Tensor.clip(Tensor([0, 21504, 4],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([0, 24276, 4],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([0, 28, 28],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([0, 3, 10, 10, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 3, 20, 20, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 3, 8, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([0, 3],"int32"), 2, )
paddle.Tensor.clip(Tensor([0, 300, 4],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([0, 33],"float32"), max=1, )
paddle.Tensor.clip(Tensor([0, 33],"float32"), min=1e-08, )
paddle.Tensor.clip(Tensor([0, 576],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 6, 5, 5],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 6],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([0, 7],"int32"), 2, )
paddle.Tensor.clip(Tensor([0, 7],"int64"), 3, )
paddle.Tensor.clip(Tensor([0, 8, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([0, 84],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 8400, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([0],"float32"), 0, )
paddle.Tensor.clip(Tensor([0],"float32"), 0, 4.605170185988092, )
paddle.Tensor.clip(Tensor([0],"float32"), 0, 89.99, )
paddle.Tensor.clip(Tensor([0],"float32"), -100.0, 100.0, )
paddle.Tensor.clip(Tensor([0],"float32"), max=0, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0, max=15.9, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0, max=6.9, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0.0001, )
paddle.Tensor.clip(Tensor([0],"float64"), max=0, )
paddle.Tensor.clip(Tensor([0],"float64"), min=0, )
paddle.Tensor.clip(Tensor([0],"int32"), 0, 7, )
paddle.Tensor.clip(Tensor([0],"int32"), 0, 8, )
paddle.Tensor.clip(Tensor([0],"int64"), 0, 512, )
paddle.Tensor.clip(Tensor([1, 0, 1, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0, 10285, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0, 12, 12],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 0, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 0, 32, 32],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 1, 0, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 0, 32],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 1, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 1, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 10285, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 32, 0],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 100, 0],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 100, 0],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 1001, 0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([1, 1002, 0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([1, 10164, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 11, 0],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([1, 11, 0],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 11, 0],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 1100, 0],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([1, 16, 0, 12],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 16, 12, 0],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 18, 0],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 21504, 0],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([1, 24276, 0],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([1, 300, 0],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([1, 8400, 0],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([10, 0, 1],"float32"), 0.6, 1.5, )
paddle.Tensor.clip(Tensor([10, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([10, 0],"float64"), max=0, )
paddle.Tensor.clip(Tensor([10, 0],"float64"), min=0, )
paddle.Tensor.clip(Tensor([10, 20, 0],"float32"), 0.6, 1.5, )
paddle.Tensor.clip(Tensor([12, 0, 10, 10, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 0, 20, 20, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 0],"int64"), 3, )
paddle.Tensor.clip(Tensor([12, 3, 0, 10, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 0, 20, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 10, 0, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 10, 10, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 20, 0, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 20, 20, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([120, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([13, 0, 1],"float32"), min=1e-07, )
paddle.Tensor.clip(Tensor([13, 0],"int32"), 2, )
paddle.Tensor.clip(Tensor([13, 2, 0],"float32"), min=1e-07, )
paddle.Tensor.clip(Tensor([16, 0, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([16, 0, 5, 5],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([16, 0],"float32"), max=1, )
paddle.Tensor.clip(Tensor([16, 0],"float32"), min=1e-08, )
paddle.Tensor.clip(Tensor([16, 10164, 0],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([16, 6, 0, 5],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([16, 6, 5, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([2, 0, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 0, 4],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([2, 0, 8, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([2, 0],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([2, 0],"int64"), 1, 2, )
paddle.Tensor.clip(Tensor([2, 1, 0],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 10164, 0],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([2, 11109, 0],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([2, 3, 0, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([2, 3, 8, 0],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([23, 0],"float32"), max=1, )
paddle.Tensor.clip(Tensor([23, 0],"float32"), min=1e-08, )
paddle.Tensor.clip(Tensor([3, 0, 28],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([3, 0, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([3, 28, 0],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([3, 8, 0],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([576, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([6, 0, 3, 3],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([6, 1, 0, 3],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([6, 1, 3, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([64, 0, 28, 28],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([64, 1, 0, 28],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([64, 1, 28, 0],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([9, 0],"float32"), -128, 127, )
paddle.Tensor.clone(Tensor([0, 1],"int64"), )
paddle.Tensor.clone(Tensor([0, 100, 256],"float32"), )
paddle.Tensor.clone(Tensor([0, 100, 4],"float32"), )
paddle.Tensor.clone(Tensor([0, 1024, 48, 72],"float32"), )
paddle.Tensor.clone(Tensor([0, 12, 1, 64],"float32"), )
paddle.Tensor.clone(Tensor([0, 19],"int64"), )
paddle.Tensor.clone(Tensor([0, 3, 96, 96, 1],"float32"), )
paddle.Tensor.clone(Tensor([0],"float32"), )
paddle.Tensor.clone(Tensor([0],"int32"), )
paddle.Tensor.clone(Tensor([1, 0, 1, 64],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 256],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 4],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 48, 72],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 96, 96, 1],"float32"), )
paddle.Tensor.clone(Tensor([1, 0],"int64"), )
paddle.Tensor.clone(Tensor([1, 100, 0],"float32"), )
paddle.Tensor.clone(Tensor([1, 1024, 0, 72],"float32"), )
paddle.Tensor.clone(Tensor([1, 1024, 48, 0],"float32"), )
paddle.Tensor.clone(Tensor([1, 12, 0, 64],"float32"), )
paddle.Tensor.clone(Tensor([1, 12, 1, 0],"float32"), )
paddle.Tensor.clone(Tensor([1, 3, 0, 96, 1],"float32"), )
paddle.Tensor.clone(Tensor([1, 3, 96, 0, 1],"float32"), )
paddle.Tensor.clone(Tensor([1, 3, 96, 96, 0],"float32"), )
paddle.Tensor.cumsum(Tensor([0, 1],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([0, 10, 8],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([0, 10, 8],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([0, 10],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([0, 100],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([0, 12, 9],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([0, 12, 9],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([0, 14],"int32"), -1, )
paddle.Tensor.cumsum(Tensor([0, 2],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([0, 4, 2],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([0, 4, 2],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([0, 4, 2],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([0, 4],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([0],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([0],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([0],"int64"), 0, )
paddle.Tensor.cumsum(Tensor([1, 0, 8],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 0, 8],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 0, 9],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 0, 9],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 0],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 10, 0],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 10, 0],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 12, 0],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 12, 0],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([13, 0],"int32"), -1, )
paddle.Tensor.cumsum(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 0, 2],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 0, 2],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 0, 2],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([3, 0],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 0],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 4, 0],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 4, 0],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 4, 0],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([5, 0],"int64"), axis=0, )
paddle.Tensor.diag_embed(Tensor([0, 1, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([1, 0, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([1, 1, 0],"float32"), )
paddle.Tensor.diagonal(Tensor([0, 2],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([0, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([2, 0],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([3, 0],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diff(Tensor([0],"float32"), )
paddle.Tensor.diff(Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([0, 4, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4],"float64"), axis=0, prepend=Tensor([0, 4],"float64"), append=Tensor([0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float32"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([0],"float64"), append=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([4],"float64"), append=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 0],"float64"), axis=0, prepend=Tensor([4, 0],"float64"), append=Tensor([4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 0],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([0, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 0],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([0],"float64"), append=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 0, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 0, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 0, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 0, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 0],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 0],"float64"), axis=-2, )
paddle.Tensor.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.Tensor.dot(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.dot(Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.Tensor.dot(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.dot(Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.Tensor.equal(Tensor([0, 10],"int64"), 3, )
paddle.Tensor.equal(Tensor([0, 128],"int64"), Tensor([0, 128],"int64"), )
paddle.Tensor.equal(Tensor([0, 128],"int64"), Tensor([128, 128],"int64"), )
paddle.Tensor.equal(Tensor([128, 0],"int64"), Tensor([128, 0],"int64"), )
paddle.Tensor.equal(Tensor([128, 0],"int64"), Tensor([128, 128],"int64"), )
paddle.Tensor.equal(Tensor([128, 128],"int64"), Tensor([0, 128],"int64"), )
paddle.Tensor.equal(Tensor([128, 128],"int64"), Tensor([128, 0],"int64"), )
paddle.Tensor.equal(Tensor([2, 0],"int64"), 3, )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 32],"float32"), Tensor([0, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 32],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 1],"int32"), Tensor([5, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 128],"int32"), Tensor([5, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([2, 0, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 0, 32],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 0],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 0],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([0, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.Tensor.fill_(Tensor([0, 10],"float32"), 1, )
paddle.Tensor.fill_(Tensor([0, 2, 3],"float32"), 0, )
paddle.Tensor.fill_(Tensor([0, 30],"float32"), 1, )
paddle.Tensor.fill_(Tensor([0, 32],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([0, 32],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([0, 77],"float32"), value=-math.inf, )
paddle.Tensor.fill_(Tensor([0],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([0],"float32"), 0, )
paddle.Tensor.fill_(Tensor([0],"float32"), 1, )
paddle.Tensor.fill_(Tensor([0],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([10, 0],"float32"), 1, )
paddle.Tensor.fill_(Tensor([20, 0],"float32"), 1, )
paddle.Tensor.fill_(Tensor([32, 0],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([32, 0],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([4, 0, 3],"float32"), 0, )
paddle.Tensor.fill_(Tensor([4, 2, 0],"float32"), 0, )
paddle.Tensor.fill_(Tensor([77, 0],"float32"), value=-math.inf, )
paddle.Tensor.fill_(x=Tensor([0, 16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([0, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([0, 4],"float32"), value=4, )
paddle.Tensor.fill_(x=Tensor([0, 4],"float64"), value=4, )
paddle.Tensor.fill_(x=Tensor([0],"float64"), value=4.2, )
paddle.Tensor.fill_(x=Tensor([10, 0, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([10, 16, 0],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([16, 0],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([4, 0],"float32"), value=4, )
paddle.Tensor.fill_(x=Tensor([4, 0],"float64"), value=4, )
paddle.Tensor.fill_diagonal_(Tensor([0, 128],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([128, 0],"float32"), 0, wrap=False, )
paddle.Tensor.flatten(Tensor([0, 1, 1],"int32"), )
paddle.Tensor.flatten(Tensor([0, 1, 10285],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([0, 1, 12, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([0, 1, 16, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([0, 1, 2, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([0, 1, 3598],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([0, 1, 4, 2, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 1, 4, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([0, 1],"int32"), )
paddle.Tensor.flatten(Tensor([0, 10, 1],"int32"), )
paddle.Tensor.flatten(Tensor([0, 10, 100, 100],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 10, 104, 104],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 10, 15, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([0, 10, 8],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 10],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 100],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 11, 4, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 12, 9],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 12544],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 16, 16],"int64"), start_axis=1, )
paddle.Tensor.flatten(Tensor([0, 18, 4, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 19, 29, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([0, 19, 34, 1],"float32"), )
paddle.Tensor.flatten(Tensor([0, 2, 16, 4, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 2, 16, 4, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 2, 4, 16],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 24, 24, 192],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([0, 3, 6, 6, 4],"float32"), )
paddle.Tensor.flatten(Tensor([0, 300, 11],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 300, 12544],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 300, 176, 176],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 300, 184, 184],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 32, 476, 3, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 33, 1, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 38, 68, 1],"float32"), )
paddle.Tensor.flatten(Tensor([0, 4, 7, 4, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([0, 6, 10, 3, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([0, 6, 4, 4],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 6, 4, 4],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([0, 64, 56, 56],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([0, 7, 64, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([0, 8, 11, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 8, 1100, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0],"bfloat16"), )
paddle.Tensor.flatten(Tensor([0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 0, 1],"int32"), )
paddle.Tensor.flatten(Tensor([1, 0, 100, 100],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 0, 10285],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([1, 0, 104, 104],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 0, 11, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 11],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 1100, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 12, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 0, 12544],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 16, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 0, 176, 176],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 0, 184, 184],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 0, 2, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 0, 24, 192],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1, 0, 3598],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 2, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 4],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 4],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 0, 8],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 0, 9],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 1, 0, 2, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 1, 0, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 0, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 1, 0],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([1, 1, 0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 1, 12, 0],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 1, 16, 0],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 1, 2, 0, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 2, 2, 0],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 0, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 0, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 2, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 2, 0],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 10, 0, 100],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 10, 0, 104],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 10, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 10, 0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 10, 100, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 10, 104, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 11, 0, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 11, 4, 0, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 11, 4, 64, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 12, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 18, 0, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 18, 4, 0, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 18, 4, 64, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 24, 0, 192],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1, 24, 24, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1, 300, 0, 176],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 300, 0, 184],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 300, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 300, 176, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 300, 184, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 6, 0, 4],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 6, 0, 4],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 6, 4, 0],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 6, 4, 0],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 8, 0, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 11, 0, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 11, 4, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 1100, 0, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 1100, 4, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([10, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([100, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([100, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([12, 0, 34, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 0, 68, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 19, 0, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 19, 34, 0],"float32"), )
paddle.Tensor.flatten(Tensor([12, 38, 0, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 38, 68, 0],"float32"), )
paddle.Tensor.flatten(Tensor([128, 0, 476, 3, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 0, 56, 56],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([128, 32, 0, 3, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 32, 476, 0, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 32, 476, 3, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 64, 0, 56],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([128, 64, 56, 0],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([13, 0, 16, 4, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 0, 16, 4, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 0, 4, 16],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 0, 64, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 0, 7, 4, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 2, 0, 16],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 0, 4, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 0, 4, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 16, 0, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 16, 0, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 16, 4, 0],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 4, 0],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 4, 0, 4, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 4, 7, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 4, 7, 4, 0],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 7, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 7, 64, 0],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([16, 0, 1, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([16, 33, 0, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([16, 33, 1, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([2, 0, 10, 3, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([2, 0, 15, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 0, 16],"int64"), start_axis=1, )
paddle.Tensor.flatten(Tensor([2, 0, 29, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 0, 6, 6, 4],"float32"), )
paddle.Tensor.flatten(Tensor([2, 10, 0, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 10, 15, 0],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 16, 0],"int64"), start_axis=1, )
paddle.Tensor.flatten(Tensor([2, 19, 0, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 19, 29, 0],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 3, 0, 6, 4],"float32"), )
paddle.Tensor.flatten(Tensor([2, 3, 6, 0, 4],"float32"), )
paddle.Tensor.flatten(Tensor([2, 3, 6, 6, 0],"float32"), )
paddle.Tensor.flatten(Tensor([2, 6, 0, 3, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([2, 6, 10, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([2, 6, 10, 3, 0],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([23, 0, 1, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([23, 33, 0, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([23, 33, 1, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([4, 0, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 0, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 0, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 376, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([52, 0, 64, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([52, 7, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([52, 7, 64, 0],"float32"), -2, -1, )
paddle.Tensor.flip(Tensor([0, 14],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([0, 2],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([0, 224, 224],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 280, 350],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 280, 350],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([0, 400, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([13, 0],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 224],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 0, 350],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 350],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 224, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 280, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 280, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 400, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([4, 0],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([5, 0],"int64"), list[1,], )
paddle.Tensor.gcd(x=Tensor([0, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 5],"int32"), y=Tensor([0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )
paddle.Tensor.gcd(x=Tensor([0],"int32"), y=Tensor([1],"int32"), )
paddle.Tensor.gcd(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.Tensor.gcd(x=Tensor([0],"int64"), y=Tensor([1],"int64"), )
paddle.Tensor.gcd(x=Tensor([1],"int32"), y=Tensor([0],"int32"), )
paddle.Tensor.gcd(x=Tensor([1],"int64"), y=Tensor([0],"int64"), )
paddle.Tensor.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 5],"int32"), y=Tensor([0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 0, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 0],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([0, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )
paddle.Tensor.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.inner(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.inner(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.Tensor.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )
paddle.Tensor.isclose(x=Tensor([0],"float32"), y=Tensor([2],"float32"), )
paddle.Tensor.isclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.isclose(x=Tensor([0],"float64"), y=Tensor([2],"float64"), )
paddle.Tensor.isclose(x=Tensor([2],"float32"), y=Tensor([0],"float32"), )
paddle.Tensor.isclose(x=Tensor([2],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 0],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 0],"float64"), )
paddle.Tensor.kthvalue(Tensor([0, 200, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 0, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 200, 0],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.Tensor.logical_and(Tensor([0, 3],"bool"), Tensor([0, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([0, 3],"bool"), Tensor([2, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_and(Tensor([0],"bool"), Tensor([1038],"bool"), )
paddle.Tensor.logical_and(Tensor([0],"bool"), Tensor([1697],"bool"), )
paddle.Tensor.logical_and(Tensor([1038],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_and(Tensor([1697],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 0],"bool"), Tensor([2, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 3],"bool"), Tensor([0, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 3],"bool"), Tensor([2, 0],"bool"), )
paddle.Tensor.logical_or(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_or(Tensor([0],"bool"), Tensor([1038],"bool"), )
paddle.Tensor.logical_or(Tensor([0],"bool"), Tensor([1697],"bool"), )
paddle.Tensor.logical_or(Tensor([1038],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_or(Tensor([1697],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logit(x=Tensor([0, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([0, 3, 2, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([0, 3, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([0, 3, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([0],"float32"), )
paddle.Tensor.logit(x=Tensor([0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 0, 2, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 0, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([4, 0, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 0, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 0, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([4, 3, 0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 0],"float64"), eps=0.2, )
paddle.Tensor.lu(Tensor([0, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([0, 3],"float32"), )
paddle.Tensor.lu(Tensor([0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0],"float32"), )
paddle.Tensor.lu(Tensor([3, 0],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.lu(Tensor([4, 0, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 0, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 0],"float64"), )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([10, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([27, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([13, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([52, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 256],"float32"), Tensor([0, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 4],"float32"), Tensor([0, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 4],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 256],"float32"), Tensor([0, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 4],"float32"), Tensor([0, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 4],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([13, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([52, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([0, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([1, 36828, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([0, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([1, 36828, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([0, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([1, 38367, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([0, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([1, 38367, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([10, 0, 25],"float32"), Tensor([10, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 0, 25],"float32"), Tensor([10, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 0],"float32"), Tensor([10, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 0],"float32"), Tensor([10, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 25],"float32"), Tensor([10, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 25],"float32"), Tensor([10, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 32],"float32"), Tensor([13, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 32],"float32"), Tensor([13, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 7, 7],"float32"), Tensor([13, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 7, 7],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0],"float32"), Tensor([13, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0],"float32"), Tensor([13, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 32],"float32"), Tensor([13, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 0, 7],"float32"), Tensor([13, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 0, 7],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 0],"float32"), Tensor([13, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 0],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([13, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([13, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([13, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 32],"float32"), Tensor([13, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 32],"float32"), Tensor([13, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([27, 0, 25],"float32"), Tensor([27, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 0, 25],"float32"), Tensor([27, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 0],"float32"), Tensor([27, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 0],"float32"), Tensor([27, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 25],"float32"), Tensor([27, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 25],"float32"), Tensor([27, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 32],"float32"), Tensor([52, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 32],"float32"), Tensor([52, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 7, 7],"float32"), Tensor([52, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 7, 7],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0],"float32"), Tensor([52, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0],"float32"), Tensor([52, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 32],"float32"), Tensor([52, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 0, 7],"float32"), Tensor([52, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 0, 7],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 0],"float32"), Tensor([52, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 0],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([52, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([52, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([52, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 32],"float32"), Tensor([52, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 32],"float32"), Tensor([52, 7, 0],"bool"), 0, )
paddle.Tensor.masked_select(Tensor([0, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 10, 10, 10, 10],"float64"), Tensor([0, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 10, 10, 10, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 2],"float32"), Tensor([0, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 2],"float32"), Tensor([15000, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 22, 16],"float32"), Tensor([0, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 22, 16],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 7, 16],"float32"), Tensor([0, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 7, 16],"float32"), Tensor([13, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int32"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int32"), Tensor([10],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int64"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int64"), Tensor([128],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0, 16],"float32"), Tensor([1, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0, 16],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0],"float32"), Tensor([1, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0],"float32"), Tensor([1, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 1],"float32"), Tensor([1, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 0],"float32"), Tensor([1, 22, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 0],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([0, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([1, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([1, 22, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 0, 10, 10, 10],"float64"), Tensor([10, 0, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 0, 10, 10, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 0, 10, 10],"float64"), Tensor([10, 10, 0, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 0, 10, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 0, 10],"float64"), Tensor([10, 10, 10, 0, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 0, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 0],"float64"), Tensor([10, 10, 10, 10, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 0],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([0, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 0, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 10, 0, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 10, 10, 0, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 10, 10, 10, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([10],"int32"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([128],"int64"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 0, 16],"float32"), Tensor([13, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 0, 16],"float32"), Tensor([13, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 16],"float32"), Tensor([0, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 16],"float32"), Tensor([13, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 16],"float32"), Tensor([13, 7, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 0],"float32"), Tensor([15000, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 0],"float32"), Tensor([15000, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 2],"float32"), Tensor([0, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 2],"float32"), Tensor([15000, 0],"bool"), )
paddle.Tensor.matmul(Tensor([0, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([0, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float16"), Tensor([0, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float32"), Tensor([0, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 21504, 1, 91],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.Tensor.matmul(Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.Tensor.matmul(Tensor([1, 0, 1, 91],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 0, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 21504, 0, 91],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([1, 21504, 1, 0],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([1, 21504, 1, 91],"float32"), Tensor([0],"float32"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float16"), Tensor([112, 0, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float32"), Tensor([112, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float16"), Tensor([112, 12, 0, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float32"), Tensor([112, 12, 0, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float16"), Tensor([112, 12, 197, 0],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float32"), Tensor([112, 12, 197, 0],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([0, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 0, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 12, 0, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 12, 197, 0],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([0, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 0, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 197, 0],"float32"), )
paddle.Tensor.matmul(Tensor([2, 0, 100],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([2, 0, 100],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([2, 1, 0],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([2, 1, 0],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([2, 1, 100],"complex128"), Tensor([0],"complex128"), )
paddle.Tensor.matmul(Tensor([2, 1, 100],"complex64"), Tensor([0],"complex64"), )
paddle.Tensor.matmul(Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 1, 12, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 192],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 32],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 32],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 50, 50],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 512, 4, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 64],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1],"float16"), )
paddle.Tensor.mean(Tensor([0, 1],"float32"), )
paddle.Tensor.mean(Tensor([0, 100, 2],"float32"), 1, )
paddle.Tensor.mean(Tensor([0, 100, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 100, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1000],"float32"), axis=-1, )
paddle.Tensor.mean(Tensor([0, 1024, 12, 12],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([0, 1024, 7, 7],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([0, 12, 8, 14],"float32"), )
paddle.Tensor.mean(Tensor([0, 12544],"float32"), 1, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float16"), -1, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float16"), -2, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float32"), -1, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float32"), -2, )
paddle.Tensor.mean(Tensor([0, 128, 56, 56],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 128, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 160, 160],"float32"), axis=tuple(1,2,), )
paddle.Tensor.mean(Tensor([0, 192, 11],"float32"), 1, )
paddle.Tensor.mean(Tensor([0, 192, 128, 128],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([0, 192, 136, 136],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([0, 2, 2, 2, 2],"float32"), )
paddle.Tensor.mean(Tensor([0, 2, 3, 10, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([0, 2, 3, 4, 10],"float64"), )
paddle.Tensor.mean(Tensor([0, 2, 3],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([0, 2, 3],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([0, 256, 7],"float32"), -1, )
paddle.Tensor.mean(Tensor([0, 3, 100, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 3, 100, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 300, 4096],"float32"), tuple(0,1,), keepdim=True, )
paddle.Tensor.mean(Tensor([0, 4, 2, 4, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([0, 4],"complex128"), axis=0, )
paddle.Tensor.mean(Tensor([0, 4],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 4],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 49, 512],"float16"), axis=1, )
paddle.Tensor.mean(Tensor([0, 49, 512],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([0, 5],"float64"), axis=-1, )
paddle.Tensor.mean(Tensor([0, 768],"float32"), 0, )
paddle.Tensor.mean(Tensor([0, 784],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([0, 8, 151936],"float32"), -1, )
paddle.Tensor.mean(Tensor([0],"float32"), )
paddle.Tensor.mean(Tensor([0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([0],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([1, 0, 1, 12, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 11],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 0, 128, 128],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 136, 136],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 151936],"float32"), -1, )
paddle.Tensor.mean(Tensor([1, 0, 192],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 2, 2, 2],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 2],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 0, 32],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 32],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 4096],"float32"), tuple(0,1,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 50, 50],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 64],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 8, 14],"float32"), )
paddle.Tensor.mean(Tensor([1, 0],"float16"), )
paddle.Tensor.mean(Tensor([1, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 1, 0, 12, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 0, 50],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 1, 1, 0, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 1, 12, 0, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 1, 12, 1, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 50, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 100, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 100, 0],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 12, 0, 14],"float32"), )
paddle.Tensor.mean(Tensor([1, 12, 8, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 192, 0, 128],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 192, 0, 136],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 192, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 192, 128, 0],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 192, 136, 0],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 2, 0, 2, 2],"float32"), )
paddle.Tensor.mean(Tensor([1, 2, 2, 0, 2],"float32"), )
paddle.Tensor.mean(Tensor([1, 2, 2, 2, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 300, 0],"float32"), tuple(0,1,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 8, 0],"float32"), -1, )
paddle.Tensor.mean(Tensor([10, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([100, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([100, 0],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1000, 0],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 0, 3],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 0, 3],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 2, 0],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 2, 0],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([100000, 0],"complex128"), axis=0, )
paddle.Tensor.mean(Tensor([11, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 0, 12, 12],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 0, 56, 56],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 0, 7, 7],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 0, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 1024, 0, 12],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 1024, 0, 7],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 1024, 12, 0],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 1024, 7, 0],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 128, 0, 56],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 0, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 56, 0],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 96, 0],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 0, 512],"float16"), axis=1, )
paddle.Tensor.mean(Tensor([128, 0, 512],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([128, 0],"float32"), axis=-1, )
paddle.Tensor.mean(Tensor([128, 49, 0],"float16"), axis=1, )
paddle.Tensor.mean(Tensor([128, 49, 0],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([13, 0, 160],"float32"), axis=tuple(1,2,), )
paddle.Tensor.mean(Tensor([13, 0, 2, 4, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([13, 160, 0],"float32"), axis=tuple(1,2,), )
paddle.Tensor.mean(Tensor([13, 4, 0, 4, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([13, 4, 2, 0, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([13, 4, 2, 4, 0],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([18, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 0, 100, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 0, 100, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 0, 512, 4, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 1, 0, 4, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 1, 512, 0, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 1, 512, 4, 0],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 3, 0, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 3, 0, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 3, 100, 0],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([3, 0, 3, 10, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 0, 3, 4, 10],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 0, 10, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 0, 4, 10],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 0, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 0, 10],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 10, 0, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 10, 10, 0, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 10, 10, 12, 0],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 4, 0],"float64"), )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float16"), -1, )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float16"), -2, )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float32"), -1, )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float32"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float16"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float16"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float32"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float32"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float16"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float16"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float32"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float32"), -2, )
paddle.Tensor.mean(Tensor([5, 0],"float64"), axis=-1, )
paddle.Tensor.mean(Tensor([512, 0, 7],"float32"), -1, )
paddle.Tensor.mean(Tensor([512, 256, 0],"float32"), -1, )
paddle.Tensor.mean(Tensor([80, 0],"float32"), 0, )
paddle.Tensor.median(Tensor([0, 784],"float32"), )
paddle.Tensor.median(Tensor([1000, 0],"float32"), )
paddle.Tensor.mm(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.Tensor.mm(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mm(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.mm(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), axis=2, keepdim=True, )
paddle.Tensor.moveaxis(Tensor([0, 2],"complex64"), 0, 1, )
paddle.Tensor.moveaxis(Tensor([0, 3, 5],"float64"), -2, -1, )
paddle.Tensor.moveaxis(Tensor([2, 0, 5],"float64"), -2, -1, )
paddle.Tensor.moveaxis(Tensor([2, 3, 0],"float64"), -2, -1, )
paddle.Tensor.moveaxis(Tensor([3, 0],"complex64"), 0, 1, )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([0, 2],"complex128"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([0, 2],"complex64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 0],"complex128"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 0],"complex64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 0, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 0, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 0],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 0],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 0],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.multigammaln(Tensor([0],"float32"), 3, )
paddle.Tensor.nansum(Tensor([0, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float32"), )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 0, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 2, 0, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 0, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 0, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 0],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float32"), )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), axis=-1, )
paddle.Tensor.outer(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.outer(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.outer(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.quantile(Tensor([0, 3, 3],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([0, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([0, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([0, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 0, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 0, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 0, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 0, 3],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([3, 3, 0],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([3, 6, 0, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 0, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 0, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 0, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 0, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 0, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 0, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 0, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 0, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 0],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 0],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 0],"float64"), q=0.75, axis=5, )
paddle.Tensor.remainder(Tensor([0, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([0, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 0, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0],"float32"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([0],"float64"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"int32"), repeats=2, axis=3, )
paddle.Tensor.rot90(Tensor([0, 2],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(Tensor([3, 0],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(x=Tensor([0, 2],"float64"), k=-4, )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float32"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), k=4, )
paddle.Tensor.rot90(x=Tensor([2, 0],"float64"), k=-4, )
paddle.Tensor.rot90(x=Tensor([3, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float32"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([4, 0],"float64"), k=4, )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.signbit(Tensor([0, 20, 2],"float32"), )
paddle.Tensor.signbit(Tensor([0, 20, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 0, 2],"float32"), )
paddle.Tensor.signbit(Tensor([12, 0, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 20, 0],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 0],"float64"), )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 1, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 12544],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 20],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 37632],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 8],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([0, 1, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1, 1],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 10, 8],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1, 12, 9],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1, 1792],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1, 21504, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 24276, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 32, 32],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([0, 1, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 64],"float16"), )
paddle.Tensor.squeeze(Tensor([0, 1, 64],"float32"), )
paddle.Tensor.squeeze(Tensor([0, 1, 96, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1],"int64"), axis=1, )
paddle.Tensor.squeeze(Tensor([0, 10, 1, 256],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([0, 10, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 10, 64, 64, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 100, 4],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1000, 1, 1],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 1000, 1, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 108],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 108],"int32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 120, 1, 40],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([0, 120, 1, 40],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([0, 17, 128, 128],"float16"), )
paddle.Tensor.squeeze(Tensor([0, 17, 128, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([0, 2, 32, 32, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([0, 2, 64, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 20, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 20],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 2048, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 300, 1, 12544],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([0, 4, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 512, 1, 40],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([0, 512, 1, 40],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 7, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 7, 126, 1, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([0, 7],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 12544],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 12544],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 20],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 256],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 37632],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 8],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([1, 0, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([1, 0, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 0, 10, 8],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 12, 9],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 128, 128],"float16"), )
paddle.Tensor.squeeze(Tensor([1, 0, 128, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 0, 1792],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 21504, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 0, 24276, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 0, 32, 32, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 4],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([1, 0],"int32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 0],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 12544],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 20],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 37632],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 8],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 8],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 9],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 0],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 1, 1, 0],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 1, 0],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 1, 0],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([1, 1, 10, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 12, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 21504, 0],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 1, 24276, 0],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 10, 0, 256],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 10, 0],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 10, 1, 0],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 100, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 17, 0, 128],"float16"), )
paddle.Tensor.squeeze(Tensor([1, 17, 0, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 17, 128, 0],"float16"), )
paddle.Tensor.squeeze(Tensor([1, 17, 128, 0],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 2, 0, 32, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 2, 32, 0, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 2, 32, 32, 0],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 20, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([1, 2048, 0],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([1, 300, 0, 12544],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([1, 300, 1, 0],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([11, 0, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([11, 1, 0],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([128, 0, 1, 40],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 0, 1, 40],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 0, 40],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 0, 40],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 1, 0],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 1, 0],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([12988, 0, 64],"float16"), )
paddle.Tensor.squeeze(Tensor([12988, 0, 64],"float32"), )
paddle.Tensor.squeeze(Tensor([12988, 1, 0],"float16"), )
paddle.Tensor.squeeze(Tensor([12988, 1, 0],"float32"), )
paddle.Tensor.squeeze(Tensor([13, 0, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([13, 0, 64, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 0, 96, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([13, 1, 0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 1, 96, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 2, 0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 2, 64, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 7, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([16, 0, 64, 64, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 0, 64, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 64, 0, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 64, 64, 0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 64, 64, 2, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([2, 0, 1, 1, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 0, 1],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([2, 0, 32, 32],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.squeeze(Tensor([2, 1, 0, 1, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 1, 0, 32],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([2, 1, 0],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([2, 1, 1, 0, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 1, 1, 1, 0],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 1, 32, 0],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([3, 0, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([3, 0, 126, 1, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3, 4, 0],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([3, 7, 0, 1, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3, 7, 126, 0, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3, 7, 126, 1, 0],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 1],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 40],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 40],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([64, 1000, 0, 1],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 1000, 0, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 1000, 1, 0],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 1000, 1, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 512, 0, 40],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([64, 512, 0, 40],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([64, 512, 1, 0],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([64, 512, 1, 0],"float32"), 2, )
paddle.Tensor.std(Tensor([0, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1024, 8],"float32"), )
paddle.Tensor.std(Tensor([0, 1024, 8],"float64"), )
paddle.Tensor.std(Tensor([1, 0, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 0, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1024, 0, 8],"float32"), )
paddle.Tensor.std(Tensor([1024, 0, 8],"float64"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float32"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float64"), )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"bool"), )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 1, )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 2, )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 3, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 3, )
paddle.Tensor.sum(Tensor([0, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 13, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 13, 27216],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 17, 17],"float64"), )
paddle.Tensor.sum(Tensor([0, 1, 2, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 1, 2, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 1, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 1, 24276],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 27216],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 1],"bool"), )
paddle.Tensor.sum(Tensor([0, 1],"float32"), )
paddle.Tensor.sum(Tensor([0, 1],"float32"), 0, )
paddle.Tensor.sum(Tensor([0, 1],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([0, 10, 20],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 10, 25],"float32"), 2, )
paddle.Tensor.sum(Tensor([0, 10, 4, 3364],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 10, 58, 58, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([0, 10, 64, 64, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 10],"float32"), 0, )
paddle.Tensor.sum(Tensor([0, 10],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0, 10],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([0, 105840],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 107136],"float32"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 107136],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 11, 2, 64, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0, 12],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 123904],"float32"), 1, )
paddle.Tensor.sum(Tensor([0, 12544],"float32"), 1, )
paddle.Tensor.sum(Tensor([0, 12544],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 128, 128, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([0, 128, 256, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([0, 128, 8, 4, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([0, 128],"float16"), axis=0, )
paddle.Tensor.sum(Tensor([0, 128],"float32"), axis=0, )
paddle.Tensor.sum(Tensor([0, 138120],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 157920],"bool"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 2, 1, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([0, 2, 1, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 2, 1, 3, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([0, 2, 1],"float32"), -2, )
paddle.Tensor.sum(Tensor([0, 2, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 2, 2, 3],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([0, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 2, 2],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([0, 2, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 2, 2],"float64"), -1, )
paddle.Tensor.sum(Tensor([0, 2, 3],"float32"), )
paddle.Tensor.sum(Tensor([0, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 2, 4, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 2],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 2],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([0, 2],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([0, 2],"float64"), list[-1,], )
paddle.Tensor.sum(Tensor([0, 20],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 21504, 10],"float32"), )
paddle.Tensor.sum(Tensor([0, 22400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 28, 28],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 280, 350],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 1, 4, 1],"float32"), )
paddle.Tensor.sum(Tensor([0, 3, 10, 10, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([0, 3, 10, 10, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([0, 3, 3, 3],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([0, 3, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 3],"float64"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([0, 3, 4, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([0, 3, 4],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([0, 3, 8, 8],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 3],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 4, 4, 4, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([0, 4, 5],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([0, 4],"float64"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 40],"float64"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 500, 4],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([0, 500, 8],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([0, 5000, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 6, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 6, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 6, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 65536, 25, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 65536, 25],"float32"), 2, )
paddle.Tensor.sum(Tensor([0, 7, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 7, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 8, 7, 7],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0],"float32"), )
paddle.Tensor.sum(Tensor([0],"float32"), -1, )
paddle.Tensor.sum(Tensor([0],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([0],"float64"), )
paddle.Tensor.sum(Tensor([0],"float64"), 0, )
paddle.Tensor.sum(Tensor([0],"float64"), -1, )
paddle.Tensor.sum(Tensor([0],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"bool"), )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 0, 1, 3, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 0, 1],"float32"), -2, )
paddle.Tensor.sum(Tensor([1, 0, 10],"float32"), )
paddle.Tensor.sum(Tensor([1, 0, 10285],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 128, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 0, 13, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 13, 27216],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 17, 17],"float64"), )
paddle.Tensor.sum(Tensor([1, 0, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 2],"float64"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 24276],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 0, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 25, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 256, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 0, 27216],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 0, 3],"float32"), )
paddle.Tensor.sum(Tensor([1, 0, 4, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 0],"bool"), )
paddle.Tensor.sum(Tensor([1, 0],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([1, 0],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([1, 0],"float64"), list[-1,], )
paddle.Tensor.sum(Tensor([1, 0],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"bool"), )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 1, 0, 17],"float64"), )
paddle.Tensor.sum(Tensor([1, 1, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 1, 0, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 27216],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 1, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 1, 0],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"bool"), )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 1, 13, 0],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 17, 0],"float64"), )
paddle.Tensor.sum(Tensor([1, 1, 2, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 128, 0, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 128, 0, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 128, 3, 0],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 256, 0, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 256, 3, 0],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 2, 0, 3, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 2, 0],"float32"), -2, )
paddle.Tensor.sum(Tensor([1, 2, 0],"float64"), -1, )
paddle.Tensor.sum(Tensor([1, 2, 1, 0, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 1, 3, 0, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 1, 3, 1, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 21504, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 0, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 4, 0, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 4, 4, 0, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 4, 4, 1, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 65536, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 65536, 25, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([10, 0, 1, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 0, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 0, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([10, 0, 4],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([10, 0, 8],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([10, 0],"float32"), 0, )
paddle.Tensor.sum(Tensor([10, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.sum(Tensor([10, 0],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 0],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([10, 0],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 0, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 0],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([10, 2, 1, 0],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 500, 0],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([10, 5000, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([100, 0],"float64"), axis=-2, )
paddle.Tensor.sum(Tensor([1000, 0, 2, 3],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 0, 2],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 2, 0, 3],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 2, 0],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 2, 2, 0],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([12, 0, 10, 10, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 0, 10, 10, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 0],"float16"), axis=0, )
paddle.Tensor.sum(Tensor([12, 0],"float32"), axis=0, )
paddle.Tensor.sum(Tensor([12, 3, 0, 10, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 0, 10, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 10, 0, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 10, 0, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 10, 10, 0],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([126, 0, 7, 7],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([126, 8, 0, 7],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([126, 8, 7, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([128, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([128, 2, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([14, 0, 4, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 0, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 4, 0, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 4, 2, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([16, 0, 2, 64, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 0, 25],"float32"), 2, )
paddle.Tensor.sum(Tensor([16, 0, 4, 3364],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([16, 0, 58, 58, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 0, 64, 64, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 10, 0, 3364],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([16, 10, 0, 58, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 10, 0, 64, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 10, 0],"float32"), 2, )
paddle.Tensor.sum(Tensor([16, 10, 4, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([16, 10, 58, 0, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 10, 58, 58, 0],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 10, 64, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 10, 64, 64, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 11, 0, 64, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 11, 2, 0, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 11, 2, 64, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 65536, 0],"float32"), 2, )
paddle.Tensor.sum(Tensor([2, 0, 1, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 0, 1, 4, 1],"float32"), )
paddle.Tensor.sum(Tensor([2, 0, 2, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 0, 3],"float64"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 0, 4],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0, 8, 8],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 1, 0, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 1, 2, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 1, 2, 1, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 2, 0, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 0, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 0, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 0, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 0, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 2, 0, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 2, 3, 0],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 3, 0, 4, 1],"float32"), )
paddle.Tensor.sum(Tensor([2, 3, 0, 8],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 3, 0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 3, 0],"float64"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 3, 1, 0, 1],"float32"), )
paddle.Tensor.sum(Tensor([2, 3, 1, 4, 0],"float32"), )
paddle.Tensor.sum(Tensor([2, 3, 8, 0],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 2, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 0, 2, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 0, 28],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3, 3],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([3, 0, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 350],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 5],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([3, 1, 0, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 2, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 2, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 2, 1, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 28, 0],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 280, 0],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 3, 0, 3],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([3, 3, 0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 3, 3, 0],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([3, 4, 0],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([3, 6, 0, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 0, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 0, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 0, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 0, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 0, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 0, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 0, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 0, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 0],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 0],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 0],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([4, 0, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0],"bool"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0],"float32"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 3, 0],"float64"), 1, )
paddle.Tensor.sum(Tensor([4, 7, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 7, 0],"bool"), axis=2, keepdim=True, )
paddle.Tensor.sum(Tensor([5, 0, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([5, 3, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([80, 0, 4, 4, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 0, 8, 4, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 0, 4, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 0, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 4, 0, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 4, 4, 0, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 4, 4, 4, 0],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 0, 4, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 0, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 4, 0, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 4, 4, 0, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 4, 4, 4, 0],"float32"), )
paddle.Tensor.sum(Tensor([9, 0, 20],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([9, 10, 0],"float64"), list[0,-1,], )
paddle.Tensor.take_along_axis(Tensor([0, 1000],"float32"), indices=Tensor([0, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([0, 1000],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([0, 1000],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 0],"float32"), indices=Tensor([128, 0],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 0],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([0, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 0],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 0],"float32"), indices=Tensor([80, 0],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 0],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([0, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 0],"int32"), axis=-1, )
paddle.Tensor.topk(Tensor([0, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.topk(Tensor([0],"float32"), 100083, )
paddle.Tensor.topk(Tensor([0],"float32"), 10173, )
paddle.Tensor.topk(Tensor([0],"float32"), 101931, )
paddle.Tensor.topk(Tensor([0],"float32"), 101946, )
paddle.Tensor.topk(Tensor([0],"float32"), 102327, )
paddle.Tensor.topk(Tensor([0],"float32"), 102396, )
paddle.Tensor.topk(Tensor([0],"float32"), 104598, )
paddle.Tensor.topk(Tensor([0],"float32"), 104646, )
paddle.Tensor.topk(Tensor([0],"float32"), 104883, )
paddle.Tensor.topk(Tensor([0],"float32"), 105876, )
paddle.Tensor.topk(Tensor([0],"float32"), 107739, )
paddle.Tensor.topk(Tensor([0],"float32"), 108291, )
paddle.Tensor.topk(Tensor([0],"float32"), 108540, )
paddle.Tensor.topk(Tensor([0],"float32"), 110289, )
paddle.Tensor.topk(Tensor([0],"float32"), 110832, )
paddle.Tensor.topk(Tensor([0],"float32"), 111645, )
paddle.Tensor.topk(Tensor([0],"float32"), 112293, )
paddle.Tensor.topk(Tensor([0],"float32"), 113463, )
paddle.Tensor.topk(Tensor([0],"float32"), 113676, )
paddle.Tensor.topk(Tensor([0],"float32"), 113790, )
paddle.Tensor.topk(Tensor([0],"float32"), 114213, )
paddle.Tensor.topk(Tensor([0],"float32"), 114261, )
paddle.Tensor.topk(Tensor([0],"float32"), 114330, )
paddle.Tensor.topk(Tensor([0],"float32"), 114561, )
paddle.Tensor.topk(Tensor([0],"float32"), 114750, )
paddle.Tensor.topk(Tensor([0],"float32"), 115383, )
paddle.Tensor.topk(Tensor([0],"float32"), 115494, )
paddle.Tensor.topk(Tensor([0],"float32"), 115920, )
paddle.Tensor.topk(Tensor([0],"float32"), 116010, )
paddle.Tensor.topk(Tensor([0],"float32"), 116085, )
paddle.Tensor.topk(Tensor([0],"float32"), 120090, )
paddle.Tensor.topk(Tensor([0],"float32"), 120693, )
paddle.Tensor.topk(Tensor([0],"float32"), 120765, )
paddle.Tensor.topk(Tensor([0],"float32"), 121008, )
paddle.Tensor.topk(Tensor([0],"float32"), 121383, )
paddle.Tensor.topk(Tensor([0],"float32"), 121500, )
paddle.Tensor.topk(Tensor([0],"float32"), 121539, )
paddle.Tensor.topk(Tensor([0],"float32"), 121758, )
paddle.Tensor.topk(Tensor([0],"float32"), 122073, )
paddle.Tensor.topk(Tensor([0],"float32"), 122982, )
paddle.Tensor.topk(Tensor([0],"float32"), 123516, )
paddle.Tensor.topk(Tensor([0],"float32"), 124155, )
paddle.Tensor.topk(Tensor([0],"float32"), 124257, )
paddle.Tensor.topk(Tensor([0],"float32"), 129726, )
paddle.Tensor.topk(Tensor([0],"float32"), 131643, )
paddle.Tensor.topk(Tensor([0],"float32"), 131952, )
paddle.Tensor.topk(Tensor([0],"float32"), 131961, )
paddle.Tensor.topk(Tensor([0],"float32"), 132105, )
paddle.Tensor.topk(Tensor([0],"float32"), 132522, )
paddle.Tensor.topk(Tensor([0],"float32"), 134115, )
paddle.Tensor.topk(Tensor([0],"float32"), 136164, )
paddle.Tensor.topk(Tensor([0],"float32"), 137484, )
paddle.Tensor.topk(Tensor([0],"float32"), 138210, )
paddle.Tensor.topk(Tensor([0],"float32"), 138852, )
paddle.Tensor.topk(Tensor([0],"float32"), 145707, )
paddle.Tensor.topk(Tensor([0],"float32"), 146148, )
paddle.Tensor.topk(Tensor([0],"float32"), 147111, )
paddle.Tensor.topk(Tensor([0],"float32"), 147315, )
paddle.Tensor.topk(Tensor([0],"float32"), 150507, )
paddle.Tensor.topk(Tensor([0],"float32"), 150945, )
paddle.Tensor.topk(Tensor([0],"float32"), 151971, )
paddle.Tensor.topk(Tensor([0],"float32"), 158844, )
paddle.Tensor.topk(Tensor([0],"float32"), 160434, )
paddle.Tensor.topk(Tensor([0],"float32"), 16623, )
paddle.Tensor.topk(Tensor([0],"float32"), 16704, )
paddle.Tensor.topk(Tensor([0],"float32"), 173505, )
paddle.Tensor.topk(Tensor([0],"float32"), 17520, )
paddle.Tensor.topk(Tensor([0],"float32"), 17526, )
paddle.Tensor.topk(Tensor([0],"float32"), 175965, )
paddle.Tensor.topk(Tensor([0],"float32"), 17598, )
paddle.Tensor.topk(Tensor([0],"float32"), 17601, )
paddle.Tensor.topk(Tensor([0],"float32"), 176061, )
paddle.Tensor.topk(Tensor([0],"float32"), 178701, )
paddle.Tensor.topk(Tensor([0],"float32"), 17988, )
paddle.Tensor.topk(Tensor([0],"float32"), 18054, )
paddle.Tensor.topk(Tensor([0],"float32"), 18081, )
paddle.Tensor.topk(Tensor([0],"float32"), 182052, )
paddle.Tensor.topk(Tensor([0],"float32"), 18795, )
paddle.Tensor.topk(Tensor([0],"float32"), 18969, )
paddle.Tensor.topk(Tensor([0],"float32"), 192987, )
paddle.Tensor.topk(Tensor([0],"float32"), 19461, )
paddle.Tensor.topk(Tensor([0],"float32"), 195024, )
paddle.Tensor.topk(Tensor([0],"float32"), 206889, )
paddle.Tensor.topk(Tensor([0],"float32"), 20913, )
paddle.Tensor.topk(Tensor([0],"float32"), 21504, )
paddle.Tensor.topk(Tensor([0],"float32"), 21621, )
paddle.Tensor.topk(Tensor([0],"float32"), 21639, )
paddle.Tensor.topk(Tensor([0],"float32"), 22047, )
paddle.Tensor.topk(Tensor([0],"float32"), 222156, )
paddle.Tensor.topk(Tensor([0],"float32"), 22458, )
paddle.Tensor.topk(Tensor([0],"float32"), 22485, )
paddle.Tensor.topk(Tensor([0],"float32"), 22938, )
paddle.Tensor.topk(Tensor([0],"float32"), 23199, )
paddle.Tensor.topk(Tensor([0],"float32"), 23337, )
paddle.Tensor.topk(Tensor([0],"float32"), 234837, )
paddle.Tensor.topk(Tensor([0],"float32"), 23964, )
paddle.Tensor.topk(Tensor([0],"float32"), 24081, )
paddle.Tensor.topk(Tensor([0],"float32"), 24285, )
paddle.Tensor.topk(Tensor([0],"float32"), 24426, )
paddle.Tensor.topk(Tensor([0],"float32"), 24729, )
paddle.Tensor.topk(Tensor([0],"float32"), 24861, )
paddle.Tensor.topk(Tensor([0],"float32"), 24891, )
paddle.Tensor.topk(Tensor([0],"float32"), 25389, )
paddle.Tensor.topk(Tensor([0],"float32"), 25449, )
paddle.Tensor.topk(Tensor([0],"float32"), 25653, )
paddle.Tensor.topk(Tensor([0],"float32"), 25665, )
paddle.Tensor.topk(Tensor([0],"float32"), 25707, )
paddle.Tensor.topk(Tensor([0],"float32"), 26028, )
paddle.Tensor.topk(Tensor([0],"float32"), 26037, )
paddle.Tensor.topk(Tensor([0],"float32"), 26064, )
paddle.Tensor.topk(Tensor([0],"float32"), 26340, )
paddle.Tensor.topk(Tensor([0],"float32"), 26358, )
paddle.Tensor.topk(Tensor([0],"float32"), 26721, )
paddle.Tensor.topk(Tensor([0],"float32"), 26763, )
paddle.Tensor.topk(Tensor([0],"float32"), 26820, )
paddle.Tensor.topk(Tensor([0],"float32"), 27378, )
paddle.Tensor.topk(Tensor([0],"float32"), 27540, )
paddle.Tensor.topk(Tensor([0],"float32"), 27789, )
paddle.Tensor.topk(Tensor([0],"float32"), 28236, )
paddle.Tensor.topk(Tensor([0],"float32"), 28269, )
paddle.Tensor.topk(Tensor([0],"float32"), 28776, )
paddle.Tensor.topk(Tensor([0],"float32"), 28779, )
paddle.Tensor.topk(Tensor([0],"float32"), 28836, )
paddle.Tensor.topk(Tensor([0],"float32"), 28848, )
paddle.Tensor.topk(Tensor([0],"float32"), 29025, )
paddle.Tensor.topk(Tensor([0],"float32"), 29103, )
paddle.Tensor.topk(Tensor([0],"float32"), 29124, )
paddle.Tensor.topk(Tensor([0],"float32"), 29274, )
paddle.Tensor.topk(Tensor([0],"float32"), 29724, )
paddle.Tensor.topk(Tensor([0],"float32"), 29847, )
paddle.Tensor.topk(Tensor([0],"float32"), 29865, )
paddle.Tensor.topk(Tensor([0],"float32"), 30033, )
paddle.Tensor.topk(Tensor([0],"float32"), 30063, )
paddle.Tensor.topk(Tensor([0],"float32"), 30096, )
paddle.Tensor.topk(Tensor([0],"float32"), 30141, )
paddle.Tensor.topk(Tensor([0],"float32"), 30144, )
paddle.Tensor.topk(Tensor([0],"float32"), 30231, )
paddle.Tensor.topk(Tensor([0],"float32"), 30297, )
paddle.Tensor.topk(Tensor([0],"float32"), 30339, )
paddle.Tensor.topk(Tensor([0],"float32"), 30528, )
paddle.Tensor.topk(Tensor([0],"float32"), 30624, )
paddle.Tensor.topk(Tensor([0],"float32"), 30690, )
paddle.Tensor.topk(Tensor([0],"float32"), 30852, )
paddle.Tensor.topk(Tensor([0],"float32"), 30912, )
paddle.Tensor.topk(Tensor([0],"float32"), 30981, )
paddle.Tensor.topk(Tensor([0],"float32"), 31110, )
paddle.Tensor.topk(Tensor([0],"float32"), 31170, )
paddle.Tensor.topk(Tensor([0],"float32"), 31368, )
paddle.Tensor.topk(Tensor([0],"float32"), 31698, )
paddle.Tensor.topk(Tensor([0],"float32"), 31800, )
paddle.Tensor.topk(Tensor([0],"float32"), 32778, )
paddle.Tensor.topk(Tensor([0],"float32"), 32892, )
paddle.Tensor.topk(Tensor([0],"float32"), 32937, )
paddle.Tensor.topk(Tensor([0],"float32"), 33039, )
paddle.Tensor.topk(Tensor([0],"float32"), 33102, )
paddle.Tensor.topk(Tensor([0],"float32"), 33111, )
paddle.Tensor.topk(Tensor([0],"float32"), 33132, )
paddle.Tensor.topk(Tensor([0],"float32"), 33333, )
paddle.Tensor.topk(Tensor([0],"float32"), 33336, )
paddle.Tensor.topk(Tensor([0],"float32"), 33636, )
paddle.Tensor.topk(Tensor([0],"float32"), 33642, )
paddle.Tensor.topk(Tensor([0],"float32"), 33762, )
paddle.Tensor.topk(Tensor([0],"float32"), 33873, )
paddle.Tensor.topk(Tensor([0],"float32"), 33909, )
paddle.Tensor.topk(Tensor([0],"float32"), 33984, )
paddle.Tensor.topk(Tensor([0],"float32"), 34158, )
paddle.Tensor.topk(Tensor([0],"float32"), 34533, )
paddle.Tensor.topk(Tensor([0],"float32"), 35178, )
paddle.Tensor.topk(Tensor([0],"float32"), 35379, )
paddle.Tensor.topk(Tensor([0],"float32"), 35391, )
paddle.Tensor.topk(Tensor([0],"float32"), 35412, )
paddle.Tensor.topk(Tensor([0],"float32"), 35559, )
paddle.Tensor.topk(Tensor([0],"float32"), 35565, )
paddle.Tensor.topk(Tensor([0],"float32"), 35616, )
paddle.Tensor.topk(Tensor([0],"float32"), 35811, )
paddle.Tensor.topk(Tensor([0],"float32"), 36585, )
paddle.Tensor.topk(Tensor([0],"float32"), 36780, )
paddle.Tensor.topk(Tensor([0],"float32"), 36963, )
paddle.Tensor.topk(Tensor([0],"float32"), 37524, )
paddle.Tensor.topk(Tensor([0],"float32"), 37749, )
paddle.Tensor.topk(Tensor([0],"float32"), 37920, )
paddle.Tensor.topk(Tensor([0],"float32"), 37986, )
paddle.Tensor.topk(Tensor([0],"float32"), 37998, )
paddle.Tensor.topk(Tensor([0],"float32"), 38208, )
paddle.Tensor.topk(Tensor([0],"float32"), 38250, )
paddle.Tensor.topk(Tensor([0],"float32"), 38253, )
paddle.Tensor.topk(Tensor([0],"float32"), 38301, )
paddle.Tensor.topk(Tensor([0],"float32"), 38430, )
paddle.Tensor.topk(Tensor([0],"float32"), 38682, )
paddle.Tensor.topk(Tensor([0],"float32"), 38772, )
paddle.Tensor.topk(Tensor([0],"float32"), 38958, )
paddle.Tensor.topk(Tensor([0],"float32"), 39411, )
paddle.Tensor.topk(Tensor([0],"float32"), 39684, )
paddle.Tensor.topk(Tensor([0],"float32"), 39831, )
paddle.Tensor.topk(Tensor([0],"float32"), 39897, )
paddle.Tensor.topk(Tensor([0],"float32"), 39918, )
paddle.Tensor.topk(Tensor([0],"float32"), 39921, )
paddle.Tensor.topk(Tensor([0],"float32"), 40053, )
paddle.Tensor.topk(Tensor([0],"float32"), 40095, )
paddle.Tensor.topk(Tensor([0],"float32"), 40149, )
paddle.Tensor.topk(Tensor([0],"float32"), 40275, )
paddle.Tensor.topk(Tensor([0],"float32"), 40650, )
paddle.Tensor.topk(Tensor([0],"float32"), 40686, )
paddle.Tensor.topk(Tensor([0],"float32"), 40767, )
paddle.Tensor.topk(Tensor([0],"float32"), 41334, )
paddle.Tensor.topk(Tensor([0],"float32"), 41421, )
paddle.Tensor.topk(Tensor([0],"float32"), 41532, )
paddle.Tensor.topk(Tensor([0],"float32"), 41553, )
paddle.Tensor.topk(Tensor([0],"float32"), 42129, )
paddle.Tensor.topk(Tensor([0],"float32"), 42345, )
paddle.Tensor.topk(Tensor([0],"float32"), 42774, )
paddle.Tensor.topk(Tensor([0],"float32"), 43290, )
paddle.Tensor.topk(Tensor([0],"float32"), 43299, )
paddle.Tensor.topk(Tensor([0],"float32"), 43455, )
paddle.Tensor.topk(Tensor([0],"float32"), 43542, )
paddle.Tensor.topk(Tensor([0],"float32"), 43629, )
paddle.Tensor.topk(Tensor([0],"float32"), 43770, )
paddle.Tensor.topk(Tensor([0],"float32"), 43803, )
paddle.Tensor.topk(Tensor([0],"float32"), 43809, )
paddle.Tensor.topk(Tensor([0],"float32"), 43920, )
paddle.Tensor.topk(Tensor([0],"float32"), 43950, )
paddle.Tensor.topk(Tensor([0],"float32"), 43986, )
paddle.Tensor.topk(Tensor([0],"float32"), 44064, )
paddle.Tensor.topk(Tensor([0],"float32"), 44106, )
paddle.Tensor.topk(Tensor([0],"float32"), 44193, )
paddle.Tensor.topk(Tensor([0],"float32"), 44355, )
paddle.Tensor.topk(Tensor([0],"float32"), 44373, )
paddle.Tensor.topk(Tensor([0],"float32"), 44409, )
paddle.Tensor.topk(Tensor([0],"float32"), 44598, )
paddle.Tensor.topk(Tensor([0],"float32"), 44754, )
paddle.Tensor.topk(Tensor([0],"float32"), 44793, )
paddle.Tensor.topk(Tensor([0],"float32"), 45291, )
paddle.Tensor.topk(Tensor([0],"float32"), 45354, )
paddle.Tensor.topk(Tensor([0],"float32"), 45390, )
paddle.Tensor.topk(Tensor([0],"float32"), 45423, )
paddle.Tensor.topk(Tensor([0],"float32"), 45564, )
paddle.Tensor.topk(Tensor([0],"float32"), 46104, )
paddle.Tensor.topk(Tensor([0],"float32"), 46344, )
paddle.Tensor.topk(Tensor([0],"float32"), 46404, )
paddle.Tensor.topk(Tensor([0],"float32"), 46431, )
paddle.Tensor.topk(Tensor([0],"float32"), 46722, )
paddle.Tensor.topk(Tensor([0],"float32"), 46812, )
paddle.Tensor.topk(Tensor([0],"float32"), 46848, )
paddle.Tensor.topk(Tensor([0],"float32"), 46929, )
paddle.Tensor.topk(Tensor([0],"float32"), 46959, )
paddle.Tensor.topk(Tensor([0],"float32"), 47199, )
paddle.Tensor.topk(Tensor([0],"float32"), 47625, )
paddle.Tensor.topk(Tensor([0],"float32"), 47640, )
paddle.Tensor.topk(Tensor([0],"float32"), 47715, )
paddle.Tensor.topk(Tensor([0],"float32"), 47904, )
paddle.Tensor.topk(Tensor([0],"float32"), 48150, )
paddle.Tensor.topk(Tensor([0],"float32"), 48177, )
paddle.Tensor.topk(Tensor([0],"float32"), 48282, )
paddle.Tensor.topk(Tensor([0],"float32"), 48336, )
paddle.Tensor.topk(Tensor([0],"float32"), 48465, )
paddle.Tensor.topk(Tensor([0],"float32"), 48504, )
paddle.Tensor.topk(Tensor([0],"float32"), 48636, )
paddle.Tensor.topk(Tensor([0],"float32"), 48759, )
paddle.Tensor.topk(Tensor([0],"float32"), 48978, )
paddle.Tensor.topk(Tensor([0],"float32"), 49089, )
paddle.Tensor.topk(Tensor([0],"float32"), 49614, )
paddle.Tensor.topk(Tensor([0],"float32"), 49929, )
paddle.Tensor.topk(Tensor([0],"float32"), 49986, )
paddle.Tensor.topk(Tensor([0],"float32"), 50169, )
paddle.Tensor.topk(Tensor([0],"float32"), 50184, )
paddle.Tensor.topk(Tensor([0],"float32"), 50247, )
paddle.Tensor.topk(Tensor([0],"float32"), 50400, )
paddle.Tensor.topk(Tensor([0],"float32"), 50424, )
paddle.Tensor.topk(Tensor([0],"float32"), 50604, )
paddle.Tensor.topk(Tensor([0],"float32"), 50712, )
paddle.Tensor.topk(Tensor([0],"float32"), 51051, )
paddle.Tensor.topk(Tensor([0],"float32"), 51150, )
paddle.Tensor.topk(Tensor([0],"float32"), 51171, )
paddle.Tensor.topk(Tensor([0],"float32"), 51213, )
paddle.Tensor.topk(Tensor([0],"float32"), 51357, )
paddle.Tensor.topk(Tensor([0],"float32"), 51444, )
paddle.Tensor.topk(Tensor([0],"float32"), 51459, )
paddle.Tensor.topk(Tensor([0],"float32"), 51555, )
paddle.Tensor.topk(Tensor([0],"float32"), 51558, )
paddle.Tensor.topk(Tensor([0],"float32"), 51633, )
paddle.Tensor.topk(Tensor([0],"float32"), 51639, )
paddle.Tensor.topk(Tensor([0],"float32"), 51753, )
paddle.Tensor.topk(Tensor([0],"float32"), 51912, )
paddle.Tensor.topk(Tensor([0],"float32"), 52089, )
paddle.Tensor.topk(Tensor([0],"float32"), 52191, )
paddle.Tensor.topk(Tensor([0],"float32"), 52236, )
paddle.Tensor.topk(Tensor([0],"float32"), 52518, )
paddle.Tensor.topk(Tensor([0],"float32"), 52530, )
paddle.Tensor.topk(Tensor([0],"float32"), 52980, )
paddle.Tensor.topk(Tensor([0],"float32"), 53001, )
paddle.Tensor.topk(Tensor([0],"float32"), 53010, )
paddle.Tensor.topk(Tensor([0],"float32"), 53040, )
paddle.Tensor.topk(Tensor([0],"float32"), 53190, )
paddle.Tensor.topk(Tensor([0],"float32"), 53301, )
paddle.Tensor.topk(Tensor([0],"float32"), 53778, )
paddle.Tensor.topk(Tensor([0],"float32"), 53829, )
paddle.Tensor.topk(Tensor([0],"float32"), 53901, )
paddle.Tensor.topk(Tensor([0],"float32"), 54171, )
paddle.Tensor.topk(Tensor([0],"float32"), 54249, )
paddle.Tensor.topk(Tensor([0],"float32"), 54756, )
paddle.Tensor.topk(Tensor([0],"float32"), 54873, )
paddle.Tensor.topk(Tensor([0],"float32"), 54954, )
paddle.Tensor.topk(Tensor([0],"float32"), 54999, )
paddle.Tensor.topk(Tensor([0],"float32"), 55089, )
paddle.Tensor.topk(Tensor([0],"float32"), 55194, )
paddle.Tensor.topk(Tensor([0],"float32"), 55548, )
paddle.Tensor.topk(Tensor([0],"float32"), 55572, )
paddle.Tensor.topk(Tensor([0],"float32"), 55722, )
paddle.Tensor.topk(Tensor([0],"float32"), 55821, )
paddle.Tensor.topk(Tensor([0],"float32"), 55917, )
paddle.Tensor.topk(Tensor([0],"float32"), 55974, )
paddle.Tensor.topk(Tensor([0],"float32"), 56211, )
paddle.Tensor.topk(Tensor([0],"float32"), 56316, )
paddle.Tensor.topk(Tensor([0],"float32"), 56376, )
paddle.Tensor.topk(Tensor([0],"float32"), 56559, )
paddle.Tensor.topk(Tensor([0],"float32"), 56577, )
paddle.Tensor.topk(Tensor([0],"float32"), 56886, )
paddle.Tensor.topk(Tensor([0],"float32"), 56910, )
paddle.Tensor.topk(Tensor([0],"float32"), 56925, )
paddle.Tensor.topk(Tensor([0],"float32"), 57108, )
paddle.Tensor.topk(Tensor([0],"float32"), 57147, )
paddle.Tensor.topk(Tensor([0],"float32"), 57291, )
paddle.Tensor.topk(Tensor([0],"float32"), 57471, )
paddle.Tensor.topk(Tensor([0],"float32"), 57564, )
paddle.Tensor.topk(Tensor([0],"float32"), 57576, )
paddle.Tensor.topk(Tensor([0],"float32"), 57648, )
paddle.Tensor.topk(Tensor([0],"float32"), 57708, )
paddle.Tensor.topk(Tensor([0],"float32"), 58017, )
paddle.Tensor.topk(Tensor([0],"float32"), 58056, )
paddle.Tensor.topk(Tensor([0],"float32"), 58143, )
paddle.Tensor.topk(Tensor([0],"float32"), 58221, )
paddle.Tensor.topk(Tensor([0],"float32"), 58260, )
paddle.Tensor.topk(Tensor([0],"float32"), 58677, )
paddle.Tensor.topk(Tensor([0],"float32"), 59277, )
paddle.Tensor.topk(Tensor([0],"float32"), 59442, )
paddle.Tensor.topk(Tensor([0],"float32"), 59547, )
paddle.Tensor.topk(Tensor([0],"float32"), 59736, )
paddle.Tensor.topk(Tensor([0],"float32"), 59802, )
paddle.Tensor.topk(Tensor([0],"float32"), 59841, )
paddle.Tensor.topk(Tensor([0],"float32"), 59844, )
paddle.Tensor.topk(Tensor([0],"float32"), 59994, )
paddle.Tensor.topk(Tensor([0],"float32"), 60099, )
paddle.Tensor.topk(Tensor([0],"float32"), 60102, )
paddle.Tensor.topk(Tensor([0],"float32"), 60261, )
paddle.Tensor.topk(Tensor([0],"float32"), 60366, )
paddle.Tensor.topk(Tensor([0],"float32"), 60396, )
paddle.Tensor.topk(Tensor([0],"float32"), 60483, )
paddle.Tensor.topk(Tensor([0],"float32"), 60606, )
paddle.Tensor.topk(Tensor([0],"float32"), 60630, )
paddle.Tensor.topk(Tensor([0],"float32"), 60681, )
paddle.Tensor.topk(Tensor([0],"float32"), 60720, )
paddle.Tensor.topk(Tensor([0],"float32"), 60804, )
paddle.Tensor.topk(Tensor([0],"float32"), 60849, )
paddle.Tensor.topk(Tensor([0],"float32"), 60963, )
paddle.Tensor.topk(Tensor([0],"float32"), 61149, )
paddle.Tensor.topk(Tensor([0],"float32"), 61197, )
paddle.Tensor.topk(Tensor([0],"float32"), 61251, )
paddle.Tensor.topk(Tensor([0],"float32"), 61338, )
paddle.Tensor.topk(Tensor([0],"float32"), 61608, )
paddle.Tensor.topk(Tensor([0],"float32"), 61749, )
paddle.Tensor.topk(Tensor([0],"float32"), 61776, )
paddle.Tensor.topk(Tensor([0],"float32"), 61998, )
paddle.Tensor.topk(Tensor([0],"float32"), 62004, )
paddle.Tensor.topk(Tensor([0],"float32"), 62109, )
paddle.Tensor.topk(Tensor([0],"float32"), 62199, )
paddle.Tensor.topk(Tensor([0],"float32"), 62229, )
paddle.Tensor.topk(Tensor([0],"float32"), 62421, )
paddle.Tensor.topk(Tensor([0],"float32"), 62445, )
paddle.Tensor.topk(Tensor([0],"float32"), 62481, )
paddle.Tensor.topk(Tensor([0],"float32"), 62544, )
paddle.Tensor.topk(Tensor([0],"float32"), 62910, )
paddle.Tensor.topk(Tensor([0],"float32"), 62967, )
paddle.Tensor.topk(Tensor([0],"float32"), 63618, )
paddle.Tensor.topk(Tensor([0],"float32"), 63759, )
paddle.Tensor.topk(Tensor([0],"float32"), 63786, )
paddle.Tensor.topk(Tensor([0],"float32"), 63798, )
paddle.Tensor.topk(Tensor([0],"float32"), 63855, )
paddle.Tensor.topk(Tensor([0],"float32"), 64239, )
paddle.Tensor.topk(Tensor([0],"float32"), 64314, )
paddle.Tensor.topk(Tensor([0],"float32"), 64389, )
paddle.Tensor.topk(Tensor([0],"float32"), 64866, )
paddle.Tensor.topk(Tensor([0],"float32"), 65013, )
paddle.Tensor.topk(Tensor([0],"float32"), 65382, )
paddle.Tensor.topk(Tensor([0],"float32"), 65421, )
paddle.Tensor.topk(Tensor([0],"float32"), 65778, )
paddle.Tensor.topk(Tensor([0],"float32"), 65871, )
paddle.Tensor.topk(Tensor([0],"float32"), 66123, )
paddle.Tensor.topk(Tensor([0],"float32"), 66195, )
paddle.Tensor.topk(Tensor([0],"float32"), 66234, )
paddle.Tensor.topk(Tensor([0],"float32"), 66324, )
paddle.Tensor.topk(Tensor([0],"float32"), 66501, )
paddle.Tensor.topk(Tensor([0],"float32"), 67125, )
paddle.Tensor.topk(Tensor([0],"float32"), 67434, )
paddle.Tensor.topk(Tensor([0],"float32"), 67440, )
paddle.Tensor.topk(Tensor([0],"float32"), 67491, )
paddle.Tensor.topk(Tensor([0],"float32"), 67635, )
paddle.Tensor.topk(Tensor([0],"float32"), 67641, )
paddle.Tensor.topk(Tensor([0],"float32"), 67680, )
paddle.Tensor.topk(Tensor([0],"float32"), 68058, )
paddle.Tensor.topk(Tensor([0],"float32"), 68109, )
paddle.Tensor.topk(Tensor([0],"float32"), 68373, )
paddle.Tensor.topk(Tensor([0],"float32"), 68604, )
paddle.Tensor.topk(Tensor([0],"float32"), 68985, )
paddle.Tensor.topk(Tensor([0],"float32"), 69009, )
paddle.Tensor.topk(Tensor([0],"float32"), 69075, )
paddle.Tensor.topk(Tensor([0],"float32"), 69132, )
paddle.Tensor.topk(Tensor([0],"float32"), 69147, )
paddle.Tensor.topk(Tensor([0],"float32"), 69168, )
paddle.Tensor.topk(Tensor([0],"float32"), 69384, )
paddle.Tensor.topk(Tensor([0],"float32"), 69429, )
paddle.Tensor.topk(Tensor([0],"float32"), 69450, )
paddle.Tensor.topk(Tensor([0],"float32"), 69582, )
paddle.Tensor.topk(Tensor([0],"float32"), 69993, )
paddle.Tensor.topk(Tensor([0],"float32"), 70152, )
paddle.Tensor.topk(Tensor([0],"float32"), 70311, )
paddle.Tensor.topk(Tensor([0],"float32"), 70338, )
paddle.Tensor.topk(Tensor([0],"float32"), 70395, )
paddle.Tensor.topk(Tensor([0],"float32"), 70446, )
paddle.Tensor.topk(Tensor([0],"float32"), 70503, )
paddle.Tensor.topk(Tensor([0],"float32"), 70704, )
paddle.Tensor.topk(Tensor([0],"float32"), 70998, )
paddle.Tensor.topk(Tensor([0],"float32"), 71139, )
paddle.Tensor.topk(Tensor([0],"float32"), 71175, )
paddle.Tensor.topk(Tensor([0],"float32"), 71655, )
paddle.Tensor.topk(Tensor([0],"float32"), 71886, )
paddle.Tensor.topk(Tensor([0],"float32"), 71889, )
paddle.Tensor.topk(Tensor([0],"float32"), 71895, )
paddle.Tensor.topk(Tensor([0],"float32"), 72033, )
paddle.Tensor.topk(Tensor([0],"float32"), 72054, )
paddle.Tensor.topk(Tensor([0],"float32"), 73086, )
paddle.Tensor.topk(Tensor([0],"float32"), 73167, )
paddle.Tensor.topk(Tensor([0],"float32"), 73416, )
paddle.Tensor.topk(Tensor([0],"float32"), 73707, )
paddle.Tensor.topk(Tensor([0],"float32"), 73848, )
paddle.Tensor.topk(Tensor([0],"float32"), 74232, )
paddle.Tensor.topk(Tensor([0],"float32"), 74310, )
paddle.Tensor.topk(Tensor([0],"float32"), 74502, )
paddle.Tensor.topk(Tensor([0],"float32"), 74796, )
paddle.Tensor.topk(Tensor([0],"float32"), 75063, )
paddle.Tensor.topk(Tensor([0],"float32"), 75546, )
paddle.Tensor.topk(Tensor([0],"float32"), 75975, )
paddle.Tensor.topk(Tensor([0],"float32"), 75978, )
paddle.Tensor.topk(Tensor([0],"float32"), 76713, )
paddle.Tensor.topk(Tensor([0],"float32"), 76914, )
paddle.Tensor.topk(Tensor([0],"float32"), 77040, )
paddle.Tensor.topk(Tensor([0],"float32"), 77478, )
paddle.Tensor.topk(Tensor([0],"float32"), 77481, )
paddle.Tensor.topk(Tensor([0],"float32"), 77610, )
paddle.Tensor.topk(Tensor([0],"float32"), 77745, )
paddle.Tensor.topk(Tensor([0],"float32"), 78177, )
paddle.Tensor.topk(Tensor([0],"float32"), 78426, )
paddle.Tensor.topk(Tensor([0],"float32"), 78570, )
paddle.Tensor.topk(Tensor([0],"float32"), 78801, )
paddle.Tensor.topk(Tensor([0],"float32"), 78942, )
paddle.Tensor.topk(Tensor([0],"float32"), 79038, )
paddle.Tensor.topk(Tensor([0],"float32"), 79812, )
paddle.Tensor.topk(Tensor([0],"float32"), 80262, )
paddle.Tensor.topk(Tensor([0],"float32"), 80370, )
paddle.Tensor.topk(Tensor([0],"float32"), 80526, )
paddle.Tensor.topk(Tensor([0],"float32"), 80535, )
paddle.Tensor.topk(Tensor([0],"float32"), 80781, )
paddle.Tensor.topk(Tensor([0],"float32"), 81294, )
paddle.Tensor.topk(Tensor([0],"float32"), 81633, )
paddle.Tensor.topk(Tensor([0],"float32"), 81687, )
paddle.Tensor.topk(Tensor([0],"float32"), 81873, )
paddle.Tensor.topk(Tensor([0],"float32"), 82131, )
paddle.Tensor.topk(Tensor([0],"float32"), 82152, )
paddle.Tensor.topk(Tensor([0],"float32"), 82398, )
paddle.Tensor.topk(Tensor([0],"float32"), 82482, )
paddle.Tensor.topk(Tensor([0],"float32"), 82647, )
paddle.Tensor.topk(Tensor([0],"float32"), 82944, )
paddle.Tensor.topk(Tensor([0],"float32"), 83031, )
paddle.Tensor.topk(Tensor([0],"float32"), 83259, )
paddle.Tensor.topk(Tensor([0],"float32"), 83439, )
paddle.Tensor.topk(Tensor([0],"float32"), 83523, )
paddle.Tensor.topk(Tensor([0],"float32"), 83919, )
paddle.Tensor.topk(Tensor([0],"float32"), 83922, )
paddle.Tensor.topk(Tensor([0],"float32"), 84111, )
paddle.Tensor.topk(Tensor([0],"float32"), 84552, )
paddle.Tensor.topk(Tensor([0],"float32"), 84789, )
paddle.Tensor.topk(Tensor([0],"float32"), 85515, )
paddle.Tensor.topk(Tensor([0],"float32"), 85977, )
paddle.Tensor.topk(Tensor([0],"float32"), 86346, )
paddle.Tensor.topk(Tensor([0],"float32"), 86835, )
paddle.Tensor.topk(Tensor([0],"float32"), 87768, )
paddle.Tensor.topk(Tensor([0],"float32"), 87798, )
paddle.Tensor.topk(Tensor([0],"float32"), 88182, )
paddle.Tensor.topk(Tensor([0],"float32"), 88404, )
paddle.Tensor.topk(Tensor([0],"float32"), 88719, )
paddle.Tensor.topk(Tensor([0],"float32"), 88755, )
paddle.Tensor.topk(Tensor([0],"float32"), 89019, )
paddle.Tensor.topk(Tensor([0],"float32"), 89715, )
paddle.Tensor.topk(Tensor([0],"float32"), 90303, )
paddle.Tensor.topk(Tensor([0],"float32"), 90414, )
paddle.Tensor.topk(Tensor([0],"float32"), 90771, )
paddle.Tensor.topk(Tensor([0],"float32"), 90849, )
paddle.Tensor.topk(Tensor([0],"float32"), 91281, )
paddle.Tensor.topk(Tensor([0],"float32"), 91317, )
paddle.Tensor.topk(Tensor([0],"float32"), 91515, )
paddle.Tensor.topk(Tensor([0],"float32"), 91554, )
paddle.Tensor.topk(Tensor([0],"float32"), 92397, )
paddle.Tensor.topk(Tensor([0],"float32"), 92409, )
paddle.Tensor.topk(Tensor([0],"float32"), 92916, )
paddle.Tensor.topk(Tensor([0],"float32"), 93366, )
paddle.Tensor.topk(Tensor([0],"float32"), 93528, )
paddle.Tensor.topk(Tensor([0],"float32"), 93792, )
paddle.Tensor.topk(Tensor([0],"float32"), 94272, )
paddle.Tensor.topk(Tensor([0],"float32"), 94842, )
paddle.Tensor.topk(Tensor([0],"float32"), 95037, )
paddle.Tensor.topk(Tensor([0],"float32"), 95178, )
paddle.Tensor.topk(Tensor([0],"float32"), 95928, )
paddle.Tensor.topk(Tensor([0],"float32"), 96321, )
paddle.Tensor.topk(Tensor([0],"float32"), 98148, )
paddle.Tensor.topk(Tensor([0],"float32"), 98550, )
paddle.Tensor.topk(Tensor([0],"float32"), 98760, )
paddle.Tensor.topk(Tensor([0],"float32"), 99432, )
paddle.Tensor.topk(Tensor([1, 0],"float32"), 5, 1, True, True, )
paddle.Tensor.topk(Tensor([128, 0],"float32"), 5, 1, True, True, )
paddle.Tensor.tril(Tensor([0, 2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([0, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 0, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 2, 0],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 0, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 0],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 2, 0],"float32"), -1, )
paddle.Tensor.unbind(Tensor([0, 1, 8, 109, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([0, 1, 8, 113, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([0, 16, 256, 32, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([0, 2, 3],"float32"), -2, )
paddle.Tensor.unbind(Tensor([0, 28, 28],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([0, 3, 576, 32, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([0, 3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([0, 432, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([0, 48, 1024, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([0, 60, 10, 64],"float32"), 1, )
paddle.Tensor.unbind(Tensor([0, 60, 2, 64],"float32"), 1, )
paddle.Tensor.unbind(Tensor([0, 8, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([1, 0, 10, 64],"float32"), 1, )
paddle.Tensor.unbind(Tensor([1, 0, 2, 64],"float32"), 1, )
paddle.Tensor.unbind(Tensor([1, 0, 256, 32, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([1, 16, 0, 32, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([1, 16, 256, 0, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([1, 16, 256, 32, 0],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([1, 60, 0, 64],"float32"), 1, )
paddle.Tensor.unbind(Tensor([1, 60, 10, 0],"float32"), 1, )
paddle.Tensor.unbind(Tensor([1, 60, 2, 0],"float32"), 1, )
paddle.Tensor.unbind(Tensor([128, 0, 576, 32, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([128, 3, 0, 32, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([128, 3, 576, 0, 2],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([128, 3, 576, 32, 0],"float32"), axis=-1, )
paddle.Tensor.unbind(Tensor([2, 0, 8, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([2, 3, 0, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([2, 3, 8, 0],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([3, 0, 1024, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 0, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 0, 28],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([3, 0, 3],"float32"), -2, )
paddle.Tensor.unbind(Tensor([3, 0, 8, 109, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 0, 8, 113, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 0, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([3, 1, 0, 109, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 1, 0, 113, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 1, 8, 0, 32],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 1, 8, 109, 0],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 1, 8, 113, 0],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 2, 0],"float32"), -2, )
paddle.Tensor.unbind(Tensor([3, 28, 0],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([3, 432, 0, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 432, 196, 0],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 48, 0, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 48, 1024, 0],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 8, 0],"float32"), axis=-3, )
paddle.Tensor.unique(Tensor([0],"int64"), )
paddle.Tensor.unsqueeze(Tensor([0, 1, 1, 3, 4],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 1],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 144, 144],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 2, 8],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 20],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 20],"int64"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 20],"int64"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 2048],"int32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 3, 64, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 4],"float32"), 3, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 49, 49],"float16"), 0, )
paddle.Tensor.unsqueeze(Tensor([0, 1, 499],"bool"), 3, )
paddle.Tensor.unsqueeze(Tensor([0, 1],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([0, 1],"int32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0, 10, 1, 2, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([0, 10, 2, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([0, 10, 58, 58],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 10, 64, 64, 2],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 100, 2],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0, 100, 4],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0, 1024, 2, 16],"float16"), -2, )
paddle.Tensor.unsqueeze(Tensor([0, 1024],"int64"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 10285],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 11, 64, 64],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 144],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0, 144],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 144],"int64"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([0, 144],"int64"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([0, 160000],"float64"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 2, 64],"int64"), -2, )
paddle.Tensor.unsqueeze(Tensor([0, 2, 8, 128, 96],"float16"), 2, )
paddle.Tensor.unsqueeze(Tensor([0, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0, 256],"bool"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([0, 28],"int32"), axis=-3, )
paddle.Tensor.unsqueeze(Tensor([0, 3, 10, 10],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 3, 20, 20],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0, 3, 64, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0, 4],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0, 49],"int64"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([0, 49],"int64"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([0, 56],"int64"), -2, )
paddle.Tensor.unsqueeze(Tensor([0, 7, 8],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([0, 8, 8],"int32"), axis=-3, )
paddle.Tensor.unsqueeze(Tensor([0, 8],"int32"), axis=-3, )
paddle.Tensor.unsqueeze(Tensor([0, 81, 94, 311],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([0],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([0],"float64"), 1, )
paddle.Tensor.unsqueeze(Tensor([0],"float64"), -2, )
paddle.Tensor.unsqueeze(Tensor([0],"int32"), 0, )
paddle.Tensor.unsqueeze(Tensor([0],"int32"), -1, )
paddle.Tensor.unsqueeze(Tensor([0],"int64"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 1],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 144, 144],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 2, 16],"float16"), -2, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 2, 8],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 2],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 2],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 20],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 20],"int64"), -1, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 20],"int64"), 2, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 2048],"int32"), -1, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 4],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 0, 49, 49],"float16"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"float64"), -1, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"int32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 0],"int64"), 2, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0, 144],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0, 49],"float16"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0, 8],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0],"int32"), -1, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0],"int64"), -1, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 0],"int64"), 2, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 144, 0],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 2, 0],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([1, 1, 49, 0],"float16"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 100, 0],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1, 1024, 0, 16],"float16"), -2, )
paddle.Tensor.unsqueeze(Tensor([1, 1024, 2, 0],"float16"), -2, )
paddle.Tensor.unsqueeze(Tensor([10, 0, 499],"bool"), 3, )
paddle.Tensor.unsqueeze(Tensor([10, 1, 0],"bool"), 3, )
paddle.Tensor.unsqueeze(Tensor([12, 0, 10, 10],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([12, 0, 20, 20],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([12, 3, 0, 10],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([12, 3, 0, 20],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([12, 3, 10, 0],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([12, 3, 20, 0],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([13, 0, 4],"float32"), 3, )
paddle.Tensor.unsqueeze(Tensor([13, 0, 64],"int64"), -2, )
paddle.Tensor.unsqueeze(Tensor([13, 0, 8],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([13, 0],"int64"), -2, )
paddle.Tensor.unsqueeze(Tensor([13, 1, 0],"float32"), 3, )
paddle.Tensor.unsqueeze(Tensor([13, 2, 0],"int64"), -2, )
paddle.Tensor.unsqueeze(Tensor([13, 7, 0],"float32"), -2, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 1, 2, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 2, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 3, 64, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 58, 58],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 64, 64, 2],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 64, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([16, 0, 64, 64],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([16, 1, 0, 64, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([16, 1, 3, 0, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([16, 1, 3, 64, 0],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 0, 2, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 0, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 0, 58],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 0, 64, 2],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 1, 0, 2],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 1, 2, 0],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 2, 0],"float32"), -3, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 58, 0],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 64, 0, 2],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([16, 10, 64, 64, 0],"float32"), -1, )
paddle.Tensor.unsqueeze(Tensor([16, 11, 0, 64],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([16, 11, 64, 0],"float32"), 2, )
paddle.Tensor.unsqueeze(Tensor([16, 3, 0, 64],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([16, 3, 64, 0],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([2, 0, 8, 128, 96],"float16"), 2, )
paddle.Tensor.unsqueeze(Tensor([2, 0, 8],"int32"), axis=-3, )
paddle.Tensor.unsqueeze(Tensor([2, 0],"bool"), axis=-1, )
paddle.Tensor.unsqueeze(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([2, 0],"int64"), axis=2, )
paddle.Tensor.unsqueeze(Tensor([2, 2, 0, 128, 96],"float16"), 2, )
paddle.Tensor.unsqueeze(Tensor([2, 2, 8, 0, 96],"float16"), 2, )
paddle.Tensor.unsqueeze(Tensor([2, 2, 8, 128, 0],"float16"), 2, )
paddle.Tensor.unsqueeze(Tensor([2, 8, 0],"int32"), axis=-3, )
paddle.Tensor.unsqueeze(Tensor([28, 0],"int32"), axis=-3, )
paddle.Tensor.unsqueeze(Tensor([4, 0, 1, 3, 4],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([4, 0, 94, 311],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([4, 1, 0, 3, 4],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([4, 1, 1, 0, 4],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([4, 1, 1, 3, 0],"float32"), axis=1, )
paddle.Tensor.unsqueeze(Tensor([4, 81, 0, 311],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([4, 81, 94, 0],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([8, 0],"int32"), axis=-3, )
paddle.Tensor.var(Tensor([0, 2, 3],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0, 2, 3],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 4],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 784],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([1000, 0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([10000, 0, 3],"float32"), axis=0, )
paddle.Tensor.var(Tensor([10000, 0, 3],"float64"), axis=0, )
paddle.Tensor.var(Tensor([10000, 2, 0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([10000, 2, 0],"float64"), axis=0, )
paddle.Tensor.var(Tensor([100000, 0],"float64"), axis=0, )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([0, 4],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([0, 4],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([0, 4],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([0, 4],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([0, 7],"int64"), list[2,3,], axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), list[2,4,6,], axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), tuple(2,6,), axis=1, )
paddle.tensor_split(Tensor([0],"int64"), list[2,1,3,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,3,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,3,16,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,5,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,6,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[3,-1,16,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[3,-1,5,2,16,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), tuple(2,5,), )
paddle.tensor_split(Tensor([0],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([0],"int64"), tuple(2,6,), axis=0, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([4, 0],"int64"), list[2,3,], axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), list[2,4,6,], axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), tuple(2,6,), axis=1, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([7, 0],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7, 0],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 0],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 0],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), tuple(2,6,), )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([0, 3],"float64"), Tensor([2, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0],"float64"), Tensor([0],"float64"), axes=1, )
paddle.tensordot(Tensor([0],"float64"), Tensor([10],"float64"), axes=1, )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([10],"float64"), Tensor([0],"float64"), axes=1, )
paddle.tensordot(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 0],"float64"), Tensor([2, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 3],"float64"), Tensor([0, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 3],"float64"), Tensor([2, 0],"float64"), axes=2, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(x=Tensor([0, 3, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([0, 3, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([0, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([0, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([0, 3, 4, 4],"float64"), y=Tensor([0, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([0, 3, 4, 4],"float64"), y=Tensor([2, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), axes=2, )
paddle.tensordot(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), axes=2, )
paddle.tensordot(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), axes=2, )
paddle.tensordot(x=Tensor([0, 3],"float64"), y=Tensor([3, 3],"float64"), axes=2, )
paddle.tensordot(x=Tensor([0, 4, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([0, 4, 3, 4],"float64"), y=Tensor([4, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([0, 7, 4, 2],"float64"), y=Tensor([0, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([0, 7, 4, 2],"float64"), y=Tensor([0, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([0, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([0, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 0, 4, 2],"float64"), y=Tensor([7, 0, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 0, 4, 2],"float64"), y=Tensor([7, 0, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 0, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 0, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 0, 4, 4],"float64"), y=Tensor([2, 0, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 0, 4, 4],"float64"), y=Tensor([2, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 0, 4],"float64"), y=Tensor([2, 3, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 0, 4],"float64"), y=Tensor([2, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 0, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 0, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 0, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 0, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 0],"float64"), y=Tensor([3, 4, 3, 0],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 0],"float64"), y=Tensor([3, 4, 3, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 0],"float64"), y=Tensor([3, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 0],"float64"), y=Tensor([3, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 0, 3, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 0, 3, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 0],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 0],"float64"), y=Tensor([2, 3, 4, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 0],"float64"), y=Tensor([2, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([0, 3, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 0, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 3, 0, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([2, 3, 4, 0],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 7, 0, 2],"float64"), y=Tensor([7, 7, 0, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 0, 2],"float64"), y=Tensor([7, 7, 0, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 0, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 0, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 0],"float64"), y=Tensor([7, 7, 4, 0],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 0],"float64"), y=Tensor([7, 7, 4, 0],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 0],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 0],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([0, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([0, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 0, 4, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 0, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 0, 2],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 0, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 0],"float64"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 0],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([3, 0, 3, 4],"float64"), y=Tensor([4, 0, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 0, 3, 4],"float64"), y=Tensor([4, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), axes=2, )
paddle.tensordot(x=Tensor([3, 0],"float32"), y=Tensor([3, 3],"float32"), axes=2, )
paddle.tensordot(x=Tensor([3, 0],"float64"), y=Tensor([3, 0],"float64"), axes=2, )
paddle.tensordot(x=Tensor([3, 0],"float64"), y=Tensor([3, 3],"float64"), axes=2, )
paddle.tensordot(x=Tensor([3, 3],"float32"), y=Tensor([0, 3],"float32"), axes=2, )
paddle.tensordot(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), axes=2, )
paddle.tensordot(x=Tensor([3, 3],"float64"), y=Tensor([0, 3],"float64"), axes=2, )
paddle.tensordot(x=Tensor([3, 3],"float64"), y=Tensor([3, 0],"float64"), axes=2, )
paddle.tensordot(x=Tensor([3, 4, 0, 4],"float64"), y=Tensor([4, 4, 0, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 0, 4],"float64"), y=Tensor([4, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 0],"float64"), y=Tensor([4, 4, 3, 0],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 0],"float64"), y=Tensor([4, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 0, 3, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 0, 4],"float64"), axes=1, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 3, 0],"float64"), axes=1, )
paddle.tile(Tensor([0, 1, 1, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([0, 1, 1, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([0, 1, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([0, 1, 1],"int64"), list[1,1,1,], )
paddle.tile(Tensor([0, 1, 1],"int64"), list[13,1,1,], )
paddle.tile(Tensor([0, 1, 1],"int64"), list[2,1,1,], )
paddle.tile(Tensor([0, 1, 1],"int64"), list[4,1,1,], )
paddle.tile(Tensor([0, 1, 1],"int64"), list[6,1,1,], )
paddle.tile(Tensor([0, 1, 10],"int64"), list[1,10,1,], )
paddle.tile(Tensor([0, 1, 10],"int64"), list[13,10,1,], )
paddle.tile(Tensor([0, 1, 128],"int64"), repeat_times=list[1,128,1,], )
paddle.tile(Tensor([0, 1, 13, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([0, 1, 16],"float32"), list[1,4,1,], )
paddle.tile(Tensor([0, 1, 2, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([0, 1, 2],"int64"), list[12,2,1,], )
paddle.tile(Tensor([0, 1, 20],"int64"), list[1,20,1,], )
paddle.tile(Tensor([0, 1, 256],"int64"), repeat_times=list[1,128,1,], )
paddle.tile(Tensor([0, 1, 3],"int64"), list[13,3,1,], )
paddle.tile(Tensor([0, 1, 32],"float32"), list[1,1,4,], )
paddle.tile(Tensor([0, 1, 32],"float32"), list[1,4,1,], )
paddle.tile(Tensor([0, 1, 32],"float32"), list[1,8,1,], )
paddle.tile(Tensor([0, 1, 4],"int64"), list[12,4,1,], )
paddle.tile(Tensor([0, 1, 64, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([0, 1, 7],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([0, 1, 7],"int64"), list[12,7,1,], )
paddle.tile(Tensor([0, 1, 7],"int64"), list[13,7,1,], )
paddle.tile(Tensor([0, 1, 8],"int64"), list[13,8,1,], )
paddle.tile(Tensor([0, 1, 9],"int64"), list[12,9,1,], )
paddle.tile(Tensor([0, 1, 9],"int64"), list[13,9,1,], )
paddle.tile(Tensor([0, 1],"bool"), list[1,24,], )
paddle.tile(Tensor([0, 1],"float32"), list[1,1,49,], )
paddle.tile(Tensor([0, 1],"float32"), list[1,256,], )
paddle.tile(Tensor([0, 1],"float32"), list[1,5,], )
paddle.tile(Tensor([0, 1],"float32"), list[1,58,], )
paddle.tile(Tensor([0, 1],"float32"), list[1,64,], )
paddle.tile(Tensor([0, 1],"float32"), list[8,1,], )
paddle.tile(Tensor([0, 1],"float32"), repeat_times=list[1,18,], )
paddle.tile(Tensor([0, 1],"float32"), repeat_times=list[1,4,], )
paddle.tile(Tensor([0, 1],"int64"), list[1,2,], )
paddle.tile(Tensor([0, 1],"int64"), list[1,3,], )
paddle.tile(Tensor([0, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([0, 1],"int64"), list[1,5,], )
paddle.tile(Tensor([0, 1],"int64"), list[1,8,], )
paddle.tile(Tensor([0, 1],"int64"), repeat_times=list[1,14,], )
paddle.tile(Tensor([0, 1],"int64"), repeat_times=list[1,7,], )
paddle.tile(Tensor([0, 10, 1, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([0, 10, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([0, 13, 7, 14],"int32"), repeat_times=list[2,1,4,1,], )
paddle.tile(Tensor([0, 14, 1],"int64"), repeat_times=list[1,1,2,], )
paddle.tile(Tensor([0, 192, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([0, 196, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([0, 2, 1, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([0, 2, 1, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([0, 2, 1, 64],"int64"), repeat_times=list[1,1,16,1,], )
paddle.tile(Tensor([0, 2, 16, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([0, 2],"float32"), repeat_times=list[2,1,], )
paddle.tile(Tensor([0, 22400, 1],"bool"), list[1,1,4,], )
paddle.tile(Tensor([0, 256],"float32"), list[256,1,], )
paddle.tile(Tensor([0, 3, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([0, 4, 1],"float32"), list[1,1,16,], )
paddle.tile(Tensor([0, 4, 1],"float32"), list[1,1,32,], )
paddle.tile(Tensor([0, 4, 1],"float64"), list[1,1,100,], )
paddle.tile(Tensor([0, 5],"float32"), list[5,1,], )
paddle.tile(Tensor([0, 58],"float32"), list[58,1,], )
paddle.tile(Tensor([0, 64],"float32"), list[64,1,], )
paddle.tile(Tensor([0, 7, 1],"int64"), repeat_times=list[1,1,2,], )
paddle.tile(Tensor([0, 7, 14],"int32"), repeat_times=list[13,1,1,], )
paddle.tile(Tensor([0, 7, 7],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([0, 7, 7],"int32"), repeat_times=list[1,4,1,], )
paddle.tile(Tensor([0, 7, 7],"int32"), repeat_times=list[13,1,1,], )
paddle.tile(Tensor([0, 7],"float32"), list[40,1,1,], )
paddle.tile(Tensor([0, 7],"int64"), list[14,1,], )
paddle.tile(Tensor([0, 7],"int64"), list[7,1,], )
paddle.tile(Tensor([0, 8, 1, 1, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([0, 8, 1, 64, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([0, 8, 1],"float32"), list[1,1,32,], )
paddle.tile(Tensor([0],"float32"), list[245,1,], )
paddle.tile(Tensor([0],"float32"), list[7,1,], )
paddle.tile(Tensor([0],"int64"), repeat_times=list[1,1,], )
paddle.tile(Tensor([0],"int64"), repeat_times=list[1,500,1,], )
paddle.tile(Tensor([0],"int64"), repeat_times=list[13,2,1,], )
paddle.tile(Tensor([0],"int64"), repeat_times=list[26,], )
paddle.tile(Tensor([0],"int64"), repeat_times=list[512,], )
paddle.tile(Tensor([1, 0, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 0, 1, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 0, 1, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 1, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 0, 1],"int64"), list[1,1,1,], )
paddle.tile(Tensor([1, 0, 1],"int64"), list[13,1,1,], )
paddle.tile(Tensor([1, 0, 1],"int64"), list[2,1,1,], )
paddle.tile(Tensor([1, 0, 1],"int64"), list[4,1,1,], )
paddle.tile(Tensor([1, 0, 1],"int64"), list[6,1,1,], )
paddle.tile(Tensor([1, 0, 10],"int64"), list[1,10,1,], )
paddle.tile(Tensor([1, 0, 10],"int64"), list[13,10,1,], )
paddle.tile(Tensor([1, 0, 128],"int64"), repeat_times=list[1,128,1,], )
paddle.tile(Tensor([1, 0, 13, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 14],"int32"), repeat_times=list[13,1,1,], )
paddle.tile(Tensor([1, 0, 2, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 0, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 0, 2],"int64"), list[12,2,1,], )
paddle.tile(Tensor([1, 0, 20],"int64"), list[1,20,1,], )
paddle.tile(Tensor([1, 0, 256],"int64"), repeat_times=list[1,128,1,], )
paddle.tile(Tensor([1, 0, 3],"int64"), list[13,3,1,], )
paddle.tile(Tensor([1, 0, 4],"int64"), list[12,4,1,], )
paddle.tile(Tensor([1, 0, 64, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 0, 7, 14],"int32"), repeat_times=list[2,1,4,1,], )
paddle.tile(Tensor([1, 0, 7],"int32"), repeat_times=list[13,1,1,], )
paddle.tile(Tensor([1, 0, 7],"int64"), list[12,7,1,], )
paddle.tile(Tensor([1, 0, 7],"int64"), list[13,7,1,], )
paddle.tile(Tensor([1, 0, 8],"int64"), list[13,8,1,], )
paddle.tile(Tensor([1, 0, 9],"int64"), list[12,9,1,], )
paddle.tile(Tensor([1, 0, 9],"int64"), list[13,9,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[256,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[5,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[58,1,], )
paddle.tile(Tensor([1, 0],"float32"), list[64,1,], )
paddle.tile(Tensor([1, 0],"float32"), repeat_times=list[2,1,], )
paddle.tile(Tensor([1, 0],"int64"), list[1,4,], )
paddle.tile(Tensor([1, 0],"int64"), list[1,5,], )
paddle.tile(Tensor([1, 0],"int64"), list[14,1,], )
paddle.tile(Tensor([1, 0],"int64"), list[7,1,], )
paddle.tile(Tensor([1, 1, 0, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 0, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 1, 0, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 0],"int64"), list[1,1,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[1,10,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[1,20,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[12,2,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[12,4,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[12,7,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[12,9,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[13,1,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[13,10,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[13,3,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[13,7,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[13,8,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[13,9,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[2,1,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[4,1,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), list[6,1,1,], )
paddle.tile(Tensor([1, 1, 0],"int64"), repeat_times=list[1,128,1,], )
paddle.tile(Tensor([1, 1, 1, 0, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 1, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 1, 1, 0, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 1, 1, 1, 0],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 13, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 2, 0],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 1, 64, 0, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 64, 64, 0],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 13, 0, 14],"int32"), repeat_times=list[2,1,4,1,], )
paddle.tile(Tensor([1, 13, 7, 0],"int32"), repeat_times=list[2,1,4,1,], )
paddle.tile(Tensor([1, 192, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 196, 0],"float32"), list[1,1,2,], )
paddle.tile(Tensor([1, 2, 0, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 0, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 64, 0],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 3, 0, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 0, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 0, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 1, 0],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 7, 0],"int32"), repeat_times=list[13,1,1,], )
paddle.tile(Tensor([10, 0],"int64"), list[1,4,], )
paddle.tile(Tensor([13, 0, 1, 64],"int64"), repeat_times=list[1,1,16,1,], )
paddle.tile(Tensor([13, 0, 16, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 0, 32],"float32"), list[1,1,4,], )
paddle.tile(Tensor([13, 0, 7],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([13, 0, 7],"int32"), repeat_times=list[1,4,1,], )
paddle.tile(Tensor([13, 1, 0],"float32"), list[1,1,4,], )
paddle.tile(Tensor([13, 1, 0],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([13, 2, 0, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 2, 0, 64],"int64"), repeat_times=list[1,1,16,1,], )
paddle.tile(Tensor([13, 2, 1, 0],"int64"), repeat_times=list[1,1,16,1,], )
paddle.tile(Tensor([13, 2, 16, 0],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 7, 0],"float32"), repeat_times=list[4,1,1,], )
paddle.tile(Tensor([13, 7, 0],"int32"), repeat_times=list[1,4,1,], )
paddle.tile(Tensor([16, 0, 1, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 0, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 0, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 1, 0, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 0, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 0, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 64, 0],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 10, 0, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 0, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 0, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 1, 0, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 1, 0],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 1, 58, 0],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([18, 0],"float32"), repeat_times=list[1,18,], )
paddle.tile(Tensor([1960, 0],"bool"), list[1,24,], )
paddle.tile(Tensor([2, 0, 1, 1, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 0, 1, 64, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 0],"int64"), list[1,2,], )
paddle.tile(Tensor([2, 0],"int64"), list[1,3,], )
paddle.tile(Tensor([2, 8, 0, 1, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 0, 64, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 1, 0, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 1, 1, 0],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 1, 64, 0],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([256, 0],"float32"), list[1,256,], )
paddle.tile(Tensor([3, 0, 1, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 0, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 1, 0, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 1, 64, 0],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([364, 0, 1],"int64"), repeat_times=list[1,1,2,], )
paddle.tile(Tensor([364, 0],"int64"), repeat_times=list[1,7,], )
paddle.tile(Tensor([364, 7, 0],"int64"), repeat_times=list[1,1,2,], )
paddle.tile(Tensor([4, 0, 1],"bool"), list[1,1,4,], )
paddle.tile(Tensor([4, 0, 1],"float32"), list[1,1,16,], )
paddle.tile(Tensor([4, 0, 1],"float32"), list[1,1,32,], )
paddle.tile(Tensor([4, 0, 16],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 0, 32],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 0, 32],"float32"), list[1,8,1,], )
paddle.tile(Tensor([4, 0],"float32"), repeat_times=list[1,4,], )
paddle.tile(Tensor([4, 0],"int64"), list[1,8,], )
paddle.tile(Tensor([4, 1, 0],"float32"), list[1,4,1,], )
paddle.tile(Tensor([4, 1, 0],"float32"), list[1,8,1,], )
paddle.tile(Tensor([4, 22400, 0],"bool"), list[1,1,4,], )
paddle.tile(Tensor([4, 4, 0],"float32"), list[1,1,16,], )
paddle.tile(Tensor([4, 4, 0],"float32"), list[1,1,32,], )
paddle.tile(Tensor([4, 8, 0],"float32"), list[1,1,32,], )
paddle.tile(Tensor([40, 0],"float32"), list[1,1,49,], )
paddle.tile(Tensor([5, 0],"float32"), list[1,5,], )
paddle.tile(Tensor([5, 0],"float32"), list[8,1,], )
paddle.tile(Tensor([58, 0],"float32"), list[1,58,], )
paddle.tile(Tensor([64, 0],"float32"), list[1,64,], )
paddle.tile(Tensor([7, 0],"float32"), list[40,1,1,], )
paddle.tile(Tensor([728, 0, 1],"int64"), repeat_times=list[1,1,2,], )
paddle.tile(Tensor([728, 0],"int64"), repeat_times=list[1,14,], )
paddle.tile(Tensor([728, 14, 0],"int64"), repeat_times=list[1,1,2,], )
paddle.tile(Tensor([8, 0, 1],"float64"), list[1,1,100,], )
paddle.tile(Tensor([8, 4, 0],"float64"), list[1,1,100,], )
paddle.tile(x=Tensor([0, 3, 2],"float64"), repeat_times=tuple(2,3,), )
paddle.tile(x=Tensor([0, 3],"float64"), repeat_times=list[3,2,], )
paddle.tile(x=Tensor([0, 512],"float64"), repeat_times=list[471,1,], )
paddle.tile(x=Tensor([0],"int32"), repeat_times=tuple(3,), )
paddle.tile(x=Tensor([1, 0, 2],"float64"), repeat_times=tuple(2,3,), )
paddle.tile(x=Tensor([1, 0],"float64"), repeat_times=list[471,1,], )
paddle.tile(x=Tensor([1, 3, 0],"float64"), repeat_times=tuple(2,3,), )
paddle.tile(x=Tensor([2, 0],"float64"), repeat_times=list[3,2,], )
paddle.trace(Tensor([0, 2],"float32"), )
paddle.trace(Tensor([2, 0],"float32"), )
paddle.transpose(Tensor([0, 1, 1, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 1, 1, 7],"int64"), perm=list[0,1,3,2,], )
paddle.transpose(Tensor([0, 1, 12, 64],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([0, 1, 12, 64],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([0, 1, 16, 64],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([0, 1, 16, 64],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([0, 1, 2],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 1, 3, 4, 2, 1, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([0, 1, 4, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 1, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([0, 10, 32],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 10],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 10],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 100, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 120],"float64"), list[1,2,0,], )
paddle.transpose(Tensor([0, 100, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 1024, 1024],"float16"), perm=list[1,0,2,], )
paddle.transpose(Tensor([0, 1024, 1500],"float32"), tuple(0,2,1,), )
paddle.transpose(Tensor([0, 12, 10, 14],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([0, 12, 10, 15],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([0, 128, 32, 128],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 128, 32, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 128, 4, 8, 96],"float16"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([0, 1280, 1500],"float32"), tuple(0,2,1,), )
paddle.transpose(Tensor([0, 13, 4, 7, 14],"float32"), tuple(1,0,2,3,4,), )
paddle.transpose(Tensor([0, 13, 4, 7, 8],"float32"), tuple(1,0,3,2,4,), )
paddle.transpose(Tensor([0, 13, 7, 8, 4],"float32"), tuple(0,1,4,2,3,), )
paddle.transpose(Tensor([0, 14, 32],"float32"), perm=list[1,0,2,], )
paddle.transpose(Tensor([0, 14, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([0, 16, 2, 8],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([0, 16, 32, 128],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([0, 1960],"float32"), tuple(1,0,), )
paddle.transpose(Tensor([0, 2, 1, 1, 32],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([0, 2, 1, 2, 8],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([0, 2, 12, 10, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 12, 12],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([0, 2, 16, 16],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([0, 2, 2, 1, 32],"float32"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([0, 2, 2, 2, 8],"float32"), perm=list[2,1,0,3,4,], )
paddle.transpose(Tensor([0, 2, 24, 5, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[0,1,2,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[1,2,0,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[2,0,1,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[2,1,0,], )
paddle.transpose(Tensor([0, 2, 96],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([0, 20, 2],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([0, 22, 2],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([0, 248, 1, 1, 2, 7],"float32"), list[2,1,0,3,4,5,], )
paddle.transpose(Tensor([0, 26, 1, 40, 1],"float16"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([0, 26, 1, 40, 1],"float32"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([0, 26, 512, 1, 40],"float16"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([0, 26, 512, 1, 40],"float32"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([0, 3, 2, 2],"bool"), list[1,0,2,3,], )
paddle.transpose(Tensor([0, 3, 2, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 2, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 3, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([0, 3, 4, 4, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([0, 3, 4, 5, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([0, 3, 4, 5, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([0, 3, 4, 5],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([0, 3, 4, 5],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([0, 3, 4],"float32"), perm=tuple(2,1,0,), )
paddle.transpose(Tensor([0, 3, 5, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([0, 32, 64, 128],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([0, 4, 1, 64],"float16"), list[1,0,2,3,], )
paddle.transpose(Tensor([0, 4, 5, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([0, 4, 6, 5, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([0, 4, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([0, 4, 6, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([0, 4, 6, 6, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([0, 4, 6, 6, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([0, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 40],"float64"), list[0,1,], )
paddle.transpose(Tensor([0, 5, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([0, 5],"float32"), list[0,1,], )
paddle.transpose(Tensor([0, 6, 6, 4],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([0, 6, 6, 6, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([0, 7, 14, 4],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([0, 7, 56, 4],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([0, 7, 8, 4],"float32"), tuple(0,3,1,2,), )
paddle.transpose(Tensor([0, 7],"int32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 14, 12],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([0, 80],"float32"), tuple(1,0,), )
paddle.transpose(Tensor([0, 96, 2],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([0],"float32"), list[0,], )
paddle.transpose(Tensor([0],"int64"), list[0,], )
paddle.transpose(Tensor([1, 0, 1, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 10, 14],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([1, 0, 10, 15],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([1, 0, 12, 10, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 0, 12, 12],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([1, 0, 12, 64],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([1, 0, 12, 64],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([1, 0, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 14, 12],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([1, 0, 1500],"float32"), tuple(0,2,1,), )
paddle.transpose(Tensor([1, 0, 16, 16],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([1, 0, 16, 64],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([1, 0, 16, 64],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([1, 0, 2, 1, 32],"float32"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([1, 0, 2, 2, 8],"float32"), perm=list[2,1,0,3,4,], )
paddle.transpose(Tensor([1, 0, 2, 2],"bool"), list[1,0,2,3,], )
paddle.transpose(Tensor([1, 0, 2, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 2, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 2],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 2],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([1, 0, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 24, 5, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 0, 32, 128],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32],"float32"), perm=list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 32],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 4, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([1, 1, 0, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 0, 64],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([1, 1, 0, 64],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([1, 1, 0, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 1, 1, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 12, 0],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([1, 1, 12, 0],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([1, 1, 16, 0],"float32"), tuple(0,2,1,3,), )
paddle.transpose(Tensor([1, 1, 16, 0],"float32"), tuple(0,2,3,1,), )
paddle.transpose(Tensor([1, 1, 4, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 4, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([1, 10, 0],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([1, 100, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 1024, 0],"float32"), tuple(0,2,1,), )
paddle.transpose(Tensor([1, 12, 0, 14],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([1, 12, 0, 15],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([1, 12, 10, 0],"float32"), perm=list[0,2,3,1,], )
paddle.transpose(Tensor([1, 128, 0, 128],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 0, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 32, 0],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 32, 0],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 1280, 0],"float32"), tuple(0,2,1,), )
paddle.transpose(Tensor([1, 14, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([1, 14, 0],"float32"), perm=list[1,0,2,], )
paddle.transpose(Tensor([1, 14, 4, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([1, 2, 0, 1, 32],"float32"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([1, 2, 0, 10, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 0, 12],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([1, 2, 0, 16],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([1, 2, 0, 2, 8],"float32"), perm=list[2,1,0,3,4,], )
paddle.transpose(Tensor([1, 2, 0, 5, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 12, 0, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 12, 0],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([1, 2, 12, 10, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 16, 0],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([1, 2, 2, 0, 32],"float32"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([1, 2, 2, 0, 8],"float32"), perm=list[2,1,0,3,4,], )
paddle.transpose(Tensor([1, 2, 2, 1, 0],"float32"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([1, 2, 2, 2, 0],"float32"), perm=list[2,1,0,3,4,], )
paddle.transpose(Tensor([1, 2, 24, 0, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 24, 5, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 20, 0],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([1, 22, 0],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([1, 3, 0, 2],"bool"), list[1,0,2,3,], )
paddle.transpose(Tensor([1, 3, 0, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 0, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 0, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 0, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 0],"bool"), list[1,0,2,3,], )
paddle.transpose(Tensor([1, 3, 2, 5, 0],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 5, 0],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 8, 0, 12],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([1, 8, 14, 0],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([10, 0],"int32"), perm=list[1,0,], )
paddle.transpose(Tensor([1000, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([114, 0, 1, 64],"float16"), list[1,0,2,3,], )
paddle.transpose(Tensor([114, 4, 0, 64],"float16"), list[1,0,2,3,], )
paddle.transpose(Tensor([114, 4, 1, 0],"float16"), list[1,0,2,3,], )
paddle.transpose(Tensor([13, 0, 8, 4],"float32"), tuple(0,3,1,2,), )
paddle.transpose(Tensor([13, 7, 0, 4],"float32"), tuple(0,3,1,2,), )
paddle.transpose(Tensor([13, 7, 8, 0],"float32"), tuple(0,3,1,2,), )
paddle.transpose(Tensor([14, 0, 1, 7],"int64"), perm=list[0,1,3,2,], )
paddle.transpose(Tensor([14, 1, 0, 7],"int64"), perm=list[0,1,3,2,], )
paddle.transpose(Tensor([14, 1, 1, 0],"int64"), perm=list[0,1,3,2,], )
paddle.transpose(Tensor([16, 0, 1024],"float16"), perm=list[1,0,2,], )
paddle.transpose(Tensor([16, 0, 2],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([16, 0, 64, 128],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([16, 0, 96],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([16, 1024, 0],"float16"), perm=list[1,0,2,], )
paddle.transpose(Tensor([16, 2, 0],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([16, 32, 0, 128],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([16, 32, 64, 0],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([16, 96, 0],"float32"), perm=list[0,2,1,], )
paddle.transpose(Tensor([2, 0, 1, 1, 32],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 0, 1, 2, 8],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 0, 2, 8],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([2, 0, 3, 4, 2, 1, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 0, 4, 5, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 0, 4, 5, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 0, 4, 5],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 0, 4, 5],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 0, 4, 7, 14],"float32"), tuple(1,0,2,3,4,), )
paddle.transpose(Tensor([2, 0, 4, 7, 8],"float32"), tuple(1,0,3,2,4,), )
paddle.transpose(Tensor([2, 0, 4, 8, 96],"float16"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([2, 0, 4],"float32"), perm=tuple(2,1,0,), )
paddle.transpose(Tensor([2, 0, 6, 4],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([2, 0, 6, 6, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 0, 6, 6, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 0, 7, 8, 4],"float32"), tuple(0,1,4,2,3,), )
paddle.transpose(Tensor([2, 0],"float32"), list[0,1,], )
paddle.transpose(Tensor([2, 1, 0, 4, 2, 1, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([2, 1, 3, 0, 2, 1, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([2, 1, 3, 4, 0, 1, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([2, 1, 3, 4, 2, 0, 2],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([2, 1, 3, 4, 2, 1, 0],"bool"), list[6,0,1,4,3,5,2,], )
paddle.transpose(Tensor([2, 128, 0, 8, 96],"float16"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([2, 128, 4, 0, 96],"float16"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([2, 128, 4, 8, 0],"float16"), perm=list[2,0,1,3,4,], )
paddle.transpose(Tensor([2, 13, 0, 7, 14],"float32"), tuple(1,0,2,3,4,), )
paddle.transpose(Tensor([2, 13, 0, 7, 8],"float32"), tuple(1,0,3,2,4,), )
paddle.transpose(Tensor([2, 13, 0, 8, 4],"float32"), tuple(0,1,4,2,3,), )
paddle.transpose(Tensor([2, 13, 4, 0, 14],"float32"), tuple(1,0,2,3,4,), )
paddle.transpose(Tensor([2, 13, 4, 0, 8],"float32"), tuple(1,0,3,2,4,), )
paddle.transpose(Tensor([2, 13, 4, 7, 0],"float32"), tuple(1,0,2,3,4,), )
paddle.transpose(Tensor([2, 13, 4, 7, 0],"float32"), tuple(1,0,3,2,4,), )
paddle.transpose(Tensor([2, 13, 7, 0, 4],"float32"), tuple(0,1,4,2,3,), )
paddle.transpose(Tensor([2, 13, 7, 8, 0],"float32"), tuple(0,1,4,2,3,), )
paddle.transpose(Tensor([2, 16, 0, 8],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([2, 16, 2, 0],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([2, 2, 0, 1, 32],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 2, 0, 2, 8],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 2, 1, 0, 32],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 2, 1, 0, 8],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 2, 1, 1, 0],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 2, 1, 2, 0],"float32"), perm=list[2,1,3,0,4,], )
paddle.transpose(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 0, 5, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 0, 5, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 3, 0, 5],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 0, 5],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 0],"float32"), perm=tuple(2,1,0,), )
paddle.transpose(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 0, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 4, 0, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 3, 4, 0],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 0],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 5, 0, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 4, 5, 0],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 3, 4, 5, 6, 0],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 4, 0, 6, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 4, 6, 0, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 4, 6, 6, 0],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 6, 0, 4],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([2, 6, 0, 6, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 6, 6, 0, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 6, 6, 0],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([2, 6, 6, 6, 0],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([20, 0],"float64"), list[0,1,], )
paddle.transpose(Tensor([216, 0, 1, 1, 2, 7],"float32"), list[2,1,0,3,4,5,], )
paddle.transpose(Tensor([216, 248, 0, 1, 2, 7],"float32"), list[2,1,0,3,4,5,], )
paddle.transpose(Tensor([216, 248, 1, 0, 2, 7],"float32"), list[2,1,0,3,4,5,], )
paddle.transpose(Tensor([216, 248, 1, 1, 0, 7],"float32"), list[2,1,0,3,4,5,], )
paddle.transpose(Tensor([216, 248, 1, 1, 2, 0],"float32"), list[2,1,0,3,4,5,], )
paddle.transpose(Tensor([3, 0, 120],"float64"), list[1,2,0,], )
paddle.transpose(Tensor([3, 0, 5, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([3, 100, 0],"float64"), list[1,2,0,], )
paddle.transpose(Tensor([3, 3, 0, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([3, 3, 5, 0],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([3000, 0],"float32"), tuple(1,0,), )
paddle.transpose(Tensor([4, 0, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([4, 0],"float32"), tuple(1,0,), )
paddle.transpose(Tensor([4, 5, 0, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([4, 5, 6, 0, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([4, 5, 6, 6, 0],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 0, 3, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([5, 0, 6, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 0, 6, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([5, 0, 6, 6, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([5, 3, 0, 3],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([5, 3, 3, 0],"float32"), list[2,1,0,3,], )
paddle.transpose(Tensor([5, 4, 0, 6, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 4, 0, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([5, 4, 0, 6, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([5, 4, 6, 0, 6],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 4, 6, 0, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([5, 4, 6, 0, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([5, 4, 6, 6, 0],"float32"), list[1,0,2,3,4,], )
paddle.transpose(Tensor([5, 4, 6, 6, 0],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([5, 4, 6, 6, 0],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[0,1,2,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[1,2,0,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[2,0,1,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[2,1,0,], )
paddle.transpose(Tensor([6, 0, 5, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([6, 0, 6, 5, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[0,1,2,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[1,2,0,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[2,0,1,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[2,1,0,], )
paddle.transpose(Tensor([6, 4, 0, 5, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([6, 4, 0, 6, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([6, 4, 5, 0, 6],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([6, 4, 5, 6, 0],"float32"), list[2,1,0,3,4,], )
paddle.transpose(Tensor([6, 4, 6, 0, 6],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([6, 4, 6, 5, 0],"float32"), list[3,1,2,0,4,], )
paddle.transpose(Tensor([64, 0, 1, 40, 1],"float16"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 0, 1, 40, 1],"float32"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 0, 32, 128],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([64, 0, 512, 1, 40],"float16"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 0, 512, 1, 40],"float32"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 16, 0, 128],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([64, 16, 32, 0],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([64, 26, 0, 1, 40],"float16"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 26, 0, 1, 40],"float32"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 26, 0, 40, 1],"float16"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 26, 0, 40, 1],"float32"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 26, 1, 0, 1],"float16"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 26, 1, 0, 1],"float32"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 26, 1, 40, 0],"float16"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 26, 1, 40, 0],"float32"), perm=list[0,1,4,2,3,], )
paddle.transpose(Tensor([64, 26, 512, 0, 40],"float16"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 26, 512, 0, 40],"float32"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 26, 512, 1, 0],"float16"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([64, 26, 512, 1, 0],"float32"), perm=list[0,1,3,4,2,], )
paddle.transpose(Tensor([7, 0, 14, 4],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([7, 0, 56, 4],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([7, 7, 0, 4],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([7, 7, 14, 0],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([7, 7, 56, 0],"float32"), perm=list[2,3,0,1,], )
paddle.transpose(Tensor([8, 0, 4, 4, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 0, 4, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 4, 0, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 4, 4, 0, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 4, 4, 5, 0],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(x=Tensor([0, 1, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([0, 1, 2, 2],"float64"), perm=list[1,0,2,3,], )
paddle.transpose(x=Tensor([0, 1, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 11, 16, 32],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 2, 116, 14, 14],"float16"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([0, 2, 116, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([0, 2, 2, 3],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([0, 2, 2, 3],"float64"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([0, 2304, 1, 1, 1],"float32"), perm=tuple(0,2,3,4,1,), )
paddle.transpose(x=Tensor([0, 4, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([1, 0, 16, 32],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 0, 2, 3],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 0, 2, 3],"float64"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 0, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 1, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 1, 4, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 11, 0, 32],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 11, 16, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 2, 0, 3],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 2, 0, 3],"float64"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 2, 2, 0],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1, 2, 2, 0],"float64"), perm=list[0,3,1,2,], )
paddle.transpose(x=Tensor([1536, 0, 116, 14, 14],"float16"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 0, 116, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 2, 0, 14, 14],"float16"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 2, 0, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 2, 116, 0, 14],"float16"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 2, 116, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 2, 116, 14, 0],"float16"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([1536, 2, 116, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(x=Tensor([3, 0, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([3, 0, 2, 2],"float64"), perm=list[1,0,2,3,], )
paddle.transpose(x=Tensor([3, 1, 0, 2],"float64"), perm=list[1,0,2,3,], )
paddle.transpose(x=Tensor([3, 1, 2, 0],"float64"), perm=list[1,0,2,3,], )
paddle.transpose(x=Tensor([3, 4, 0],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([4, 0, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([4, 1, 0],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([8, 0, 1, 1, 1],"float32"), perm=tuple(0,2,3,4,1,), )
paddle.transpose(x=Tensor([8, 2304, 0, 1, 1],"float32"), perm=tuple(0,2,3,4,1,), )
paddle.transpose(x=Tensor([8, 2304, 1, 0, 1],"float32"), perm=tuple(0,2,3,4,1,), )
paddle.transpose(x=Tensor([8, 2304, 1, 1, 0],"float32"), perm=tuple(0,2,3,4,1,), )
paddle.trapezoid(Tensor([0],"float32"), dx=2.0, )
paddle.trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([4, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 0],"float16"), )
paddle.trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([4, 0],"float16"), )
paddle.tril(Tensor([0, 1, 1, 1],"float32"), )
paddle.tril(Tensor([0, 1, 1024, 1024],"int64"), )
paddle.tril(Tensor([0, 1],"float32"), diagonal=0, )
paddle.tril(Tensor([0, 10, 10],"int32"), )
paddle.tril(Tensor([0, 10],"bool"), )
paddle.tril(Tensor([0, 10],"float32"), diagonal=0, )
paddle.tril(Tensor([0, 1007],"bool"), )
paddle.tril(Tensor([0, 20, 1],"float32"), 0, )
paddle.tril(Tensor([0, 20, 20],"float32"), )
paddle.tril(Tensor([1, 0, 1, 1],"float32"), )
paddle.tril(Tensor([1, 0, 1024, 1024],"int64"), )
paddle.tril(Tensor([1, 0, 20],"float32"), )
paddle.tril(Tensor([1, 0],"float32"), diagonal=0, )
paddle.tril(Tensor([1, 1, 0, 1],"float32"), )
paddle.tril(Tensor([1, 1, 0, 1024],"int64"), )
paddle.tril(Tensor([1, 1, 1, 0],"float32"), )
paddle.tril(Tensor([1, 1, 1024, 0],"int64"), )
paddle.tril(Tensor([1, 20, 0],"float32"), )
paddle.tril(Tensor([10, 0, 1],"float32"), 0, )
paddle.tril(Tensor([10, 0],"bool"), )
paddle.tril(Tensor([10, 0],"float32"), diagonal=0, )
paddle.tril(Tensor([10, 20, 0],"float32"), 0, )
paddle.tril(Tensor([1007, 0],"bool"), )
paddle.tril(Tensor([2, 0, 10],"int32"), )
paddle.tril(Tensor([2, 10, 0],"int32"), )
paddle.tril(x=Tensor([0, 2, 2],"float32"), diagonal=0, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=0, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=1, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=5, )
paddle.tril(x=Tensor([0, 2, 2],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([3, 0, 2],"float32"), diagonal=0, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=0, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=1, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=5, )
paddle.tril(x=Tensor([3, 0, 2],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([3, 2, 0],"float32"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=1, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=5, )
paddle.tril(x=Tensor([3, 2, 0],"float64"), diagonal=-5, )
paddle.triu(Tensor([0, 1, 1, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 1, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([0, 1, 10, 16],"float32"), )
paddle.triu(Tensor([0, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([0, 128],"float32"), 1, )
paddle.triu(Tensor([0, 128],"float32"), diagonal=0, )
paddle.triu(Tensor([0, 16],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 20, 1],"float32"), 0, )
paddle.triu(Tensor([0, 7, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 7],"float32"), 1, )
paddle.triu(Tensor([0, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 0, 10, 16],"float32"), )
paddle.triu(Tensor([1, 0, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 0, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 0, 16],"float32"), )
paddle.triu(Tensor([1, 1, 0, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 1, 0],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 10, 0],"float32"), )
paddle.triu(Tensor([1, 1, 2048, 0],"float16"), )
paddle.triu(Tensor([10, 0, 1],"float32"), 0, )
paddle.triu(Tensor([10, 20, 0],"float32"), 0, )
paddle.triu(Tensor([11, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([12, 0, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([12, 7, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([128, 0],"float32"), 1, )
paddle.triu(Tensor([128, 0],"float32"), diagonal=0, )
paddle.triu(Tensor([7, 0],"float32"), 1, )
paddle.triu(x=Tensor([0, 2, 2],"float32"), diagonal=0, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=0, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=1, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=5, )
paddle.triu(x=Tensor([0, 2, 2],"float64"), diagonal=-5, )
paddle.triu(x=Tensor([3, 0, 2],"float32"), diagonal=0, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=0, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=1, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=5, )
paddle.triu(x=Tensor([3, 0, 2],"float64"), diagonal=-5, )
paddle.triu(x=Tensor([3, 2, 0],"float32"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=-1, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=5, )
paddle.triu(x=Tensor([3, 2, 0],"float64"), diagonal=-5, )
paddle.trunc(input=Tensor([0, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([0, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([0, 6, 6],"float64"), )
paddle.trunc(input=Tensor([0, 6],"int32"), )
paddle.trunc(input=Tensor([0, 6],"int64"), )
paddle.trunc(input=Tensor([3, 0, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 0, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 6, 0, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 6, 6, 0],"float64"), )
paddle.trunc(input=Tensor([6, 0, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 0, 6],"float64"), )
paddle.trunc(input=Tensor([6, 0],"int32"), )
paddle.trunc(input=Tensor([6, 0],"int64"), )
paddle.trunc(input=Tensor([6, 6, 0, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 0],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6, 0],"float64"), )
paddle.trunc(Tensor([0, 20, 1],"float32"), )
paddle.trunc(Tensor([0, 20],"float32"), )
paddle.trunc(Tensor([10, 0, 1],"float32"), )
paddle.trunc(Tensor([10, 20, 0],"float32"), )
paddle.trunc(Tensor([20, 0],"float32"), )
paddle.unbind(Tensor([0, 2, 2],"int32"), axis=0, )
paddle.unbind(Tensor([0, 2, 3],"float32"), axis=-1, )
paddle.unbind(Tensor([0, 2, 3],"float32"), axis=2, )
paddle.unbind(Tensor([0, 2],"bool"), axis=0, )
paddle.unbind(Tensor([0, 3, 2, 2],"float64"), axis=1, )
paddle.unbind(Tensor([0, 3, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([0, 3],"complex128"), 0, )
paddle.unbind(Tensor([0, 3],"complex64"), 0, )
paddle.unbind(Tensor([0, 5, 6],"float32"), )
paddle.unbind(Tensor([0, 9, 5],"float32"), axis=0, )
paddle.unbind(Tensor([0],"float32"), 0, )
paddle.unbind(Tensor([2, 0, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([2, 0],"bool"), axis=0, )
paddle.unbind(Tensor([2, 0],"complex128"), 0, )
paddle.unbind(Tensor([2, 0],"complex64"), 0, )
paddle.unbind(Tensor([2, 3, 0, 8],"float32"), axis=0, )
paddle.unbind(Tensor([2, 3, 8, 0],"float32"), axis=0, )
paddle.unbind(Tensor([3, 0, 2],"int32"), axis=0, )
paddle.unbind(Tensor([3, 0, 5],"float32"), axis=0, )
paddle.unbind(Tensor([3, 2, 0],"int32"), axis=0, )
paddle.unbind(Tensor([3, 9, 0],"float32"), axis=0, )
paddle.unbind(Tensor([4, 0, 2, 2],"float64"), axis=1, )
paddle.unbind(Tensor([4, 0, 3],"float32"), axis=-1, )
paddle.unbind(Tensor([4, 0, 3],"float32"), axis=2, )
paddle.unbind(Tensor([4, 0, 6],"float32"), )
paddle.unbind(Tensor([4, 2, 0],"float32"), axis=-1, )
paddle.unbind(Tensor([4, 2, 0],"float32"), axis=2, )
paddle.unbind(Tensor([4, 3, 0, 2],"float64"), axis=1, )
paddle.unbind(Tensor([4, 3, 2, 0],"float64"), axis=1, )
paddle.unbind(Tensor([4, 5, 0],"float32"), )
paddle.unflatten(Tensor([0, 4, 4, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(Tensor([3, 0, 4, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(Tensor([3, 4, 0, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(Tensor([3, 4, 4, 0],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(x=Tensor([0, 6, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unflatten(x=Tensor([4, 0, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unflatten(x=Tensor([4, 6, 0],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unique(Tensor([0, 1],"int64"), )
paddle.unique(Tensor([0, 3],"int64"), )
paddle.unique(Tensor([0],"int64"), )
paddle.unique(Tensor([2, 0],"int64"), )
paddle.unique(Tensor([3, 0],"int64"), )
paddle.unique(x=Tensor([0, 2],"float32"), axis=1, )
paddle.unique(x=Tensor([0, 2],"float64"), axis=1, )
paddle.unique(x=Tensor([0, 2],"int32"), axis=0, )
paddle.unique(x=Tensor([0, 2],"int64"), axis=0, )
paddle.unique(x=Tensor([0],"float32"), )
paddle.unique(x=Tensor([0],"float64"), )
paddle.unique(x=Tensor([2, 0],"float32"), axis=1, )
paddle.unique(x=Tensor([2, 0],"float64"), axis=1, )
paddle.unique(x=Tensor([2, 0],"int32"), axis=0, )
paddle.unique(x=Tensor([2, 0],"int64"), axis=0, )
paddle.unique_consecutive(Tensor([0],"float64"), )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unique_consecutive(x=Tensor([0, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unique_consecutive(x=Tensor([0, 6],"float32"), )
paddle.unique_consecutive(x=Tensor([0, 6],"float64"), )
paddle.unique_consecutive(x=Tensor([0, 6],"float64"), axis=1, )
paddle.unique_consecutive(x=Tensor([2, 0],"float32"), )
paddle.unique_consecutive(x=Tensor([2, 0],"float64"), )
paddle.unique_consecutive(x=Tensor([3, 0],"float64"), axis=1, )
paddle.unique_consecutive(x=Tensor([6, 0],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unsqueeze(Tensor([0, 1],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0, 10],"float32"), axis=0, )
paddle.unsqueeze(Tensor([0, 128, 32],"float32"), 2, )
paddle.unsqueeze(Tensor([0, 128],"int64"), 2, )
paddle.unsqueeze(Tensor([0, 128],"int64"), axis=1, )
paddle.unsqueeze(Tensor([0, 128],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([0, 14, 8],"float32"), axis=0, )
paddle.unsqueeze(Tensor([0, 2, 2],"int64"), axis=1, )
paddle.unsqueeze(Tensor([0, 2],"float32"), -1, )
paddle.unsqueeze(Tensor([0, 2],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0, 20, 1],"float32"), -1, )
paddle.unsqueeze(Tensor([0, 256, 256],"float32"), 0, )
paddle.unsqueeze(Tensor([0, 256],"int64"), axis=1, )
paddle.unsqueeze(Tensor([0, 3, 1],"float32"), 1, )
paddle.unsqueeze(Tensor([0, 3, 3, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 3, 40, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 3, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 32],"float32"), axis=0, )
paddle.unsqueeze(Tensor([0, 384],"float32"), 0, )
paddle.unsqueeze(Tensor([0, 4, 1, 1, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([0, 4, 3, 1, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([0, 4, 5, 1, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([0, 4],"float32"), 1, )
paddle.unsqueeze(Tensor([0, 4],"float64"), -1, )
paddle.unsqueeze(Tensor([0, 4],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([0, 40, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 5, 1, 5],"float32"), 1, )
paddle.unsqueeze(Tensor([0, 5, 3],"float32"), axis=2, )
paddle.unsqueeze(Tensor([0, 500],"int64"), 2, )
paddle.unsqueeze(Tensor([0, 7, 1],"float32"), 1, )
paddle.unsqueeze(Tensor([0, 7, 14],"float32"), axis=-1, )
paddle.unsqueeze(Tensor([0, 7, 14],"int32"), axis=0, )
paddle.unsqueeze(Tensor([0, 7, 14],"int32"), axis=-1, )
paddle.unsqueeze(Tensor([0, 80],"float32"), 0, )
paddle.unsqueeze(Tensor([0],"float32"), 1, )
paddle.unsqueeze(Tensor([0],"float32"), axis=0, )
paddle.unsqueeze(Tensor([0],"float64"), axis=0, )
paddle.unsqueeze(Tensor([0],"int64"), 0, )
paddle.unsqueeze(Tensor([0],"int64"), -1, )
paddle.unsqueeze(Tensor([0],"int64"), axis=1, )
paddle.unsqueeze(Tensor([0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([1, 0, 14],"float32"), axis=-1, )
paddle.unsqueeze(Tensor([1, 0, 14],"int32"), axis=-1, )
paddle.unsqueeze(Tensor([1, 0, 32],"float32"), 2, )
paddle.unsqueeze(Tensor([1, 0],"float32"), 1, )
paddle.unsqueeze(Tensor([1, 0],"float64"), axis=2, )
paddle.unsqueeze(Tensor([1, 0],"int64"), axis=1, )
paddle.unsqueeze(Tensor([1, 0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([1, 128, 0],"float32"), 2, )
paddle.unsqueeze(Tensor([1, 7, 0],"float32"), axis=-1, )
paddle.unsqueeze(Tensor([1, 7, 0],"int32"), axis=-1, )
paddle.unsqueeze(Tensor([10, 0, 1],"float32"), -1, )
paddle.unsqueeze(Tensor([10, 0],"float32"), 1, )
paddle.unsqueeze(Tensor([10, 0],"float32"), -1, )
paddle.unsqueeze(Tensor([10, 20, 0],"float32"), -1, )
paddle.unsqueeze(Tensor([12, 0],"float64"), -1, )
paddle.unsqueeze(Tensor([13, 0, 1, 1, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 0, 1, 5],"float32"), 1, )
paddle.unsqueeze(Tensor([13, 0, 1],"float32"), 1, )
paddle.unsqueeze(Tensor([13, 0, 14],"int32"), axis=0, )
paddle.unsqueeze(Tensor([13, 0, 3, 1, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([13, 0, 3],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 0, 5, 1, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 3, 0],"float32"), 1, )
paddle.unsqueeze(Tensor([13, 4, 0, 1, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 4, 0, 1, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([13, 4, 1, 0, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 4, 1, 1, 0],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 4, 3, 0, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([13, 4, 3, 1, 0],"float32"), axis=3, )
paddle.unsqueeze(Tensor([13, 4, 5, 0, 8],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 4, 5, 1, 0],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 5, 0, 5],"float32"), 1, )
paddle.unsqueeze(Tensor([13, 5, 0],"float32"), axis=2, )
paddle.unsqueeze(Tensor([13, 5, 1, 0],"float32"), 1, )
paddle.unsqueeze(Tensor([13, 7, 0],"float32"), 1, )
paddle.unsqueeze(Tensor([13, 7, 0],"int32"), axis=0, )
paddle.unsqueeze(Tensor([14, 0],"float32"), axis=0, )
paddle.unsqueeze(Tensor([2, 0, 2],"int64"), axis=1, )
paddle.unsqueeze(Tensor([2, 0],"float32"), axis=0, )
paddle.unsqueeze(Tensor([2, 2, 0],"int64"), axis=1, )
paddle.unsqueeze(Tensor([20, 0],"int64"), 2, )
paddle.unsqueeze(Tensor([3, 0, 256],"float32"), 0, )
paddle.unsqueeze(Tensor([3, 0, 3, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 256, 0],"float32"), 0, )
paddle.unsqueeze(Tensor([3, 3, 0, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 0, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 0, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 3, 0, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 3, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 40, 0, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 40, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 40, 0, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 40, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([4, 0],"int64"), 2, )
paddle.unsqueeze(Tensor([498, 0],"float32"), 0, )
paddle.unsqueeze(Tensor([5000, 0],"float32"), 0, )
paddle.unsqueeze(Tensor([52, 0, 1, 5],"float32"), 1, )
paddle.unsqueeze(Tensor([52, 0, 3, 1, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([52, 0, 3],"float32"), axis=2, )
paddle.unsqueeze(Tensor([52, 0, 8],"float32"), axis=0, )
paddle.unsqueeze(Tensor([52, 14, 0],"float32"), axis=0, )
paddle.unsqueeze(Tensor([52, 4, 0, 1, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([52, 4, 3, 0, 8],"float32"), axis=3, )
paddle.unsqueeze(Tensor([52, 4, 3, 1, 0],"float32"), axis=3, )
paddle.unsqueeze(Tensor([52, 5, 0, 5],"float32"), 1, )
paddle.unsqueeze(Tensor([52, 5, 0],"float32"), axis=2, )
paddle.unsqueeze(Tensor([52, 5, 1, 0],"float32"), 1, )
paddle.unsqueeze(x=Tensor([0, 3],"float32"), axis=1, )
paddle.unsqueeze(x=Tensor([0, 3],"float64"), axis=1, )
paddle.unsqueeze(x=Tensor([0, 3],"float64"), axis=-1, )
paddle.unsqueeze(x=Tensor([2, 0],"float32"), axis=1, )
paddle.unsqueeze(x=Tensor([2, 0],"float64"), axis=1, )
paddle.unsqueeze(x=Tensor([2, 0],"float64"), axis=-1, )
paddle.var(Tensor([0, 16, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0, 256],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([0, 256],"float64"), axis=-1, keepdim=True, )
paddle.var(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([0, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([0],"float32"), )
paddle.var(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([16, 0, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 0, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 16, 0, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 16, 3, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 32, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 32, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(x=Tensor([0, 3, 3],"float64"), )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([0, 3],"float32"), )
paddle.var(x=Tensor([0, 3],"float64"), )
paddle.var(x=Tensor([0, 96, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([13, 0, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([13, 96, 0],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([16, 0, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([16, 96, 0],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(x=Tensor([2, 0],"float32"), )
paddle.var(x=Tensor([2, 0],"float64"), )
paddle.var(x=Tensor([3, 0, 3],"float64"), )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([3, 3, 0],"float64"), )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.vsplit(Tensor([0, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([0, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([0, 4, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([0, 4, 3],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([0, 4],"int64"), list[-1,], )
paddle.vsplit(Tensor([0, 4],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([0, 4],"int64"), list[2,4,], )
paddle.vsplit(Tensor([0, 4],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 0, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 0, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 0, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 0, 3],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 0],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 0],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 0],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 0],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 4, 0],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 0],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4, 0],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 4, 0],"int64"), tuple(2,1,3,), )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.vstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], name=None, )
paddle.vstack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.vstack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], name=None, )
paddle.vstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], name=None, )
paddle.zeros_like(Tensor([0, 1, 10285],"float32"), )
paddle.zeros_like(Tensor([0, 1, 3598],"float32"), )
paddle.zeros_like(Tensor([0, 1],"int32"), )
paddle.zeros_like(Tensor([0, 1],"int64"), )
paddle.zeros_like(Tensor([0, 1024, 1, 1],"float16"), )
paddle.zeros_like(Tensor([0, 1024, 1, 1],"float32"), )
paddle.zeros_like(Tensor([0, 2, 3, 4, 5, 1, 2],"float64"), )
paddle.zeros_like(Tensor([0, 3],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 40],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 8, 9, 18],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 8, 9, 18],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0],"bool"), )
paddle.zeros_like(Tensor([0],"float16"), )
paddle.zeros_like(Tensor([0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([1, 0, 10285],"float32"), )
paddle.zeros_like(Tensor([1, 0, 3598],"float32"), )
paddle.zeros_like(Tensor([1, 0],"int32"), )
paddle.zeros_like(Tensor([1, 0],"int64"), )
paddle.zeros_like(Tensor([1, 1, 0],"float32"), )
paddle.zeros_like(Tensor([1024, 0, 1, 1],"float16"), )
paddle.zeros_like(Tensor([1024, 0, 1, 1],"float32"), )
paddle.zeros_like(Tensor([1024, 1024, 0, 1],"float16"), )
paddle.zeros_like(Tensor([1024, 1024, 0, 1],"float32"), )
paddle.zeros_like(Tensor([1024, 1024, 1, 0],"float16"), )
paddle.zeros_like(Tensor([1024, 1024, 1, 0],"float32"), )
paddle.zeros_like(Tensor([3, 0, 3, 4, 5, 1, 2],"float64"), )
paddle.zeros_like(Tensor([3, 0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([3, 0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([3, 2, 0, 4, 5, 1, 2],"float64"), )
paddle.zeros_like(Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), )
paddle.zeros_like(Tensor([3, 2, 3, 4, 0, 1, 2],"float64"), )
paddle.zeros_like(Tensor([3, 2, 3, 4, 5, 0, 2],"float64"), )
paddle.zeros_like(Tensor([3, 2, 3, 4, 5, 1, 0],"float64"), )
paddle.zeros_like(Tensor([6, 0, 9, 18],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 0, 9, 18],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 0, 18],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 0, 18],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 9, 0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 9, 0],"float32"), dtype=type(int), )
paddle.zeros_like(x=Tensor([0, 3, 3, 3, 3, 3],"float64"), )
paddle.zeros_like(x=Tensor([0, 3, 3],"bool"), )
paddle.zeros_like(x=Tensor([0, 3, 3],"float16"), )
paddle.zeros_like(x=Tensor([3, 0, 3, 3, 3, 3],"float64"), )
paddle.zeros_like(x=Tensor([3, 0, 3],"bool"), )
paddle.zeros_like(x=Tensor([3, 0, 3],"float16"), )
paddle.zeros_like(x=Tensor([3, 3, 0, 3, 3, 3],"float64"), )
paddle.zeros_like(x=Tensor([3, 3, 0],"bool"), )
paddle.zeros_like(x=Tensor([3, 3, 0],"float16"), )
paddle.zeros_like(x=Tensor([3, 3, 3, 0, 3, 3],"float64"), )
paddle.zeros_like(x=Tensor([3, 3, 3, 3, 0, 3],"float64"), )
paddle.zeros_like(x=Tensor([3, 3, 3, 3, 3, 0],"float64"), )
paddle.bitwise_not(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([0, 3, 5],"int32"), )
paddle.bitwise_not(Tensor([0, 4, 1],"int32"), )
paddle.bitwise_not(Tensor([0],"int32"), )
paddle.bitwise_not(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 0, 5],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 0],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), )
paddle.bitwise_not(Tensor([3, 0, 1],"int32"), )
paddle.bitwise_not(Tensor([3, 4, 0],"int32"), )
paddle.bitwise_or(Tensor([0, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([0, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([0, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([0, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([0, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([0, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.bitwise_or(Tensor([0],"int32"), Tensor([3],"int32"), )
paddle.bitwise_or(Tensor([2, 0, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 0, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 0, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 0, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 1, 0],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 1, 5],"int64"), Tensor([0, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 0, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 0],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 0],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 0, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 0, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), )
paddle.bitwise_or(Tensor([3],"int32"), Tensor([0],"int32"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), )
paddle.bitwise_right_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([0],"int8"), )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([1],"int8"), )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([0],"int8"), )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), )
