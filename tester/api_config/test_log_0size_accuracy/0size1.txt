paddle.abs(Tensor([0, 1, 32, 32],"float32"), )
paddle.abs(Tensor([0, 1],"float64"), )
paddle.abs(Tensor([0, 1],"int64"), )
paddle.abs(Tensor([0, 14, 5, 14],"complex128"), )
paddle.abs(Tensor([0, 2, 5],"float32"), )
paddle.abs(Tensor([0, 20, 1],"float32"), )
paddle.abs(Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.abs(Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.abs(Tensor([0],"float32"), )
paddle.abs(Tensor([0],"float64"), )
paddle.abs(Tensor([1, 0, 32, 32],"float32"), )
paddle.abs(Tensor([1, 0, 5, 14],"complex128"), )
paddle.abs(Tensor([1, 0],"float64"), )
paddle.abs(Tensor([1, 0],"int64"), )
paddle.abs(Tensor([1, 1, 0, 32],"float32"), )
paddle.abs(Tensor([1, 1, 32, 0],"float32"), )
paddle.abs(Tensor([1, 14, 0, 14],"complex128"), )
paddle.abs(Tensor([1, 14, 5, 0],"complex128"), )
paddle.abs(Tensor([10, 0, 1],"float32"), )
paddle.abs(Tensor([10, 0, 5],"float32"), )
paddle.abs(Tensor([10, 2, 0],"float32"), )
paddle.abs(Tensor([10, 20, 0],"float32"), )
paddle.abs(Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.abs(Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.abs(Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.abs(Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.abs(Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.abs(Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.abs(Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.abs(Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.abs(x=Tensor([0, 3, 3],"float32"), )
paddle.abs(x=Tensor([0, 3, 3],"float64"), )
paddle.abs(x=Tensor([0, 3],"float64"), )
paddle.abs(x=Tensor([0],"float64"), )
paddle.abs(x=Tensor([3, 0, 3],"float32"), )
paddle.abs(x=Tensor([3, 0, 3],"float64"), )
paddle.abs(x=Tensor([3, 3, 0],"float32"), )
paddle.abs(x=Tensor([3, 3, 0],"float64"), )
paddle.abs(x=Tensor([5, 0],"float64"), )
paddle.acos(Tensor([0, 10],"float32"), )
paddle.acos(Tensor([0, 20, 1],"float32"), )
paddle.acos(Tensor([0, 4],"float64"), )
paddle.acos(Tensor([10, 0, 1],"float32"), )
paddle.acos(Tensor([10, 0],"float32"), )
paddle.acos(Tensor([10, 20, 0],"float32"), )
paddle.acos(Tensor([2, 0],"float64"), )
paddle.acos(x=Tensor([0, 3, 3],"float32"), )
paddle.acos(x=Tensor([0, 3, 3],"float64"), )
paddle.acos(x=Tensor([3, 0, 3],"float32"), )
paddle.acos(x=Tensor([3, 0, 3],"float64"), )
paddle.acos(x=Tensor([3, 3, 0],"float32"), )
paddle.acos(x=Tensor([3, 3, 0],"float64"), )
paddle.acosh(Tensor([0, 20, 1],"float32"), )
paddle.acosh(Tensor([10, 0, 1],"float32"), )
paddle.acosh(Tensor([10, 20, 0],"float32"), )
paddle.addmm(input=Tensor([0, 1],"float64"), x=Tensor([0, 4],"float64"), y=Tensor([0, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([0, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([0, 2],"float32"), x=Tensor([0, 2],"float32"), y=Tensor([0, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([0, 2],"float32"), x=Tensor([2, 2],"float32"), y=Tensor([2, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([0, 2],"float64"), x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([0, 2],"float64"), x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([0, 5],"float64"), )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([0, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([0, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([1, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 0],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([0, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([0, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([2, 0],"float32"), x=Tensor([2, 0],"float32"), y=Tensor([2, 0],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 0],"float32"), x=Tensor([2, 2],"float32"), y=Tensor([2, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 0],"float64"), x=Tensor([2, 0],"float64"), y=Tensor([2, 0],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 0],"float64"), x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float32"), x=Tensor([0, 2],"float32"), y=Tensor([2, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float32"), x=Tensor([2, 0],"float32"), y=Tensor([2, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float32"), x=Tensor([2, 2],"float32"), y=Tensor([0, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float32"), x=Tensor([2, 2],"float32"), y=Tensor([2, 0],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float64"), x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float64"), x=Tensor([2, 0],"float64"), y=Tensor([2, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float64"), x=Tensor([2, 2],"float64"), y=Tensor([0, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([2, 2],"float64"), x=Tensor([2, 2],"float64"), y=Tensor([2, 0],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 0],"float64"), )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 0],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 0],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 0],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 0],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 0],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 0],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([0, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([0, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([0, 3],"float64"), y=Tensor([3, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 5],"float64"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 0],"float64"), y=Tensor([3, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([0, 5],"float64"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([0, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([0, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 0],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 0],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 0],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 0],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 0],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(Tensor([0, 10],"float32"), x=Tensor([0, 10],"float32"), y=Tensor([0, 10],"float32"), )
paddle.addmm(Tensor([0, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([0, 50],"float32"), Tensor([0, 80],"float32"), Tensor([0, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([0, 50],"float32"), Tensor([30, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([0, 64],"float16"), Tensor([0, 8],"float16"), Tensor([0, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([0, 64],"float16"), Tensor([32, 8],"float16"), Tensor([8, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([0, 768],"float16"), Tensor([0, 8],"float16"), Tensor([0, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([0, 768],"float16"), Tensor([11008, 8],"float16"), Tensor([8, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([10, 0],"float32"), x=Tensor([10, 0],"float32"), y=Tensor([10, 0],"float32"), )
paddle.addmm(Tensor([10, 0],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([0, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 0],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([0, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 0],"float32"), )
paddle.addmm(Tensor([11008, 0],"float16"), Tensor([11008, 0],"float16"), Tensor([8, 0],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([11008, 0],"float16"), Tensor([11008, 8],"float16"), Tensor([8, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([11008, 768],"float16"), Tensor([0, 8],"float16"), Tensor([8, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([11008, 768],"float16"), Tensor([11008, 0],"float16"), Tensor([8, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([11008, 768],"float16"), Tensor([11008, 8],"float16"), Tensor([0, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([11008, 768],"float16"), Tensor([11008, 8],"float16"), Tensor([8, 0],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([30, 0],"float32"), Tensor([30, 0],"float32"), Tensor([80, 0],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 0],"float32"), Tensor([30, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([0, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 0],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 80],"float32"), Tensor([0, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 80],"float32"), Tensor([80, 0],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([32, 0],"float16"), Tensor([32, 0],"float16"), Tensor([8, 0],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 0],"float16"), Tensor([32, 8],"float16"), Tensor([8, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 64],"float16"), Tensor([0, 8],"float16"), Tensor([8, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 64],"float16"), Tensor([32, 0],"float16"), Tensor([8, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 64],"float16"), Tensor([32, 8],"float16"), Tensor([0, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 64],"float16"), Tensor([32, 8],"float16"), Tensor([8, 0],"float16"), beta=1.0, alpha=2.0, )
paddle.all(Tensor([0, 10],"bool"), )
paddle.all(Tensor([0, 10],"bool"), axis=0, )
paddle.all(Tensor([0, 10],"bool"), axis=-1, )
paddle.all(Tensor([0, 10],"bool"), axis=1, keepdim=True, )
paddle.all(Tensor([0, 3, 4, 5],"bool"), )
paddle.all(Tensor([0, 5],"bool"), )
paddle.all(Tensor([0, 5],"bool"), axis=None, )
paddle.all(Tensor([0, 5],"bool"), keepdim=True, )
paddle.all(Tensor([0, 6, 10],"bool"), None, False, None, )
paddle.all(Tensor([0, 6, 10],"float64"), None, False, None, )
paddle.all(Tensor([0],"bool"), )
paddle.all(Tensor([0],"bool"), axis=0, )
paddle.all(Tensor([0],"bool"), axis=-1, )
paddle.all(Tensor([1, 0],"bool"), )
paddle.all(Tensor([12, 0],"bool"), )
paddle.all(Tensor([12, 0],"bool"), axis=0, )
paddle.all(Tensor([12, 0],"bool"), axis=-1, )
paddle.all(Tensor([12, 0],"bool"), axis=1, keepdim=True, )
paddle.all(Tensor([2, 0, 4, 5],"bool"), )
paddle.all(Tensor([2, 3, 0, 5],"bool"), )
paddle.all(Tensor([2, 3, 4, 0],"bool"), )
paddle.all(Tensor([3, 0],"bool"), axis=None, )
paddle.all(Tensor([3, 0],"bool"), keepdim=True, )
paddle.all(Tensor([5, 0, 10],"bool"), None, False, None, )
paddle.all(Tensor([5, 0, 10],"float64"), None, False, None, )
paddle.all(Tensor([5, 6, 0],"bool"), None, False, None, )
paddle.all(Tensor([5, 6, 0],"float64"), None, False, None, )
paddle.all(x=Tensor([0, 10],"bool"), )
paddle.all(x=Tensor([0, 4, 2],"bool"), )
paddle.all(x=Tensor([0, 4, 4, 2],"bool"), )
paddle.all(x=Tensor([0, 4, 4, 2],"bool"), axis=1, )
paddle.all(x=Tensor([0, 4, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.all(x=Tensor([0, 4],"bool"), keepdim=True, )
paddle.all(x=Tensor([0],"bool"), )
paddle.all(x=Tensor([10, 0],"bool"), )
paddle.all(x=Tensor([2, 0, 4, 2],"bool"), )
paddle.all(x=Tensor([2, 0, 4, 2],"bool"), axis=1, )
paddle.all(x=Tensor([2, 0, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.all(x=Tensor([2, 0],"bool"), keepdim=True, )
paddle.all(x=Tensor([2, 4, 0, 2],"bool"), )
paddle.all(x=Tensor([2, 4, 0, 2],"bool"), axis=1, )
paddle.all(x=Tensor([2, 4, 0, 2],"bool"), axis=tuple(0,1,), )
paddle.all(x=Tensor([2, 4, 4, 0],"bool"), )
paddle.all(x=Tensor([2, 4, 4, 0],"bool"), axis=1, )
paddle.all(x=Tensor([2, 4, 4, 0],"bool"), axis=tuple(0,1,), )
paddle.all(x=Tensor([3, 0, 2],"bool"), )
paddle.all(x=Tensor([3, 4, 0],"bool"), )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), keepdim=True, )
paddle.amax(Tensor([0, 2, 2],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amax(Tensor([0, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([0, 4],"float64"), 0, False, )
paddle.amax(Tensor([0, 4],"float64"), 1, True, )
paddle.amax(Tensor([0, 4],"float64"), None, False, )
paddle.amax(Tensor([0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([0, 5],"float32"), axis=None, )
paddle.amax(Tensor([0, 5],"float32"), keepdim=True, )
paddle.amax(Tensor([0],"float32"), axis=0, )
paddle.amax(Tensor([0],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([0],"float32"), keepdim=True, )
paddle.amax(Tensor([0],"float64"), axis=None, keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), keepdim=True, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), keepdim=True, )
paddle.amax(Tensor([2, 0, 2],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([2, 0],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([2, 0],"float64"), 0, False, )
paddle.amax(Tensor([2, 0],"float64"), 1, True, )
paddle.amax(Tensor([2, 0],"float64"), None, False, )
paddle.amax(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 0, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amax(Tensor([3, 0],"float32"), axis=None, )
paddle.amax(Tensor([3, 0],"float32"), keepdim=True, )
paddle.amax(Tensor([3, 2, 0, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 2, 0, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 2, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), keepdim=True, )
paddle.amin(Tensor([0, 2, 2],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([0, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([0, 4],"float64"), 0, False, )
paddle.amin(Tensor([0, 4],"float64"), 1, True, )
paddle.amin(Tensor([0, 4],"float64"), None, False, )
paddle.amin(Tensor([0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([0, 5],"float32"), axis=None, )
paddle.amin(Tensor([0, 5],"float32"), keepdim=True, )
paddle.amin(Tensor([0],"float32"), axis=0, )
paddle.amin(Tensor([0],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([0],"float32"), keepdim=True, )
paddle.amin(Tensor([0],"float64"), axis=None, keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), keepdim=True, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), keepdim=True, )
paddle.amin(Tensor([2, 0, 2],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 0],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 0],"float64"), 0, False, )
paddle.amin(Tensor([2, 0],"float64"), 1, True, )
paddle.amin(Tensor([2, 0],"float64"), None, False, )
paddle.amin(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 0, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([3, 0],"float32"), axis=None, )
paddle.amin(Tensor([3, 0],"float32"), keepdim=True, )
paddle.amin(Tensor([3, 2, 0, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 2, 0, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 2, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.angle(Tensor([0, 3],"complex128"), )
paddle.angle(Tensor([2, 0],"complex128"), )
paddle.any(Tensor([0, 1],"bool"), )
paddle.any(Tensor([0, 10],"bool"), axis=0, )
paddle.any(Tensor([0, 10],"bool"), axis=-1, )
paddle.any(Tensor([0, 10],"bool"), axis=1, keepdim=True, )
paddle.any(Tensor([0, 11],"bool"), )
paddle.any(Tensor([0, 2, 1],"bool"), )
paddle.any(Tensor([0, 2, 4, 5],"bool"), )
paddle.any(Tensor([0, 2],"bool"), list[0,], )
paddle.any(Tensor([0, 300, 4096],"bool"), )
paddle.any(Tensor([0, 5],"bool"), axis=None, )
paddle.any(Tensor([0, 5],"bool"), keepdim=True, )
paddle.any(Tensor([0, 6, 10],"bool"), None, False, None, )
paddle.any(Tensor([0, 6, 10],"float64"), None, False, None, )
paddle.any(Tensor([0],"bool"), )
paddle.any(Tensor([0],"bool"), axis=0, )
paddle.any(Tensor([1, 0, 4096],"bool"), )
paddle.any(Tensor([1, 0],"bool"), )
paddle.any(Tensor([1, 300, 0],"bool"), )
paddle.any(Tensor([10, 0, 1],"bool"), )
paddle.any(Tensor([10, 2, 0],"bool"), )
paddle.any(Tensor([12, 0],"bool"), axis=0, )
paddle.any(Tensor([12, 0],"bool"), axis=-1, )
paddle.any(Tensor([12, 0],"bool"), axis=1, keepdim=True, )
paddle.any(Tensor([2, 0],"bool"), list[0,], )
paddle.any(Tensor([3, 0],"bool"), axis=None, )
paddle.any(Tensor([3, 0],"bool"), keepdim=True, )
paddle.any(Tensor([5, 0, 10],"bool"), None, False, None, )
paddle.any(Tensor([5, 0, 10],"float64"), None, False, None, )
paddle.any(Tensor([5, 6, 0],"bool"), None, False, None, )
paddle.any(Tensor([5, 6, 0],"float64"), None, False, None, )
paddle.any(Tensor([6, 0, 4, 5],"bool"), )
paddle.any(Tensor([6, 2, 0, 5],"bool"), )
paddle.any(Tensor([6, 2, 4, 0],"bool"), )
paddle.any(x=Tensor([0, 10],"bool"), )
paddle.any(x=Tensor([0, 4, 2],"bool"), )
paddle.any(x=Tensor([0, 4, 4, 2],"bool"), )
paddle.any(x=Tensor([0, 4, 4, 2],"bool"), axis=1, )
paddle.any(x=Tensor([0, 4, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.any(x=Tensor([0, 4],"bool"), keepdim=True, )
paddle.any(x=Tensor([0],"bool"), )
paddle.any(x=Tensor([10, 0],"bool"), )
paddle.any(x=Tensor([2, 0, 4, 2],"bool"), )
paddle.any(x=Tensor([2, 0, 4, 2],"bool"), axis=1, )
paddle.any(x=Tensor([2, 0, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.any(x=Tensor([2, 0],"bool"), keepdim=True, )
paddle.any(x=Tensor([2, 4, 0, 2],"bool"), )
paddle.any(x=Tensor([2, 4, 0, 2],"bool"), axis=1, )
paddle.any(x=Tensor([2, 4, 0, 2],"bool"), axis=tuple(0,1,), )
paddle.any(x=Tensor([2, 4, 4, 0],"bool"), )
paddle.any(x=Tensor([2, 4, 4, 0],"bool"), axis=1, )
paddle.any(x=Tensor([2, 4, 4, 0],"bool"), axis=tuple(0,1,), )
paddle.any(x=Tensor([3, 0, 2],"bool"), )
paddle.any(x=Tensor([3, 4, 0],"bool"), )
paddle.argmax(Tensor([0, 10],"float32"), )
paddle.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 100],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 1000],"float32"), axis=1, )
paddle.argmax(Tensor([0, 1024, 50304],"float16"), -1, )
paddle.argmax(Tensor([0, 2, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 256],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([0, 3, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 32, 64],"float16"), axis=1, )
paddle.argmax(Tensor([0, 32, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([0, 5, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([0, 5],"float32"), )
paddle.argmax(Tensor([0, 5],"float32"), keepdim=True, )
paddle.argmax(Tensor([0, 7, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 8, 14, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([0],"float32"), 0, )
paddle.argmax(Tensor([1, 0, 14, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 0],"float32"), axis=1, )
paddle.argmax(Tensor([1, 0],"float32"), axis=-1, )
paddle.argmax(Tensor([1, 8, 0, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 8, 14, 0],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([10, 0],"float32"), )
paddle.argmax(Tensor([10, 0],"float32"), axis=1, )
paddle.argmax(Tensor([10, 0],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([12988, 0, 64],"float16"), axis=1, )
paddle.argmax(Tensor([12988, 0, 64],"float32"), axis=1, )
paddle.argmax(Tensor([12988, 32, 0],"float16"), axis=1, )
paddle.argmax(Tensor([12988, 32, 0],"float32"), axis=1, )
paddle.argmax(Tensor([13, 0, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 0, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 0, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 4, 0, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 4, 16, 0],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 7, 0],"float32"), axis=-1, )
paddle.argmax(Tensor([16, 0, 50304],"float16"), -1, )
paddle.argmax(Tensor([16, 1024, 0],"float16"), -1, )
paddle.argmax(Tensor([2, 0, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([2, 3, 0],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 0],"float32"), )
paddle.argmax(Tensor([3, 0],"float32"), keepdim=True, )
paddle.argmax(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmax(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmax(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmax(x=Tensor([0, 3, 3],"float64"), )
paddle.argmax(x=Tensor([0, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([0, 3],"int64"), axis=-1, )
paddle.argmax(x=Tensor([0, 3],"int64"), axis=-2, )
paddle.argmax(x=Tensor([0],"int64"), axis=-1, keepdim=True, )
paddle.argmax(x=Tensor([2, 0],"int64"), axis=-1, )
paddle.argmax(x=Tensor([3, 0, 3],"float64"), )
paddle.argmax(x=Tensor([3, 0, 4],"float64"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([3, 0],"int64"), axis=-2, )
paddle.argmax(x=Tensor([3, 3, 0],"float64"), )
paddle.argmax(x=Tensor([3, 3, 0],"float64"), axis=1, keepdim=False, )
paddle.argmin(Tensor([0, 10],"float32"), )
paddle.argmin(Tensor([0, 10],"float32"), axis=1, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([0, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([0, 5, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([0, 5],"float32"), )
paddle.argmin(Tensor([0, 5],"float32"), keepdim=True, )
paddle.argmin(Tensor([0],"float32"), 0, )
paddle.argmin(Tensor([10, 0],"float32"), )
paddle.argmin(Tensor([10, 0],"float32"), axis=1, )
paddle.argmin(Tensor([10, 0],"float32"), axis=-1, )
paddle.argmin(Tensor([10, 0],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 0],"float32"), )
paddle.argmin(Tensor([3, 0],"float32"), keepdim=True, )
paddle.argmin(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmin(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmin(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmin(x=Tensor([0, 3, 3],"float64"), )
paddle.argmin(x=Tensor([0, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([0, 3],"int64"), axis=-1, )
paddle.argmin(x=Tensor([0, 3],"int64"), axis=-2, )
paddle.argmin(x=Tensor([0],"int64"), axis=-1, keepdim=True, )
paddle.argmin(x=Tensor([2, 0],"int64"), axis=-1, )
paddle.argmin(x=Tensor([3, 0, 3],"float64"), )
paddle.argmin(x=Tensor([3, 0, 4],"float64"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([3, 0],"int64"), axis=-2, )
paddle.argmin(x=Tensor([3, 3, 0],"float64"), )
paddle.argmin(x=Tensor([3, 3, 0],"float64"), axis=1, keepdim=False, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, descending=True, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([0, 10],"float32"), descending=True, )
paddle.argsort(Tensor([0, 100],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 10000],"float64"), axis=1, )
paddle.argsort(Tensor([0, 10000],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=1, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), descending=True, )
paddle.argsort(Tensor([0, 30],"float64"), axis=1, descending=True, stable=True, )
paddle.argsort(Tensor([0, 30],"float64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 4, 2],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([0, 4, 2],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 4, 2],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([0, 4],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([0, 5],"float32"), descending=True, )
paddle.argsort(Tensor([0, 64],"int64"), axis=-1, )
paddle.argsort(Tensor([0],"float16"), stable=True, )
paddle.argsort(Tensor([0],"float32"), )
paddle.argsort(Tensor([0],"float32"), descending=True, )
paddle.argsort(Tensor([0],"float32"), stable=True, )
paddle.argsort(Tensor([0],"float64"), axis=0, )
paddle.argsort(Tensor([0],"float64"), axis=0, descending=True, )
paddle.argsort(Tensor([0],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([0],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([0],"int64"), )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, descending=True, stable=True, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, stable=True, )
paddle.argsort(Tensor([1000, 0],"float32"), descending=True, )
paddle.argsort(Tensor([10000, 0],"float64"), axis=0, )
paddle.argsort(Tensor([10000, 0],"float64"), axis=0, descending=True, )
paddle.argsort(Tensor([2, 0, 4],"float64"), axis=1, )
paddle.argsort(Tensor([2, 0, 4],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([2, 0, 4],"float64"), descending=True, )
paddle.argsort(Tensor([2, 0],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([2, 3, 0],"float64"), axis=1, )
paddle.argsort(Tensor([2, 3, 0],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([2, 3, 0],"float64"), descending=True, )
paddle.argsort(Tensor([26, 0],"int64"), axis=-1, )
paddle.argsort(Tensor([3, 0, 2],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 0, 2],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 0, 2],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([3, 0],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 4, 0],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 4, 0],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 4, 0],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([30, 0],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([30, 0],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([40, 0, 4],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([40, 0, 4],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([40, 3, 0],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([40, 3, 0],"float64"), axis=0, stable=True, )
paddle.argsort(x=Tensor([0, 2, 2],"float32"), axis=0, )
paddle.argsort(x=Tensor([0, 2, 2],"float64"), axis=0, )
paddle.argsort(x=Tensor([0, 2, 2],"float64"), axis=0, descending=True, )
paddle.argsort(x=Tensor([0, 2, 2],"float64"), axis=1, )
paddle.argsort(x=Tensor([0, 2, 2],"float64"), axis=-1, )
paddle.argsort(x=Tensor([3, 0, 2],"float32"), axis=0, )
paddle.argsort(x=Tensor([3, 0, 2],"float64"), axis=0, )
paddle.argsort(x=Tensor([3, 0, 2],"float64"), axis=0, descending=True, )
paddle.argsort(x=Tensor([3, 0, 2],"float64"), axis=1, )
paddle.argsort(x=Tensor([3, 0, 2],"float64"), axis=-1, )
paddle.argsort(x=Tensor([3, 2, 0],"float32"), axis=0, )
paddle.argsort(x=Tensor([3, 2, 0],"float64"), axis=0, )
paddle.argsort(x=Tensor([3, 2, 0],"float64"), axis=0, descending=True, )
paddle.argsort(x=Tensor([3, 2, 0],"float64"), axis=1, )
paddle.argsort(x=Tensor([3, 2, 0],"float64"), axis=-1, )
paddle.as_complex(Tensor([0, 10, 10, 2],"float32"), )
paddle.as_complex(Tensor([0, 10, 2],"float64"), )
paddle.as_complex(Tensor([0, 4, 2],"float32"), )
paddle.as_complex(Tensor([0],"float32"), )
paddle.as_complex(Tensor([10, 0, 10, 2],"float32"), )
paddle.as_complex(Tensor([10, 0, 2],"float64"), )
paddle.as_complex(Tensor([10, 10, 0, 2],"float32"), )
paddle.as_complex(Tensor([10, 10, 0],"float64"), )
paddle.as_complex(Tensor([10, 10, 10, 0],"float32"), )
paddle.as_complex(Tensor([2, 0, 2],"float32"), )
paddle.as_complex(Tensor([2, 4, 0],"float32"), )
paddle.as_complex(x=Tensor([0, 2, 3, 2],"float64"), )
paddle.as_complex(x=Tensor([0, 2],"float32"), )
paddle.as_complex(x=Tensor([0, 2],"float64"), )
paddle.as_complex(x=Tensor([0, 3, 2],"float64"), )
paddle.as_complex(x=Tensor([3, 0],"float32"), )
paddle.as_complex(x=Tensor([3, 0],"float64"), )
paddle.as_complex(x=Tensor([9, 0, 2],"float64"), )
paddle.as_complex(x=Tensor([9, 0, 3, 2],"float64"), )
paddle.as_complex(x=Tensor([9, 2, 0, 2],"float64"), )
paddle.as_complex(x=Tensor([9, 2, 3, 0],"float64"), )
paddle.as_complex(x=Tensor([9, 3, 0],"float64"), )
paddle.as_real(Tensor([0, 10, 10, 20],"complex128"), )
paddle.as_real(Tensor([0, 10],"complex128"), )
paddle.as_real(Tensor([0, 4],"complex128"), )
paddle.as_real(Tensor([10, 0, 10, 20],"complex128"), )
paddle.as_real(Tensor([10, 0],"complex128"), )
paddle.as_real(Tensor([10, 10, 0, 20],"complex128"), )
paddle.as_real(Tensor([10, 10, 10, 0],"complex128"), )
paddle.as_real(Tensor([2, 0],"complex128"), )
paddle.as_real(x=Tensor([0, 2, 3],"complex128"), )
paddle.as_real(x=Tensor([0, 2, 3],"complex64"), )
paddle.as_real(x=Tensor([0, 3],"complex128"), )
paddle.as_real(x=Tensor([0, 3],"complex64"), )
paddle.as_real(x=Tensor([0],"complex128"), )
paddle.as_real(x=Tensor([0],"complex64"), )
paddle.as_real(x=Tensor([9, 0, 3],"complex128"), )
paddle.as_real(x=Tensor([9, 0, 3],"complex64"), )
paddle.as_real(x=Tensor([9, 0],"complex128"), )
paddle.as_real(x=Tensor([9, 0],"complex64"), )
paddle.as_real(x=Tensor([9, 2, 0],"complex128"), )
paddle.as_real(x=Tensor([9, 2, 0],"complex64"), )
paddle.asin(Tensor([0, 16, 32],"complex128"), )
paddle.asin(Tensor([0, 20, 1],"float32"), )
paddle.asin(Tensor([10, 0, 1],"float32"), )
paddle.asin(Tensor([10, 20, 0],"float32"), )
paddle.asin(Tensor([8, 0, 32],"complex128"), )
paddle.asin(Tensor([8, 16, 0],"complex128"), )
paddle.asin(x=Tensor([0, 3, 3],"float32"), )
paddle.asin(x=Tensor([0, 3, 3],"float64"), )
paddle.asin(x=Tensor([3, 0, 3],"float32"), )
paddle.asin(x=Tensor([3, 0, 3],"float64"), )
paddle.asin(x=Tensor([3, 3, 0],"float32"), )
paddle.asin(x=Tensor([3, 3, 0],"float64"), )
paddle.asinh(Tensor([0, 16, 32],"complex128"), )
paddle.asinh(Tensor([0, 20, 1],"float32"), )
paddle.asinh(Tensor([10, 0, 1],"float32"), )
paddle.asinh(Tensor([10, 20, 0],"float32"), )
paddle.asinh(Tensor([8, 0, 32],"complex128"), )
paddle.asinh(Tensor([8, 16, 0],"complex128"), )
paddle.atan(Tensor([0, 16, 32],"complex128"), )
paddle.atan(Tensor([0, 20, 1],"float32"), )
paddle.atan(Tensor([0],"float32"), name="Cauchy_cdf", )
paddle.atan(Tensor([0],"float64"), name="Cauchy_cdf", )
paddle.atan(Tensor([10, 0, 1],"float32"), )
paddle.atan(Tensor([10, 20, 0],"float32"), )
paddle.atan(Tensor([8, 0, 32],"complex128"), )
paddle.atan(Tensor([8, 16, 0],"complex128"), )
paddle.atan(x=Tensor([0, 3, 3],"float32"), )
paddle.atan(x=Tensor([0, 3, 3],"float64"), )
paddle.atan(x=Tensor([3, 0, 3],"float32"), )
paddle.atan(x=Tensor([3, 0, 3],"float64"), )
paddle.atan(x=Tensor([3, 3, 0],"float32"), )
paddle.atan(x=Tensor([3, 3, 0],"float64"), )
paddle.atan2(Tensor([0, 17],"float64"), Tensor([0, 17],"float64"), )
paddle.atan2(Tensor([0, 17],"float64"), Tensor([11, 17],"float64"), )
paddle.atan2(Tensor([0, 222, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([0],"float64"), Tensor([100, 100],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([0, 100],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([100, 0],"float64"), )
paddle.atan2(Tensor([11, 0],"float64"), Tensor([11, 0],"float64"), )
paddle.atan2(Tensor([11, 0],"float64"), Tensor([11, 17],"float64"), )
paddle.atan2(Tensor([11, 17],"float64"), Tensor([0, 17],"float64"), )
paddle.atan2(Tensor([11, 17],"float64"), Tensor([11, 0],"float64"), )
paddle.atan2(Tensor([111, 0, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([111, 222, 0],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([0, 333],"float64"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([222, 0],"float64"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.atan2(x=Tensor([0, 6, 6, 6, 6],"float64"), y=Tensor([0, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([0, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([0, 6, 6, 6],"float64"), y=Tensor([0, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([0, 6, 6, 6],"float64"), y=Tensor([6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([0, 6, 6],"float64"), y=Tensor([0, 6, 6],"float64"), )
paddle.atan2(x=Tensor([0, 6, 6],"float64"), y=Tensor([6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([0, 6],"float16"), y=Tensor([0, 6],"float16"), )
paddle.atan2(x=Tensor([0, 6],"float16"), y=Tensor([6, 6],"float16"), )
paddle.atan2(x=Tensor([0, 6],"float32"), y=Tensor([0, 6],"float32"), )
paddle.atan2(x=Tensor([0, 6],"float32"), y=Tensor([6, 6],"float32"), )
paddle.atan2(x=Tensor([3, 0, 6, 6, 6],"float64"), y=Tensor([3, 0, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 0, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 0, 6, 6],"float64"), y=Tensor([3, 6, 0, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 0, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 0, 6],"float64"), y=Tensor([3, 6, 6, 0, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 0, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 0],"float64"), y=Tensor([3, 6, 6, 6, 0],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 0],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([0, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 0, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 0, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 0, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 0],"float64"), )
paddle.atan2(x=Tensor([6, 0, 6, 6],"float64"), y=Tensor([6, 0, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 0, 6, 6],"float64"), y=Tensor([6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 0, 6],"float64"), y=Tensor([6, 0, 6],"float64"), )
paddle.atan2(x=Tensor([6, 0, 6],"float64"), y=Tensor([6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 0],"float16"), y=Tensor([6, 0],"float16"), )
paddle.atan2(x=Tensor([6, 0],"float16"), y=Tensor([6, 6],"float16"), )
paddle.atan2(x=Tensor([6, 0],"float32"), y=Tensor([6, 0],"float32"), )
paddle.atan2(x=Tensor([6, 0],"float32"), y=Tensor([6, 6],"float32"), )
paddle.atan2(x=Tensor([6, 6, 0, 6],"float64"), y=Tensor([6, 6, 0, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 0, 6],"float64"), y=Tensor([6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 0],"float64"), y=Tensor([6, 6, 0],"float64"), )
paddle.atan2(x=Tensor([6, 6, 0],"float64"), y=Tensor([6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 0],"float64"), y=Tensor([6, 6, 6, 0],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 0],"float64"), y=Tensor([6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 6],"float64"), y=Tensor([0, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 6],"float64"), y=Tensor([6, 0, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 6],"float64"), y=Tensor([6, 6, 0, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6, 6],"float64"), y=Tensor([6, 6, 6, 0],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6],"float64"), y=Tensor([0, 6, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6],"float64"), y=Tensor([6, 0, 6],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6],"float64"), y=Tensor([6, 6, 0],"float64"), )
paddle.atan2(x=Tensor([6, 6],"float16"), y=Tensor([0, 6],"float16"), )
paddle.atan2(x=Tensor([6, 6],"float16"), y=Tensor([6, 0],"float16"), )
paddle.atan2(x=Tensor([6, 6],"float32"), y=Tensor([0, 6],"float32"), )
paddle.atan2(x=Tensor([6, 6],"float32"), y=Tensor([6, 0],"float32"), )
paddle.atanh(Tensor([0, 16, 32],"complex128"), )
paddle.atanh(Tensor([0, 20, 1],"float32"), )
paddle.atanh(Tensor([10, 0, 1],"float32"), )
paddle.atanh(Tensor([10, 20, 0],"float32"), )
paddle.atanh(Tensor([8, 0, 32],"complex128"), )
paddle.atanh(Tensor([8, 16, 0],"complex128"), )
paddle.bitwise_and(Tensor([0, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([0, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([0, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([0, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([0, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([0, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.bitwise_and(Tensor([0],"int32"), Tensor([3],"int32"), )
paddle.bitwise_and(Tensor([2, 0, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 0, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 0, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 0, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 1, 0],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 1, 5],"int64"), Tensor([0, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 0, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 0],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 0, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 0, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 0, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 0, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 0, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 0],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 0],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 0, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 0, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), )
paddle.bitwise_and(Tensor([3],"int32"), Tensor([0],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([0],"int16"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([1],"int16"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([0],"int16"), )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), )
paddle.digamma(Tensor([0, 10, 10, 2],"float64"), )
paddle.digamma(Tensor([0, 2, 2],"float32"), )
paddle.digamma(Tensor([0, 2],"float32"), )
paddle.digamma(Tensor([0],"float32"), )
paddle.digamma(Tensor([1, 0, 2],"float32"), )
paddle.digamma(Tensor([1, 0],"float32"), )
paddle.digamma(Tensor([1, 2, 0],"float32"), )
paddle.digamma(Tensor([10, 0, 10, 2],"float64"), )
paddle.digamma(Tensor([10, 10, 0, 2],"float64"), )
paddle.digamma(Tensor([10, 10, 10, 0],"float64"), )
paddle.digamma(x=Tensor([0, 3],"float32"), )
paddle.digamma(x=Tensor([0, 6, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([0, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([0, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 0, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 0],"float32"), )
paddle.digamma(x=Tensor([3, 6, 0, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 0, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 0],"float64"), )
paddle.digamma(x=Tensor([6, 0, 6, 6],"float64"), )
paddle.digamma(x=Tensor([6, 0, 6],"float64"), )
paddle.digamma(x=Tensor([6, 6, 0, 6],"float64"), )
paddle.digamma(x=Tensor([6, 6, 0],"float64"), )
paddle.digamma(x=Tensor([6, 6, 6, 0],"float64"), )
paddle.diff(x=Tensor([10, 0],"float64"), axis=0, prepend=Tensor([4, 0],"float64"), append=Tensor([4, 0],"float64"), )
paddle.diff(x=Tensor([10, 0],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([0, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 0],"float64"), append=Tensor([4, 4],"float64"), )
paddle.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([0, 4],"float64"), )
paddle.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 0],"float64"), )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([0],"float64"), )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([0],"float64"), append=Tensor([4],"float64"), )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([0],"float64"), )
paddle.diff(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 0, 4, 4],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 0, 4, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 0, 4],"float64"), )
paddle.diff(x=Tensor([4, 0],"float64"), )
paddle.diff(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.diff(x=Tensor([4, 4, 0, 4],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 4, 0, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 4, 0],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 0],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 4, 4, 0],"float64"), axis=-2, )
