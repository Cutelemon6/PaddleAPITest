paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([0, 4, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([0, 5],"float32"), "fro", )
paddle.linalg.cond(Tensor([0, 5],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 5],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), None, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 0, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 0],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), None, )
paddle.linalg.cond(Tensor([3, 0],"float32"), )
paddle.linalg.cond(Tensor([3, 0],"float32"), p="fro", )
paddle.linalg.cond(Tensor([3, 0],"float32"), p="nuc", )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=-1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=2, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), "fro", )
paddle.linalg.cond(Tensor([5, 0],"float32"), "nuc", )
paddle.linalg.cond(Tensor([5, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), None, )
paddle.linalg.cond(Tensor([9, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), None, )
paddle.linalg.cond(x=Tensor([0, 2, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([0, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([0, 2, 4, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([0, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([0, 3],"float32"), )
paddle.linalg.cond(x=Tensor([0, 3],"float64"), )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p="fro", )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p="nuc", )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([3, 0],"float32"), )
paddle.linalg.cond(x=Tensor([3, 0],"float64"), )
paddle.linalg.cond(x=Tensor([4, 0, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 0, 4, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 0, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p="fro", )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p="nuc", )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([6, 0, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([6, 2, 0, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 0, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 0],"float64"), )
paddle.linalg.cov(Tensor([0, 4],"float32"), )
paddle.linalg.cov(Tensor([0],"float32"), )
paddle.linalg.cov(Tensor([3, 0],"float32"), )
paddle.linalg.cov(x=Tensor([0, 12],"float64"), )
paddle.linalg.cov(x=Tensor([0, 2],"float32"), )
paddle.linalg.cov(x=Tensor([4, 0],"float32"), )
paddle.linalg.cov(x=Tensor([4, 0],"float64"), )
paddle.linalg.det(Tensor([0, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([0, 3, 3],"float32"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"float32"), )
paddle.linalg.det(Tensor([0, 3],"float32"), )
paddle.linalg.det(Tensor([2, 0, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 0, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 0, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 0, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 0],"complex64"), )
paddle.linalg.det(Tensor([3, 0, 3],"float32"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"float32"), )
paddle.linalg.det(Tensor([3, 0],"float32"), )
paddle.linalg.det(Tensor([3, 3, 0, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 0, 5],"float32"), )
paddle.linalg.det(Tensor([3, 3, 0],"float32"), )
paddle.linalg.det(Tensor([3, 3, 5, 0],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 5, 0],"float32"), )
paddle.linalg.det(x=Tensor([0, 4, 4],"float64"), )
paddle.linalg.det(x=Tensor([0, 4],"float32"), )
paddle.linalg.det(x=Tensor([0, 4],"float64"), )
paddle.linalg.det(x=Tensor([3, 0, 4],"float64"), )
paddle.linalg.det(x=Tensor([3, 4, 0],"float64"), )
paddle.linalg.det(x=Tensor([4, 0],"float32"), )
paddle.linalg.det(x=Tensor([4, 0],"float64"), )
paddle.linalg.inv(Tensor([0, 5],"float64"), )
paddle.linalg.inv(Tensor([5, 0],"float64"), )
paddle.linalg.inv(x=Tensor([0, 2, 2],"float64"), )
paddle.linalg.inv(x=Tensor([0, 3, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([0, 4],"float32"), )
paddle.linalg.inv(x=Tensor([0, 4],"float64"), )
paddle.linalg.inv(x=Tensor([2, 0, 2],"float64"), )
paddle.linalg.inv(x=Tensor([2, 2, 0],"float64"), )
paddle.linalg.inv(x=Tensor([4, 0],"float32"), )
paddle.linalg.inv(x=Tensor([4, 0],"float64"), )
paddle.linalg.inv(x=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([5, 3, 0, 4],"float64"), )
paddle.linalg.inv(x=Tensor([5, 3, 4, 0],"float64"), )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_power(Tensor([0, 4],"float64"), -2, )
paddle.linalg.matrix_power(Tensor([4, 0],"float64"), -2, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 10, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 4, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 4, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([0, 4, 4],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([0, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 10, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 10, 0],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 0, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 0, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 0, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 0, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 0, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 4, 0],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 0, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 0, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 0, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 0],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 0],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 0],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 0],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 0],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 0],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 0],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 0],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 0],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 0],"float64"), n=3, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 3],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=Tensor([0],"float32"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([0, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 0],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([0, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([3, 0],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([0, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([0, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([3, 0],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(x=Tensor([0, 2, 4, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 3, 4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 3, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 5],"float64"), tol=4.4, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 0, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 0],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 4],"float64"), tol=Tensor([0, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 4],"float64"), tol=Tensor([1, 0],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([0, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([0],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([2, 0],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 0, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 0],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 5],"float64"), tol=Tensor([0, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 5],"float64"), tol=Tensor([2, 0],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=Tensor([0],"float64"), hermitian=True, )
paddle.linalg.multi_dot(list[Tensor([0, 10],"float64"),Tensor([0, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([0, 8],"float64"),Tensor([0, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([4, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 6],"float64"),Tensor([0, 3],"float64"),Tensor([0, 4],"float64"),Tensor([0, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 6],"float64"),Tensor([6],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 8],"float16"),Tensor([0, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([0, 8],"float16"),Tensor([8, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float32"),Tensor([4, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([3, 4],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 3],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 5],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([6, 4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float16"),Tensor([8, 0],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float16"),Tensor([8, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([10, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([10, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([4, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([0, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 0],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([0, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 0],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([0, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 0],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([0, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 0],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 3],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float16"),Tensor([0, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float16"),Tensor([8, 0],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 0],"float64"),Tensor([4, 0],"float64"),Tensor([8, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 0],"float64"),Tensor([4, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 0],"float64"),Tensor([6],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([0, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([0, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 6],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([0, 4],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 0],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([0, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 2],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([0, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 0],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 5],"float32"),Tensor([0],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 3],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 5],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([0, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 0],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([0, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([0, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([5, 0],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([5, 2],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([0, 4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([6, 0],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([6, 4],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 0],"float64"),Tensor([6, 0],"float64"),Tensor([3, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 0],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([0, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 0],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([0, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 0],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([0, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.norm(Tensor([0, 1, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([0, 2],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([0, 5, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([0, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 6],"float32"), )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0],"float32"), )
paddle.linalg.norm(Tensor([0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0],"float32"), p=1, )
paddle.linalg.norm(Tensor([0],"float32"), p=1, axis=0, )
paddle.linalg.norm(Tensor([1, 0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([300, 0, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([300, 1, 0],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([4, 0],"float32"), )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([5, 0, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([5, 5, 0],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([50, 0, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 50, 0],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=None, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=None, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=None, )
paddle.linalg.pinv(Tensor([0, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 0, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 200, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([0, 2, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([0, 4],"float32"), )
paddle.linalg.pinv(x=Tensor([0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([2, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([3, 0],"float32"), )
paddle.linalg.pinv(x=Tensor([4, 0, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([4, 2, 0],"float64"), rcond=5, hermitian=True, )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3],"float64"), Tensor([3],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([6, 0],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([4, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([6, 0],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([4, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([3, 0],"float64"), Tensor([3],"float64"), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([0],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14, 14],"float64"), y=Tensor([0, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14],"float64"), y=Tensor([0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.solve(x=Tensor([0, 4],"float32"), y=Tensor([4],"float32"), )
paddle.linalg.solve(x=Tensor([14, 0],"float64"), y=Tensor([14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([14, 0],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 0],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([0],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([4, 0, 14],"float64"), y=Tensor([4, 0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 0, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 0],"float32"), y=Tensor([4],"float32"), )
paddle.linalg.solve(x=Tensor([4, 14, 0],"float64"), y=Tensor([4, 14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 0],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([0, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([4, 4],"float32"), y=Tensor([0],"float32"), )
paddle.linalg.svd_lowrank(Tensor([0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([4, 0],"float64"), q=4, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=True, )
paddle.log(Tensor([0, 1],"float32"), )
paddle.log(Tensor([0, 100, 4],"float32"), )
paddle.log(Tensor([0, 10164, 4],"float32"), )
paddle.log(Tensor([0, 16],"float32"), )
paddle.log(Tensor([0, 2, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 2, 300, 2],"float16"), )
paddle.log(Tensor([0, 2, 300, 2],"float32"), )
paddle.log(Tensor([0, 2],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 6],"float32"), name="Uniform_entropy", )
paddle.log(Tensor([0, 6],"float64"), name="Uniform_entropy", )
paddle.log(Tensor([0],"float32"), )
paddle.log(Tensor([0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0],"float64"), )
paddle.log(Tensor([1, 0, 300, 2],"float16"), )
paddle.log(Tensor([1, 0, 300, 2],"float32"), )
paddle.log(Tensor([1, 0, 4],"float32"), )
paddle.log(Tensor([1, 0],"float32"), )
paddle.log(Tensor([1, 100, 0],"float32"), )
paddle.log(Tensor([1, 10164, 0],"float32"), )
paddle.log(Tensor([1, 2, 0, 2],"float16"), )
paddle.log(Tensor([1, 2, 0, 2],"float32"), )
paddle.log(Tensor([1, 2, 300, 0],"float16"), )
paddle.log(Tensor([1, 2, 300, 0],"float32"), )
paddle.log(Tensor([3, 0, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 2, 0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([5, 0],"float32"), name="Uniform_entropy", )
paddle.log(Tensor([5, 0],"float64"), name="Uniform_entropy", )
paddle.log(x=Tensor([0, 2, 3],"float64"), )
paddle.log(x=Tensor([0, 2, 3],"float64"), name="test_log", )
paddle.log(x=Tensor([0, 2],"float32"), )
paddle.log(x=Tensor([0, 2],"float64"), )
paddle.log(x=Tensor([0],"float64"), )
paddle.log(x=Tensor([2, 0, 3],"float64"), )
paddle.log(x=Tensor([2, 0, 3],"float64"), name="test_log", )
paddle.log(x=Tensor([2, 0],"float32"), )
paddle.log(x=Tensor([2, 0],"float64"), )
paddle.log(x=Tensor([2, 2, 0],"float64"), )
paddle.log(x=Tensor([2, 2, 0],"float64"), name="test_log", )
paddle.log10(Tensor([0, 20, 1],"float32"), )
paddle.log10(Tensor([10, 0, 1],"float32"), )
paddle.log10(Tensor([10, 20, 0],"float32"), )
paddle.log10(x=Tensor([0, 2],"float32"), )
paddle.log10(x=Tensor([0, 2],"float64"), )
paddle.log10(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.log10(x=Tensor([0],"float64"), )
paddle.log10(x=Tensor([1, 0],"float32"), )
paddle.log10(x=Tensor([1, 0],"float64"), )
paddle.log10(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.log10(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.log10(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.log1p(Tensor([0, 12],"float64"), )
paddle.log1p(Tensor([0, 2, 3, 4],"float32"), )
paddle.log1p(Tensor([0, 2, 3, 4],"float64"), )
paddle.log1p(Tensor([0, 20, 1],"float32"), )
paddle.log1p(Tensor([0, 20],"float64"), )
paddle.log1p(Tensor([0, 200, 300],"float32"), )
paddle.log1p(Tensor([0],"float32"), )
paddle.log1p(Tensor([0],"float64"), )
paddle.log1p(Tensor([1, 0, 3, 4],"float32"), )
paddle.log1p(Tensor([1, 0, 3, 4],"float64"), )
paddle.log1p(Tensor([1, 2, 0, 4],"float32"), )
paddle.log1p(Tensor([1, 2, 0, 4],"float64"), )
paddle.log1p(Tensor([1, 2, 3, 0],"float32"), )
paddle.log1p(Tensor([1, 2, 3, 0],"float64"), )
paddle.log1p(Tensor([10, 0, 1],"float32"), )
paddle.log1p(Tensor([10, 0, 300],"float32"), )
paddle.log1p(Tensor([10, 0],"float64"), )
paddle.log1p(Tensor([10, 20, 0],"float32"), )
paddle.log1p(Tensor([10, 200, 0],"float32"), )
paddle.log1p(x=Tensor([0, 2],"float32"), )
paddle.log1p(x=Tensor([0, 2],"float64"), )
paddle.log1p(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.log1p(x=Tensor([0],"float64"), )
paddle.log1p(x=Tensor([1, 0],"float32"), )
paddle.log1p(x=Tensor([1, 0],"float64"), )
paddle.log1p(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.log1p(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.log1p(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.log2(Tensor([0, 12],"float32"), )
paddle.log2(Tensor([0, 12],"float64"), )
paddle.log2(Tensor([0, 20, 1],"float32"), )
paddle.log2(Tensor([0, 5, 2],"float32"), )
paddle.log2(Tensor([10, 0, 1],"float32"), )
paddle.log2(Tensor([10, 0],"float32"), )
paddle.log2(Tensor([10, 0],"float64"), )
paddle.log2(Tensor([10, 20, 0],"float32"), )
paddle.log2(Tensor([4, 0, 2],"float32"), )
paddle.log2(Tensor([4, 5, 0],"float32"), )
paddle.log2(x=Tensor([0, 2],"float32"), )
paddle.log2(x=Tensor([0, 2],"float64"), )
paddle.log2(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.log2(x=Tensor([0],"float64"), )
paddle.log2(x=Tensor([1, 0],"float32"), )
paddle.log2(x=Tensor([1, 0],"float64"), )
paddle.log2(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.log2(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.log2(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=-2, )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=-2, )
paddle.logical_and(Tensor([0, 1, 499, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([0, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_and(Tensor([0, 1],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_and(Tensor([0, 1001],"bool"), Tensor([0, 1001],"bool"), )
paddle.logical_and(Tensor([0, 1001],"bool"), Tensor([1, 1001],"bool"), )
paddle.logical_and(Tensor([0, 1024, 1024],"bool"), Tensor([0, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([0, 1024, 1024],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([0, 17, 5, 6, 7],"bool"), Tensor([0, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([0, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([0, 3, 4, 5],"bool"), Tensor([0, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([0, 3, 4, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([0, 496, 512],"bool"), Tensor([0, 496, 512],"bool"), )
paddle.logical_and(Tensor([0, 496, 512],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([1001],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([1002],"bool"), )
paddle.logical_and(Tensor([1, 0, 1024],"bool"), Tensor([1, 0, 1024],"bool"), )
paddle.logical_and(Tensor([1, 0, 1024],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([1, 0, 512],"bool"), Tensor([1, 0, 512],"bool"), )
paddle.logical_and(Tensor([1, 0, 512],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.logical_and(Tensor([1, 0],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_and(Tensor([1, 0],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_and(Tensor([1, 0],"bool"), Tensor([1, 1001],"bool"), )
paddle.logical_and(Tensor([1, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_and(Tensor([1, 1],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_and(Tensor([1, 1001],"bool"), Tensor([0, 1001],"bool"), )
paddle.logical_and(Tensor([1, 1001],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_and(Tensor([1, 1024, 0],"bool"), Tensor([1, 1024, 0],"bool"), )
paddle.logical_and(Tensor([1, 1024, 0],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([0, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([1, 0, 1024],"bool"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([1, 1024, 0],"bool"), )
paddle.logical_and(Tensor([1, 496, 0],"bool"), Tensor([1, 496, 0],"bool"), )
paddle.logical_and(Tensor([1, 496, 0],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([0, 496, 512],"bool"), )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([1, 0, 512],"bool"), )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([1, 496, 0],"bool"), )
paddle.logical_and(Tensor([10, 0, 499, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 0, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 499, 0],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 499, 1],"float32"), Tensor([0, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 499, 1],"float32"), Tensor([499, 0],"float32"), )
paddle.logical_and(Tensor([1001],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([1002],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([2, 0, 4, 5],"bool"), Tensor([2, 0, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 0, 4, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 0, 5],"bool"), Tensor([2, 3, 0, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 0, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 0],"bool"), Tensor([2, 3, 4, 0],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 0],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([0, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 0, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 3, 0, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 3, 4, 0],"bool"), )
paddle.logical_and(Tensor([8, 0, 5, 6, 7],"bool"), Tensor([8, 0, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 0, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 0, 6, 7],"bool"), Tensor([8, 17, 0, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 0, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 0, 7],"bool"), Tensor([8, 17, 5, 0, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 0, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 0],"bool"), Tensor([8, 17, 5, 6, 0],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 0],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([0, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 0, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 0, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 0, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 0],"bool"), )
paddle.logical_and(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([0, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_and(x=Tensor([0, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_and(x=Tensor([0],"bool"), y=Tensor([0],"bool"), )
paddle.logical_and(x=Tensor([0],"bool"), y=Tensor([4],"bool"), )
paddle.logical_and(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_and(x=Tensor([1, 0],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 0, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 0],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([0, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 0],"bool"), )
paddle.logical_and(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_and(x=Tensor([1, 2],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_and(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.logical_not(Tensor([0, 1, 1, 1],"bool"), )
paddle.logical_not(Tensor([0, 1, 1, 109],"bool"), )
paddle.logical_not(Tensor([0, 3],"bool"), )
paddle.logical_not(Tensor([0, 36828, 1],"bool"), )
paddle.logical_not(Tensor([0, 38367, 1],"bool"), )
paddle.logical_not(Tensor([0, 4],"int64"), )
paddle.logical_not(Tensor([0],"bool"), )
paddle.logical_not(Tensor([1, 0, 1, 1],"bool"), )
paddle.logical_not(Tensor([1, 0, 1, 109],"bool"), )
paddle.logical_not(Tensor([1, 0, 1],"bool"), )
paddle.logical_not(Tensor([1, 0],"bool"), )
paddle.logical_not(Tensor([1, 0],"int64"), )
paddle.logical_not(Tensor([1, 1, 0, 1],"bool"), )
paddle.logical_not(Tensor([1, 1, 0, 109],"bool"), )
paddle.logical_not(Tensor([1, 1, 1, 0],"bool"), )
paddle.logical_not(Tensor([1, 36828, 0],"bool"), )
paddle.logical_not(Tensor([1, 38367, 0],"bool"), )
paddle.logical_not(x=Tensor([0, 2, 1, 3],"bool"), )
paddle.logical_not(x=Tensor([0, 2],"bool"), )
paddle.logical_not(x=Tensor([0],"bool"), )
paddle.logical_not(x=Tensor([1, 0, 1, 3],"bool"), )
paddle.logical_not(x=Tensor([1, 0],"bool"), )
paddle.logical_not(x=Tensor([1, 2, 0, 3],"bool"), )
paddle.logical_not(x=Tensor([1, 2, 1, 0],"bool"), )
paddle.logical_or(Tensor([0, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_or(Tensor([0, 1],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_or(Tensor([0, 1],"bool"), Tensor([2, 1],"bool"), )
paddle.logical_or(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_or(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([0, 7, 1],"bool"), Tensor([0, 1, 7],"bool"), )
paddle.logical_or(Tensor([0, 7, 1],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([1],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([10105],"bool"), )
paddle.logical_or(Tensor([1, 0],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_or(Tensor([1, 0],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_or(Tensor([1],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_or(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_or(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_or(Tensor([10105],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([13, 0, 1],"bool"), Tensor([13, 0, 7],"bool"), )
paddle.logical_or(Tensor([13, 0, 1],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 0],"bool"), Tensor([13, 1, 0],"bool"), )
paddle.logical_or(Tensor([13, 7, 0],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([0, 1, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([13, 0, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([13, 1, 0],"bool"), )
paddle.logical_or(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_or(Tensor([2, 0],"bool"), Tensor([2, 1],"bool"), )
paddle.logical_or(Tensor([2, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_or(Tensor([2, 1],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_or(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([0, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_or(x=Tensor([0, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_or(x=Tensor([0],"bool"), y=Tensor([0],"bool"), )
paddle.logical_or(x=Tensor([0],"bool"), y=Tensor([4],"bool"), )
paddle.logical_or(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_or(x=Tensor([1, 0],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 0, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 0],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([0, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 0],"bool"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_or(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.logical_xor(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_xor(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_xor(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_xor(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([0, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_xor(x=Tensor([0, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_xor(x=Tensor([0],"bool"), y=Tensor([0],"bool"), )
paddle.logical_xor(x=Tensor([0],"bool"), y=Tensor([4],"bool"), )
paddle.logical_xor(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_xor(x=Tensor([1, 0],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 0, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 0],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([0, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 0],"bool"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_xor(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.logit(Tensor([0, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([0],"float32"), 1e-08, )
paddle.logit(Tensor([10, 0, 1],"float32"), 0.001, )
paddle.logit(Tensor([10, 20, 0],"float32"), 0.001, )
paddle.logit(x=Tensor([0, 2],"float64"), )
paddle.logit(x=Tensor([0, 3, 2, 5],"float64"), )
paddle.logit(x=Tensor([0, 3, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([0, 3, 2],"float64"), )
paddle.logit(x=Tensor([0],"float32"), )
paddle.logit(x=Tensor([0],"float64"), )
paddle.logit(x=Tensor([4, 0, 2, 5],"float64"), )
paddle.logit(x=Tensor([4, 0, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 0, 2],"float64"), )
paddle.logit(x=Tensor([4, 0],"float64"), )
paddle.logit(x=Tensor([4, 3, 0, 5],"float64"), )
paddle.logit(x=Tensor([4, 3, 0, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 3, 0],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 0],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 0],"float64"), eps=0.2, )
paddle.logsumexp(Tensor([0, 16, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([0, 4, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([0, 5, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([0, 8, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0],"float32"), axis=0, )
paddle.logsumexp(Tensor([10, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([26, 0, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 0, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 0, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 16, 0],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([4, 0, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([4, 5, 0],"float64"), list[-1,], False, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], keepdim=True, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([300, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([300, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([0, 60, 10],"int32"), Tensor([0, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 10],"int32"), Tensor([10, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 2],"int32"), Tensor([0, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 2],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([10, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([2, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([10, 0, 10],"int32"), Tensor([10, 0, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0, 10],"int32"), Tensor([10, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0],"int32"), Tensor([10, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0],"int32"), Tensor([10, 60],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 0],"int32"), Tensor([10, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 0],"int32"), Tensor([10, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 10],"int32"), Tensor([0, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 10],"int32"), Tensor([10, 0, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 10],"int32"), Tensor([10, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60],"int32"), Tensor([10, 0],"bool"), 0, )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([2, 0, 2],"int32"), Tensor([2, 0, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0, 2],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0],"int32"), Tensor([2, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0],"int32"), Tensor([2, 60],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 0],"int32"), Tensor([2, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 0],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([0, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([2, 0, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([2, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60],"int32"), Tensor([2, 0],"bool"), 0, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([0, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([0, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.5797171592712402, )
paddle.masked_select(Tensor([0, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([0, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([0, 2, 2],"float32"), Tensor([0, 2, 2],"bool"), )
paddle.masked_select(Tensor([0, 2, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([0, 21504, 4],"float32"), Tensor([0, 21504, 4],"bool"), )
paddle.masked_select(Tensor([0, 21504, 4],"float32"), Tensor([1, 21504, 4],"bool"), )
paddle.masked_select(Tensor([0, 21504],"float32"), Tensor([0, 21504],"bool"), )
paddle.masked_select(Tensor([0, 21504],"float32"), Tensor([1, 21504],"bool"), )
paddle.masked_select(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"bool"), )
paddle.masked_select(Tensor([1, 0, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 0, 4],"float32"), Tensor([1, 0, 4],"bool"), )
paddle.masked_select(Tensor([1, 0, 4],"float32"), Tensor([1, 21504, 4],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 21504],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 0],"bool"), )
paddle.masked_select(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([0, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 0, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 0],"bool"), )
paddle.masked_select(Tensor([1, 21504, 0],"float32"), Tensor([1, 21504, 0],"bool"), )
paddle.masked_select(Tensor([1, 21504, 0],"float32"), Tensor([1, 21504, 4],"bool"), )
paddle.masked_select(Tensor([1, 21504, 4],"float32"), Tensor([0, 21504, 4],"bool"), )
paddle.masked_select(Tensor([1, 21504, 4],"float32"), Tensor([1, 0, 4],"bool"), )
paddle.masked_select(Tensor([1, 21504, 4],"float32"), Tensor([1, 21504, 0],"bool"), )
paddle.masked_select(Tensor([1, 21504],"float32"), Tensor([0, 21504],"bool"), )
paddle.masked_select(Tensor([1, 21504],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float32"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float64"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float64"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float32"), mask=Tensor([2, 0],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float64"), mask=Tensor([2, 0],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float64"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float32"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float32"), mask=Tensor([2, 0],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float64"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float64"), mask=Tensor([2, 0],"bool"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([0, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([0, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([0, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([0, 3598, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1001, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1002, 2],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([10, 1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([11],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.maximum(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 0, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 0, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1001, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1002, 2],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 3598, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1001, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1002, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([0, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([0, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 0, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 0, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([0, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([0, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 3598, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1001, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1002, 0],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([10, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([10, 1],"float32"), Tensor([10, 0],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([100, 0],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([100, 1],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([11],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.maximum(Tensor([200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.maximum(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.maximum(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.maximum(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.maximum(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.maximum(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.maximum(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.maximum(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.maximum(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.maximum(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.mean(Tensor([0, 1, 1, 1, 3],"float64"), )
paddle.mean(Tensor([0, 1, 1, 1],"float64"), )
paddle.mean(Tensor([0, 1, 1, 4, 3],"float64"), )
paddle.mean(Tensor([0, 1, 1],"float64"), )
paddle.mean(Tensor([0, 1, 100],"float32"), )
paddle.mean(Tensor([0, 1, 16, 16],"float32"), )
paddle.mean(Tensor([0, 1, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 1],"float32"), )
paddle.mean(Tensor([0, 1],"float32"), name=None, )
paddle.mean(Tensor([0, 10, 5],"float64"), name=None, )
paddle.mean(Tensor([0, 10],"float32"), axis=-1, )
paddle.mean(Tensor([0, 10],"float32"), name=None, )
paddle.mean(Tensor([0, 100, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([0, 100, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([0, 120],"float64"), )
paddle.mean(Tensor([0, 14, 5, 1, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([0, 16, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([0, 2, 1, 512, 4, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([0, 2, 16, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 2, 16],"float32"), axis=0, )
paddle.mean(Tensor([0, 2, 3, 1, 5, 1, 2],"float64"), )
paddle.mean(Tensor([0, 2, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([0, 2],"float64"), axis=1, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([0, 256, 16, 16],"float16"), -2, )
paddle.mean(Tensor([0, 256, 16, 16],"float32"), -2, )
paddle.mean(Tensor([0, 256],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 256],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 28, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([0, 3, 2048],"float16"), axis=1, )
paddle.mean(Tensor([0, 3, 3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([0, 3, 3, 4],"float64"), name=None, )
paddle.mean(Tensor([0, 3, 4, 4, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([0, 3],"float32"), axis=list[0,], )
paddle.mean(Tensor([0, 300, 2048],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([0, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([0, 49, 512],"float32"), axis=1, )
paddle.mean(Tensor([0, 5],"float32"), axis=None, )
paddle.mean(Tensor([0, 512],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([0, 60],"float32"), axis=0, )
paddle.mean(Tensor([0, 64],"float32"), axis=-1, )
paddle.mean(Tensor([0, 7, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 8, 768],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([0, 8, 768],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([0, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 9],"float32"), axis=1, )
paddle.mean(Tensor([0, 96, 1],"float32"), name=None, )
paddle.mean(Tensor([0, 96, 2],"float32"), axis=-1, )
paddle.mean(Tensor([0, 960, 960],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([0],"float16"), axis=0, )
paddle.mean(Tensor([0],"float32"), )
paddle.mean(Tensor([0],"float32"), axis=0, )
paddle.mean(Tensor([0],"float32"), name=None, )
paddle.mean(Tensor([0],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1],"float64"), )
paddle.mean(Tensor([1, 0, 1, 4, 3],"float64"), )
paddle.mean(Tensor([1, 0, 1],"float64"), )
paddle.mean(Tensor([1, 0, 100],"float32"), )
paddle.mean(Tensor([1, 0, 16, 16],"float32"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 0, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 0, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 0, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 0],"float32"), )
paddle.mean(Tensor([1, 0],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([1, 0],"float32"), name=None, )
paddle.mean(Tensor([1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 0, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 0, 1],"float64"), )
paddle.mean(Tensor([1, 1, 0, 16],"float32"), )
paddle.mean(Tensor([1, 1, 0, 4, 3],"float64"), )
paddle.mean(Tensor([1, 1, 0],"float32"), )
paddle.mean(Tensor([1, 1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 1, 1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 1, 4, 0],"float64"), )
paddle.mean(Tensor([1, 1, 16, 0],"float32"), )
paddle.mean(Tensor([1, 100, 0, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 0, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 0, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 0, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 0, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 0, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 0],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 0],"float64"), )
paddle.mean(Tensor([1, 2, 0, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 0, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 0, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 0, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 3, 0],"float64"), )
paddle.mean(Tensor([1, 28, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 8, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([10, 0, 5],"float64"), name=None, )
paddle.mean(Tensor([10, 0],"float32"), axis=0, )
paddle.mean(Tensor([10, 0],"float32"), name=None, )
paddle.mean(Tensor([10, 10, 0],"float64"), name=None, )
paddle.mean(Tensor([128, 0, 512],"float32"), axis=1, )
paddle.mean(Tensor([128, 49, 0],"float32"), axis=1, )
paddle.mean(Tensor([13, 0, 16, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 0, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 2, 0, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 2, 16, 0, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 2, 16, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 7, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([14, 0, 768],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 0, 768],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 8, 0],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 8, 0],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([16, 0, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 0, 1],"float32"), name=None, )
paddle.mean(Tensor([16, 0, 2],"float32"), axis=-1, )
paddle.mean(Tensor([16, 0, 2048],"float16"), axis=1, )
paddle.mean(Tensor([16, 0, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 16, 0, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 16, 3, 0],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 3, 0],"float16"), axis=1, )
paddle.mean(Tensor([16, 32, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 32, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 96, 0],"float32"), axis=-1, )
paddle.mean(Tensor([16, 96, 0],"float32"), name=None, )
paddle.mean(Tensor([2, 0, 2],"float32"), axis=-1, )
paddle.mean(Tensor([2, 0, 2048],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([2, 0, 3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([2, 0, 4, 4, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 0, 5, 1, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 0, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 0],"float32"), axis=0, )
paddle.mean(Tensor([2, 0],"float32"), axis=list[0,], )
paddle.mean(Tensor([2, 1, 0, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 1, 8, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 14, 0, 1, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 14, 5, 0, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 14, 5, 1, 0, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 14, 5, 1, 1, 0, 1, 1, 2],"float32"), )
paddle.mean(Tensor([2, 14, 5, 1, 1, 2, 0, 1, 2],"float32"), )
paddle.mean(Tensor([2, 14, 5, 1, 1, 2, 1, 0, 2],"float32"), )
paddle.mean(Tensor([2, 14, 5, 1, 1, 2, 1, 1, 0],"float32"), )
paddle.mean(Tensor([2, 3, 0, 4, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 0, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 0, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 0, 4, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 3, 0, 3, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 3, 4, 0, 4],"float64"), )
paddle.mean(Tensor([2, 3, 3, 4, 3, 4, 3, 0],"float64"), )
paddle.mean(Tensor([2, 3, 4, 0, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 0, 3, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 2, 0, 4, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 2, 3, 0, 4],"float64"), )
paddle.mean(Tensor([2, 3, 4, 4, 2, 3, 4, 0],"float64"), )
paddle.mean(Tensor([2, 300, 0],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([2, 96, 0],"float32"), axis=-1, )
paddle.mean(Tensor([26, 0, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([26, 7, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([26182, 0, 16],"float32"), axis=0, )
paddle.mean(Tensor([26182, 2, 0],"float32"), axis=0, )
paddle.mean(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 0, 3, 1, 5, 1, 2],"float64"), )
paddle.mean(Tensor([3, 0],"float32"), axis=None, )
paddle.mean(Tensor([3, 2, 0, 1, 5, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 1, 0, 1, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 1, 5, 0, 2],"float64"), )
paddle.mean(Tensor([3, 2, 3, 1, 5, 1, 0],"float64"), )
paddle.mean(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.mean(Tensor([30, 0, 40],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([30, 200, 0],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([4, 0, 1, 512, 4, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([4, 0, 16, 16],"float16"), -2, )
paddle.mean(Tensor([4, 0, 16, 16],"float32"), -2, )
paddle.mean(Tensor([4, 0, 3, 4],"float64"), name=None, )
paddle.mean(Tensor([4, 0],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([4, 0],"float32"), axis=-1, )
paddle.mean(Tensor([4, 0],"float32"), axis=list[0,], )
paddle.mean(Tensor([4, 2, 0, 512, 4, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([4, 2, 1, 0, 4, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([4, 2, 1, 512, 0, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([4, 2, 1, 512, 4, 0],"float32"), 0, True, None, )
paddle.mean(Tensor([4, 256, 0, 16],"float16"), -2, )
paddle.mean(Tensor([4, 256, 0, 16],"float32"), -2, )
paddle.mean(Tensor([4, 256, 16, 0],"float16"), -2, )
paddle.mean(Tensor([4, 256, 16, 0],"float32"), -2, )
paddle.mean(Tensor([4, 3, 0, 4],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 3, 0],"float64"), name=None, )
paddle.mean(Tensor([5, 0],"float64"), axis=1, )
paddle.mean(Tensor([6, 0],"float32"), axis=1, )
paddle.mean(Tensor([8, 0, 960],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([8, 960, 0],"float32"), axis=list[1,2,], )
paddle.mean(x=Tensor([0, 1, 3],"float64"), axis=list[0,1,], )
paddle.mean(x=Tensor([0, 1, 3],"float64"), axis=list[0,1,2,], )
paddle.mean(x=Tensor([0, 1, 3],"float64"), axis=list[0,1,2,], keepdim=False, )
paddle.mean(x=Tensor([0, 1, 3],"float64"), axis=list[0,2,], keepdim=True, )
paddle.mean(x=Tensor([0, 1, 3],"float64"), axis=tuple(0,1,2,), keepdim=False, )
paddle.mean(x=Tensor([0, 1, 3],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.mean(x=Tensor([0, 1],"float32"), )
paddle.mean(x=Tensor([0, 4],"float32"), )
paddle.mean(x=Tensor([0, 4],"float64"), axis=1, )
paddle.mean(x=Tensor([0, 4],"float64"), axis=1, keepdim=True, )
paddle.mean(x=Tensor([0, 4],"float64"), axis=-2, )
paddle.mean(x=Tensor([0, 4],"float64"), axis=-2, keepdim=False, )
paddle.mean(x=Tensor([0, 96, 1],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([0, 96, 2],"float32"), axis=-1, )
paddle.mean(x=Tensor([1, 0],"float32"), )
paddle.mean(x=Tensor([1, 0],"float64"), axis=1, )
paddle.mean(x=Tensor([1, 0],"float64"), axis=1, keepdim=True, )
paddle.mean(x=Tensor([1, 0],"float64"), axis=-2, )
paddle.mean(x=Tensor([1, 0],"float64"), axis=-2, keepdim=False, )
paddle.mean(x=Tensor([13, 0, 1],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([13, 96, 0],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([16, 0, 1],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([16, 0, 2],"float32"), axis=-1, )
paddle.mean(x=Tensor([16, 96, 0],"float32"), axis=-1, )
paddle.mean(x=Tensor([16, 96, 0],"float32"), axis=tuple(1,), keepdim=True, )
paddle.mean(x=Tensor([2, 0, 2],"float32"), axis=-1, )
paddle.mean(x=Tensor([2, 0, 3],"float64"), axis=list[0,1,], )
paddle.mean(x=Tensor([2, 0, 3],"float64"), axis=list[0,1,2,], )
paddle.mean(x=Tensor([2, 0, 3],"float64"), axis=list[0,1,2,], keepdim=False, )
paddle.mean(x=Tensor([2, 0, 3],"float64"), axis=list[0,2,], keepdim=True, )
paddle.mean(x=Tensor([2, 0, 3],"float64"), axis=tuple(0,1,2,), keepdim=False, )
paddle.mean(x=Tensor([2, 0, 3],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.mean(x=Tensor([2, 1, 0],"float64"), axis=list[0,1,], )
paddle.mean(x=Tensor([2, 1, 0],"float64"), axis=list[0,1,2,], )
paddle.mean(x=Tensor([2, 1, 0],"float64"), axis=list[0,1,2,], keepdim=False, )
paddle.mean(x=Tensor([2, 1, 0],"float64"), axis=list[0,2,], keepdim=True, )
paddle.mean(x=Tensor([2, 1, 0],"float64"), axis=tuple(0,1,2,), keepdim=False, )
paddle.mean(x=Tensor([2, 1, 0],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.mean(x=Tensor([2, 96, 0],"float32"), axis=-1, )
paddle.minimum(Tensor([0, 1, 1, 2],"float32"), Tensor([0, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 1, 2],"float32"), Tensor([0, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 1, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 1, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 2],"float32"), Tensor([0, 10285, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 2],"float32"), Tensor([0, 3598, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 2],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 2],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 2],"float32"), Tensor([1001, 2],"float32"), )
paddle.minimum(Tensor([0, 1, 2],"float32"), Tensor([1002, 2],"float32"), )
paddle.minimum(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.minimum(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([0, 1],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([0, 1],"int64"), Tensor([0, 1],"int64"), )
paddle.minimum(Tensor([0, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.minimum(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.minimum(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([11],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([110484],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 0, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 0, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 2],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 2],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 2],"float32"), Tensor([1001, 2],"float32"), )
paddle.minimum(Tensor([1, 0, 2],"float32"), Tensor([1002, 2],"float32"), )
paddle.minimum(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.minimum(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([1, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 0],"int64"), Tensor([1, 0],"int64"), )
paddle.minimum(Tensor([1, 0],"int64"), Tensor([1, 1],"int64"), )
paddle.minimum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 0],"float32"), Tensor([1, 10285, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 0],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 0],"float32"), Tensor([1, 3598, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 0],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 0],"float32"), Tensor([1001, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 0],"float32"), Tensor([1002, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 10285, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([0, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([0, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 0, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 0, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 10285, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([0, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([0, 3598, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1, 10285, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1, 3598, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1001, 0],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1002, 0],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([1, 1],"int64"), Tensor([0, 1],"int64"), )
paddle.minimum(Tensor([1, 1],"int64"), Tensor([1, 0],"int64"), )
paddle.minimum(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.minimum(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([11],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([110484],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.minimum(Tensor([200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.minimum(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.minimum(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.minimum(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.minimum(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.minimum(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.minimum(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.minimum(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.minimum(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.minimum(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.minimum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.minimum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.minimum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.minimum(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.minimum(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.minimum(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.mm(input=Tensor([0, 3],"float32"), mat2=Tensor([0, 2],"float32"), )
paddle.mm(input=Tensor([0, 3],"float32"), mat2=Tensor([3, 2],"float32"), )
paddle.mm(input=Tensor([0, 3],"float64"), mat2=Tensor([0, 2],"float64"), )
paddle.mm(input=Tensor([0, 3],"float64"), mat2=Tensor([3, 2],"float64"), )
paddle.mm(input=Tensor([2, 0],"float32"), mat2=Tensor([3, 0],"float32"), )
paddle.mm(input=Tensor([2, 0],"float32"), mat2=Tensor([3, 2],"float32"), )
paddle.mm(input=Tensor([2, 0],"float64"), mat2=Tensor([3, 0],"float64"), )
paddle.mm(input=Tensor([2, 0],"float64"), mat2=Tensor([3, 2],"float64"), )
paddle.mm(input=Tensor([2, 3],"float32"), mat2=Tensor([0, 2],"float32"), )
paddle.mm(input=Tensor([2, 3],"float32"), mat2=Tensor([3, 0],"float32"), )
paddle.mm(input=Tensor([2, 3],"float64"), mat2=Tensor([0, 2],"float64"), )
paddle.mm(input=Tensor([2, 3],"float64"), mat2=Tensor([3, 0],"float64"), )
paddle.mm(Tensor([0, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.mm(Tensor([0, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.mm(Tensor([0, 10],"float64"), Tensor([0, 1],"float64"), )
paddle.mm(Tensor([0, 10],"float64"), Tensor([10, 1],"float64"), )
paddle.mm(Tensor([1, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.mm(Tensor([1, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.mm(Tensor([1, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.mm(Tensor([1, 0],"float64"), Tensor([10, 1],"float64"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([0, 1],"float64"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.moveaxis(Tensor([0, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([0, 3, 4],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([0, 7, 6],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(Tensor([0, 7, 6],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([2, 0, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 0, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 4, 0, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 4, 5, 0],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([4, 0, 6],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 0, 6],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 7, 0],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(Tensor([4, 7, 0],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([5, 0, 4],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([5, 3, 0],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(x=Tensor([0, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([0, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([0, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([0, 2, 3],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([0, 2],"complex128"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([0, 2],"complex64"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 0, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 0, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 0, 3, 5],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 0, 3],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 0],"complex128"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 0],"complex64"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2, 0, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 0, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 2, 0, 5],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 0],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 0, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 0, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 2, 3, 0],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 0],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 0],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.multigammaln(Tensor([0, 20],"float32"), 2, )
paddle.multigammaln(Tensor([0, 20],"float64"), 2, )
paddle.multigammaln(Tensor([10, 0],"float32"), 2, )
paddle.multigammaln(Tensor([10, 0],"float64"), 2, )
paddle.mv(Tensor([0, 12],"float32"), Tensor([12],"float32"), )
paddle.mv(Tensor([0, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([1, 0],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([1, 18],"float32"), Tensor([0],"float32"), )
paddle.mv(Tensor([3, 0],"float32"), Tensor([12],"float32"), )
paddle.mv(Tensor([3, 12],"float32"), Tensor([0],"float32"), )
paddle.mv(x=Tensor([0, 1],"float64"), vec=Tensor([1],"float64"), )
paddle.mv(x=Tensor([0, 2],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(x=Tensor([1, 0],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(x=Tensor([1, 2],"float64"), vec=Tensor([0],"float64"), )
paddle.mv(x=Tensor([2, 0],"float64"), vec=Tensor([1],"float64"), )
paddle.mv(x=Tensor([2, 1],"float64"), vec=Tensor([0],"float64"), )
paddle.nan_to_num(Tensor([0, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([0, 2],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([0, 3],"float32"), )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, None, None, )
paddle.nan_to_num(Tensor([0, 4],"float32"), )
paddle.nan_to_num(Tensor([0, 5, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([114, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([148, 0, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([148, 5, 0],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([1948, 0],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([2, 0],"float32"), )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, None, None, )
paddle.nan_to_num(Tensor([400, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([0, 3],"float32"), 0, True, )
paddle.nanmean(Tensor([0, 3],"float32"), 1, False, )
paddle.nanmean(Tensor([0, 3],"float32"), -1, False, )
paddle.nanmean(Tensor([0, 3],"float32"), None, False, )
paddle.nanmean(Tensor([0, 3],"float32"), None, True, )
paddle.nanmean(Tensor([0, 3],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([0, 5],"float32"), axis=None, )
paddle.nanmean(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nanmean(Tensor([0],"float32"), axis=0, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 0],"float32"), 0, True, )
paddle.nanmean(Tensor([2, 0],"float32"), 1, False, )
paddle.nanmean(Tensor([2, 0],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 0],"float32"), None, False, )
paddle.nanmean(Tensor([2, 0],"float32"), None, True, )
paddle.nanmean(Tensor([2, 0],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([3, 0],"float32"), axis=None, )
paddle.nanmean(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([0, 3],"float64"), q=0.35, axis=0, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.35, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.5, axis=2, )
paddle.nanquantile(Tensor([0, 7],"float32"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([0, 7],"float64"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([0],"float32"), 0.5, 0, )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([2, 0],"float64"), q=0.35, axis=0, )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.35, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.5, axis=2, )
paddle.nanquantile(Tensor([4, 0],"float32"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([4, 0],"float64"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.35, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.5, axis=2, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([0, 4],"float32"), )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nansum(Tensor([0],"float32"), axis=0, )
paddle.nansum(Tensor([0],"float32"), axis=list[0,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nansum(x=Tensor([0, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.nansum(x=Tensor([0, 3, 3],"float64"), axis=-1, )
paddle.nansum(x=Tensor([3, 0, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), axis=0, keepdim=True, )
paddle.nansum(x=Tensor([3, 0, 3],"float64"), axis=-1, )
paddle.nansum(x=Tensor([3, 2, 0, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 0, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 0, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 0],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.nansum(x=Tensor([3, 3, 0],"float64"), axis=-1, )
paddle.neg(Tensor([0, 16, 32],"float32"), )
paddle.neg(Tensor([0, 20, 1],"float32"), )
paddle.neg(Tensor([0, 8],"float32"), )
paddle.neg(Tensor([0, 8],"float64"), )
paddle.neg(Tensor([10, 0, 1],"float32"), )
paddle.neg(Tensor([10, 20, 0],"float32"), )
paddle.neg(Tensor([32, 0],"float32"), )
paddle.neg(Tensor([32, 0],"float64"), )
paddle.neg(Tensor([8, 0, 32],"float32"), )
paddle.neg(Tensor([8, 16, 0],"float32"), )
paddle.neg(x=Tensor([0, 6, 6],"float64"), )
paddle.neg(x=Tensor([0, 6],"float32"), )
paddle.neg(x=Tensor([0, 6],"float64"), )
paddle.neg(x=Tensor([6, 0, 6],"float64"), )
paddle.neg(x=Tensor([6, 0],"float32"), )
paddle.neg(x=Tensor([6, 0],"float64"), )
paddle.neg(x=Tensor([6, 6, 0],"float64"), )
paddle.nextafter(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.nextafter(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.nextafter(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([0, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.nextafter(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.nextafter(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.nextafter(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.nextafter(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.nextafter(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 1024, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 256, 16],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([0, 3, 8],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 0, 16],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 0, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 1024, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([12, 256, 0],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 0, 8],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 0],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=8, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=8, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 0],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 0],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 0],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 0],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 1, 4],"float64"), 4, True, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 8],"float64"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([1, 0, 4],"float64"), 4, True, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([1, 1, 0],"float64"), 4, True, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 8],"float64"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float64"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 1, 4],"float64"), output_size=4, return_mask=True, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 3, 32],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 3, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([0, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([1, 0, 4],"float64"), output_size=4, return_mask=True, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([1, 1, 0],"float64"), output_size=4, return_mask=True, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 0, 32],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 0, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 0, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 0],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 0],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 0],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 1, 8, 8],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 2, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 0, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 0, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 0, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 0, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 0, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 5, 0],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 1, 5, 0],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 0, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 8, 0],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 8, 8],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 0, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 0, 8],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 0],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 0],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 1, 8, 8],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 2, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 0, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 0, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 0, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 0, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 0, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 5, 0],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 1, 5, 0],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 0, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 8, 0],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 8, 8],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 0, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 0, 8],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 0],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 0],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 2, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 2, 8, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 0, 5, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 0, 5, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 0, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 0, 8, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 0, 5, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 0, 5, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 0, 5],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 0, 5],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 5, 0],"float32"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 1, 5, 5, 0],"float64"), output_size=3, return_mask=True, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 0, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 0, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 0, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 0, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 0],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 0],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 1, 5, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 1, 5, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 2, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 2, 8, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 0, 5, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 0, 5, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 0, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 0, 8, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 0, 5, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 0, 5, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 0, 5],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 0, 5],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 5, 0],"float32"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 1, 5, 5, 0],"float64"), output_size=3, return_mask=True, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 0, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 0, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 0, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 0, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 0],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 0],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([2, 0, 3],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([2, 2, 0],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.celu(Tensor([0, 2],"float64"), -0.4, None, )
paddle.nn.functional.celu(Tensor([0, 3, 4],"float32"), 1.0, None, )
paddle.nn.functional.celu(Tensor([0, 3, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([0, 4, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 0, 4],"float32"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 0, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 0, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 0],"float64"), -0.4, None, )
paddle.nn.functional.celu(Tensor([2, 3, 0],"float32"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 3, 0],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 4, 0],"float64"), 0.2, None, )
paddle.nn.functional.celu(x=Tensor([0, 2],"float64"), alpha=-0.4, )
paddle.nn.functional.celu(x=Tensor([0, 3, 4],"float32"), )
paddle.nn.functional.celu(x=Tensor([0, 3, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([0, 4, 4],"float64"), alpha=0.2, )
paddle.nn.functional.celu(x=Tensor([2, 0, 4],"float32"), )
paddle.nn.functional.celu(x=Tensor([2, 0, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 0, 4],"float64"), alpha=0.2, )
paddle.nn.functional.celu(x=Tensor([2, 0],"float64"), alpha=-0.4, )
paddle.nn.functional.celu(x=Tensor([2, 3, 0],"float32"), )
paddle.nn.functional.celu(x=Tensor([2, 3, 0],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 4, 0],"float64"), alpha=0.2, )
paddle.nn.functional.cosine_similarity(Tensor([0, 1024],"float32"), Tensor([0, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 1024],"float32"), Tensor([210, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 10],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 128],"float32"), Tensor([0, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 128],"float32"), Tensor([32, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 13],"float32"), Tensor([0, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 13],"float32"), Tensor([12, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 8, 2],"float64"), Tensor([0, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 8, 2],"float64"), Tensor([3, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 0],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 0],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 0],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 0],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 0],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 0],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 0, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 0],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 0],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 0],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 0],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 0],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 0],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0, 10],"float32"), Tensor([10, 0, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 0],"float32"), Tensor([10, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 0],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([10, 0, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([10, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([12, 0],"float32"), Tensor([12, 0],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 0],"float32"), Tensor([12, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 13],"float32"), Tensor([0, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 13],"float32"), Tensor([12, 0],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([210, 0],"float32"), Tensor([210, 0],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([210, 0],"float32"), Tensor([210, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([210, 1024],"float32"), Tensor([0, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([210, 1024],"float32"), Tensor([210, 0],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 0, 2],"float64"), Tensor([3, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 0],"float64"), Tensor([3, 8, 0],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 0],"float64"), Tensor([3, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 2],"float64"), Tensor([0, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 2],"float64"), Tensor([3, 0, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 2],"float64"), Tensor([3, 8, 0],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([32, 0],"float32"), Tensor([32, 0],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 0],"float32"), Tensor([32, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 128],"float32"), Tensor([0, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 128],"float32"), Tensor([32, 0],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 0, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 0, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 0],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 0, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 3, 0],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3, 4],"float64"), x2=Tensor([0, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3, 4],"float64"), x2=Tensor([2, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float32"), x2=Tensor([0, 3],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float32"), x2=Tensor([2, 3],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float64"), x2=Tensor([0, 3],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float64"), x2=Tensor([0, 3],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float64"), x2=Tensor([0, 3],"float64"), axis=1, )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float64"), x2=Tensor([2, 3],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float64"), x2=Tensor([2, 3],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([0, 3],"float64"), x2=Tensor([2, 3],"float64"), axis=1, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0, 4],"float64"), x2=Tensor([2, 0, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0, 4],"float64"), x2=Tensor([2, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float32"), x2=Tensor([2, 0],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float32"), x2=Tensor([2, 3],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float64"), x2=Tensor([2, 0],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float64"), x2=Tensor([2, 0],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float64"), x2=Tensor([2, 0],"float64"), axis=1, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float64"), x2=Tensor([2, 3],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float64"), x2=Tensor([2, 3],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0],"float64"), x2=Tensor([2, 3],"float64"), axis=1, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 0],"float64"), x2=Tensor([2, 3, 0],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 0],"float64"), x2=Tensor([2, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 4],"float64"), x2=Tensor([0, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 4],"float64"), x2=Tensor([2, 0, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 4],"float64"), x2=Tensor([2, 3, 0],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float32"), x2=Tensor([0, 3],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float32"), x2=Tensor([2, 0],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([0, 3],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([0, 3],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([0, 3],"float64"), axis=1, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 0],"float64"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 0],"float64"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 0],"float64"), axis=1, )
paddle.nn.functional.elu(Tensor([0, 2],"float64"), 0.2, None, )
paddle.nn.functional.elu(Tensor([0, 20, 1],"float32"), )
paddle.nn.functional.elu(Tensor([0, 20],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([0, 21504, 2],"float32"), )
paddle.nn.functional.elu(Tensor([0, 3, 3],"float32"), 1.0, None, )
paddle.nn.functional.elu(Tensor([0, 3, 3],"float64"), 0, None, )
paddle.nn.functional.elu(Tensor([0, 3, 3],"float64"), 1.0, None, )
paddle.nn.functional.elu(Tensor([0, 3, 3],"float64"), 2, None, )
paddle.nn.functional.elu(Tensor([0, 32],"float32"), )
paddle.nn.functional.elu(Tensor([0, 64],"float32"), )
paddle.nn.functional.elu(Tensor([1, 0, 2],"float32"), )
paddle.nn.functional.elu(Tensor([1, 21504, 0],"float32"), )
paddle.nn.functional.elu(Tensor([10, 0, 1],"float32"), )
paddle.nn.functional.elu(Tensor([10, 20, 0],"float32"), )
paddle.nn.functional.elu(Tensor([15, 0],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([2, 0],"float32"), )
paddle.nn.functional.elu(Tensor([2, 0],"float64"), 0.2, None, )
paddle.nn.functional.elu(Tensor([3, 0, 3],"float32"), 1.0, None, )
paddle.nn.functional.elu(Tensor([3, 0, 3],"float64"), 0, None, )
paddle.nn.functional.elu(Tensor([3, 0, 3],"float64"), 1.0, None, )
paddle.nn.functional.elu(Tensor([3, 0, 3],"float64"), 2, None, )
paddle.nn.functional.elu(Tensor([3, 3, 0],"float32"), 1.0, None, )
paddle.nn.functional.elu(Tensor([3, 3, 0],"float64"), 0, None, )
paddle.nn.functional.elu(Tensor([3, 3, 0],"float64"), 1.0, None, )
paddle.nn.functional.elu(Tensor([3, 3, 0],"float64"), 2, None, )
paddle.nn.functional.elu(x=Tensor([0, 2],"float64"), alpha=0.2, )
paddle.nn.functional.elu(x=Tensor([0, 3, 3],"float32"), )
paddle.nn.functional.elu(x=Tensor([0, 3, 3],"float64"), )
paddle.nn.functional.elu(x=Tensor([0, 3, 3],"float64"), alpha=0, )
paddle.nn.functional.elu(x=Tensor([0, 3, 3],"float64"), alpha=2, )
paddle.nn.functional.elu(x=Tensor([2, 0],"float64"), alpha=0.2, )
paddle.nn.functional.elu(x=Tensor([3, 0, 3],"float32"), )
paddle.nn.functional.elu(x=Tensor([3, 0, 3],"float64"), )
paddle.nn.functional.elu(x=Tensor([3, 0, 3],"float64"), alpha=0, )
paddle.nn.functional.elu(x=Tensor([3, 0, 3],"float64"), alpha=2, )
paddle.nn.functional.elu(x=Tensor([3, 3, 0],"float32"), )
paddle.nn.functional.elu(x=Tensor([3, 3, 0],"float64"), )
paddle.nn.functional.elu(x=Tensor([3, 3, 0],"float64"), alpha=0, )
paddle.nn.functional.elu(x=Tensor([3, 3, 0],"float64"), alpha=2, )
paddle.nn.functional.fold(Tensor([0, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([0, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([0, 12, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, )
paddle.nn.functional.fold(Tensor([0, 12, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, dilations=2, )
paddle.nn.functional.fold(Tensor([0, 12, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), )
paddle.nn.functional.fold(Tensor([0, 12, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, )
paddle.nn.functional.fold(Tensor([0, 12, 9],"float64"), output_sizes=4, kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([2, 0, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, )
paddle.nn.functional.fold(Tensor([2, 0, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, dilations=2, )
paddle.nn.functional.fold(Tensor([2, 0, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), )
paddle.nn.functional.fold(Tensor([2, 0, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, )
paddle.nn.functional.fold(Tensor([2, 12, 0],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), )
paddle.nn.functional.fold(Tensor([2, 12, 0],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, )
paddle.nn.functional.fold(Tensor([2, 12, 0],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, )
paddle.nn.functional.fold(Tensor([2, 12, 0],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, dilations=2, )
paddle.nn.functional.fold(Tensor([3, 0, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 0, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 0, 9],"float64"), output_sizes=4, kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 0],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 0],"float64"), output_sizes=4, kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 0],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.glu(Tensor([0, 1, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 10, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), 0, None, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), -1, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), 1, None, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 0, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 1, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 10, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([5, 0],"float64"), -1, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), 0, None, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), 1, None, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), -1, None, )
paddle.nn.functional.glu(x=Tensor([0, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([0, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([0, 4],"float32"), )
paddle.nn.functional.glu(x=Tensor([0, 4],"float64"), )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float32"), axis=0, )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float64"), axis=0, )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float64"), axis=2, )
paddle.nn.functional.glu(x=Tensor([0],"float32"), )
paddle.nn.functional.glu(x=Tensor([0],"float64"), )
paddle.nn.functional.glu(x=Tensor([10, 0, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([10, 0, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([10, 2, 0],"float32"), )
paddle.nn.functional.glu(x=Tensor([10, 2, 0],"float64"), )
paddle.nn.functional.glu(x=Tensor([2, 0],"float32"), )
paddle.nn.functional.glu(x=Tensor([2, 0],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float32"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float64"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float64"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float32"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float64"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float64"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float32"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float32"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float64"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float64"), axis=2, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 176, 176],"float32"), Tensor([0, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 176, 176],"float32"), Tensor([0, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 176, 176],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 1, 176, 176],"float32"), Tensor([1, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 256, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 256, 64, 64],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 16, 16],"float32"), Tensor([0, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 16, 16],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 2, 2],"float32"), Tensor([0, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 2, 2],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 256, 256],"float32"), Tensor([0, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 256, 256],"float32"), Tensor([0, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 256, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 3, 256, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 20, 20],"float32"), Tensor([0, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 32, 20, 20],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([0, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([0, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([0, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 176, 176],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 176, 176],"float32"), Tensor([1, 0, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 176, 176],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 176, 176],"float32"), Tensor([1, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 0, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 0, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 0, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 0, 176],"float32"), Tensor([1, 1, 0, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 0, 176],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 0, 176],"float32"), Tensor([1, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 0],"float32"), Tensor([1, 1, 12544, 0],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 0],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 0],"float32"), Tensor([1, 1, 37632, 0],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 0],"float32"), Tensor([1, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([0, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([0, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 0, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 0, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 1, 0, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 1, 12544, 0],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 1, 37632, 0],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 28, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 34, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 280, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 28, 28, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 34, 34, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([0, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([0, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 0, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 0, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 28, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 28, 28, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 34, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 34, 34, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 280, 350, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([0, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 0, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 280, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 280, 350, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 0, 20, 20],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 0, 20, 20],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 0, 20],"float32"), Tensor([128, 476, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 0, 20],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 0],"float32"), Tensor([128, 476, 4, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 0],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 20],"float32"), Tensor([0, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 20],"float32"), Tensor([128, 0, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 20],"float32"), Tensor([128, 476, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 20],"float32"), Tensor([128, 476, 4, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 256, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 256, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 64, 64],"float32"), Tensor([16, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 0, 64, 64],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 0, 64],"float32"), Tensor([16, 64, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 0, 64],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 0],"float32"), Tensor([16, 64, 64, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 0],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 64],"float32"), Tensor([16, 0, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 64],"float32"), Tensor([16, 64, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 64],"float32"), Tensor([16, 64, 64, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 0, 256],"float32"), Tensor([16, 256, 0, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 0, 256],"float32"), Tensor([16, 256, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 0, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 0, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 0],"float32"), Tensor([16, 256, 256, 0],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 0],"float32"), Tensor([16, 256, 256, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 0],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 0],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([0, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([0, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 0, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 0, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 256, 0],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 256, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 16, 16],"float32"), Tensor([56, 0, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 16, 16],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 2, 2],"float32"), Tensor([56, 0, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 0, 2, 2],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 0, 16],"float32"), Tensor([56, 16, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 0, 16],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 0, 2],"float32"), Tensor([56, 2, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 0, 2],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 0],"float32"), Tensor([56, 16, 16, 0],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 0],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([0, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 0, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 16, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 16, 16, 0],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 0],"float32"), Tensor([56, 2, 2, 0],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 0],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([0, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 0, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 2, 0, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 2, 2, 0],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(x=Tensor([0, 64, 80, 94, 311],"float32"), grid=Tensor([0, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([0, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 0, 80, 94, 311],"float32"), grid=Tensor([4, 0, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 0, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 0, 94, 311],"float32"), grid=Tensor([4, 280, 0, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 0, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 0, 311],"float32"), grid=Tensor([4, 280, 376, 0, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 0, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 0],"float32"), grid=Tensor([4, 280, 376, 25, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 0],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([0, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 0, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 0, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 0, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.hardshrink(Tensor([0],"float32"), 0.5, None, )
paddle.nn.functional.hardshrink(Tensor([0],"float32"), -1, None, )
paddle.nn.functional.hardshrink(Tensor([0],"float64"), 0, None, )
paddle.nn.functional.hardshrink(Tensor([0],"float64"), 0.5, None, )
paddle.nn.functional.hardshrink(Tensor([0],"float64"), -1, None, )
paddle.nn.functional.hardshrink(x=Tensor([0],"float32"), )
paddle.nn.functional.hardshrink(x=Tensor([0],"float64"), )
paddle.nn.functional.hardshrink(x=Tensor([0],"float64"), threshold=0, )
paddle.nn.functional.hardshrink(x=Tensor([0],"float64"), threshold=-1, )
paddle.nn.functional.hardsigmoid(Tensor([0, 1024, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 120, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 192, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([0, 2],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 2],"float64"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 200, 40],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([0, 384, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([0, 4096],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 0, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 0, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 1024, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 1024, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 192, 0, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 192, 1, 0],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 384, 0, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 384, 1, 0],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([2, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 0],"float64"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([30, 0, 40],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([30, 200, 0],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([300, 0],"float32"), )
paddle.nn.functional.hardswish(Tensor([0, 1, 10, 10],"float32"), )
paddle.nn.functional.hardswish(Tensor([0, 1, 11, 11],"float32"), )
paddle.nn.functional.hardswish(Tensor([0, 1024, 18, 18],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 1024, 19, 19],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 1024],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 200, 40],"float32"), )
paddle.nn.functional.hardswish(Tensor([0, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 3, 3],"float64"), None, )
paddle.nn.functional.hardswish(Tensor([0, 300, 2048],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 0, 10, 10],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 0, 11, 11],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 0, 18, 18],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0, 19, 19],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 1, 0, 10],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 1, 0, 11],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 1, 10, 0],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 1, 11, 0],"float32"), )
paddle.nn.functional.hardswish(Tensor([1, 1024, 0, 18],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 1024, 0, 19],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 1024, 18, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 1024, 19, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 0, 2048],"float32"), )
paddle.nn.functional.hardswish(Tensor([2, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 300, 0],"float32"), )
paddle.nn.functional.hardswish(Tensor([3, 0, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([3, 0, 3],"float64"), None, )
paddle.nn.functional.hardswish(Tensor([3, 3, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([3, 3, 0],"float64"), None, )
paddle.nn.functional.hardswish(Tensor([30, 0, 40],"float32"), )
paddle.nn.functional.hardswish(Tensor([30, 200, 0],"float32"), )
paddle.nn.functional.hardswish(x=Tensor([0, 2, 4],"float64"), )
paddle.nn.functional.hardswish(x=Tensor([0, 4],"float32"), )
paddle.nn.functional.hardswish(x=Tensor([0, 4],"float64"), )
paddle.nn.functional.hardswish(x=Tensor([2, 0],"float32"), )
paddle.nn.functional.hardswish(x=Tensor([2, 0],"float64"), )
paddle.nn.functional.hardswish(x=Tensor([4, 0, 4],"float64"), )
paddle.nn.functional.hardswish(x=Tensor([4, 2, 0],"float64"), )
paddle.nn.functional.hardtanh(Tensor([0, 20, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), 0, 0, None, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), 0, 1.3, None, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), 1, 1, None, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), 2.3, 3.5, None, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(Tensor([0],"float32"), -1.0, 1.0, None, )
paddle.nn.functional.hardtanh(Tensor([0],"float64"), -1.0, 1.0, None, )
paddle.nn.functional.hardtanh(Tensor([10, 0, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([10, 20, 0],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), 0, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), 0, 1.3, None, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), 1, 1, None, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), 2.3, 3.5, None, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), 0, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), 0, 1.3, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), 1, 1, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), 2.3, 3.5, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=0, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=0, min=-3.4, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=1, min=1, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=1.3, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=-3.2, min=-3.2, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=3.5, min=2.3, )
paddle.nn.functional.hardtanh(x=Tensor([0],"float32"), )
paddle.nn.functional.hardtanh(x=Tensor([0],"float64"), )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=0, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=0, min=-3.4, )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=1, min=1, )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=1.3, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=-3.2, min=-3.2, )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=3.5, min=2.3, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=0, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=0, min=-3.4, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=1, min=1, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=1.3, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=-3.2, min=-3.2, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=3.5, min=2.3, )
