paddle.cast(Tensor([4],"bool"), type(numpy.bool), )
paddle.cast(Tensor([4],"float16"), type(numpy.bool), )
paddle.cast(Tensor([4],"float32"), type(numpy.bool), )
paddle.cast(Tensor([4],"float64"), type(numpy.bool), )
paddle.cast(Tensor([4],"int32"), type(numpy.bool), )
paddle.cast(Tensor([4],"int64"), type(numpy.bool), )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([1],"int32"), )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=Tensor([1],"int64"), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=False, dtype=type(numpy.bool), )
paddle.full_like(x=Tensor([2],"float64"), fill_value=True, dtype=type(numpy.bool), )
paddle.ones(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.ones(shape=list[14,Tensor([],"int64"),], )
paddle.ones(shape=Tensor([1],"int32"), )
paddle.ones(shape=Tensor([1],"int32"), dtype=type(numpy.int64), )
paddle.ones(shape=Tensor([2],"int32"), )
paddle.ones(shape=Tensor([2],"int32"), dtype="int32", )
paddle.ones(Tensor([],"int64"), dtype=type(bool), )
paddle.ones(tuple(Tensor([],"int64"),Tensor([],"int64"),), dtype="bool", )
paddle.sign(Tensor([1, 4],"float32"), )
paddle.empty(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.empty(shape=Tensor([2],"int32"), )
paddle.empty(shape=Tensor([2],"int32"), dtype="float16", )
paddle.empty(shape=Tensor([2],"int32"), dtype="float32", )
paddle.empty(shape=Tensor([2],"int32"), dtype="float64", )
paddle.empty(shape=Tensor([2],"int32"), dtype="int32", )
paddle.empty(shape=Tensor([2],"int32"), dtype="int64", )
paddle.empty(shape=Tensor([2],"int32"), dtype=None, )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(bool), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.float16), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.float32), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.float64), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.int32), )
paddle.empty(shape=Tensor([2],"int32"), dtype=type(numpy.int64), )
paddle.empty(shape=Tensor([2],"int64"), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="float16", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="float32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="float64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="int32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype="int64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=None, )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(bool), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.float16), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.float32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.float64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.int32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int32"),], dtype=type(numpy.int64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="float16", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="float32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="float64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="int32", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype="int64", )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=None, )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(bool), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.float16), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.float32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.float64), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.int32), )
paddle.empty(shape=list[2,Tensor([2, 1, 1],"int64"),], dtype=type(numpy.int64), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.outer(Tensor([5, 10, 10],"int32"), Tensor([2, 10],"int32"), )
paddle.outer(Tensor([5, 10, 10],"int64"), Tensor([2, 10],"int64"), )
paddle.where(Tensor([10],"bool"), )
paddle.where(Tensor([18],"bool"), )
paddle.where(Tensor([20],"bool"), )
paddle.where(Tensor([35],"bool"), )
paddle.where(Tensor([52640],"bool"), )
paddle.where(Tensor([64],"bool"), )
paddle.where(Tensor([64],"int32"), )
paddle.binomial(Tensor([16384, 1024],"int64"), Tensor([],"float32"), )
paddle.incubate.segment_max(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.bernoulli(Tensor([100, 1000],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), p=0.334840825619673, )
paddle.bernoulli(Tensor([1124, 32],"float32"), )
paddle.bernoulli(Tensor([13, 32],"float32"), )
paddle.bernoulli(Tensor([13, 4, 7, 7],"float32"), )
paddle.bernoulli(Tensor([13, 7, 32],"float32"), )
paddle.bernoulli(Tensor([16, 32],"float32"), )
paddle.bernoulli(Tensor([2, 10],"float32"), )
paddle.bernoulli(Tensor([2, 16],"float32"), )
paddle.bernoulli(Tensor([2, 5],"float32"), )
paddle.bernoulli(Tensor([2, 8],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float64"), )
paddle.bernoulli(Tensor([32, 32],"float32"), )
paddle.bernoulli(Tensor([32, 37],"float32"), )
paddle.bernoulli(Tensor([32],"float32"), )
paddle.bernoulli(Tensor([37, 32],"float32"), )
paddle.bernoulli(Tensor([4, 5],"float32"), )
paddle.bernoulli(Tensor([512, 32],"float32"), )
paddle.bernoulli(Tensor([52, 32],"float32"), )
paddle.bernoulli(Tensor([52, 4, 7, 7],"float32"), )
paddle.bernoulli(Tensor([52, 7, 32],"float32"), )
paddle.bernoulli(Tensor([],"float32"), )
paddle.bernoulli(Tensor([],"float32"), name="Bernoulli_sample", )
paddle.bernoulli(x=Tensor([6, 3],"float64"), )
paddle.bincount(Tensor([1],"int64"), minlength=100, )
paddle.bincount(Tensor([1],"int64"), minlength=123, )
paddle.bincount(Tensor([1],"int64"), minlength=256, )
paddle.bincount(Tensor([1],"int64"), minlength=256000, )
paddle.bincount(Tensor([1],"int64"), minlength=32000, )
paddle.bincount(Tensor([1],"int64"), minlength=4, )
paddle.bincount(Tensor([1],"int64"), minlength=99, )
paddle.bincount(Tensor([16],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(Tensor([20],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([4],"int64"), None, minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([4],"int64"), Tensor([4],"float64"), minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([4],"int64"), weights=Tensor([4],"float64"), )
paddle.bincount(Tensor([7],"int64"), )
paddle.bincount(Tensor([8],"int64"), None, minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([8],"int64"), Tensor([8],"float64"), minlength=Tensor([],"int64"), )
paddle.bincount(x=Tensor([10],"int32"), )
paddle.bincount(x=Tensor([10],"int32"), minlength=4, )
paddle.bincount(x=Tensor([10],"int32"), minlength=Tensor([1],"int64"), )
paddle.bincount(x=Tensor([10],"int32"), weights=Tensor([10],"int32"), )
paddle.bincount(x=Tensor([4],"int64"), )
paddle.matrix_transpose(Tensor([],"float32"), )
paddle.put_along_axis(Tensor([1, 3],"float32"), Tensor([1, 1],"int64"), Tensor([],"float32"), 0, "add", )
paddle.put_along_axis(Tensor([1, 3],"float32"), Tensor([1, 1],"int64"), Tensor([],"float32"), 0, "mul", )
paddle.put_along_axis(Tensor([1, 3],"float32"), Tensor([1, 1],"int64"), Tensor([],"float32"), 0, )
paddle.put_along_axis(Tensor([1, 8000],"float32"), Tensor([1, 799],"int64"), Tensor([1, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"uint8"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"uint8"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 8000],"float32"), Tensor([10, 799],"int64"), Tensor([10, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([2, 2],"int64"), Tensor([],"float32"), 0, "add", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([2, 2],"int64"), Tensor([],"float32"), 0, "mul", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([2, 2],"int64"), Tensor([],"float32"), 0, )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), Tensor([],"float32"), 0, "add", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), Tensor([],"float32"), 0, "mul", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), Tensor([],"float32"), 0, )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "add", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "assign", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "mul", )
paddle.put_along_axis(Tensor([2, 8000],"float32"), Tensor([2, 799],"int64"), Tensor([2, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "assign", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "assign", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 8000],"float32"), Tensor([3, 799],"int64"), Tensor([3, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([4, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 4, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 4, 4],"float64"), Tensor([1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 4],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([4, 8000],"float32"), Tensor([4, 799],"int64"), Tensor([4, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([4],"float32"), Tensor([1],"int64"), Tensor([1],"float32"), 0, "assign", )
paddle.put_along_axis(Tensor([4],"float64"), Tensor([1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([5, 8000],"float32"), Tensor([5, 799],"int64"), Tensor([5, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([6, 8000],"float32"), Tensor([6, 799],"int64"), Tensor([6, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([64, 1327104],"float32"), Tensor([64, 1327104],"int64"), Tensor([64, 1327104],"float32"), 1, )
paddle.put_along_axis(Tensor([7, 8000],"float32"), Tensor([7, 799],"int64"), Tensor([7, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([8, 8000],"float32"), Tensor([8, 799],"int64"), Tensor([8, 799],"float32"), 1, )
paddle.put_along_axis(Tensor([9, 8000],"float32"), Tensor([9, 799],"int64"), Tensor([9, 799],"float32"), 1, )
paddle.Tensor.put_along_axis(Tensor([10, 60],"float32"), Tensor([10, 4],"int64"), Tensor([10, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([10, 60],"float32"), Tensor([10, 4],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([2, 4],"int64"), Tensor([2, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([2, 4],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([20, 60],"float32"), Tensor([20, 4],"int64"), Tensor([20, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([20, 60],"float32"), Tensor([20, 4],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([30, 60],"float32"), Tensor([30, 4],"int64"), Tensor([30, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([30, 60],"float32"), Tensor([30, 4],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([4, 60],"float32"), Tensor([4, 4],"int64"), Tensor([4, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([4, 60],"float32"), Tensor([4, 4],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 4],"int64"), Tensor([6, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 4],"int64"), Tensor([],"float32"), axis=1, )