paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.bernoulli(Tensor([100, 1000],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), )
paddle.bernoulli(Tensor([1024, 1024],"float32"), p=0.334840825619673, )
paddle.bernoulli(Tensor([1124, 32],"float32"), )
paddle.bernoulli(Tensor([13, 32],"float32"), )
paddle.bernoulli(Tensor([13, 4, 7, 7],"float32"), )
paddle.bernoulli(Tensor([13, 7, 32],"float32"), )
paddle.bernoulli(Tensor([16, 32],"float32"), )
paddle.bernoulli(Tensor([2, 10],"float32"), )
paddle.bernoulli(Tensor([2, 16],"float32"), )
paddle.bernoulli(Tensor([2, 5],"float32"), )
paddle.bernoulli(Tensor([2, 8],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 1024],"float64"), )
paddle.bernoulli(Tensor([32, 32],"float32"), )
paddle.bernoulli(Tensor([32, 37],"float32"), )
paddle.bernoulli(Tensor([32],"float32"), )
paddle.bernoulli(Tensor([37, 32],"float32"), )
paddle.bernoulli(Tensor([4, 5],"float32"), )
paddle.bernoulli(Tensor([512, 32],"float32"), )
paddle.bernoulli(Tensor([52, 32],"float32"), )
paddle.bernoulli(Tensor([52, 4, 7, 7],"float32"), )
paddle.bernoulli(Tensor([52, 7, 32],"float32"), )
paddle.bernoulli(Tensor([],"float32"), )
paddle.bernoulli(Tensor([],"float32"), name="Bernoulli_sample", )
paddle.bernoulli(x=Tensor([6, 3],"float64"), )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, fastemit_lambda=0.0, reduction="none", name=None, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, reduction="mean", fastemit_lambda=0.0, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, reduction="sum", fastemit_lambda=0.0, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([1, 10],"float32"), Tensor([1, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([100, 10],"float32"), Tensor([100, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 1, 32, 64],"int64"), axis=1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16],"float32"), Tensor([2, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16],"float32"), Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([4, 3],"float64"), Tensor([4, 3],"float64"), soft_label=True, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([5, 2],"float32"), label=Tensor([5, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([100],"float32"), label=Tensor([1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 1000],"float32"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 1000],"float64"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 10],"float32"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([128, 10000],"float32"), label=Tensor([128, 10000],"float32"), soft_label=True, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([16, 128],"float32"), label=Tensor([16, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([18, 32],"float32"), label=Tensor([18, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 16],"float32"), label=Tensor([2, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 4],"float64"), label=Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([4, 128],"float32"), label=Tensor([4, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([6, 1000],"float32"), label=Tensor([6, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([6, 10],"float32"), label=Tensor([6, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([8, 16],"float32"), label=Tensor([8, 1],"int64"), soft_label=False, )
paddle.nn.functional.sequence_mask(Tensor([3],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.sequence_mask(Tensor([3],"int64"), )
paddle.nn.functional.sequence_mask(Tensor([3],"int64"), dtype=type(numpy.float64), )
paddle.nn.functional.sequence_mask(Tensor([4],"int64"), None, "float64", None, )
paddle.repeat_interleave(Tensor([],"float32"), Tensor([],"int64"), None, )
paddle.repeat_interleave(Tensor([],"float32"), Tensor([1],"int32"), None, )
paddle.repeat_interleave(Tensor([10, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([12, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([16, 16],"float32"), repeats=2, axis=Tensor([],"int32"), name=None, )
paddle.repeat_interleave(Tensor([2, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([2, 3],"bfloat16"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 3],"int32"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([24, 16],"float32"), repeats=2, axis=Tensor([],"int32"), name=None, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([3],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([4],"int32"), 1, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([4],"int32"), -1, )
paddle.repeat_interleave(Tensor([4, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([6, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([8, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
