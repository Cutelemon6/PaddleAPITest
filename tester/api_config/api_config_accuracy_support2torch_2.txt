paddle.as_strided(Tensor([2, 4, 6],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"float64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"int32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"int32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"int64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"int64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.less_than(Tensor([1, 128, 128],"float32"), Tensor([1, 128, 128],"float32"), )
paddle.less_than(Tensor([1, 128, 128],"int32"), Tensor([],"int32"), )
paddle.less_than(Tensor([1, 128, 128],"int64"), Tensor([1, 128, 128],"int64"), )
paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"int32"), Tensor([],"int32"), )
paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), )
paddle.less_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_than(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.less_than(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.less_than(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.less_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.less_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.less_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.less_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.less_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.less_than(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.less_than(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.less_than(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.less_than(Tensor([],"float32"), Tensor([],"float32"), )
paddle.less_than(Tensor([],"int64"), Tensor([1],"int64"), )
paddle.less_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_than(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.less_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_than(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.less_than(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.less_equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.less_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.less_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.less_equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.less_equal(Tensor([513],"float64"), Tensor([],"float64"), )
paddle.less_equal(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.less_equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.less_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.less_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.less_equal(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.less(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.greater_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.greater_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.greater_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.greater_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.greater_than(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.greater_than(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.greater_than(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.greater_than(Tensor([],"float32"), Tensor([],"float32"), )
paddle.greater_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_than(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.greater_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_than(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.greater_than(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.greater_equal(Tensor([1, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1],"int64"), Tensor([13, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 8, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([2, 256, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.greater_equal(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.greater_equal(Tensor([2, 768, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.greater_equal(Tensor([4, 256, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.greater_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.greater_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.greater_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.greater_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 512, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([40, 40],"float32"), Tensor([40, 40],"float32"), )
paddle.greater_equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.greater_equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.greater_equal(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.greater_equal(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.greater_equal(Tensor([8, 1024, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.greater_equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.greater_equal(Tensor([],"float64"), Tensor([],"float64"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.greater_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.greater_equal(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )